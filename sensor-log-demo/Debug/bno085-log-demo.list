
bno085-log-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c838  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  0800c978  0800c978  0000d978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d008  0800d008  0000f1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800d008  0800d008  0000e008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d010  0800d010  0000f1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d010  0800d010  0000e010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d014  0800d014  0000e014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800d018  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000096c  200001f0  0800d204  0000f1f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b5c  0800d204  0000fb5c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000f1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e8d  00000000  00000000  0000f216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cc0  00000000  00000000  000270a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  0002ad68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000129a  00000000  00000000  0002c5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df8b  00000000  00000000  0002d882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b99a  00000000  00000000  0004b80d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a833c  00000000  00000000  000671a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010f4e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077cc  00000000  00000000  0010f528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00116cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f0 	.word	0x200001f0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c960 	.word	0x0800c960

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f4 	.word	0x200001f4
 800017c:	0800c960 	.word	0x0800c960

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_frsub>:
 8000bf8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bfc:	e002      	b.n	8000c04 <__addsf3>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fsub>:
 8000c00:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c04 <__addsf3>:
 8000c04:	0042      	lsls	r2, r0, #1
 8000c06:	bf1f      	itttt	ne
 8000c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c0c:	ea92 0f03 	teqne	r2, r3
 8000c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c18:	d06a      	beq.n	8000cf0 <__addsf3+0xec>
 8000c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c22:	bfc1      	itttt	gt
 8000c24:	18d2      	addgt	r2, r2, r3
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	4048      	eorgt	r0, r1
 8000c2a:	4041      	eorgt	r1, r0
 8000c2c:	bfb8      	it	lt
 8000c2e:	425b      	neglt	r3, r3
 8000c30:	2b19      	cmp	r3, #25
 8000c32:	bf88      	it	hi
 8000c34:	4770      	bxhi	lr
 8000c36:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c4a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c4e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4249      	negne	r1, r1
 8000c56:	ea92 0f03 	teq	r2, r3
 8000c5a:	d03f      	beq.n	8000cdc <__addsf3+0xd8>
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	fa41 fc03 	asr.w	ip, r1, r3
 8000c64:	eb10 000c 	adds.w	r0, r0, ip
 8000c68:	f1c3 0320 	rsb	r3, r3, #32
 8000c6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c70:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__addsf3+0x78>
 8000c76:	4249      	negs	r1, r1
 8000c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c7c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c80:	d313      	bcc.n	8000caa <__addsf3+0xa6>
 8000c82:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c86:	d306      	bcc.n	8000c96 <__addsf3+0x92>
 8000c88:	0840      	lsrs	r0, r0, #1
 8000c8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8e:	f102 0201 	add.w	r2, r2, #1
 8000c92:	2afe      	cmp	r2, #254	@ 0xfe
 8000c94:	d251      	bcs.n	8000d3a <__addsf3+0x136>
 8000c96:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9e:	bf08      	it	eq
 8000ca0:	f020 0001 	biceq.w	r0, r0, #1
 8000ca4:	ea40 0003 	orr.w	r0, r0, r3
 8000ca8:	4770      	bx	lr
 8000caa:	0049      	lsls	r1, r1, #1
 8000cac:	eb40 0000 	adc.w	r0, r0, r0
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb8:	d2ed      	bcs.n	8000c96 <__addsf3+0x92>
 8000cba:	fab0 fc80 	clz	ip, r0
 8000cbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cc2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cca:	bfaa      	itet	ge
 8000ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd0:	4252      	neglt	r2, r2
 8000cd2:	4318      	orrge	r0, r3
 8000cd4:	bfbc      	itt	lt
 8000cd6:	40d0      	lsrlt	r0, r2
 8000cd8:	4318      	orrlt	r0, r3
 8000cda:	4770      	bx	lr
 8000cdc:	f092 0f00 	teq	r2, #0
 8000ce0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ce4:	bf06      	itte	eq
 8000ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cea:	3201      	addeq	r2, #1
 8000cec:	3b01      	subne	r3, #1
 8000cee:	e7b5      	b.n	8000c5c <__addsf3+0x58>
 8000cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	bf18      	it	ne
 8000cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfe:	d021      	beq.n	8000d44 <__addsf3+0x140>
 8000d00:	ea92 0f03 	teq	r2, r3
 8000d04:	d004      	beq.n	8000d10 <__addsf3+0x10c>
 8000d06:	f092 0f00 	teq	r2, #0
 8000d0a:	bf08      	it	eq
 8000d0c:	4608      	moveq	r0, r1
 8000d0e:	4770      	bx	lr
 8000d10:	ea90 0f01 	teq	r0, r1
 8000d14:	bf1c      	itt	ne
 8000d16:	2000      	movne	r0, #0
 8000d18:	4770      	bxne	lr
 8000d1a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d1e:	d104      	bne.n	8000d2a <__addsf3+0x126>
 8000d20:	0040      	lsls	r0, r0, #1
 8000d22:	bf28      	it	cs
 8000d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d28:	4770      	bx	lr
 8000d2a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d2e:	bf3c      	itt	cc
 8000d30:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d34:	4770      	bxcc	lr
 8000d36:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d42:	4770      	bx	lr
 8000d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d48:	bf16      	itet	ne
 8000d4a:	4608      	movne	r0, r1
 8000d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d50:	4601      	movne	r1, r0
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	bf06      	itte	eq
 8000d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d5a:	ea90 0f01 	teqeq	r0, r1
 8000d5e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_ui2f>:
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e004      	b.n	8000d74 <__aeabi_i2f+0x8>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_i2f>:
 8000d6c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d70:	bf48      	it	mi
 8000d72:	4240      	negmi	r0, r0
 8000d74:	ea5f 0c00 	movs.w	ip, r0
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d80:	4601      	mov	r1, r0
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	e01c      	b.n	8000dc2 <__aeabi_l2f+0x2a>

08000d88 <__aeabi_ul2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e00a      	b.n	8000dac <__aeabi_l2f+0x14>
 8000d96:	bf00      	nop

08000d98 <__aeabi_l2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000da4:	d502      	bpl.n	8000dac <__aeabi_l2f+0x14>
 8000da6:	4240      	negs	r0, r0
 8000da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dac:	ea5f 0c01 	movs.w	ip, r1
 8000db0:	bf02      	ittt	eq
 8000db2:	4684      	moveq	ip, r0
 8000db4:	4601      	moveq	r1, r0
 8000db6:	2000      	moveq	r0, #0
 8000db8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dbc:	bf08      	it	eq
 8000dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dc6:	fabc f28c 	clz	r2, ip
 8000dca:	3a08      	subs	r2, #8
 8000dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd0:	db10      	blt.n	8000df4 <__aeabi_l2f+0x5c>
 8000dd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000de4:	fa20 f202 	lsr.w	r2, r0, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f102 0220 	add.w	r2, r2, #32
 8000df8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfc:	f1c2 0220 	rsb	r2, r2, #32
 8000e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e04:	fa21 f202 	lsr.w	r2, r1, r2
 8000e08:	eb43 0002 	adc.w	r0, r3, r2
 8000e0c:	bf08      	it	eq
 8000e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_uldivmod>:
 8000e14:	b953      	cbnz	r3, 8000e2c <__aeabi_uldivmod+0x18>
 8000e16:	b94a      	cbnz	r2, 8000e2c <__aeabi_uldivmod+0x18>
 8000e18:	2900      	cmp	r1, #0
 8000e1a:	bf08      	it	eq
 8000e1c:	2800      	cmpeq	r0, #0
 8000e1e:	bf1c      	itt	ne
 8000e20:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000e24:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000e28:	f000 b96a 	b.w	8001100 <__aeabi_idiv0>
 8000e2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e34:	f000 f806 	bl	8000e44 <__udivmoddi4>
 8000e38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e40:	b004      	add	sp, #16
 8000e42:	4770      	bx	lr

08000e44 <__udivmoddi4>:
 8000e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e48:	9d08      	ldr	r5, [sp, #32]
 8000e4a:	460c      	mov	r4, r1
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d14e      	bne.n	8000eee <__udivmoddi4+0xaa>
 8000e50:	4694      	mov	ip, r2
 8000e52:	458c      	cmp	ip, r1
 8000e54:	4686      	mov	lr, r0
 8000e56:	fab2 f282 	clz	r2, r2
 8000e5a:	d962      	bls.n	8000f22 <__udivmoddi4+0xde>
 8000e5c:	b14a      	cbz	r2, 8000e72 <__udivmoddi4+0x2e>
 8000e5e:	f1c2 0320 	rsb	r3, r2, #32
 8000e62:	4091      	lsls	r1, r2
 8000e64:	fa20 f303 	lsr.w	r3, r0, r3
 8000e68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e6c:	4319      	orrs	r1, r3
 8000e6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e76:	fa1f f68c 	uxth.w	r6, ip
 8000e7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e82:	fb07 1114 	mls	r1, r7, r4, r1
 8000e86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e8a:	fb04 f106 	mul.w	r1, r4, r6
 8000e8e:	4299      	cmp	r1, r3
 8000e90:	d90a      	bls.n	8000ea8 <__udivmoddi4+0x64>
 8000e92:	eb1c 0303 	adds.w	r3, ip, r3
 8000e96:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000e9a:	f080 8112 	bcs.w	80010c2 <__udivmoddi4+0x27e>
 8000e9e:	4299      	cmp	r1, r3
 8000ea0:	f240 810f 	bls.w	80010c2 <__udivmoddi4+0x27e>
 8000ea4:	3c02      	subs	r4, #2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	1a59      	subs	r1, r3, r1
 8000eaa:	fa1f f38e 	uxth.w	r3, lr
 8000eae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb2:	fb07 1110 	mls	r1, r7, r0, r1
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f606 	mul.w	r6, r0, r6
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	d90a      	bls.n	8000ed8 <__udivmoddi4+0x94>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000eca:	f080 80fc 	bcs.w	80010c6 <__udivmoddi4+0x282>
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	f240 80f9 	bls.w	80010c6 <__udivmoddi4+0x282>
 8000ed4:	4463      	add	r3, ip
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ede:	2100      	movs	r1, #0
 8000ee0:	b11d      	cbz	r5, 8000eea <__udivmoddi4+0xa6>
 8000ee2:	40d3      	lsrs	r3, r2
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d905      	bls.n	8000efe <__udivmoddi4+0xba>
 8000ef2:	b10d      	cbz	r5, 8000ef8 <__udivmoddi4+0xb4>
 8000ef4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4608      	mov	r0, r1
 8000efc:	e7f5      	b.n	8000eea <__udivmoddi4+0xa6>
 8000efe:	fab3 f183 	clz	r1, r3
 8000f02:	2900      	cmp	r1, #0
 8000f04:	d146      	bne.n	8000f94 <__udivmoddi4+0x150>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d302      	bcc.n	8000f10 <__udivmoddi4+0xcc>
 8000f0a:	4290      	cmp	r0, r2
 8000f0c:	f0c0 80f0 	bcc.w	80010f0 <__udivmoddi4+0x2ac>
 8000f10:	1a86      	subs	r6, r0, r2
 8000f12:	eb64 0303 	sbc.w	r3, r4, r3
 8000f16:	2001      	movs	r0, #1
 8000f18:	2d00      	cmp	r5, #0
 8000f1a:	d0e6      	beq.n	8000eea <__udivmoddi4+0xa6>
 8000f1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000f20:	e7e3      	b.n	8000eea <__udivmoddi4+0xa6>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	f040 8090 	bne.w	8001048 <__udivmoddi4+0x204>
 8000f28:	eba1 040c 	sub.w	r4, r1, ip
 8000f2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f30:	fa1f f78c 	uxth.w	r7, ip
 8000f34:	2101      	movs	r1, #1
 8000f36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000f42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f46:	fb07 f006 	mul.w	r0, r7, r6
 8000f4a:	4298      	cmp	r0, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x11c>
 8000f4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f52:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000f56:	d202      	bcs.n	8000f5e <__udivmoddi4+0x11a>
 8000f58:	4298      	cmp	r0, r3
 8000f5a:	f200 80cd 	bhi.w	80010f8 <__udivmoddi4+0x2b4>
 8000f5e:	4626      	mov	r6, r4
 8000f60:	1a1c      	subs	r4, r3, r0
 8000f62:	fa1f f38e 	uxth.w	r3, lr
 8000f66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f72:	fb00 f707 	mul.w	r7, r0, r7
 8000f76:	429f      	cmp	r7, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x148>
 8000f7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000f82:	d202      	bcs.n	8000f8a <__udivmoddi4+0x146>
 8000f84:	429f      	cmp	r7, r3
 8000f86:	f200 80b0 	bhi.w	80010ea <__udivmoddi4+0x2a6>
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	1bdb      	subs	r3, r3, r7
 8000f8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f92:	e7a5      	b.n	8000ee0 <__udivmoddi4+0x9c>
 8000f94:	f1c1 0620 	rsb	r6, r1, #32
 8000f98:	408b      	lsls	r3, r1
 8000f9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f9e:	431f      	orrs	r7, r3
 8000fa0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000fa4:	fa04 f301 	lsl.w	r3, r4, r1
 8000fa8:	ea43 030c 	orr.w	r3, r3, ip
 8000fac:	40f4      	lsrs	r4, r6
 8000fae:	fa00 f801 	lsl.w	r8, r0, r1
 8000fb2:	0c38      	lsrs	r0, r7, #16
 8000fb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000fb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000fbc:	fa1f fc87 	uxth.w	ip, r7
 8000fc0:	fb00 441e 	mls	r4, r0, lr, r4
 8000fc4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fc8:	fb0e f90c 	mul.w	r9, lr, ip
 8000fcc:	45a1      	cmp	r9, r4
 8000fce:	fa02 f201 	lsl.w	r2, r2, r1
 8000fd2:	d90a      	bls.n	8000fea <__udivmoddi4+0x1a6>
 8000fd4:	193c      	adds	r4, r7, r4
 8000fd6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000fda:	f080 8084 	bcs.w	80010e6 <__udivmoddi4+0x2a2>
 8000fde:	45a1      	cmp	r9, r4
 8000fe0:	f240 8081 	bls.w	80010e6 <__udivmoddi4+0x2a2>
 8000fe4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fe8:	443c      	add	r4, r7
 8000fea:	eba4 0409 	sub.w	r4, r4, r9
 8000fee:	fa1f f983 	uxth.w	r9, r3
 8000ff2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ff6:	fb00 4413 	mls	r4, r0, r3, r4
 8000ffa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ffe:	fb03 fc0c 	mul.w	ip, r3, ip
 8001002:	45a4      	cmp	ip, r4
 8001004:	d907      	bls.n	8001016 <__udivmoddi4+0x1d2>
 8001006:	193c      	adds	r4, r7, r4
 8001008:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800100c:	d267      	bcs.n	80010de <__udivmoddi4+0x29a>
 800100e:	45a4      	cmp	ip, r4
 8001010:	d965      	bls.n	80010de <__udivmoddi4+0x29a>
 8001012:	3b02      	subs	r3, #2
 8001014:	443c      	add	r4, r7
 8001016:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800101a:	fba0 9302 	umull	r9, r3, r0, r2
 800101e:	eba4 040c 	sub.w	r4, r4, ip
 8001022:	429c      	cmp	r4, r3
 8001024:	46ce      	mov	lr, r9
 8001026:	469c      	mov	ip, r3
 8001028:	d351      	bcc.n	80010ce <__udivmoddi4+0x28a>
 800102a:	d04e      	beq.n	80010ca <__udivmoddi4+0x286>
 800102c:	b155      	cbz	r5, 8001044 <__udivmoddi4+0x200>
 800102e:	ebb8 030e 	subs.w	r3, r8, lr
 8001032:	eb64 040c 	sbc.w	r4, r4, ip
 8001036:	fa04 f606 	lsl.w	r6, r4, r6
 800103a:	40cb      	lsrs	r3, r1
 800103c:	431e      	orrs	r6, r3
 800103e:	40cc      	lsrs	r4, r1
 8001040:	e9c5 6400 	strd	r6, r4, [r5]
 8001044:	2100      	movs	r1, #0
 8001046:	e750      	b.n	8000eea <__udivmoddi4+0xa6>
 8001048:	f1c2 0320 	rsb	r3, r2, #32
 800104c:	fa20 f103 	lsr.w	r1, r0, r3
 8001050:	fa0c fc02 	lsl.w	ip, ip, r2
 8001054:	fa24 f303 	lsr.w	r3, r4, r3
 8001058:	4094      	lsls	r4, r2
 800105a:	430c      	orrs	r4, r1
 800105c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001060:	fa00 fe02 	lsl.w	lr, r0, r2
 8001064:	fa1f f78c 	uxth.w	r7, ip
 8001068:	fbb3 f0f8 	udiv	r0, r3, r8
 800106c:	fb08 3110 	mls	r1, r8, r0, r3
 8001070:	0c23      	lsrs	r3, r4, #16
 8001072:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001076:	fb00 f107 	mul.w	r1, r0, r7
 800107a:	4299      	cmp	r1, r3
 800107c:	d908      	bls.n	8001090 <__udivmoddi4+0x24c>
 800107e:	eb1c 0303 	adds.w	r3, ip, r3
 8001082:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001086:	d22c      	bcs.n	80010e2 <__udivmoddi4+0x29e>
 8001088:	4299      	cmp	r1, r3
 800108a:	d92a      	bls.n	80010e2 <__udivmoddi4+0x29e>
 800108c:	3802      	subs	r0, #2
 800108e:	4463      	add	r3, ip
 8001090:	1a5b      	subs	r3, r3, r1
 8001092:	b2a4      	uxth	r4, r4
 8001094:	fbb3 f1f8 	udiv	r1, r3, r8
 8001098:	fb08 3311 	mls	r3, r8, r1, r3
 800109c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010a0:	fb01 f307 	mul.w	r3, r1, r7
 80010a4:	42a3      	cmp	r3, r4
 80010a6:	d908      	bls.n	80010ba <__udivmoddi4+0x276>
 80010a8:	eb1c 0404 	adds.w	r4, ip, r4
 80010ac:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80010b0:	d213      	bcs.n	80010da <__udivmoddi4+0x296>
 80010b2:	42a3      	cmp	r3, r4
 80010b4:	d911      	bls.n	80010da <__udivmoddi4+0x296>
 80010b6:	3902      	subs	r1, #2
 80010b8:	4464      	add	r4, ip
 80010ba:	1ae4      	subs	r4, r4, r3
 80010bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010c0:	e739      	b.n	8000f36 <__udivmoddi4+0xf2>
 80010c2:	4604      	mov	r4, r0
 80010c4:	e6f0      	b.n	8000ea8 <__udivmoddi4+0x64>
 80010c6:	4608      	mov	r0, r1
 80010c8:	e706      	b.n	8000ed8 <__udivmoddi4+0x94>
 80010ca:	45c8      	cmp	r8, r9
 80010cc:	d2ae      	bcs.n	800102c <__udivmoddi4+0x1e8>
 80010ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80010d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80010d6:	3801      	subs	r0, #1
 80010d8:	e7a8      	b.n	800102c <__udivmoddi4+0x1e8>
 80010da:	4631      	mov	r1, r6
 80010dc:	e7ed      	b.n	80010ba <__udivmoddi4+0x276>
 80010de:	4603      	mov	r3, r0
 80010e0:	e799      	b.n	8001016 <__udivmoddi4+0x1d2>
 80010e2:	4630      	mov	r0, r6
 80010e4:	e7d4      	b.n	8001090 <__udivmoddi4+0x24c>
 80010e6:	46d6      	mov	lr, sl
 80010e8:	e77f      	b.n	8000fea <__udivmoddi4+0x1a6>
 80010ea:	4463      	add	r3, ip
 80010ec:	3802      	subs	r0, #2
 80010ee:	e74d      	b.n	8000f8c <__udivmoddi4+0x148>
 80010f0:	4606      	mov	r6, r0
 80010f2:	4623      	mov	r3, r4
 80010f4:	4608      	mov	r0, r1
 80010f6:	e70f      	b.n	8000f18 <__udivmoddi4+0xd4>
 80010f8:	3e02      	subs	r6, #2
 80010fa:	4463      	add	r3, ip
 80010fc:	e730      	b.n	8000f60 <__udivmoddi4+0x11c>
 80010fe:	bf00      	nop

08001100 <__aeabi_idiv0>:
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop

08001104 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(const I2C_TypeDef *I2Cx)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b01      	cmp	r3, #1
 8001116:	d101      	bne.n	800111c <LL_I2C_IsActiveFlag_TXE+0x18>
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <LL_I2C_IsActiveFlag_TXE+0x1a>
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b04      	cmp	r3, #4
 800113a:	d101      	bne.n	8001140 <LL_I2C_IsActiveFlag_RXNE+0x18>
 800113c:	2301      	movs	r3, #1
 800113e:	e000      	b.n	8001142 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 800114c:	b480      	push	{r7}
 800114e:	b087      	sub	sp, #28
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	603b      	str	r3, [r7, #0]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 8001166:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	041b      	lsls	r3, r3, #16
 800116c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 8001170:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 8001176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001178:	4313      	orrs	r3, r2
 800117a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800117e:	617b      	str	r3, [r7, #20]
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001186:	0d5b      	lsrs	r3, r3, #21
 8001188:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <LL_I2C_HandleTransfer+0x5c>)
 800118e:	430b      	orrs	r3, r1
 8001190:	43db      	mvns	r3, r3
 8001192:	401a      	ands	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	431a      	orrs	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             tmp);
}
 800119c:	bf00      	nop
 800119e:	371c      	adds	r7, #28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	03ff7bff 	.word	0x03ff7bff

080011ac <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b8:	b2db      	uxtb	r3, r3
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80011d0:	78fa      	ldrb	r2, [r7, #3]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <i2c_read_blocking>:
#define DELAY 10

// these two I2C functions are not good, the args are mostly unused but writing
// the signature like this made copying RP2040 code faster
static int i2c_read_blocking(I2C_TypeDef *i2cx, uint8_t addr, uint8_t *buf,
		uint32_t bytes) {
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b089      	sub	sp, #36	@ 0x24
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	460b      	mov	r3, r1
 80011ee:	72fb      	strb	r3, [r7, #11]
	int timeout = 0; // I2C software timeout counter
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

	LL_I2C_HandleTransfer(I2C1, (addr << 1), LL_I2C_ADDRSLAVE_7BIT, bytes,
 80011f4:	7afb      	ldrb	r3, [r7, #11]
 80011f6:	0059      	lsls	r1, r3, #1
 80011f8:	4b18      	ldr	r3, [pc, #96]	@ (800125c <i2c_read_blocking+0x7c>)
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	2200      	movs	r2, #0
 8001206:	4816      	ldr	r0, [pc, #88]	@ (8001260 <i2c_read_blocking+0x80>)
 8001208:	f7ff ffa0 	bl	800114c <LL_I2C_HandleTransfer>
	LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);

	for (int i = 0; i < bytes; i++) {
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	e01a      	b.n	8001248 <i2c_read_blocking+0x68>

		while (LL_I2C_IsActiveFlag_RXNE(I2C1) == 0) { // wait for response
			if (timeout >= 2000000) {
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	4a13      	ldr	r2, [pc, #76]	@ (8001264 <i2c_read_blocking+0x84>)
 8001216:	4293      	cmp	r3, r2
 8001218:	dd02      	ble.n	8001220 <i2c_read_blocking+0x40>
				return -1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800121e:	e018      	b.n	8001252 <i2c_read_blocking+0x72>
			}
			timeout++;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
		while (LL_I2C_IsActiveFlag_RXNE(I2C1) == 0) { // wait for response
 8001226:	480e      	ldr	r0, [pc, #56]	@ (8001260 <i2c_read_blocking+0x80>)
 8001228:	f7ff ff7e 	bl	8001128 <LL_I2C_IsActiveFlag_RXNE>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0ef      	beq.n	8001212 <i2c_read_blocking+0x32>
		}

		buf[i] = LL_I2C_ReceiveData8(I2C1);
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	18d4      	adds	r4, r2, r3
 8001238:	4809      	ldr	r0, [pc, #36]	@ (8001260 <i2c_read_blocking+0x80>)
 800123a:	f7ff ffb7 	bl	80011ac <LL_I2C_ReceiveData8>
 800123e:	4603      	mov	r3, r0
 8001240:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < bytes; i++) {
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	3301      	adds	r3, #1
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	429a      	cmp	r2, r3
 800124e:	d8ea      	bhi.n	8001226 <i2c_read_blocking+0x46>
	}
	return 0;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	371c      	adds	r7, #28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd90      	pop	{r4, r7, pc}
 800125a:	bf00      	nop
 800125c:	80002400 	.word	0x80002400
 8001260:	40005400 	.word	0x40005400
 8001264:	001e847f 	.word	0x001e847f

08001268 <i2c_write_blocking>:

static int i2c_write_blocking(I2C_TypeDef *i2cx, uint8_t addr, uint8_t *buf,
		uint32_t bytes) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af02      	add	r7, sp, #8
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	460b      	mov	r3, r1
 8001276:	72fb      	strb	r3, [r7, #11]
	int timeout = 0; // I2C software timeout counter
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

	LL_I2C_HandleTransfer(I2C1, (addr << 1), LL_I2C_ADDRSLAVE_7BIT, bytes,
 800127c:	7afb      	ldrb	r3, [r7, #11]
 800127e:	0059      	lsls	r1, r3, #1
 8001280:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <i2c_write_blocking+0x7c>)
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	2200      	movs	r2, #0
 800128e:	4816      	ldr	r0, [pc, #88]	@ (80012e8 <i2c_write_blocking+0x80>)
 8001290:	f7ff ff5c 	bl	800114c <LL_I2C_HandleTransfer>
	LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);

	for (int i = 0; i < bytes; i++) {
 8001294:	2300      	movs	r3, #0
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	e01a      	b.n	80012d0 <i2c_write_blocking+0x68>

		while (LL_I2C_IsActiveFlag_TXE(I2C1) == 0) {
			if (timeout >= 2000000) {
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	4a13      	ldr	r2, [pc, #76]	@ (80012ec <i2c_write_blocking+0x84>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	dd02      	ble.n	80012a8 <i2c_write_blocking+0x40>
				return -1;
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012a6:	e018      	b.n	80012da <i2c_write_blocking+0x72>
			}
			timeout++;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	3301      	adds	r3, #1
 80012ac:	617b      	str	r3, [r7, #20]
		while (LL_I2C_IsActiveFlag_TXE(I2C1) == 0) {
 80012ae:	480e      	ldr	r0, [pc, #56]	@ (80012e8 <i2c_write_blocking+0x80>)
 80012b0:	f7ff ff28 	bl	8001104 <LL_I2C_IsActiveFlag_TXE>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0ef      	beq.n	800129a <i2c_write_blocking+0x32>
		}

		LL_I2C_TransmitData8(I2C1, buf[i]);
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	4619      	mov	r1, r3
 80012c4:	4808      	ldr	r0, [pc, #32]	@ (80012e8 <i2c_write_blocking+0x80>)
 80012c6:	f7ff ff7d 	bl	80011c4 <LL_I2C_TransmitData8>
	for (int i = 0; i < bytes; i++) {
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	3301      	adds	r3, #1
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d8ea      	bhi.n	80012ae <i2c_write_blocking+0x46>
	}
	return 0;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	80002000 	.word	0x80002000
 80012e8:	40005400 	.word	0x40005400
 80012ec:	001e847f 	.word	0x001e847f

080012f0 <MS8607_init>:

int MS8607_init(I2C_TypeDef *i2cx) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	if (read_prom() == -1)
 80012f8:	f000 face 	bl	8001898 <read_prom>
 80012fc:	4603      	mov	r3, r0
 80012fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001302:	d102      	bne.n	800130a <MS8607_init+0x1a>
		return -1;
 8001304:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001308:	e000      	b.n	800130c <MS8607_init+0x1c>
	else
		return 0;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <MS8607_get_press_temp>:
	else
		read_prom();
	return 0;
}

int MS8607_get_press_temp(uint32_t *pressure, int32_t *temperature) {
 8001314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001318:	b0c0      	sub	sp, #256	@ 0x100
 800131a:	af00      	add	r7, sp, #0
 800131c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
 8001320:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8

	int32_t press = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	int32_t temp = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
	int32_t t2 = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
	int64_t off2 = 0;
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	f04f 0300 	mov.w	r3, #0
 800133e:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
	int64_t sens2 = 0;
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	f04f 0300 	mov.w	r3, #0
 800134a:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8

	// Step 1: Read calibration data from PROM
	// Already did this in the init()

	// Step 2: Read pressure and temperature from the MS8607
	if (conversion() == -1)
 800134e:	f000 fbbd 	bl	8001acc <conversion>
 8001352:	4603      	mov	r3, r0
 8001354:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001358:	d102      	bne.n	8001360 <MS8607_get_press_temp+0x4c>
		return -1;
 800135a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800135e:	e22d      	b.n	80017bc <MS8607_get_press_temp+0x4a8>

	// The rest of this function mostly looks like random math, it is actually
	// the compensation calculations outline in the datasheet for the device!

	// Step 3: Calculate temperature
	dT = d2 - ((int64_t) c5 << 8);
 8001360:	4b9f      	ldr	r3, [pc, #636]	@ (80015e0 <MS8607_get_press_temp+0x2cc>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2200      	movs	r2, #0
 8001366:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800136a:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800136e:	4b9d      	ldr	r3, [pc, #628]	@ (80015e4 <MS8607_get_press_temp+0x2d0>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	b29b      	uxth	r3, r3
 8001374:	2200      	movs	r2, #0
 8001376:	4698      	mov	r8, r3
 8001378:	4691      	mov	r9, r2
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8001386:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 800138a:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800138e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001392:	4684      	mov	ip, r0
 8001394:	ebbc 0c02 	subs.w	ip, ip, r2
 8001398:	f8c7 c0a8 	str.w	ip, [r7, #168]	@ 0xa8
 800139c:	eb61 0303 	sbc.w	r3, r1, r3
 80013a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80013a4:	4b90      	ldr	r3, [pc, #576]	@ (80015e8 <MS8607_get_press_temp+0x2d4>)
 80013a6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80013aa:	e9c3 1200 	strd	r1, r2, [r3]

	// temp is e.g. 2000 = 20.00 deg C
	temp = (int64_t) 2000 + ((dT * (int64_t) c6) >> 23);
 80013ae:	4b8f      	ldr	r3, [pc, #572]	@ (80015ec <MS8607_get_press_temp+0x2d8>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	2200      	movs	r2, #0
 80013b6:	469a      	mov	sl, r3
 80013b8:	4693      	mov	fp, r2
 80013ba:	4b8b      	ldr	r3, [pc, #556]	@ (80015e8 <MS8607_get_press_temp+0x2d4>)
 80013bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c0:	fb02 f00b 	mul.w	r0, r2, fp
 80013c4:	fb0a f103 	mul.w	r1, sl, r3
 80013c8:	4401      	add	r1, r0
 80013ca:	fbaa 4502 	umull	r4, r5, sl, r2
 80013ce:	194b      	adds	r3, r1, r5
 80013d0:	461d      	mov	r5, r3
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	f04f 0300 	mov.w	r3, #0
 80013da:	0de2      	lsrs	r2, r4, #23
 80013dc:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 80013e0:	15eb      	asrs	r3, r5, #23
 80013e2:	4613      	mov	r3, r2
 80013e4:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80013e8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

	// Step 4: Calculate temperature compensated pressure
	off = ((int64_t) c2 * (int64_t) 131072)
 80013ec:	4b80      	ldr	r3, [pc, #512]	@ (80015f0 <MS8607_get_press_temp+0x2dc>)
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	2200      	movs	r2, #0
 80013f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80013f8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80013fc:	f04f 0400 	mov.w	r4, #0
 8001400:	f04f 0500 	mov.w	r5, #0
 8001404:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8001408:	4613      	mov	r3, r2
 800140a:	045d      	lsls	r5, r3, #17
 800140c:	4613      	mov	r3, r2
 800140e:	460a      	mov	r2, r1
 8001410:	4611      	mov	r1, r2
 8001412:	ea45 35d1 	orr.w	r5, r5, r1, lsr #15
 8001416:	4613      	mov	r3, r2
 8001418:	045c      	lsls	r4, r3, #17
			+ (((int64_t) c4 * dT) / (int64_t) 64);
 800141a:	4b76      	ldr	r3, [pc, #472]	@ (80015f4 <MS8607_get_press_temp+0x2e0>)
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	b29b      	uxth	r3, r3
 8001420:	2200      	movs	r2, #0
 8001422:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001426:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800142a:	4b6f      	ldr	r3, [pc, #444]	@ (80015e8 <MS8607_get_press_temp+0x2d4>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001434:	4649      	mov	r1, r9
 8001436:	fb02 f001 	mul.w	r0, r2, r1
 800143a:	4641      	mov	r1, r8
 800143c:	fb01 f103 	mul.w	r1, r1, r3
 8001440:	4401      	add	r1, r0
 8001442:	4640      	mov	r0, r8
 8001444:	fba0 3202 	umull	r3, r2, r0, r2
 8001448:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800144c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001450:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001454:	18cb      	adds	r3, r1, r3
 8001456:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800145a:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 800145e:	2b00      	cmp	r3, #0
 8001460:	da07      	bge.n	8001472 <MS8607_get_press_temp+0x15e>
 8001462:	f112 013f 	adds.w	r1, r2, #63	@ 0x3f
 8001466:	6439      	str	r1, [r7, #64]	@ 0x40
 8001468:	f143 0300 	adc.w	r3, r3, #0
 800146c:	647b      	str	r3, [r7, #68]	@ 0x44
 800146e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001472:	f04f 0000 	mov.w	r0, #0
 8001476:	f04f 0100 	mov.w	r1, #0
 800147a:	0990      	lsrs	r0, r2, #6
 800147c:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8001480:	1199      	asrs	r1, r3, #6
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	18a1      	adds	r1, r4, r2
 8001488:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800148c:	eb45 0303 	adc.w	r3, r5, r3
 8001490:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	off = ((int64_t) c2 * (int64_t) 131072)
 8001494:	4b58      	ldr	r3, [pc, #352]	@ (80015f8 <MS8607_get_press_temp+0x2e4>)
 8001496:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800149a:	e9c3 1200 	strd	r1, r2, [r3]
	sens = ((int64_t) c1 * (int64_t) 65536)
 800149e:	4b57      	ldr	r3, [pc, #348]	@ (80015fc <MS8607_get_press_temp+0x2e8>)
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	2200      	movs	r2, #0
 80014a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80014aa:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80014ae:	f04f 0400 	mov.w	r4, #0
 80014b2:	f04f 0500 	mov.w	r5, #0
 80014b6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80014ba:	4613      	mov	r3, r2
 80014bc:	041d      	lsls	r5, r3, #16
 80014be:	4613      	mov	r3, r2
 80014c0:	460a      	mov	r2, r1
 80014c2:	4611      	mov	r1, r2
 80014c4:	ea45 4511 	orr.w	r5, r5, r1, lsr #16
 80014c8:	4613      	mov	r3, r2
 80014ca:	041c      	lsls	r4, r3, #16
			+ (((int64_t) c3 * dT) / (int64_t) 128);
 80014cc:	4b4c      	ldr	r3, [pc, #304]	@ (8001600 <MS8607_get_press_temp+0x2ec>)
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	2200      	movs	r2, #0
 80014d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80014d8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80014dc:	4b42      	ldr	r3, [pc, #264]	@ (80015e8 <MS8607_get_press_temp+0x2d4>)
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80014e6:	4649      	mov	r1, r9
 80014e8:	fb02 f001 	mul.w	r0, r2, r1
 80014ec:	4641      	mov	r1, r8
 80014ee:	fb01 f103 	mul.w	r1, r1, r3
 80014f2:	4401      	add	r1, r0
 80014f4:	4640      	mov	r0, r8
 80014f6:	fba0 3202 	umull	r3, r2, r0, r2
 80014fa:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80014fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001502:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001506:	18cb      	adds	r3, r1, r3
 8001508:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800150c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8001510:	2b00      	cmp	r3, #0
 8001512:	da07      	bge.n	8001524 <MS8607_get_press_temp+0x210>
 8001514:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 8001518:	63b9      	str	r1, [r7, #56]	@ 0x38
 800151a:	f143 0300 	adc.w	r3, r3, #0
 800151e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001520:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001524:	f04f 0000 	mov.w	r0, #0
 8001528:	f04f 0100 	mov.w	r1, #0
 800152c:	09d0      	lsrs	r0, r2, #7
 800152e:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8001532:	11d9      	asrs	r1, r3, #7
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	18a1      	adds	r1, r4, r2
 800153a:	67b9      	str	r1, [r7, #120]	@ 0x78
 800153c:	eb45 0303 	adc.w	r3, r5, r3
 8001540:	67fb      	str	r3, [r7, #124]	@ 0x7c
	sens = ((int64_t) c1 * (int64_t) 65536)
 8001542:	4b30      	ldr	r3, [pc, #192]	@ (8001604 <MS8607_get_press_temp+0x2f0>)
 8001544:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8001548:	e9c3 1200 	strd	r1, r2, [r3]

	// Second order compensation
	if (temp < (int) 2000) {
 800154c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001550:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001554:	f280 80d4 	bge.w	8001700 <MS8607_get_press_temp+0x3ec>

		t2 = ((dT * dT) / ((int64_t) 2147483648));
 8001558:	4b23      	ldr	r3, [pc, #140]	@ (80015e8 <MS8607_get_press_temp+0x2d4>)
 800155a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800155e:	4b22      	ldr	r3, [pc, #136]	@ (80015e8 <MS8607_get_press_temp+0x2d4>)
 8001560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001564:	fb02 f501 	mul.w	r5, r2, r1
 8001568:	fb00 f403 	mul.w	r4, r0, r3
 800156c:	442c      	add	r4, r5
 800156e:	fba0 3202 	umull	r3, r2, r0, r2
 8001572:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001576:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800157a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800157e:	18e3      	adds	r3, r4, r3
 8001580:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001584:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001588:	2b00      	cmp	r3, #0
 800158a:	da08      	bge.n	800159e <MS8607_get_press_temp+0x28a>
 800158c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001590:	1851      	adds	r1, r2, r1
 8001592:	6339      	str	r1, [r7, #48]	@ 0x30
 8001594:	f143 0300 	adc.w	r3, r3, #0
 8001598:	637b      	str	r3, [r7, #52]	@ 0x34
 800159a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800159e:	f04f 0000 	mov.w	r0, #0
 80015a2:	f04f 0100 	mov.w	r1, #0
 80015a6:	0fd0      	lsrs	r0, r2, #31
 80015a8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80015ac:	17d9      	asrs	r1, r3, #31
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4613      	mov	r3, r2
 80015b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
		off2 = (61 * ((temp - 2000) * (temp - 2000)) / 16);
 80015b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80015bc:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 80015c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80015c4:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80015c8:	fb03 f202 	mul.w	r2, r3, r2
 80015cc:	4613      	mov	r3, r2
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	1a9b      	subs	r3, r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	da16      	bge.n	8001608 <MS8607_get_press_temp+0x2f4>
 80015da:	330f      	adds	r3, #15
 80015dc:	e014      	b.n	8001608 <MS8607_get_press_temp+0x2f4>
 80015de:	bf00      	nop
 80015e0:	2000021c 	.word	0x2000021c
 80015e4:	20000214 	.word	0x20000214
 80015e8:	20000220 	.word	0x20000220
 80015ec:	20000216 	.word	0x20000216
 80015f0:	2000020e 	.word	0x2000020e
 80015f4:	20000212 	.word	0x20000212
 80015f8:	20000228 	.word	0x20000228
 80015fc:	2000020c 	.word	0x2000020c
 8001600:	20000210 	.word	0x20000210
 8001604:	20000230 	.word	0x20000230
 8001608:	111b      	asrs	r3, r3, #4
 800160a:	17da      	asrs	r2, r3, #31
 800160c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800160e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001610:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001614:	e9c7 343c 	strd	r3, r4, [r7, #240]	@ 0xf0
		sens2 = (2 * ((temp - 2000) ^ 2));
 8001618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800161c:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001620:	f083 0302 	eor.w	r3, r3, #2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	17da      	asrs	r2, r3, #31
 8001628:	623b      	str	r3, [r7, #32]
 800162a:	627a      	str	r2, [r7, #36]	@ 0x24
 800162c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001630:	e9c7 343a 	strd	r3, r4, [r7, #232]	@ 0xe8

		if (temp < -15) {
 8001634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001638:	f113 0f0f 	cmn.w	r3, #15
 800163c:	da3b      	bge.n	80016b6 <MS8607_get_press_temp+0x3a2>

			off2 = (off2 + (15 * ((temp + 1500) * (temp + 1500))));
 800163e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001642:	f203 52dc 	addw	r2, r3, #1500	@ 0x5dc
 8001646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800164a:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800164e:	fb03 f202 	mul.w	r2, r3, r2
 8001652:	4613      	mov	r3, r2
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	1a9b      	subs	r3, r3, r2
 8001658:	17da      	asrs	r2, r3, #31
 800165a:	673b      	str	r3, [r7, #112]	@ 0x70
 800165c:	677a      	str	r2, [r7, #116]	@ 0x74
 800165e:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 8001662:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001666:	4621      	mov	r1, r4
 8001668:	1851      	adds	r1, r2, r1
 800166a:	61b9      	str	r1, [r7, #24]
 800166c:	4629      	mov	r1, r5
 800166e:	eb43 0101 	adc.w	r1, r3, r1
 8001672:	61f9      	str	r1, [r7, #28]
 8001674:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001678:	e9c7 343c 	strd	r3, r4, [r7, #240]	@ 0xf0
			sens2 = (sens2 + (8 * ((temp + 1500) * (temp + 1500))));
 800167c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001680:	f203 52dc 	addw	r2, r3, #1500	@ 0x5dc
 8001684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001688:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800168c:	fb02 f303 	mul.w	r3, r2, r3
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	17da      	asrs	r2, r3, #31
 8001694:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001696:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001698:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 800169c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80016a0:	4621      	mov	r1, r4
 80016a2:	1851      	adds	r1, r2, r1
 80016a4:	6139      	str	r1, [r7, #16]
 80016a6:	4629      	mov	r1, r5
 80016a8:	eb43 0101 	adc.w	r1, r3, r1
 80016ac:	6179      	str	r1, [r7, #20]
 80016ae:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80016b2:	e9c7 343a 	strd	r3, r4, [r7, #232]	@ 0xe8
		}

		temp = temp - t2;
 80016b6:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80016ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
		off = off - off2;
 80016c4:	4b40      	ldr	r3, [pc, #256]	@ (80017c8 <MS8607_get_press_temp+0x4b4>)
 80016c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016ca:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 80016ce:	1a84      	subs	r4, r0, r2
 80016d0:	663c      	str	r4, [r7, #96]	@ 0x60
 80016d2:	eb61 0303 	sbc.w	r3, r1, r3
 80016d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80016d8:	4b3b      	ldr	r3, [pc, #236]	@ (80017c8 <MS8607_get_press_temp+0x4b4>)
 80016da:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80016de:	e9c3 1200 	strd	r1, r2, [r3]
		sens = sens - sens2;
 80016e2:	4b3a      	ldr	r3, [pc, #232]	@ (80017cc <MS8607_get_press_temp+0x4b8>)
 80016e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016e8:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 80016ec:	1a84      	subs	r4, r0, r2
 80016ee:	65bc      	str	r4, [r7, #88]	@ 0x58
 80016f0:	eb61 0303 	sbc.w	r3, r1, r3
 80016f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80016f6:	4b35      	ldr	r3, [pc, #212]	@ (80017cc <MS8607_get_press_temp+0x4b8>)
 80016f8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80016fc:	e9c3 1200 	strd	r1, r2, [r3]
	}

	press = (((d1 * sens) / (2097152)) - off) / (32768);
 8001700:	4b33      	ldr	r3, [pc, #204]	@ (80017d0 <MS8607_get_press_temp+0x4bc>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2200      	movs	r2, #0
 8001706:	653b      	str	r3, [r7, #80]	@ 0x50
 8001708:	657a      	str	r2, [r7, #84]	@ 0x54
 800170a:	4b30      	ldr	r3, [pc, #192]	@ (80017cc <MS8607_get_press_temp+0x4b8>)
 800170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001710:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001714:	4629      	mov	r1, r5
 8001716:	fb02 f001 	mul.w	r0, r2, r1
 800171a:	4621      	mov	r1, r4
 800171c:	fb01 f103 	mul.w	r1, r1, r3
 8001720:	4401      	add	r1, r0
 8001722:	4620      	mov	r0, r4
 8001724:	fba0 3202 	umull	r3, r2, r0, r2
 8001728:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800172c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001730:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001734:	18cb      	adds	r3, r1, r3
 8001736:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800173a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800173e:	2b00      	cmp	r3, #0
 8001740:	da07      	bge.n	8001752 <MS8607_get_press_temp+0x43e>
 8001742:	4924      	ldr	r1, [pc, #144]	@ (80017d4 <MS8607_get_press_temp+0x4c0>)
 8001744:	1851      	adds	r1, r2, r1
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	f143 0300 	adc.w	r3, r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001752:	f04f 0000 	mov.w	r0, #0
 8001756:	f04f 0100 	mov.w	r1, #0
 800175a:	0d50      	lsrs	r0, r2, #21
 800175c:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8001760:	1559      	asrs	r1, r3, #21
 8001762:	4b19      	ldr	r3, [pc, #100]	@ (80017c8 <MS8607_get_press_temp+0x4b4>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	1a84      	subs	r4, r0, r2
 800176a:	64bc      	str	r4, [r7, #72]	@ 0x48
 800176c:	eb61 0303 	sbc.w	r3, r1, r3
 8001770:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001772:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001776:	2b00      	cmp	r3, #0
 8001778:	da08      	bge.n	800178c <MS8607_get_press_temp+0x478>
 800177a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800177e:	1851      	adds	r1, r2, r1
 8001780:	6039      	str	r1, [r7, #0]
 8001782:	f143 0300 	adc.w	r3, r3, #0
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800178c:	f04f 0000 	mov.w	r0, #0
 8001790:	f04f 0100 	mov.w	r1, #0
 8001794:	0bd0      	lsrs	r0, r2, #15
 8001796:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 800179a:	13d9      	asrs	r1, r3, #15
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4613      	mov	r3, r2
 80017a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

	// in "centi-celsius" e.g. 2000 = 20.00 deg C
	*temperature = temp;
 80017a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80017aa:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80017ae:	601a      	str	r2, [r3, #0]

	// in "centi-millibar" e.g. 110002 = 1100.02 mbar
	*pressure = press;
 80017b0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80017b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80017b8:	601a      	str	r2, [r3, #0]

	return 0;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80017c2:	46bd      	mov	sp, r7
 80017c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017c8:	20000228 	.word	0x20000228
 80017cc:	20000230 	.word	0x20000230
 80017d0:	20000218 	.word	0x20000218
 80017d4:	001fffff 	.word	0x001fffff

080017d8 <MS8607_get_rel_humidity>:

int MS8607_get_rel_humidity(int32_t *rel_humidity, int32_t temperature) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
	uint8_t buf[2] = { 0, 0 };
 80017e2:	2300      	movs	r3, #0
 80017e4:	81bb      	strh	r3, [r7, #12]
	uint16_t d3 = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	82fb      	strh	r3, [r7, #22]
	uint32_t rh_uncomp = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]

	uint8_t cmd = MS807_RH_MEAS_HOLD_CMD;
 80017ee:	23e5      	movs	r3, #229	@ 0xe5
 80017f0:	72fb      	strb	r3, [r7, #11]
	if (i2c_write_blocking(i2c, MS8607_RH_ADDR, &cmd, 1) == -1)
 80017f2:	4b27      	ldr	r3, [pc, #156]	@ (8001890 <MS8607_get_rel_humidity+0xb8>)
 80017f4:	6818      	ldr	r0, [r3, #0]
 80017f6:	f107 020b 	add.w	r2, r7, #11
 80017fa:	2301      	movs	r3, #1
 80017fc:	2140      	movs	r1, #64	@ 0x40
 80017fe:	f7ff fd33 	bl	8001268 <i2c_write_blocking>
 8001802:	4603      	mov	r3, r0
 8001804:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001808:	d102      	bne.n	8001810 <MS8607_get_rel_humidity+0x38>
		return -1;
 800180a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800180e:	e03a      	b.n	8001886 <MS8607_get_rel_humidity+0xae>
	LL_mDelay(DELAY);
 8001810:	200a      	movs	r0, #10
 8001812:	f005 fafb 	bl	8006e0c <LL_mDelay>
	if (i2c_read_blocking(i2c, MS8607_RH_ADDR, buf, 2) == -1)
 8001816:	4b1e      	ldr	r3, [pc, #120]	@ (8001890 <MS8607_get_rel_humidity+0xb8>)
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	f107 020c 	add.w	r2, r7, #12
 800181e:	2302      	movs	r3, #2
 8001820:	2140      	movs	r1, #64	@ 0x40
 8001822:	f7ff fcdd 	bl	80011e0 <i2c_read_blocking>
 8001826:	4603      	mov	r3, r0
 8001828:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800182c:	d102      	bne.n	8001834 <MS8607_get_rel_humidity+0x5c>
		return -1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001832:	e028      	b.n	8001886 <MS8607_get_rel_humidity+0xae>
	d3 = ((uint16_t) buf[0] << 8) | buf[1]; // read raw data
 8001834:	7b3b      	ldrb	r3, [r7, #12]
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	b21a      	sxth	r2, r3
 800183a:	7b7b      	ldrb	r3, [r7, #13]
 800183c:	b21b      	sxth	r3, r3
 800183e:	4313      	orrs	r3, r2
 8001840:	b21b      	sxth	r3, r3
 8001842:	82fb      	strh	r3, [r7, #22]

	rh_uncomp = -6 + ((125 * d3) / 65536); // compute uncompensated relative humidity with formula from datasheet
 8001844:	8afa      	ldrh	r2, [r7, #22]
 8001846:	4613      	mov	r3, r2
 8001848:	015b      	lsls	r3, r3, #5
 800184a:	1a9b      	subs	r3, r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	2b00      	cmp	r3, #0
 8001852:	da02      	bge.n	800185a <MS8607_get_rel_humidity+0x82>
 8001854:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001858:	33ff      	adds	r3, #255	@ 0xff
 800185a:	141b      	asrs	r3, r3, #16
 800185c:	3b06      	subs	r3, #6
 800185e:	613b      	str	r3, [r7, #16]

	*rel_humidity = rh_uncomp + (((20 - temperature) * (-18)) / 100); // return final compensated value with given temperature
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	f1c3 0314 	rsb	r3, r3, #20
 8001866:	f06f 0211 	mvn.w	r2, #17
 800186a:	fb02 f303 	mul.w	r3, r2, r3
 800186e:	4a09      	ldr	r2, [pc, #36]	@ (8001894 <MS8607_get_rel_humidity+0xbc>)
 8001870:	fb82 1203 	smull	r1, r2, r2, r3
 8001874:	1152      	asrs	r2, r2, #5
 8001876:	17db      	asrs	r3, r3, #31
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	461a      	mov	r2, r3
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	4413      	add	r3, r2
 8001880:	461a      	mov	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	601a      	str	r2, [r3, #0]

}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000238 	.word	0x20000238
 8001894:	51eb851f 	.word	0x51eb851f

08001898 <read_prom>:

static int read_prom() {
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
	uint8_t buf[2] = { 0, 0 };
 800189e:	2300      	movs	r3, #0
 80018a0:	80bb      	strh	r3, [r7, #4]

	uint8_t cmd = MS8607_READ_C1_CMD;
 80018a2:	23a2      	movs	r3, #162	@ 0xa2
 80018a4:	70fb      	strb	r3, [r7, #3]
	if (i2c_write_blocking(i2c, MS8607_ADDR, &cmd, 1) == -1)
 80018a6:	4b82      	ldr	r3, [pc, #520]	@ (8001ab0 <read_prom+0x218>)
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	1cfa      	adds	r2, r7, #3
 80018ac:	2301      	movs	r3, #1
 80018ae:	2176      	movs	r1, #118	@ 0x76
 80018b0:	f7ff fcda 	bl	8001268 <i2c_write_blocking>
 80018b4:	4603      	mov	r3, r0
 80018b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018ba:	d102      	bne.n	80018c2 <read_prom+0x2a>
		return -1;
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018c0:	e0f2      	b.n	8001aa8 <read_prom+0x210>
	LL_mDelay(DELAY);
 80018c2:	200a      	movs	r0, #10
 80018c4:	f005 faa2 	bl	8006e0c <LL_mDelay>
	if (i2c_read_blocking(i2c, MS8607_ADDR, buf, 2) == -1)
 80018c8:	4b79      	ldr	r3, [pc, #484]	@ (8001ab0 <read_prom+0x218>)
 80018ca:	6818      	ldr	r0, [r3, #0]
 80018cc:	1d3a      	adds	r2, r7, #4
 80018ce:	2302      	movs	r3, #2
 80018d0:	2176      	movs	r1, #118	@ 0x76
 80018d2:	f7ff fc85 	bl	80011e0 <i2c_read_blocking>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018dc:	d102      	bne.n	80018e4 <read_prom+0x4c>
		return -1;
 80018de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018e2:	e0e1      	b.n	8001aa8 <read_prom+0x210>
	c1 = ((uint16_t) buf[0] << 8) | buf[1];
 80018e4:	793b      	ldrb	r3, [r7, #4]
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	b21a      	sxth	r2, r3
 80018ea:	797b      	ldrb	r3, [r7, #5]
 80018ec:	b21b      	sxth	r3, r3
 80018ee:	4313      	orrs	r3, r2
 80018f0:	b21b      	sxth	r3, r3
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	4b6f      	ldr	r3, [pc, #444]	@ (8001ab4 <read_prom+0x21c>)
 80018f6:	801a      	strh	r2, [r3, #0]

	cmd = MS8607_READ_C2_CMD;
 80018f8:	23a4      	movs	r3, #164	@ 0xa4
 80018fa:	70fb      	strb	r3, [r7, #3]
	if (i2c_write_blocking(i2c, MS8607_ADDR, &cmd, 1) == -1)
 80018fc:	4b6c      	ldr	r3, [pc, #432]	@ (8001ab0 <read_prom+0x218>)
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	1cfa      	adds	r2, r7, #3
 8001902:	2301      	movs	r3, #1
 8001904:	2176      	movs	r1, #118	@ 0x76
 8001906:	f7ff fcaf 	bl	8001268 <i2c_write_blocking>
 800190a:	4603      	mov	r3, r0
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001910:	d102      	bne.n	8001918 <read_prom+0x80>
		return -1;
 8001912:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001916:	e0c7      	b.n	8001aa8 <read_prom+0x210>
	LL_mDelay(DELAY);
 8001918:	200a      	movs	r0, #10
 800191a:	f005 fa77 	bl	8006e0c <LL_mDelay>
	if (i2c_read_blocking(i2c, MS8607_ADDR, buf, 2) == -1)
 800191e:	4b64      	ldr	r3, [pc, #400]	@ (8001ab0 <read_prom+0x218>)
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	1d3a      	adds	r2, r7, #4
 8001924:	2302      	movs	r3, #2
 8001926:	2176      	movs	r1, #118	@ 0x76
 8001928:	f7ff fc5a 	bl	80011e0 <i2c_read_blocking>
 800192c:	4603      	mov	r3, r0
 800192e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001932:	d102      	bne.n	800193a <read_prom+0xa2>
		return -1;
 8001934:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001938:	e0b6      	b.n	8001aa8 <read_prom+0x210>
	c2 = ((uint16_t) buf[0] << 8) | buf[1];
 800193a:	793b      	ldrb	r3, [r7, #4]
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	b21a      	sxth	r2, r3
 8001940:	797b      	ldrb	r3, [r7, #5]
 8001942:	b21b      	sxth	r3, r3
 8001944:	4313      	orrs	r3, r2
 8001946:	b21b      	sxth	r3, r3
 8001948:	b29a      	uxth	r2, r3
 800194a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ab8 <read_prom+0x220>)
 800194c:	801a      	strh	r2, [r3, #0]

	cmd = MS8607_READ_C3_CMD;
 800194e:	23a6      	movs	r3, #166	@ 0xa6
 8001950:	70fb      	strb	r3, [r7, #3]
	if (i2c_write_blocking(i2c, MS8607_ADDR, &cmd, 1) == -1)
 8001952:	4b57      	ldr	r3, [pc, #348]	@ (8001ab0 <read_prom+0x218>)
 8001954:	6818      	ldr	r0, [r3, #0]
 8001956:	1cfa      	adds	r2, r7, #3
 8001958:	2301      	movs	r3, #1
 800195a:	2176      	movs	r1, #118	@ 0x76
 800195c:	f7ff fc84 	bl	8001268 <i2c_write_blocking>
 8001960:	4603      	mov	r3, r0
 8001962:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001966:	d102      	bne.n	800196e <read_prom+0xd6>
		return -1;
 8001968:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800196c:	e09c      	b.n	8001aa8 <read_prom+0x210>
	LL_mDelay(DELAY);
 800196e:	200a      	movs	r0, #10
 8001970:	f005 fa4c 	bl	8006e0c <LL_mDelay>
	if (i2c_read_blocking(i2c, MS8607_ADDR, buf, 2) == -1)
 8001974:	4b4e      	ldr	r3, [pc, #312]	@ (8001ab0 <read_prom+0x218>)
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	1d3a      	adds	r2, r7, #4
 800197a:	2302      	movs	r3, #2
 800197c:	2176      	movs	r1, #118	@ 0x76
 800197e:	f7ff fc2f 	bl	80011e0 <i2c_read_blocking>
 8001982:	4603      	mov	r3, r0
 8001984:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001988:	d102      	bne.n	8001990 <read_prom+0xf8>
		return -1;
 800198a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800198e:	e08b      	b.n	8001aa8 <read_prom+0x210>
	c3 = ((uint16_t) buf[0] << 8) | buf[1];
 8001990:	793b      	ldrb	r3, [r7, #4]
 8001992:	021b      	lsls	r3, r3, #8
 8001994:	b21a      	sxth	r2, r3
 8001996:	797b      	ldrb	r3, [r7, #5]
 8001998:	b21b      	sxth	r3, r3
 800199a:	4313      	orrs	r3, r2
 800199c:	b21b      	sxth	r3, r3
 800199e:	b29a      	uxth	r2, r3
 80019a0:	4b46      	ldr	r3, [pc, #280]	@ (8001abc <read_prom+0x224>)
 80019a2:	801a      	strh	r2, [r3, #0]

	cmd = MS8607_READ_C4_CMD;
 80019a4:	23a8      	movs	r3, #168	@ 0xa8
 80019a6:	70fb      	strb	r3, [r7, #3]
	if (i2c_write_blocking(i2c, MS8607_ADDR, &cmd, 1) == -1)
 80019a8:	4b41      	ldr	r3, [pc, #260]	@ (8001ab0 <read_prom+0x218>)
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	1cfa      	adds	r2, r7, #3
 80019ae:	2301      	movs	r3, #1
 80019b0:	2176      	movs	r1, #118	@ 0x76
 80019b2:	f7ff fc59 	bl	8001268 <i2c_write_blocking>
 80019b6:	4603      	mov	r3, r0
 80019b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019bc:	d102      	bne.n	80019c4 <read_prom+0x12c>
		return -1;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019c2:	e071      	b.n	8001aa8 <read_prom+0x210>
	LL_mDelay(DELAY);
 80019c4:	200a      	movs	r0, #10
 80019c6:	f005 fa21 	bl	8006e0c <LL_mDelay>
	if (i2c_read_blocking(i2c, MS8607_ADDR, buf, 2) == -1)
 80019ca:	4b39      	ldr	r3, [pc, #228]	@ (8001ab0 <read_prom+0x218>)
 80019cc:	6818      	ldr	r0, [r3, #0]
 80019ce:	1d3a      	adds	r2, r7, #4
 80019d0:	2302      	movs	r3, #2
 80019d2:	2176      	movs	r1, #118	@ 0x76
 80019d4:	f7ff fc04 	bl	80011e0 <i2c_read_blocking>
 80019d8:	4603      	mov	r3, r0
 80019da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019de:	d102      	bne.n	80019e6 <read_prom+0x14e>
		return -1;
 80019e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019e4:	e060      	b.n	8001aa8 <read_prom+0x210>
	c4 = ((uint16_t) buf[0] << 8) | buf[1];
 80019e6:	793b      	ldrb	r3, [r7, #4]
 80019e8:	021b      	lsls	r3, r3, #8
 80019ea:	b21a      	sxth	r2, r3
 80019ec:	797b      	ldrb	r3, [r7, #5]
 80019ee:	b21b      	sxth	r3, r3
 80019f0:	4313      	orrs	r3, r2
 80019f2:	b21b      	sxth	r3, r3
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	4b32      	ldr	r3, [pc, #200]	@ (8001ac0 <read_prom+0x228>)
 80019f8:	801a      	strh	r2, [r3, #0]

	cmd = MS8607_READ_C5_CMD;
 80019fa:	23aa      	movs	r3, #170	@ 0xaa
 80019fc:	70fb      	strb	r3, [r7, #3]
	if (i2c_write_blocking(i2c, MS8607_ADDR, &cmd, 1) == -1)
 80019fe:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab0 <read_prom+0x218>)
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	1cfa      	adds	r2, r7, #3
 8001a04:	2301      	movs	r3, #1
 8001a06:	2176      	movs	r1, #118	@ 0x76
 8001a08:	f7ff fc2e 	bl	8001268 <i2c_write_blocking>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a12:	d102      	bne.n	8001a1a <read_prom+0x182>
		return -1;
 8001a14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a18:	e046      	b.n	8001aa8 <read_prom+0x210>
	LL_mDelay(DELAY);
 8001a1a:	200a      	movs	r0, #10
 8001a1c:	f005 f9f6 	bl	8006e0c <LL_mDelay>
	if (i2c_read_blocking(i2c, MS8607_ADDR, buf, 2) == -1)
 8001a20:	4b23      	ldr	r3, [pc, #140]	@ (8001ab0 <read_prom+0x218>)
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	1d3a      	adds	r2, r7, #4
 8001a26:	2302      	movs	r3, #2
 8001a28:	2176      	movs	r1, #118	@ 0x76
 8001a2a:	f7ff fbd9 	bl	80011e0 <i2c_read_blocking>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a34:	d102      	bne.n	8001a3c <read_prom+0x1a4>
		return -1;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a3a:	e035      	b.n	8001aa8 <read_prom+0x210>
	c5 = ((uint16_t) buf[0] << 8) | buf[1];
 8001a3c:	793b      	ldrb	r3, [r7, #4]
 8001a3e:	021b      	lsls	r3, r3, #8
 8001a40:	b21a      	sxth	r2, r3
 8001a42:	797b      	ldrb	r3, [r7, #5]
 8001a44:	b21b      	sxth	r3, r3
 8001a46:	4313      	orrs	r3, r2
 8001a48:	b21b      	sxth	r3, r3
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac4 <read_prom+0x22c>)
 8001a4e:	801a      	strh	r2, [r3, #0]

	cmd = MS8607_READ_C6_CMD;
 8001a50:	23ac      	movs	r3, #172	@ 0xac
 8001a52:	70fb      	strb	r3, [r7, #3]
	if (i2c_write_blocking(i2c, MS8607_ADDR, &cmd, 1) == -1)
 8001a54:	4b16      	ldr	r3, [pc, #88]	@ (8001ab0 <read_prom+0x218>)
 8001a56:	6818      	ldr	r0, [r3, #0]
 8001a58:	1cfa      	adds	r2, r7, #3
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	2176      	movs	r1, #118	@ 0x76
 8001a5e:	f7ff fc03 	bl	8001268 <i2c_write_blocking>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a68:	d102      	bne.n	8001a70 <read_prom+0x1d8>
		return -1;
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a6e:	e01b      	b.n	8001aa8 <read_prom+0x210>
	LL_mDelay(DELAY);
 8001a70:	200a      	movs	r0, #10
 8001a72:	f005 f9cb 	bl	8006e0c <LL_mDelay>
	if (i2c_read_blocking(i2c, MS8607_ADDR, buf, 2) == -1)
 8001a76:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab0 <read_prom+0x218>)
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	1d3a      	adds	r2, r7, #4
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	2176      	movs	r1, #118	@ 0x76
 8001a80:	f7ff fbae 	bl	80011e0 <i2c_read_blocking>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a8a:	d102      	bne.n	8001a92 <read_prom+0x1fa>
		return -1;
 8001a8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a90:	e00a      	b.n	8001aa8 <read_prom+0x210>
	c6 = ((uint16_t) buf[0] << 8) | buf[1];
 8001a92:	793b      	ldrb	r3, [r7, #4]
 8001a94:	021b      	lsls	r3, r3, #8
 8001a96:	b21a      	sxth	r2, r3
 8001a98:	797b      	ldrb	r3, [r7, #5]
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <read_prom+0x230>)
 8001aa4:	801a      	strh	r2, [r3, #0]

	return 0;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000238 	.word	0x20000238
 8001ab4:	2000020c 	.word	0x2000020c
 8001ab8:	2000020e 	.word	0x2000020e
 8001abc:	20000210 	.word	0x20000210
 8001ac0:	20000212 	.word	0x20000212
 8001ac4:	20000214 	.word	0x20000214
 8001ac8:	20000216 	.word	0x20000216

08001acc <conversion>:

static int conversion() {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
	uint8_t buf[3] = { 0, 0, 0 };
 8001ad2:	4a46      	ldr	r2, [pc, #280]	@ (8001bec <conversion+0x120>)
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	4611      	mov	r1, r2
 8001ada:	8019      	strh	r1, [r3, #0]
 8001adc:	3302      	adds	r3, #2
 8001ade:	0c12      	lsrs	r2, r2, #16
 8001ae0:	701a      	strb	r2, [r3, #0]

	uint8_t cmd = MS8607_PRESS_CONV_CMD;
 8001ae2:	2348      	movs	r3, #72	@ 0x48
 8001ae4:	70fb      	strb	r3, [r7, #3]
	if (i2c_write_blocking(i2c, MS8607_ADDR, &cmd, 1) == -1)
 8001ae6:	4b42      	ldr	r3, [pc, #264]	@ (8001bf0 <conversion+0x124>)
 8001ae8:	6818      	ldr	r0, [r3, #0]
 8001aea:	1cfa      	adds	r2, r7, #3
 8001aec:	2301      	movs	r3, #1
 8001aee:	2176      	movs	r1, #118	@ 0x76
 8001af0:	f7ff fbba 	bl	8001268 <i2c_write_blocking>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001afa:	d102      	bne.n	8001b02 <conversion+0x36>
		return -1;
 8001afc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b00:	e070      	b.n	8001be4 <conversion+0x118>
	LL_mDelay(DELAY);
 8001b02:	200a      	movs	r0, #10
 8001b04:	f005 f982 	bl	8006e0c <LL_mDelay>

	cmd = MS8607_READ_CMD;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	70fb      	strb	r3, [r7, #3]
	if (i2c_write_blocking(i2c, MS8607_ADDR, &cmd, 1) == -1)
 8001b0c:	4b38      	ldr	r3, [pc, #224]	@ (8001bf0 <conversion+0x124>)
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	1cfa      	adds	r2, r7, #3
 8001b12:	2301      	movs	r3, #1
 8001b14:	2176      	movs	r1, #118	@ 0x76
 8001b16:	f7ff fba7 	bl	8001268 <i2c_write_blocking>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b20:	d102      	bne.n	8001b28 <conversion+0x5c>
		return -1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b26:	e05d      	b.n	8001be4 <conversion+0x118>
	LL_mDelay(DELAY);
 8001b28:	200a      	movs	r0, #10
 8001b2a:	f005 f96f 	bl	8006e0c <LL_mDelay>

	if (i2c_read_blocking(i2c, MS8607_ADDR, buf, 3) == -1)
 8001b2e:	4b30      	ldr	r3, [pc, #192]	@ (8001bf0 <conversion+0x124>)
 8001b30:	6818      	ldr	r0, [r3, #0]
 8001b32:	1d3a      	adds	r2, r7, #4
 8001b34:	2303      	movs	r3, #3
 8001b36:	2176      	movs	r1, #118	@ 0x76
 8001b38:	f7ff fb52 	bl	80011e0 <i2c_read_blocking>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b42:	d102      	bne.n	8001b4a <conversion+0x7e>
		return -1;
 8001b44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b48:	e04c      	b.n	8001be4 <conversion+0x118>

	d1 = ((uint32_t) buf[0] << 16) | ((uint32_t) buf[1] << 8) | buf[2];
 8001b4a:	793b      	ldrb	r3, [r7, #4]
 8001b4c:	041a      	lsls	r2, r3, #16
 8001b4e:	797b      	ldrb	r3, [r7, #5]
 8001b50:	021b      	lsls	r3, r3, #8
 8001b52:	4313      	orrs	r3, r2
 8001b54:	79ba      	ldrb	r2, [r7, #6]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	4a26      	ldr	r2, [pc, #152]	@ (8001bf4 <conversion+0x128>)
 8001b5a:	6013      	str	r3, [r2, #0]

	buf[0] = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	713b      	strb	r3, [r7, #4]
	buf[1] = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	717b      	strb	r3, [r7, #5]
	buf[2] = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	71bb      	strb	r3, [r7, #6]

	cmd = MS8607_TEMP_CONV_CMD;
 8001b68:	2358      	movs	r3, #88	@ 0x58
 8001b6a:	70fb      	strb	r3, [r7, #3]
	if (i2c_write_blocking(i2c, MS8607_ADDR, &cmd, 1) == -1)
 8001b6c:	4b20      	ldr	r3, [pc, #128]	@ (8001bf0 <conversion+0x124>)
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	1cfa      	adds	r2, r7, #3
 8001b72:	2301      	movs	r3, #1
 8001b74:	2176      	movs	r1, #118	@ 0x76
 8001b76:	f7ff fb77 	bl	8001268 <i2c_write_blocking>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b80:	d102      	bne.n	8001b88 <conversion+0xbc>
		return -1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b86:	e02d      	b.n	8001be4 <conversion+0x118>
	LL_mDelay(DELAY);
 8001b88:	200a      	movs	r0, #10
 8001b8a:	f005 f93f 	bl	8006e0c <LL_mDelay>

	cmd = MS8607_READ_CMD;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	70fb      	strb	r3, [r7, #3]
	if (i2c_write_blocking(i2c, MS8607_ADDR, &cmd, 1) == -1)
 8001b92:	4b17      	ldr	r3, [pc, #92]	@ (8001bf0 <conversion+0x124>)
 8001b94:	6818      	ldr	r0, [r3, #0]
 8001b96:	1cfa      	adds	r2, r7, #3
 8001b98:	2301      	movs	r3, #1
 8001b9a:	2176      	movs	r1, #118	@ 0x76
 8001b9c:	f7ff fb64 	bl	8001268 <i2c_write_blocking>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ba6:	d102      	bne.n	8001bae <conversion+0xe2>
		return -1;
 8001ba8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bac:	e01a      	b.n	8001be4 <conversion+0x118>
	LL_mDelay(DELAY);
 8001bae:	200a      	movs	r0, #10
 8001bb0:	f005 f92c 	bl	8006e0c <LL_mDelay>

	if (i2c_read_blocking(i2c, MS8607_ADDR, buf, 3) == -1)
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <conversion+0x124>)
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	1d3a      	adds	r2, r7, #4
 8001bba:	2303      	movs	r3, #3
 8001bbc:	2176      	movs	r1, #118	@ 0x76
 8001bbe:	f7ff fb0f 	bl	80011e0 <i2c_read_blocking>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bc8:	d102      	bne.n	8001bd0 <conversion+0x104>
		return -1;
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bce:	e009      	b.n	8001be4 <conversion+0x118>

	d2 = ((uint32_t) buf[0] << 16) | ((uint32_t) buf[1] << 8) | buf[2];
 8001bd0:	793b      	ldrb	r3, [r7, #4]
 8001bd2:	041a      	lsls	r2, r3, #16
 8001bd4:	797b      	ldrb	r3, [r7, #5]
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	79ba      	ldrb	r2, [r7, #6]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	4a06      	ldr	r2, [pc, #24]	@ (8001bf8 <conversion+0x12c>)
 8001be0:	6013      	str	r3, [r2, #0]

	return 0;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	0800c978 	.word	0x0800c978
 8001bf0:	20000238 	.word	0x20000238
 8001bf4:	20000218 	.word	0x20000218
 8001bf8:	2000021c 	.word	0x2000021c

08001bfc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c08:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c20:	68fb      	ldr	r3, [r7, #12]
}
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c48:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c50:	68fb      	ldr	r3, [r7, #12]
}
 8001c52:	bf00      	nop
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <LL_I2C_EnableClockStretching>:
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	601a      	str	r2, [r3, #0]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <LL_I2C_DisableGeneralCall>:
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	601a      	str	r2, [r3, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <LL_I2C_SetOwnAddress2>:
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001cac:	f023 0306 	bic.w	r3, r3, #6
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	60da      	str	r2, [r3, #12]
}
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <LL_I2C_DisableOwnAddress2>:
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	60da      	str	r2, [r3, #12]
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <LL_I2C_EnableAutoEndMode>:
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	605a      	str	r2, [r3, #4]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
	...

08001d04 <format_csv_line>:
			y_accel,   ///< The Y acceleration value in m/s^2
			z_accel;   ///< The Z acceleration value in m/s^2
} sensor_data_t;

static inline void format_csv_line(char *buffer, size_t size,
		const sensor_data_t *data) {
 8001d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d08:	b099      	sub	sp, #100	@ 0x64
 8001d0a:	af10      	add	r7, sp, #64	@ 0x40
 8001d0c:	61f8      	str	r0, [r7, #28]
 8001d0e:	61b9      	str	r1, [r7, #24]
 8001d10:	617a      	str	r2, [r7, #20]
	snprintf(buffer, size,
			"%lu,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%ld,%lu,%ld\r\n",
			data->timestamp, data->roll, data->pitch, data->yaw, data->x_accel,
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	699b      	ldr	r3, [r3, #24]
	snprintf(buffer, size,
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fbeb 	bl	80004f8 <__aeabi_f2d>
 8001d22:	4604      	mov	r4, r0
 8001d24:	460d      	mov	r5, r1
			data->timestamp, data->roll, data->pitch, data->yaw, data->x_accel,
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	695b      	ldr	r3, [r3, #20]
	snprintf(buffer, size,
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fbe4 	bl	80004f8 <__aeabi_f2d>
 8001d30:	4680      	mov	r8, r0
 8001d32:	4689      	mov	r9, r1
			data->timestamp, data->roll, data->pitch, data->yaw, data->x_accel,
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	691b      	ldr	r3, [r3, #16]
	snprintf(buffer, size,
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fbdd 	bl	80004f8 <__aeabi_f2d>
 8001d3e:	4682      	mov	sl, r0
 8001d40:	468b      	mov	fp, r1
			data->timestamp, data->roll, data->pitch, data->yaw, data->x_accel,
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	69db      	ldr	r3, [r3, #28]
	snprintf(buffer, size,
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fbd6 	bl	80004f8 <__aeabi_f2d>
 8001d4c:	e9c7 0102 	strd	r0, r1, [r7, #8]
			data->y_accel, data->z_accel, data->temperature, data->pressure,
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
	snprintf(buffer, size,
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fbcf 	bl	80004f8 <__aeabi_f2d>
 8001d5a:	e9c7 0100 	strd	r0, r1, [r7]
			data->y_accel, data->z_accel, data->temperature, data->pressure,
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	snprintf(buffer, size,
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fbc8 	bl	80004f8 <__aeabi_f2d>
			data->y_accel, data->z_accel, data->temperature, data->pressure,
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	689e      	ldr	r6, [r3, #8]
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	685a      	ldr	r2, [r3, #4]
			data->rel_humidity);
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	68db      	ldr	r3, [r3, #12]
	snprintf(buffer, size,
 8001d74:	930e      	str	r3, [sp, #56]	@ 0x38
 8001d76:	920d      	str	r2, [sp, #52]	@ 0x34
 8001d78:	960c      	str	r6, [sp, #48]	@ 0x30
 8001d7a:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8001d7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d82:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001d86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001d8e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001d92:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001d96:	e9cd 4500 	strd	r4, r5, [sp]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4a04      	ldr	r2, [pc, #16]	@ (8001db0 <format_csv_line+0xac>)
 8001d9e:	69b9      	ldr	r1, [r7, #24]
 8001da0:	69f8      	ldr	r0, [r7, #28]
 8001da2:	f008 fba5 	bl	800a4f0 <sniprintf>
}
 8001da6:	bf00      	nop
 8001da8:	3724      	adds	r7, #36	@ 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001db0:	0800c97c 	.word	0x0800c97c
 8001db4:	00000000 	.word	0x00000000

08001db8 <get_bno_data>:

extern UART_HandleTypeDef hlpuart1;

static inline void get_bno_data(sensor_data_t *data) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08c      	sub	sp, #48	@ 0x30
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

	uint8_t bno_buffer[20] = { 0 };
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61bb      	str	r3, [r7, #24]
 8001dc4:	f107 031c 	add.w	r3, r7, #28
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]

	while (bno_buffer[0] != 0xAA)
 8001dd2:	e007      	b.n	8001de4 <get_bno_data+0x2c>
		HAL_UART_Receive(&hlpuart1, bno_buffer, 1, 1000);
 8001dd4:	f107 0118 	add.w	r1, r7, #24
 8001dd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ddc:	2201      	movs	r2, #1
 8001dde:	4888      	ldr	r0, [pc, #544]	@ (8002000 <get_bno_data+0x248>)
 8001de0:	f003 fb93 	bl	800550a <HAL_UART_Receive>
	while (bno_buffer[0] != 0xAA)
 8001de4:	7e3b      	ldrb	r3, [r7, #24]
 8001de6:	2baa      	cmp	r3, #170	@ 0xaa
 8001de8:	d1f4      	bne.n	8001dd4 <get_bno_data+0x1c>

	while (bno_buffer[1] != 0xAA)
 8001dea:	e008      	b.n	8001dfe <get_bno_data+0x46>
		HAL_UART_Receive(&hlpuart1, bno_buffer + 1, 1, 1000);
 8001dec:	f107 0118 	add.w	r1, r7, #24
 8001df0:	3101      	adds	r1, #1
 8001df2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001df6:	2201      	movs	r2, #1
 8001df8:	4881      	ldr	r0, [pc, #516]	@ (8002000 <get_bno_data+0x248>)
 8001dfa:	f003 fb86 	bl	800550a <HAL_UART_Receive>
	while (bno_buffer[1] != 0xAA)
 8001dfe:	7e7b      	ldrb	r3, [r7, #25]
 8001e00:	2baa      	cmp	r3, #170	@ 0xaa
 8001e02:	d1f3      	bne.n	8001dec <get_bno_data+0x34>

	HAL_UART_Receive(&hlpuart1, bno_buffer + 2, 17, 1000);
 8001e04:	f107 0118 	add.w	r1, r7, #24
 8001e08:	3102      	adds	r1, #2
 8001e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e0e:	2211      	movs	r2, #17
 8001e10:	487b      	ldr	r0, [pc, #492]	@ (8002000 <get_bno_data+0x248>)
 8001e12:	f003 fb7a 	bl	800550a <HAL_UART_Receive>

	if (bno_buffer[0] == 0xAA && bno_buffer[1] == 0xAA) {
 8001e16:	7e3b      	ldrb	r3, [r7, #24]
 8001e18:	2baa      	cmp	r3, #170	@ 0xaa
 8001e1a:	f040 80e2 	bne.w	8001fe2 <get_bno_data+0x22a>
 8001e1e:	7e7b      	ldrb	r3, [r7, #25]
 8001e20:	2baa      	cmp	r3, #170	@ 0xaa
 8001e22:	f040 80de 	bne.w	8001fe2 <get_bno_data+0x22a>
		//got data!!!

		uint8_t sum = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		// get checksum ready
		for (uint8_t i = 2; i < 17; i++) {
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001e32:	e00f      	b.n	8001e54 <get_bno_data+0x9c>
			sum += bno_buffer[i];
 8001e34:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001e38:	3330      	adds	r3, #48	@ 0x30
 8001e3a:	443b      	add	r3, r7
 8001e3c:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001e40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e44:	4413      	add	r3, r2
 8001e46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		for (uint8_t i = 2; i < 17; i++) {
 8001e4a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001e4e:	3301      	adds	r3, #1
 8001e50:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001e54:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001e58:	2b10      	cmp	r3, #16
 8001e5a:	d9eb      	bls.n	8001e34 <get_bno_data+0x7c>
		}

		// The data comes in endian'd, this solves it so it works on all platforms
		int16_t buffer_16[6];

		for (uint8_t i = 0; i < 6; i++) {
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001e62:	e030      	b.n	8001ec6 <get_bno_data+0x10e>

			buffer_16[i] = (bno_buffer[1 + (i * 2)]);
 8001e64:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	3330      	adds	r3, #48	@ 0x30
 8001e6e:	443b      	add	r3, r7
 8001e70:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001e74:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001e78:	b212      	sxth	r2, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	3330      	adds	r3, #48	@ 0x30
 8001e7e:	443b      	add	r3, r7
 8001e80:	f823 2c24 	strh.w	r2, [r3, #-36]
			buffer_16[i] += (bno_buffer[1 + (i * 2) + 1] << 8);
 8001e84:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	3330      	adds	r3, #48	@ 0x30
 8001e8c:	443b      	add	r3, r7
 8001e8e:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001e98:	3301      	adds	r3, #1
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	3330      	adds	r3, #48	@ 0x30
 8001e9e:	443b      	add	r3, r7
 8001ea0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001eb0:	b212      	sxth	r2, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	3330      	adds	r3, #48	@ 0x30
 8001eb6:	443b      	add	r3, r7
 8001eb8:	f823 2c24 	strh.w	r2, [r3, #-36]
		for (uint8_t i = 0; i < 6; i++) {
 8001ebc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001ec6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001eca:	2b05      	cmp	r3, #5
 8001ecc:	d9ca      	bls.n	8001e64 <get_bno_data+0xac>
		}
		data->yaw = (float) buffer_16[0] * DEGREE_SCALE;
 8001ece:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe ff4a 	bl	8000d6c <__aeabi_i2f>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fb0c 	bl	80004f8 <__aeabi_f2d>
 8001ee0:	a343      	add	r3, pc, #268	@ (adr r3, 8001ff0 <get_bno_data+0x238>)
 8001ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee6:	f7fe fb5f 	bl	80005a8 <__aeabi_dmul>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f7fe fe31 	bl	8000b58 <__aeabi_d2f>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	611a      	str	r2, [r3, #16]
		data->pitch = (float) buffer_16[1] * DEGREE_SCALE;
 8001efc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe ff33 	bl	8000d6c <__aeabi_i2f>
 8001f06:	4603      	mov	r3, r0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe faf5 	bl	80004f8 <__aeabi_f2d>
 8001f0e:	a338      	add	r3, pc, #224	@ (adr r3, 8001ff0 <get_bno_data+0x238>)
 8001f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f14:	f7fe fb48 	bl	80005a8 <__aeabi_dmul>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f7fe fe1a 	bl	8000b58 <__aeabi_d2f>
 8001f24:	4602      	mov	r2, r0
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	615a      	str	r2, [r3, #20]
		data->roll = (float) buffer_16[2] * DEGREE_SCALE;
 8001f2a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe ff1c 	bl	8000d6c <__aeabi_i2f>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fade 	bl	80004f8 <__aeabi_f2d>
 8001f3c:	a32c      	add	r3, pc, #176	@ (adr r3, 8001ff0 <get_bno_data+0x238>)
 8001f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f42:	f7fe fb31 	bl	80005a8 <__aeabi_dmul>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f7fe fe03 	bl	8000b58 <__aeabi_d2f>
 8001f52:	4602      	mov	r2, r0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	619a      	str	r2, [r3, #24]

		data->x_accel = (float) buffer_16[3] * MILLI_G_TO_MS2;
 8001f58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe ff05 	bl	8000d6c <__aeabi_i2f>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe fac7 	bl	80004f8 <__aeabi_f2d>
 8001f6a:	a323      	add	r3, pc, #140	@ (adr r3, 8001ff8 <get_bno_data+0x240>)
 8001f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f70:	f7fe fb1a 	bl	80005a8 <__aeabi_dmul>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f7fe fdec 	bl	8000b58 <__aeabi_d2f>
 8001f80:	4602      	mov	r2, r0
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	61da      	str	r2, [r3, #28]
		data->y_accel = (float) buffer_16[4] * MILLI_G_TO_MS2;
 8001f86:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe feee 	bl	8000d6c <__aeabi_i2f>
 8001f90:	4603      	mov	r3, r0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fab0 	bl	80004f8 <__aeabi_f2d>
 8001f98:	a317      	add	r3, pc, #92	@ (adr r3, 8001ff8 <get_bno_data+0x240>)
 8001f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9e:	f7fe fb03 	bl	80005a8 <__aeabi_dmul>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f7fe fdd5 	bl	8000b58 <__aeabi_d2f>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	621a      	str	r2, [r3, #32]
		data->z_accel = (float) buffer_16[5] * MILLI_G_TO_MS2;
 8001fb4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fed7 	bl	8000d6c <__aeabi_i2f>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe fa99 	bl	80004f8 <__aeabi_f2d>
 8001fc6:	a30c      	add	r3, pc, #48	@ (adr r3, 8001ff8 <get_bno_data+0x240>)
 8001fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fcc:	f7fe faec 	bl	80005a8 <__aeabi_dmul>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	f7fe fdbe 	bl	8000b58 <__aeabi_d2f>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 8001fe2:	bf00      	nop
 8001fe4:	3730      	adds	r7, #48	@ 0x30
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	f3af 8000 	nop.w
 8001ff0:	47ae147b 	.word	0x47ae147b
 8001ff4:	3f847ae1 	.word	0x3f847ae1
 8001ff8:	fe40e31f 	.word	0xfe40e31f
 8001ffc:	3f841588 	.word	0x3f841588
 8002000:	2000023c 	.word	0x2000023c

08002004 <myprintf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void myprintf(const char *fmt, ...) {
 8002004:	b40f      	push	{r0, r1, r2, r3}
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	607b      	str	r3, [r7, #4]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800201a:	4805      	ldr	r0, [pc, #20]	@ (8002030 <myprintf+0x2c>)
 800201c:	f008 fb8a 	bl	800a734 <vsniprintf>
	va_end(args);
	//HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
}
 8002020:	bf00      	nop
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800202a:	b004      	add	sp, #16
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	200008c4 	.word	0x200008c4

08002034 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800203a:	f000 fc49 	bl	80028d0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800203e:	f000 f8d7 	bl	80021f0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002042:	f000 fa27 	bl	8002494 <MX_GPIO_Init>
	MX_I2C1_Init();
 8002046:	f000 f925 	bl	8002294 <MX_I2C1_Init>
	MX_SPI1_Init();
 800204a:	f000 f9e5 	bl	8002418 <MX_SPI1_Init>
	MX_LPUART1_UART_Init();
 800204e:	f000 f993 	bl	8002378 <MX_LPUART1_UART_Init>
	MX_FATFS_Init();
 8002052:	f004 ff01 	bl	8006e58 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */

	// Link the FatFS driver to SD logical drive
	FATFS_LinkDriver(&USER_Driver, "/SD");
 8002056:	4950      	ldr	r1, [pc, #320]	@ (8002198 <main+0x164>)
 8002058:	4850      	ldr	r0, [pc, #320]	@ (800219c <main+0x168>)
 800205a:	f007 fde1 	bl	8009c20 <FATFS_LinkDriver>

	//-- Mount the filesystem --
	res = f_mount(&fs, "/SD", 1);
 800205e:	2201      	movs	r2, #1
 8002060:	494d      	ldr	r1, [pc, #308]	@ (8002198 <main+0x164>)
 8002062:	484f      	ldr	r0, [pc, #316]	@ (80021a0 <main+0x16c>)
 8002064:	f007 f974 	bl	8009350 <f_mount>
 8002068:	4603      	mov	r3, r0
 800206a:	461a      	mov	r2, r3
 800206c:	4b4d      	ldr	r3, [pc, #308]	@ (80021a4 <main+0x170>)
 800206e:	701a      	strb	r2, [r3, #0]
	if (res != FR_OK) {
 8002070:	4b4c      	ldr	r3, [pc, #304]	@ (80021a4 <main+0x170>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <main+0x56>
		// If mounting fails print error and halt
		myprintf("f_mount failed (%d)\r\n", res);
 8002078:	4b4a      	ldr	r3, [pc, #296]	@ (80021a4 <main+0x170>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	4619      	mov	r1, r3
 800207e:	484a      	ldr	r0, [pc, #296]	@ (80021a8 <main+0x174>)
 8002080:	f7ff ffc0 	bl	8002004 <myprintf>
		Error_Handler();
 8002084:	f000 fa2b 	bl	80024de <Error_Handler>
 8002088:	e002      	b.n	8002090 <main+0x5c>
	} else {
		// Print if mounting succeeds
		myprintf("SD mounted.\r\n");
 800208a:	4848      	ldr	r0, [pc, #288]	@ (80021ac <main+0x178>)
 800208c:	f7ff ffba 	bl	8002004 <myprintf>
	}

	//-- CSV File Setup --
	// Open/create CSV file for writing
	res = f_open(&csvFile, "data.csv", FA_WRITE | FA_OPEN_ALWAYS);
 8002090:	2212      	movs	r2, #18
 8002092:	4947      	ldr	r1, [pc, #284]	@ (80021b0 <main+0x17c>)
 8002094:	4847      	ldr	r0, [pc, #284]	@ (80021b4 <main+0x180>)
 8002096:	f007 f9a1 	bl	80093dc <f_open>
 800209a:	4603      	mov	r3, r0
 800209c:	461a      	mov	r2, r3
 800209e:	4b41      	ldr	r3, [pc, #260]	@ (80021a4 <main+0x170>)
 80020a0:	701a      	strb	r2, [r3, #0]
	if (res == FR_OK) {
 80020a2:	4b40      	ldr	r3, [pc, #256]	@ (80021a4 <main+0x170>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d120      	bne.n	80020ec <main+0xb8>
		// CSV column headers
		const char *header =
 80020aa:	4b43      	ldr	r3, [pc, #268]	@ (80021b8 <main+0x184>)
 80020ac:	607b      	str	r3, [r7, #4]
				"timestamp,yaw,pitch,roll,x_accel,y_accel,z_accel,temperature,pressure,humidity\r\n";
		res = f_write(&csvFile, header, strlen(header), &bytes_written);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7fe f8b6 	bl	8000220 <strlen>
 80020b4:	4602      	mov	r2, r0
 80020b6:	4b41      	ldr	r3, [pc, #260]	@ (80021bc <main+0x188>)
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	483e      	ldr	r0, [pc, #248]	@ (80021b4 <main+0x180>)
 80020bc:	f007 fb48 	bl	8009750 <f_write>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461a      	mov	r2, r3
 80020c4:	4b37      	ldr	r3, [pc, #220]	@ (80021a4 <main+0x170>)
 80020c6:	701a      	strb	r2, [r3, #0]
		if (res == FR_OK) {
 80020c8:	4b36      	ldr	r3, [pc, #216]	@ (80021a4 <main+0x170>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d103      	bne.n	80020d8 <main+0xa4>
			myprintf("CSV header written.\r\n");
 80020d0:	483b      	ldr	r0, [pc, #236]	@ (80021c0 <main+0x18c>)
 80020d2:	f7ff ff97 	bl	8002004 <myprintf>
 80020d6:	e005      	b.n	80020e4 <main+0xb0>
		} else {
			myprintf("CSV header write failed (%d).\r\n", res);
 80020d8:	4b32      	ldr	r3, [pc, #200]	@ (80021a4 <main+0x170>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	4619      	mov	r1, r3
 80020de:	4839      	ldr	r0, [pc, #228]	@ (80021c4 <main+0x190>)
 80020e0:	f7ff ff90 	bl	8002004 <myprintf>
		}
		// Close file after writing
		f_close(&csvFile);
 80020e4:	4833      	ldr	r0, [pc, #204]	@ (80021b4 <main+0x180>)
 80020e6:	f007 fd26 	bl	8009b36 <f_close>
 80020ea:	e005      	b.n	80020f8 <main+0xc4>

	} else {
		// If opening CSV file failed print
		myprintf("Failed to open data.csv (%d).\r\n", res);
 80020ec:	4b2d      	ldr	r3, [pc, #180]	@ (80021a4 <main+0x170>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	4619      	mov	r1, r3
 80020f2:	4835      	ldr	r0, [pc, #212]	@ (80021c8 <main+0x194>)
 80020f4:	f7ff ff86 	bl	8002004 <myprintf>
	}

	MS8607_init(I2C1); // init pressure, temperature, and relative humidity sensor
 80020f8:	4834      	ldr	r0, [pc, #208]	@ (80021cc <main+0x198>)
 80020fa:	f7ff f8f9 	bl	80012f0 <MS8607_init>
	/* USER CODE BEGIN WHILE */

	while (1) {

		// fill data struct
		data.timestamp = HAL_GetTick();
 80020fe:	f000 fc53 	bl	80029a8 <HAL_GetTick>
 8002102:	4603      	mov	r3, r0
 8002104:	4a32      	ldr	r2, [pc, #200]	@ (80021d0 <main+0x19c>)
 8002106:	6013      	str	r3, [r2, #0]
		get_bno_data(&data);
 8002108:	4831      	ldr	r0, [pc, #196]	@ (80021d0 <main+0x19c>)
 800210a:	f7ff fe55 	bl	8001db8 <get_bno_data>
		MS8607_get_press_temp(&data.pressure, &data.temperature);
 800210e:	4931      	ldr	r1, [pc, #196]	@ (80021d4 <main+0x1a0>)
 8002110:	4831      	ldr	r0, [pc, #196]	@ (80021d8 <main+0x1a4>)
 8002112:	f7ff f8ff 	bl	8001314 <MS8607_get_press_temp>
		MS8607_get_rel_humidity(&data.rel_humidity, data.temperature);
 8002116:	4b2e      	ldr	r3, [pc, #184]	@ (80021d0 <main+0x19c>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	4619      	mov	r1, r3
 800211c:	482f      	ldr	r0, [pc, #188]	@ (80021dc <main+0x1a8>)
 800211e:	f7ff fb5b 	bl	80017d8 <MS8607_get_rel_humidity>

		// Format CSV line
		format_csv_line(csv_line, sizeof(csv_line), &data);
 8002122:	4a2b      	ldr	r2, [pc, #172]	@ (80021d0 <main+0x19c>)
 8002124:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002128:	482d      	ldr	r0, [pc, #180]	@ (80021e0 <main+0x1ac>)
 800212a:	f7ff fdeb 	bl	8001d04 <format_csv_line>

		// Open file in append mode
		res = f_open(&csvFile, "data.csv", FA_OPEN_APPEND | FA_WRITE);
 800212e:	2232      	movs	r2, #50	@ 0x32
 8002130:	491f      	ldr	r1, [pc, #124]	@ (80021b0 <main+0x17c>)
 8002132:	4820      	ldr	r0, [pc, #128]	@ (80021b4 <main+0x180>)
 8002134:	f007 f952 	bl	80093dc <f_open>
 8002138:	4603      	mov	r3, r0
 800213a:	461a      	mov	r2, r3
 800213c:	4b19      	ldr	r3, [pc, #100]	@ (80021a4 <main+0x170>)
 800213e:	701a      	strb	r2, [r3, #0]
		if (res == FR_OK) {
 8002140:	4b18      	ldr	r3, [pc, #96]	@ (80021a4 <main+0x170>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d11f      	bne.n	8002188 <main+0x154>
			UINT bytes_written;
			res = f_write(&csvFile, csv_line, strlen(csv_line), &bytes_written);
 8002148:	4825      	ldr	r0, [pc, #148]	@ (80021e0 <main+0x1ac>)
 800214a:	f7fe f869 	bl	8000220 <strlen>
 800214e:	4602      	mov	r2, r0
 8002150:	463b      	mov	r3, r7
 8002152:	4923      	ldr	r1, [pc, #140]	@ (80021e0 <main+0x1ac>)
 8002154:	4817      	ldr	r0, [pc, #92]	@ (80021b4 <main+0x180>)
 8002156:	f007 fafb 	bl	8009750 <f_write>
 800215a:	4603      	mov	r3, r0
 800215c:	461a      	mov	r2, r3
 800215e:	4b11      	ldr	r3, [pc, #68]	@ (80021a4 <main+0x170>)
 8002160:	701a      	strb	r2, [r3, #0]
			f_close(&csvFile);
 8002162:	4814      	ldr	r0, [pc, #80]	@ (80021b4 <main+0x180>)
 8002164:	f007 fce7 	bl	8009b36 <f_close>

			// Report success or failure over UART
			if (res == FR_OK) {
 8002168:	4b0e      	ldr	r3, [pc, #56]	@ (80021a4 <main+0x170>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d104      	bne.n	800217a <main+0x146>
				myprintf("Row written: %s", csv_line);
 8002170:	491b      	ldr	r1, [pc, #108]	@ (80021e0 <main+0x1ac>)
 8002172:	481c      	ldr	r0, [pc, #112]	@ (80021e4 <main+0x1b0>)
 8002174:	f7ff ff46 	bl	8002004 <myprintf>
 8002178:	e7c1      	b.n	80020fe <main+0xca>
			} else {
				myprintf("Write failed (%d)\r\n", res);
 800217a:	4b0a      	ldr	r3, [pc, #40]	@ (80021a4 <main+0x170>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	4619      	mov	r1, r3
 8002180:	4819      	ldr	r0, [pc, #100]	@ (80021e8 <main+0x1b4>)
 8002182:	f7ff ff3f 	bl	8002004 <myprintf>
 8002186:	e7ba      	b.n	80020fe <main+0xca>
			}
		} else {
			myprintf("Append open failed (%d)\r\n", res);
 8002188:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <main+0x170>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	4619      	mov	r1, r3
 800218e:	4817      	ldr	r0, [pc, #92]	@ (80021ec <main+0x1b8>)
 8002190:	f7ff ff38 	bl	8002004 <myprintf>
		data.timestamp = HAL_GetTick();
 8002194:	e7b3      	b.n	80020fe <main+0xca>
 8002196:	bf00      	nop
 8002198:	0800c9ac 	.word	0x0800c9ac
 800219c:	2000000c 	.word	0x2000000c
 80021a0:	2000035c 	.word	0x2000035c
 80021a4:	2000058c 	.word	0x2000058c
 80021a8:	0800c9b0 	.word	0x0800c9b0
 80021ac:	0800c9c8 	.word	0x0800c9c8
 80021b0:	0800c9d8 	.word	0x0800c9d8
 80021b4:	20000590 	.word	0x20000590
 80021b8:	0800c9e4 	.word	0x0800c9e4
 80021bc:	200007c0 	.word	0x200007c0
 80021c0:	0800ca38 	.word	0x0800ca38
 80021c4:	0800ca50 	.word	0x0800ca50
 80021c8:	0800ca70 	.word	0x0800ca70
 80021cc:	40005400 	.word	0x40005400
 80021d0:	20000334 	.word	0x20000334
 80021d4:	2000033c 	.word	0x2000033c
 80021d8:	20000338 	.word	0x20000338
 80021dc:	20000340 	.word	0x20000340
 80021e0:	200007c4 	.word	0x200007c4
 80021e4:	0800ca90 	.word	0x0800ca90
 80021e8:	0800caa0 	.word	0x0800caa0
 80021ec:	0800cab4 	.word	0x0800cab4

080021f0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b09a      	sub	sp, #104	@ 0x68
 80021f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80021f6:	f107 0320 	add.w	r3, r7, #32
 80021fa:	2248      	movs	r2, #72	@ 0x48
 80021fc:	2100      	movs	r1, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	f008 faa6 	bl	800a750 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002204:	f107 0308 	add.w	r3, r7, #8
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
 8002214:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002216:	4b1e      	ldr	r3, [pc, #120]	@ (8002290 <SystemClock_Config+0xa0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800221e:	4a1c      	ldr	r2, [pc, #112]	@ (8002290 <SystemClock_Config+0xa0>)
 8002220:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b1a      	ldr	r3, [pc, #104]	@ (8002290 <SystemClock_Config+0xa0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800222e:	607b      	str	r3, [r7, #4]
 8002230:	687b      	ldr	r3, [r7, #4]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002232:	2320      	movs	r3, #32
 8002234:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002236:	2301      	movs	r3, #1
 8002238:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800223a:	2300      	movs	r3, #0
 800223c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800223e:	23b0      	movs	r3, #176	@ 0xb0
 8002240:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002242:	2300      	movs	r3, #0
 8002244:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002246:	f107 0320 	add.w	r3, r7, #32
 800224a:	4618      	mov	r0, r3
 800224c:	f001 f9a0 	bl	8003590 <HAL_RCC_OscConfig>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <SystemClock_Config+0x6a>
		Error_Handler();
 8002256:	f000 f942 	bl	80024de <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 800225a:	234f      	movs	r3, #79	@ 0x4f
 800225c:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800226a:	2300      	movs	r3, #0
 800226c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002272:	f107 0308 	add.w	r3, r7, #8
 8002276:	2102      	movs	r1, #2
 8002278:	4618      	mov	r0, r3
 800227a:	f001 fd0b 	bl	8003c94 <HAL_RCC_ClockConfig>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <SystemClock_Config+0x98>
		Error_Handler();
 8002284:	f000 f92b 	bl	80024de <Error_Handler>
	}
}
 8002288:	bf00      	nop
 800228a:	3768      	adds	r7, #104	@ 0x68
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	58000400 	.word	0x58000400

08002294 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002294:	b580      	push	{r7, lr}
 8002296:	b09c      	sub	sp, #112	@ 0x70
 8002298:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN I2C1_Init 0 */

	/* USER CODE END I2C1_Init 0 */

	LL_I2C_InitTypeDef I2C_InitStruct = { 0 };
 800229a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	609a      	str	r2, [r3, #8]
 80022a6:	60da      	str	r2, [r3, #12]
 80022a8:	611a      	str	r2, [r3, #16]
 80022aa:	615a      	str	r2, [r3, #20]
 80022ac:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80022ae:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]
 80022b8:	609a      	str	r2, [r3, #8]
 80022ba:	60da      	str	r2, [r3, #12]
 80022bc:	611a      	str	r2, [r3, #16]
 80022be:	615a      	str	r2, [r3, #20]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	2238      	movs	r2, #56	@ 0x38
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f008 fa42 	bl	800a750 <memset>

	/** Initializes the peripherals clocks
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80022cc:	2340      	movs	r3, #64	@ 0x40
 80022ce:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80022d0:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80022d4:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	4618      	mov	r0, r3
 80022da:	f002 f87d 	bl	80043d8 <HAL_RCCEx_PeriphCLKConfig>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_I2C1_Init+0x54>
		Error_Handler();
 80022e4:	f000 f8fb 	bl	80024de <Error_Handler>
	}

	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80022e8:	2001      	movs	r0, #1
 80022ea:	f7ff fc87 	bl	8001bfc <LL_AHB2_GRP1_EnableClock>
	/**I2C1 GPIO Configuration
	 PA9   ------> I2C1_SCL
	 PA10   ------> I2C1_SDA
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_9 | LL_GPIO_PIN_10;
 80022ee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80022f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80022f4:	2302      	movs	r3, #2
 80022f6:	643b      	str	r3, [r7, #64]	@ 0x40
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80022f8:	2300      	movs	r3, #0
 80022fa:	647b      	str	r3, [r7, #68]	@ 0x44
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80022fc:	2301      	movs	r3, #1
 80022fe:	64bb      	str	r3, [r7, #72]	@ 0x48
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002300:	2300      	movs	r3, #0
 8002302:	64fb      	str	r3, [r7, #76]	@ 0x4c
	GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002304:	2304      	movs	r3, #4
 8002306:	653b      	str	r3, [r7, #80]	@ 0x50
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002308:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800230c:	4619      	mov	r1, r3
 800230e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002312:	f004 fc38 	bl	8006b86 <LL_GPIO_Init>

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8002316:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800231a:	f7ff fc87 	bl	8001c2c <LL_APB1_GRP1_EnableClock>

	/* USER CODE END I2C1_Init 1 */

	/** I2C Initialization
	 */
	LL_I2C_EnableAutoEndMode(I2C1);
 800231e:	4814      	ldr	r0, [pc, #80]	@ (8002370 <MX_I2C1_Init+0xdc>)
 8002320:	f7ff fce0 	bl	8001ce4 <LL_I2C_EnableAutoEndMode>
	LL_I2C_DisableOwnAddress2(I2C1);
 8002324:	4812      	ldr	r0, [pc, #72]	@ (8002370 <MX_I2C1_Init+0xdc>)
 8002326:	f7ff fcce 	bl	8001cc6 <LL_I2C_DisableOwnAddress2>
	LL_I2C_DisableGeneralCall(I2C1);
 800232a:	4811      	ldr	r0, [pc, #68]	@ (8002370 <MX_I2C1_Init+0xdc>)
 800232c:	f7ff fca5 	bl	8001c7a <LL_I2C_DisableGeneralCall>
	LL_I2C_EnableClockStretching(I2C1);
 8002330:	480f      	ldr	r0, [pc, #60]	@ (8002370 <MX_I2C1_Init+0xdc>)
 8002332:	f7ff fc93 	bl	8001c5c <LL_I2C_EnableClockStretching>
	I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002336:	2300      	movs	r3, #0
 8002338:	657b      	str	r3, [r7, #84]	@ 0x54
	I2C_InitStruct.Timing = 0x10805D88;
 800233a:	4b0e      	ldr	r3, [pc, #56]	@ (8002374 <MX_I2C1_Init+0xe0>)
 800233c:	65bb      	str	r3, [r7, #88]	@ 0x58
	I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800233e:	2300      	movs	r3, #0
 8002340:	65fb      	str	r3, [r7, #92]	@ 0x5c
	I2C_InitStruct.DigitalFilter = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	663b      	str	r3, [r7, #96]	@ 0x60
	I2C_InitStruct.OwnAddress1 = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	667b      	str	r3, [r7, #100]	@ 0x64
	I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800234a:	2300      	movs	r3, #0
 800234c:	66bb      	str	r3, [r7, #104]	@ 0x68
	I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800234e:	2300      	movs	r3, #0
 8002350:	66fb      	str	r3, [r7, #108]	@ 0x6c
	LL_I2C_Init(I2C1, &I2C_InitStruct);
 8002352:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002356:	4619      	mov	r1, r3
 8002358:	4805      	ldr	r0, [pc, #20]	@ (8002370 <MX_I2C1_Init+0xdc>)
 800235a:	f004 fd1b 	bl	8006d94 <LL_I2C_Init>
	LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 800235e:	2200      	movs	r2, #0
 8002360:	2100      	movs	r1, #0
 8002362:	4803      	ldr	r0, [pc, #12]	@ (8002370 <MX_I2C1_Init+0xdc>)
 8002364:	f7ff fc98 	bl	8001c98 <LL_I2C_SetOwnAddress2>
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002368:	bf00      	nop
 800236a:	3770      	adds	r7, #112	@ 0x70
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40005400 	.word	0x40005400
 8002374:	10805d88 	.word	0x10805d88

08002378 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 800237c:	4b24      	ldr	r3, [pc, #144]	@ (8002410 <MX_LPUART1_UART_Init+0x98>)
 800237e:	4a25      	ldr	r2, [pc, #148]	@ (8002414 <MX_LPUART1_UART_Init+0x9c>)
 8002380:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 8002382:	4b23      	ldr	r3, [pc, #140]	@ (8002410 <MX_LPUART1_UART_Init+0x98>)
 8002384:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002388:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800238a:	4b21      	ldr	r3, [pc, #132]	@ (8002410 <MX_LPUART1_UART_Init+0x98>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002390:	4b1f      	ldr	r3, [pc, #124]	@ (8002410 <MX_LPUART1_UART_Init+0x98>)
 8002392:	2200      	movs	r2, #0
 8002394:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002396:	4b1e      	ldr	r3, [pc, #120]	@ (8002410 <MX_LPUART1_UART_Init+0x98>)
 8002398:	2200      	movs	r2, #0
 800239a:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_RX;
 800239c:	4b1c      	ldr	r3, [pc, #112]	@ (8002410 <MX_LPUART1_UART_Init+0x98>)
 800239e:	2204      	movs	r2, #4
 80023a0:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002410 <MX_LPUART1_UART_Init+0x98>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023a8:	4b19      	ldr	r3, [pc, #100]	@ (8002410 <MX_LPUART1_UART_Init+0x98>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023ae:	4b18      	ldr	r3, [pc, #96]	@ (8002410 <MX_LPUART1_UART_Init+0x98>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	625a      	str	r2, [r3, #36]	@ 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit =
 80023b4:	4b16      	ldr	r3, [pc, #88]	@ (8002410 <MX_LPUART1_UART_Init+0x98>)
 80023b6:	2210      	movs	r2, #16
 80023b8:	629a      	str	r2, [r3, #40]	@ 0x28
	UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
	hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80023ba:	4b15      	ldr	r3, [pc, #84]	@ (8002410 <MX_LPUART1_UART_Init+0x98>)
 80023bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023c0:	63da      	str	r2, [r3, #60]	@ 0x3c
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80023c2:	4b13      	ldr	r3, [pc, #76]	@ (8002410 <MX_LPUART1_UART_Init+0x98>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	665a      	str	r2, [r3, #100]	@ 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 80023c8:	4811      	ldr	r0, [pc, #68]	@ (8002410 <MX_LPUART1_UART_Init+0x98>)
 80023ca:	f003 f84e 	bl	800546a <HAL_UART_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_LPUART1_UART_Init+0x60>
		Error_Handler();
 80023d4:	f000 f883 	bl	80024de <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8)
 80023d8:	2100      	movs	r1, #0
 80023da:	480d      	ldr	r0, [pc, #52]	@ (8002410 <MX_LPUART1_UART_Init+0x98>)
 80023dc:	f004 f9c6 	bl	800676c <HAL_UARTEx_SetTxFifoThreshold>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_LPUART1_UART_Init+0x72>
			!= HAL_OK) {
		Error_Handler();
 80023e6:	f000 f87a 	bl	80024de <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8)
 80023ea:	2100      	movs	r1, #0
 80023ec:	4808      	ldr	r0, [pc, #32]	@ (8002410 <MX_LPUART1_UART_Init+0x98>)
 80023ee:	f004 f9fb 	bl	80067e8 <HAL_UARTEx_SetRxFifoThreshold>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_LPUART1_UART_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 80023f8:	f000 f871 	bl	80024de <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 80023fc:	4804      	ldr	r0, [pc, #16]	@ (8002410 <MX_LPUART1_UART_Init+0x98>)
 80023fe:	f004 f97d 	bl	80066fc <HAL_UARTEx_DisableFifoMode>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_LPUART1_UART_Init+0x94>
		Error_Handler();
 8002408:	f000 f869 	bl	80024de <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}
 8002410:	2000023c 	.word	0x2000023c
 8002414:	40008000 	.word	0x40008000

08002418 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800241c:	4b1b      	ldr	r3, [pc, #108]	@ (800248c <MX_SPI1_Init+0x74>)
 800241e:	4a1c      	ldr	r2, [pc, #112]	@ (8002490 <MX_SPI1_Init+0x78>)
 8002420:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002422:	4b1a      	ldr	r3, [pc, #104]	@ (800248c <MX_SPI1_Init+0x74>)
 8002424:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002428:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800242a:	4b18      	ldr	r3, [pc, #96]	@ (800248c <MX_SPI1_Init+0x74>)
 800242c:	2200      	movs	r2, #0
 800242e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002430:	4b16      	ldr	r3, [pc, #88]	@ (800248c <MX_SPI1_Init+0x74>)
 8002432:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002436:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002438:	4b14      	ldr	r3, [pc, #80]	@ (800248c <MX_SPI1_Init+0x74>)
 800243a:	2200      	movs	r2, #0
 800243c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800243e:	4b13      	ldr	r3, [pc, #76]	@ (800248c <MX_SPI1_Init+0x74>)
 8002440:	2200      	movs	r2, #0
 8002442:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002444:	4b11      	ldr	r3, [pc, #68]	@ (800248c <MX_SPI1_Init+0x74>)
 8002446:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800244a:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800244c:	4b0f      	ldr	r3, [pc, #60]	@ (800248c <MX_SPI1_Init+0x74>)
 800244e:	2238      	movs	r2, #56	@ 0x38
 8002450:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002452:	4b0e      	ldr	r3, [pc, #56]	@ (800248c <MX_SPI1_Init+0x74>)
 8002454:	2200      	movs	r2, #0
 8002456:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002458:	4b0c      	ldr	r3, [pc, #48]	@ (800248c <MX_SPI1_Init+0x74>)
 800245a:	2200      	movs	r2, #0
 800245c:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800245e:	4b0b      	ldr	r3, [pc, #44]	@ (800248c <MX_SPI1_Init+0x74>)
 8002460:	2200      	movs	r2, #0
 8002462:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 8002464:	4b09      	ldr	r3, [pc, #36]	@ (800248c <MX_SPI1_Init+0x74>)
 8002466:	2207      	movs	r2, #7
 8002468:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800246a:	4b08      	ldr	r3, [pc, #32]	@ (800248c <MX_SPI1_Init+0x74>)
 800246c:	2200      	movs	r2, #0
 800246e:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002470:	4b06      	ldr	r3, [pc, #24]	@ (800248c <MX_SPI1_Init+0x74>)
 8002472:	2208      	movs	r2, #8
 8002474:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002476:	4805      	ldr	r0, [pc, #20]	@ (800248c <MX_SPI1_Init+0x74>)
 8002478:	f002 f8c8 	bl	800460c <HAL_SPI_Init>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_SPI1_Init+0x6e>
		Error_Handler();
 8002482:	f000 f82c 	bl	80024de <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200002d0 	.word	0x200002d0
 8002490:	40013000 	.word	0x40013000

08002494 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800249a:	1d3b      	adds	r3, r7, #4
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80024a8:	2001      	movs	r0, #1
 80024aa:	f7ff fba7 	bl	8001bfc <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80024ae:	2200      	movs	r2, #0
 80024b0:	2110      	movs	r1, #16
 80024b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024b6:	f000 fda9 	bl	800300c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024ba:	2310      	movs	r3, #16
 80024bc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024be:	2301      	movs	r3, #1
 80024c0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ca:	1d3b      	adds	r3, r7, #4
 80024cc:	4619      	mov	r1, r3
 80024ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024d2:	f000 fc3b 	bl	8002d4c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80024d6:	bf00      	nop
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024e2:	b672      	cpsid	i
}
 80024e4:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80024e6:	bf00      	nop
 80024e8:	e7fd      	b.n	80024e6 <Error_Handler+0x8>

080024ea <LL_AHB2_GRP1_EnableClock>:
{
 80024ea:	b480      	push	{r7}
 80024ec:	b085      	sub	sp, #20
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80024f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4313      	orrs	r3, r2
 8002500:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002502:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002506:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4013      	ands	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800250e:	68fb      	ldr	r3, [r7, #12]
}
 8002510:	bf00      	nop
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr

0800251a <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800251a:	b480      	push	{r7}
 800251c:	b085      	sub	sp, #20
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002522:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002526:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002528:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4313      	orrs	r3, r2
 8002530:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002532:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002536:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4013      	ands	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800253e:	68fb      	ldr	r3, [r7, #12]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr

0800254a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800254a:	b480      	push	{r7}
 800254c:	b085      	sub	sp, #20
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002552:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002556:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002558:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4313      	orrs	r3, r2
 8002560:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002566:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4013      	ands	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800256e:	68fb      	ldr	r3, [r7, #12]
}
 8002570:	bf00      	nop
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr

0800257a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr
	...

08002588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b096      	sub	sp, #88	@ 0x58
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
 800259e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025a0:	f107 030c 	add.w	r3, r7, #12
 80025a4:	2238      	movs	r2, #56	@ 0x38
 80025a6:	2100      	movs	r1, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f008 f8d1 	bl	800a750 <memset>
  if(huart->Instance==LPUART1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a1a      	ldr	r2, [pc, #104]	@ (800261c <HAL_UART_MspInit+0x94>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d12c      	bne.n	8002612 <HAL_UART_MspInit+0x8a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80025b8:	2320      	movs	r3, #32
 80025ba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80025bc:	2300      	movs	r3, #0
 80025be:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025c0:	f107 030c 	add.w	r3, r7, #12
 80025c4:	4618      	mov	r0, r3
 80025c6:	f001 ff07 	bl	80043d8 <HAL_RCCEx_PeriphCLKConfig>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025d0:	f7ff ff85 	bl	80024de <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80025d4:	2001      	movs	r0, #1
 80025d6:	f7ff ffa0 	bl	800251a <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025da:	2001      	movs	r0, #1
 80025dc:	f7ff ff85 	bl	80024ea <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025e0:	230c      	movs	r3, #12
 80025e2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e4:	2302      	movs	r3, #2
 80025e6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2300      	movs	r3, #0
 80025ee:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80025f0:	2308      	movs	r3, #8
 80025f2:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80025f8:	4619      	mov	r1, r3
 80025fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025fe:	f000 fba5 	bl	8002d4c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	2026      	movs	r0, #38	@ 0x26
 8002608:	f000 faaf 	bl	8002b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800260c:	2026      	movs	r0, #38	@ 0x26
 800260e:	f000 fac6 	bl	8002b9e <HAL_NVIC_EnableIRQ>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8002612:	bf00      	nop
 8002614:	3758      	adds	r7, #88	@ 0x58
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40008000 	.word	0x40008000

08002620 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002628:	f107 030c 	add.w	r3, r7, #12
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	60da      	str	r2, [r3, #12]
 8002636:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0f      	ldr	r2, [pc, #60]	@ (800267c <HAL_SPI_MspInit+0x5c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d118      	bne.n	8002674 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002642:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002646:	f7ff ff80 	bl	800254a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264a:	2001      	movs	r0, #1
 800264c:	f7ff ff4d 	bl	80024ea <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA11     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_11;
 8002650:	f44f 630a 	mov.w	r3, #2208	@ 0x8a0
 8002654:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	2302      	movs	r3, #2
 8002658:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002662:	2305      	movs	r3, #5
 8002664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002666:	f107 030c 	add.w	r3, r7, #12
 800266a:	4619      	mov	r1, r3
 800266c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002670:	f000 fb6c 	bl	8002d4c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002674:	bf00      	nop
 8002676:	3720      	adds	r7, #32
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40013000 	.word	0x40013000

08002680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002684:	bf00      	nop
 8002686:	e7fd      	b.n	8002684 <NMI_Handler+0x4>

08002688 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800268c:	bf00      	nop
 800268e:	e7fd      	b.n	800268c <HardFault_Handler+0x4>

08002690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002694:	bf00      	nop
 8002696:	e7fd      	b.n	8002694 <MemManage_Handler+0x4>

08002698 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800269c:	bf00      	nop
 800269e:	e7fd      	b.n	800269c <BusFault_Handler+0x4>

080026a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <UsageFault_Handler+0x4>

080026a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026c4:	bf00      	nop
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr

080026cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026d0:	f000 f958 	bl	8002984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80026dc:	4802      	ldr	r0, [pc, #8]	@ (80026e8 <LPUART1_IRQHandler+0x10>)
 80026de:	f002 ffd9 	bl	8005694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	2000023c 	.word	0x2000023c

080026ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return 1;
 80026f0:	2301      	movs	r3, #1
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr

080026fa <_kill>:

int _kill(int pid, int sig)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002704:	f008 f830 	bl	800a768 <__errno>
 8002708:	4603      	mov	r3, r0
 800270a:	2216      	movs	r2, #22
 800270c:	601a      	str	r2, [r3, #0]
  return -1;
 800270e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <_exit>:

void _exit (int status)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002722:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff ffe7 	bl	80026fa <_kill>
  while (1) {}    /* Make sure we hang here */
 800272c:	bf00      	nop
 800272e:	e7fd      	b.n	800272c <_exit+0x12>

08002730 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	e00a      	b.n	8002758 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002742:	f3af 8000 	nop.w
 8002746:	4601      	mov	r1, r0
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	1c5a      	adds	r2, r3, #1
 800274c:	60ba      	str	r2, [r7, #8]
 800274e:	b2ca      	uxtb	r2, r1
 8002750:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	3301      	adds	r3, #1
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	429a      	cmp	r2, r3
 800275e:	dbf0      	blt.n	8002742 <_read+0x12>
  }

  return len;
 8002760:	687b      	ldr	r3, [r7, #4]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b086      	sub	sp, #24
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	e009      	b.n	8002790 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	60ba      	str	r2, [r7, #8]
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	3301      	adds	r3, #1
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	429a      	cmp	r2, r3
 8002796:	dbf1      	blt.n	800277c <_write+0x12>
  }
  return len;
 8002798:	687b      	ldr	r3, [r7, #4]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <_close>:

int _close(int file)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027c8:	605a      	str	r2, [r3, #4]
  return 0;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <_isatty>:

int _isatty(int file)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027de:	2301      	movs	r3, #1
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr

080027ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b085      	sub	sp, #20
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	60f8      	str	r0, [r7, #12]
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr
	...

08002804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800280c:	4a14      	ldr	r2, [pc, #80]	@ (8002860 <_sbrk+0x5c>)
 800280e:	4b15      	ldr	r3, [pc, #84]	@ (8002864 <_sbrk+0x60>)
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002818:	4b13      	ldr	r3, [pc, #76]	@ (8002868 <_sbrk+0x64>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d102      	bne.n	8002826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002820:	4b11      	ldr	r3, [pc, #68]	@ (8002868 <_sbrk+0x64>)
 8002822:	4a12      	ldr	r2, [pc, #72]	@ (800286c <_sbrk+0x68>)
 8002824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002826:	4b10      	ldr	r3, [pc, #64]	@ (8002868 <_sbrk+0x64>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	429a      	cmp	r2, r3
 8002832:	d207      	bcs.n	8002844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002834:	f007 ff98 	bl	800a768 <__errno>
 8002838:	4603      	mov	r3, r0
 800283a:	220c      	movs	r2, #12
 800283c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800283e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002842:	e009      	b.n	8002858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002844:	4b08      	ldr	r3, [pc, #32]	@ (8002868 <_sbrk+0x64>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800284a:	4b07      	ldr	r3, [pc, #28]	@ (8002868 <_sbrk+0x64>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	4a05      	ldr	r2, [pc, #20]	@ (8002868 <_sbrk+0x64>)
 8002854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002856:	68fb      	ldr	r3, [r7, #12]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20010000 	.word	0x20010000
 8002864:	00000400 	.word	0x00000400
 8002868:	200009c4 	.word	0x200009c4
 800286c:	20000b60 	.word	0x20000b60

08002870 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800287c:	480d      	ldr	r0, [pc, #52]	@ (80028b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800287e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002880:	f7ff fff6 	bl	8002870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002884:	480c      	ldr	r0, [pc, #48]	@ (80028b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002886:	490d      	ldr	r1, [pc, #52]	@ (80028bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002888:	4a0d      	ldr	r2, [pc, #52]	@ (80028c0 <LoopForever+0xe>)
  movs r3, #0
 800288a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800288c:	e002      	b.n	8002894 <LoopCopyDataInit>

0800288e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800288e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002892:	3304      	adds	r3, #4

08002894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002898:	d3f9      	bcc.n	800288e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800289a:	4a0a      	ldr	r2, [pc, #40]	@ (80028c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800289c:	4c0a      	ldr	r4, [pc, #40]	@ (80028c8 <LoopForever+0x16>)
  movs r3, #0
 800289e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028a0:	e001      	b.n	80028a6 <LoopFillZerobss>

080028a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028a4:	3204      	adds	r2, #4

080028a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028a8:	d3fb      	bcc.n	80028a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80028aa:	f007 ff63 	bl	800a774 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028ae:	f7ff fbc1 	bl	8002034 <main>

080028b2 <LoopForever>:

LoopForever:
    b LoopForever
 80028b2:	e7fe      	b.n	80028b2 <LoopForever>
  ldr   r0, =_estack
 80028b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80028b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028bc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80028c0:	0800d018 	.word	0x0800d018
  ldr r2, =_sbss
 80028c4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80028c8:	20000b5c 	.word	0x20000b5c

080028cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028cc:	e7fe      	b.n	80028cc <ADC_IRQHandler>
	...

080028d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028da:	2003      	movs	r0, #3
 80028dc:	f000 f93a 	bl	8002b54 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80028e0:	f001 fb9c 	bl	800401c <HAL_RCC_GetHCLKFreq>
 80028e4:	4603      	mov	r3, r0
 80028e6:	4a09      	ldr	r2, [pc, #36]	@ (800290c <HAL_Init+0x3c>)
 80028e8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028ea:	200f      	movs	r0, #15
 80028ec:	f000 f810 	bl	8002910 <HAL_InitTick>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	71fb      	strb	r3, [r7, #7]
 80028fa:	e001      	b.n	8002900 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028fc:	f7ff fe3d 	bl	800257a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002900:	79fb      	ldrb	r3, [r7, #7]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000000 	.word	0x20000000

08002910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800291c:	4b17      	ldr	r3, [pc, #92]	@ (800297c <HAL_InitTick+0x6c>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d024      	beq.n	800296e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002924:	f001 fb7a 	bl	800401c <HAL_RCC_GetHCLKFreq>
 8002928:	4602      	mov	r2, r0
 800292a:	4b14      	ldr	r3, [pc, #80]	@ (800297c <HAL_InitTick+0x6c>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	4619      	mov	r1, r3
 8002930:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002934:	fbb3 f3f1 	udiv	r3, r3, r1
 8002938:	fbb2 f3f3 	udiv	r3, r2, r3
 800293c:	4618      	mov	r0, r3
 800293e:	f000 f93c 	bl	8002bba <HAL_SYSTICK_Config>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10f      	bne.n	8002968 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b0f      	cmp	r3, #15
 800294c:	d809      	bhi.n	8002962 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800294e:	2200      	movs	r2, #0
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002956:	f000 f908 	bl	8002b6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800295a:	4a09      	ldr	r2, [pc, #36]	@ (8002980 <HAL_InitTick+0x70>)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	e007      	b.n	8002972 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
 8002966:	e004      	b.n	8002972 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
 800296c:	e001      	b.n	8002972 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002972:	7bfb      	ldrb	r3, [r7, #15]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	20000008 	.word	0x20000008
 8002980:	20000004 	.word	0x20000004

08002984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002988:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <HAL_IncTick+0x1c>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <HAL_IncTick+0x20>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4413      	add	r3, r2
 8002994:	4a03      	ldr	r2, [pc, #12]	@ (80029a4 <HAL_IncTick+0x20>)
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	20000008 	.word	0x20000008
 80029a4:	200009c8 	.word	0x200009c8

080029a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return uwTick;
 80029ac:	4b02      	ldr	r3, [pc, #8]	@ (80029b8 <HAL_GetTick+0x10>)
 80029ae:	681b      	ldr	r3, [r3, #0]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr
 80029b8:	200009c8 	.word	0x200009c8

080029bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002a00 <__NVIC_SetPriorityGrouping+0x44>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029d8:	4013      	ands	r3, r2
 80029da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ee:	4a04      	ldr	r2, [pc, #16]	@ (8002a00 <__NVIC_SetPriorityGrouping+0x44>)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	60d3      	str	r3, [r2, #12]
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	e000ed00 	.word	0xe000ed00

08002a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a08:	4b04      	ldr	r3, [pc, #16]	@ (8002a1c <__NVIC_GetPriorityGrouping+0x18>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	0a1b      	lsrs	r3, r3, #8
 8002a0e:	f003 0307 	and.w	r3, r3, #7
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	db0b      	blt.n	8002a4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	f003 021f 	and.w	r2, r3, #31
 8002a38:	4906      	ldr	r1, [pc, #24]	@ (8002a54 <__NVIC_EnableIRQ+0x34>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	2001      	movs	r0, #1
 8002a42:	fa00 f202 	lsl.w	r2, r0, r2
 8002a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	e000e100 	.word	0xe000e100

08002a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	6039      	str	r1, [r7, #0]
 8002a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	db0a      	blt.n	8002a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	490c      	ldr	r1, [pc, #48]	@ (8002aa4 <__NVIC_SetPriority+0x4c>)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	0112      	lsls	r2, r2, #4
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a80:	e00a      	b.n	8002a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	4908      	ldr	r1, [pc, #32]	@ (8002aa8 <__NVIC_SetPriority+0x50>)
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	3b04      	subs	r3, #4
 8002a90:	0112      	lsls	r2, r2, #4
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	440b      	add	r3, r1
 8002a96:	761a      	strb	r2, [r3, #24]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	e000e100 	.word	0xe000e100
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b089      	sub	sp, #36	@ 0x24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f1c3 0307 	rsb	r3, r3, #7
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	bf28      	it	cs
 8002aca:	2304      	movcs	r3, #4
 8002acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	2b06      	cmp	r3, #6
 8002ad4:	d902      	bls.n	8002adc <NVIC_EncodePriority+0x30>
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3b03      	subs	r3, #3
 8002ada:	e000      	b.n	8002ade <NVIC_EncodePriority+0x32>
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43da      	mvns	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	401a      	ands	r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	fa01 f303 	lsl.w	r3, r1, r3
 8002afe:	43d9      	mvns	r1, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	4313      	orrs	r3, r2
         );
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3724      	adds	r7, #36	@ 0x24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr

08002b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b20:	d301      	bcc.n	8002b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b22:	2301      	movs	r3, #1
 8002b24:	e00f      	b.n	8002b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b26:	4a0a      	ldr	r2, [pc, #40]	@ (8002b50 <SysTick_Config+0x40>)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b2e:	210f      	movs	r1, #15
 8002b30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b34:	f7ff ff90 	bl	8002a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b38:	4b05      	ldr	r3, [pc, #20]	@ (8002b50 <SysTick_Config+0x40>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b3e:	4b04      	ldr	r3, [pc, #16]	@ (8002b50 <SysTick_Config+0x40>)
 8002b40:	2207      	movs	r2, #7
 8002b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	e000e010 	.word	0xe000e010

08002b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ff2d 	bl	80029bc <__NVIC_SetPriorityGrouping>
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b086      	sub	sp, #24
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	4603      	mov	r3, r0
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
 8002b76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b78:	f7ff ff44 	bl	8002a04 <__NVIC_GetPriorityGrouping>
 8002b7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	6978      	ldr	r0, [r7, #20]
 8002b84:	f7ff ff92 	bl	8002aac <NVIC_EncodePriority>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff ff61 	bl	8002a58 <__NVIC_SetPriority>
}
 8002b96:	bf00      	nop
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff37 	bl	8002a20 <__NVIC_EnableIRQ>
}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7ff ffa4 	bl	8002b10 <SysTick_Config>
 8002bc8:	4603      	mov	r3, r0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e04f      	b.n	8002c84 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d008      	beq.n	8002c02 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2204      	movs	r2, #4
 8002bf4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e040      	b.n	8002c84 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 020e 	bic.w	r2, r2, #14
 8002c10:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0201 	bic.w	r2, r2, #1
 8002c30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c36:	f003 021c 	and.w	r2, r3, #28
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3e:	2101      	movs	r1, #1
 8002c40:	fa01 f202 	lsl.w	r2, r1, r2
 8002c44:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c4e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00c      	beq.n	8002c72 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c62:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002c70:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr

08002c8e <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d005      	beq.n	8002cb2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2204      	movs	r2, #4
 8002caa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	73fb      	strb	r3, [r7, #15]
 8002cb0:	e047      	b.n	8002d42 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 020e 	bic.w	r2, r2, #14
 8002cc0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0201 	bic.w	r2, r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cdc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ce0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce6:	f003 021c 	and.w	r2, r3, #28
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cee:	2101      	movs	r1, #1
 8002cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002cfe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00c      	beq.n	8002d22 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d12:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d16:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d20:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	4798      	blx	r3
    }
  }
  return status;
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d5a:	e140      	b.n	8002fde <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	2101      	movs	r1, #1
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	fa01 f303 	lsl.w	r3, r1, r3
 8002d68:	4013      	ands	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 8132 	beq.w	8002fd8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d005      	beq.n	8002d8c <HAL_GPIO_Init+0x40>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d130      	bne.n	8002dee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	2203      	movs	r2, #3
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	091b      	lsrs	r3, r3, #4
 8002dd8:	f003 0201 	and.w	r2, r3, #1
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	2b03      	cmp	r3, #3
 8002df8:	d017      	beq.n	8002e2a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	2203      	movs	r2, #3
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d123      	bne.n	8002e7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	08da      	lsrs	r2, r3, #3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3208      	adds	r2, #8
 8002e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	220f      	movs	r2, #15
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43db      	mvns	r3, r3
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4013      	ands	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	08da      	lsrs	r2, r3, #3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3208      	adds	r2, #8
 8002e78:	6939      	ldr	r1, [r7, #16]
 8002e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	2203      	movs	r2, #3
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4013      	ands	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 0203 	and.w	r2, r3, #3
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 808c 	beq.w	8002fd8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002ec0:	4a4e      	ldr	r2, [pc, #312]	@ (8002ffc <HAL_GPIO_Init+0x2b0>)
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	089b      	lsrs	r3, r3, #2
 8002ec6:	3302      	adds	r3, #2
 8002ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	2207      	movs	r2, #7
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002eea:	d00d      	beq.n	8002f08 <HAL_GPIO_Init+0x1bc>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a44      	ldr	r2, [pc, #272]	@ (8003000 <HAL_GPIO_Init+0x2b4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d007      	beq.n	8002f04 <HAL_GPIO_Init+0x1b8>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a43      	ldr	r2, [pc, #268]	@ (8003004 <HAL_GPIO_Init+0x2b8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d101      	bne.n	8002f00 <HAL_GPIO_Init+0x1b4>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e004      	b.n	8002f0a <HAL_GPIO_Init+0x1be>
 8002f00:	2307      	movs	r3, #7
 8002f02:	e002      	b.n	8002f0a <HAL_GPIO_Init+0x1be>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <HAL_GPIO_Init+0x1be>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	f002 0203 	and.w	r2, r2, #3
 8002f10:	0092      	lsls	r2, r2, #2
 8002f12:	4093      	lsls	r3, r2
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f1a:	4938      	ldr	r1, [pc, #224]	@ (8002ffc <HAL_GPIO_Init+0x2b0>)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	089b      	lsrs	r3, r3, #2
 8002f20:	3302      	adds	r3, #2
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f28:	4b37      	ldr	r3, [pc, #220]	@ (8003008 <HAL_GPIO_Init+0x2bc>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4013      	ands	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f4c:	4a2e      	ldr	r2, [pc, #184]	@ (8003008 <HAL_GPIO_Init+0x2bc>)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002f52:	4b2d      	ldr	r3, [pc, #180]	@ (8003008 <HAL_GPIO_Init+0x2bc>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f76:	4a24      	ldr	r2, [pc, #144]	@ (8003008 <HAL_GPIO_Init+0x2bc>)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002f7c:	4b22      	ldr	r3, [pc, #136]	@ (8003008 <HAL_GPIO_Init+0x2bc>)
 8002f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f82:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	43db      	mvns	r3, r3
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002fa2:	4a19      	ldr	r2, [pc, #100]	@ (8003008 <HAL_GPIO_Init+0x2bc>)
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002faa:	4b17      	ldr	r3, [pc, #92]	@ (8003008 <HAL_GPIO_Init+0x2bc>)
 8002fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fb0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8003008 <HAL_GPIO_Init+0x2bc>)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f47f aeb7 	bne.w	8002d5c <HAL_GPIO_Init+0x10>
  }
}
 8002fee:	bf00      	nop
 8002ff0:	bf00      	nop
 8002ff2:	371c      	adds	r7, #28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40010000 	.word	0x40010000
 8003000:	48000400 	.word	0x48000400
 8003004:	48000800 	.word	0x48000800
 8003008:	58000800 	.word	0x58000800

0800300c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	807b      	strh	r3, [r7, #2]
 8003018:	4613      	mov	r3, r2
 800301a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800301c:	787b      	ldrb	r3, [r7, #1]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003022:	887a      	ldrh	r2, [r7, #2]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003028:	e002      	b.n	8003030 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800302a:	887a      	ldrh	r2, [r7, #2]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr
	...

0800303c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003040:	4b04      	ldr	r3, [pc, #16]	@ (8003054 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a03      	ldr	r2, [pc, #12]	@ (8003054 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800304a:	6013      	str	r3, [r2, #0]
}
 800304c:	bf00      	nop
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr
 8003054:	58000400 	.word	0x58000400

08003058 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800305c:	4b03      	ldr	r3, [pc, #12]	@ (800306c <HAL_PWREx_GetVoltageRange+0x14>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr
 800306c:	58000400 	.word	0x58000400

08003070 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003074:	4b06      	ldr	r3, [pc, #24]	@ (8003090 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800307c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003080:	d101      	bne.n	8003086 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8003082:	2301      	movs	r3, #1
 8003084:	e000      	b.n	8003088 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr
 8003090:	58000400 	.word	0x58000400

08003094 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80030a6:	6013      	str	r3, [r2, #0]
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr

080030b0 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80030b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80030c2:	6013      	str	r3, [r2, #0]
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80030d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030de:	d101      	bne.n	80030e4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc80      	pop	{r7}
 80030ec:	4770      	bx	lr

080030ee <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80030ee:	b480      	push	{r7}
 80030f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80030f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003100:	6013      	str	r3, [r2, #0]
}
 8003102:	bf00      	nop
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr

0800310a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800310a:	b480      	push	{r7}
 800310c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800310e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003118:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800311c:	6013      	str	r3, [r2, #0]
}
 800311e:	bf00      	nop
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr

08003126 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003126:	b480      	push	{r7}
 8003128:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800312a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003134:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003138:	d101      	bne.n	800313e <LL_RCC_HSE_IsReady+0x18>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <LL_RCC_HSE_IsReady+0x1a>
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr

08003148 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800314c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003156:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800315a:	6013      	str	r3, [r2, #0]
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr

08003164 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003172:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003176:	6013      	str	r3, [r2, #0]
}
 8003178:	bf00      	nop
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr

08003180 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003192:	d101      	bne.n	8003198 <LL_RCC_HSI_IsReady+0x18>
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <LL_RCC_HSI_IsReady+0x1a>
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr

080031a2 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80031aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	061b      	lsls	r3, r3, #24
 80031b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031bc:	4313      	orrs	r3, r2
 80031be:	604b      	str	r3, [r1, #4]
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr

080031ca <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80031ca:	b480      	push	{r7}
 80031cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80031ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d101      	bne.n	80031e2 <LL_RCC_LSE_IsReady+0x18>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <LL_RCC_LSE_IsReady+0x1a>
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80031f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003214:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003218:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003224:	bf00      	nop
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8003230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003234:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b02      	cmp	r3, #2
 800323e:	d101      	bne.n	8003244 <LL_RCC_LSI_IsReady+0x18>
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <LL_RCC_LSI_IsReady+0x1a>
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr

0800324e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800324e:	b480      	push	{r7}
 8003250:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003252:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	6013      	str	r3, [r2, #0]
}
 8003262:	bf00      	nop
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr

0800326a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800326a:	b480      	push	{r7}
 800326c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800326e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003278:	f023 0301 	bic.w	r3, r3, #1
 800327c:	6013      	str	r3, [r2, #0]
}
 800327e:	bf00      	nop
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr

08003286 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003286:	b480      	push	{r7}
 8003288:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800328a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b02      	cmp	r3, #2
 8003296:	d101      	bne.n	800329c <LL_RCC_MSI_IsReady+0x16>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <LL_RCC_MSI_IsReady+0x18>
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr

080032a6 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80032a6:	b480      	push	{r7}
 80032a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80032aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d101      	bne.n	80032bc <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80032b8:	2301      	movs	r3, #1
 80032ba:	e000      	b.n	80032be <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr

080032c6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80032c6:	b480      	push	{r7}
 80032c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80032ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr

080032dc <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80032e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032e8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr

080032f4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80032fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	021b      	lsls	r3, r3, #8
 800330a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800330e:	4313      	orrs	r3, r2
 8003310:	604b      	str	r3, [r1, #4]
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr

0800331c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003324:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f023 0203 	bic.w	r2, r3, #3
 800332e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4313      	orrs	r3, r2
 8003336:	608b      	str	r3, [r1, #8]
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr

08003342 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003342:	b480      	push	{r7}
 8003344:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003346:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 030c 	and.w	r3, r3, #12
}
 8003350:	4618      	mov	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003360:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800336a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4313      	orrs	r3, r2
 8003372:	608b      	str	r3, [r1, #8]
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr

0800337e <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003386:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800338a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800338e:	f023 020f 	bic.w	r2, r3, #15
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr

080033aa <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80033b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	608b      	str	r3, [r1, #8]
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr

080033d0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80033d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	608b      	str	r3, [r1, #8]
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr

080033f6 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80033f6:	b480      	push	{r7}
 80033f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80033fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003414:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800341e:	4618      	mov	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr

08003426 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003426:	b480      	push	{r7}
 8003428:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800342a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8003434:	4618      	mov	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003440:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800344a:	4618      	mov	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr

08003452 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003452:	b480      	push	{r7}
 8003454:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003456:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003460:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003464:	6013      	str	r3, [r2, #0]
}
 8003466:	bf00      	nop
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr

0800346e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800346e:	b480      	push	{r7}
 8003470:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003472:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800347c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003480:	6013      	str	r3, [r2, #0]
}
 8003482:	bf00      	nop
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr

0800348a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800348a:	b480      	push	{r7}
 800348c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800348e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003498:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800349c:	d101      	bne.n	80034a2 <LL_RCC_PLL_IsReady+0x18>
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <LL_RCC_PLL_IsReady+0x1a>
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80034b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	0a1b      	lsrs	r3, r3, #8
 80034b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80034bc:	4618      	mov	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr

080034c4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80034c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr

080034da <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80034da:	b480      	push	{r7}
 80034dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80034de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80034f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f003 0303 	and.w	r3, r3, #3
}
 80034fe:	4618      	mov	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr

08003506 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003506:	b480      	push	{r7}
 8003508:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800350a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003518:	d101      	bne.n	800351e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800352c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003530:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003534:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800353c:	d101      	bne.n	8003542 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800355e:	d101      	bne.n	8003564 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr

0800356e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800356e:	b480      	push	{r7}
 8003570:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003572:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800357c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003580:	d101      	bne.n	8003586 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr

08003590 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e36f      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035a2:	f7ff fece 	bl	8003342 <LL_RCC_GetSysClkSource>
 80035a6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035a8:	f7ff ffa2 	bl	80034f0 <LL_RCC_PLL_GetMainSource>
 80035ac:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 80c4 	beq.w	8003744 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <HAL_RCC_OscConfig+0x3e>
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	2b0c      	cmp	r3, #12
 80035c6:	d176      	bne.n	80036b6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d173      	bne.n	80036b6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e353      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <HAL_RCC_OscConfig+0x68>
 80035ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035f6:	e006      	b.n	8003606 <HAL_RCC_OscConfig+0x76>
 80035f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003606:	4293      	cmp	r3, r2
 8003608:	d222      	bcs.n	8003650 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fd3c 	bl	800408c <RCC_SetFlashLatencyFromMSIRange>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e331      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800361e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003628:	f043 0308 	orr.w	r3, r3, #8
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003640:	4313      	orrs	r3, r2
 8003642:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff fe53 	bl	80032f4 <LL_RCC_MSI_SetCalibTrimming>
 800364e:	e021      	b.n	8003694 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003650:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800365a:	f043 0308 	orr.w	r3, r3, #8
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff fe3a 	bl	80032f4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fd01 	bl	800408c <RCC_SetFlashLatencyFromMSIRange>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e2f6      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003694:	f000 fcc2 	bl	800401c <HAL_RCC_GetHCLKFreq>
 8003698:	4603      	mov	r3, r0
 800369a:	4aa7      	ldr	r2, [pc, #668]	@ (8003938 <HAL_RCC_OscConfig+0x3a8>)
 800369c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800369e:	4ba7      	ldr	r3, [pc, #668]	@ (800393c <HAL_RCC_OscConfig+0x3ac>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff f934 	bl	8002910 <HAL_InitTick>
 80036a8:	4603      	mov	r3, r0
 80036aa:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80036ac:	7cfb      	ldrb	r3, [r7, #19]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d047      	beq.n	8003742 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80036b2:	7cfb      	ldrb	r3, [r7, #19]
 80036b4:	e2e5      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d02c      	beq.n	8003718 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036be:	f7ff fdc6 	bl	800324e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036c2:	f7ff f971 	bl	80029a8 <HAL_GetTick>
 80036c6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036ca:	f7ff f96d 	bl	80029a8 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e2d2      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80036dc:	f7ff fdd3 	bl	8003286 <LL_RCC_MSI_IsReady>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f1      	beq.n	80036ca <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036f0:	f043 0308 	orr.w	r3, r3, #8
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003704:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003708:	4313      	orrs	r3, r2
 800370a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff fdef 	bl	80032f4 <LL_RCC_MSI_SetCalibTrimming>
 8003716:	e015      	b.n	8003744 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003718:	f7ff fda7 	bl	800326a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800371c:	f7ff f944 	bl	80029a8 <HAL_GetTick>
 8003720:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003724:	f7ff f940 	bl	80029a8 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e2a5      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003736:	f7ff fda6 	bl	8003286 <LL_RCC_MSI_IsReady>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1f1      	bne.n	8003724 <HAL_RCC_OscConfig+0x194>
 8003740:	e000      	b.n	8003744 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003742:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	d058      	beq.n	8003802 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	2b08      	cmp	r3, #8
 8003754:	d005      	beq.n	8003762 <HAL_RCC_OscConfig+0x1d2>
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	2b0c      	cmp	r3, #12
 800375a:	d108      	bne.n	800376e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	2b03      	cmp	r3, #3
 8003760:	d105      	bne.n	800376e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d14b      	bne.n	8003802 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e289      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800376e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003780:	4313      	orrs	r3, r2
 8003782:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800378c:	d102      	bne.n	8003794 <HAL_RCC_OscConfig+0x204>
 800378e:	f7ff fcae 	bl	80030ee <LL_RCC_HSE_Enable>
 8003792:	e00d      	b.n	80037b0 <HAL_RCC_OscConfig+0x220>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 800379c:	d104      	bne.n	80037a8 <HAL_RCC_OscConfig+0x218>
 800379e:	f7ff fc79 	bl	8003094 <LL_RCC_HSE_EnableTcxo>
 80037a2:	f7ff fca4 	bl	80030ee <LL_RCC_HSE_Enable>
 80037a6:	e003      	b.n	80037b0 <HAL_RCC_OscConfig+0x220>
 80037a8:	f7ff fcaf 	bl	800310a <LL_RCC_HSE_Disable>
 80037ac:	f7ff fc80 	bl	80030b0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d012      	beq.n	80037de <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b8:	f7ff f8f6 	bl	80029a8 <HAL_GetTick>
 80037bc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c0:	f7ff f8f2 	bl	80029a8 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b64      	cmp	r3, #100	@ 0x64
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e257      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80037d2:	f7ff fca8 	bl	8003126 <LL_RCC_HSE_IsReady>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f1      	beq.n	80037c0 <HAL_RCC_OscConfig+0x230>
 80037dc:	e011      	b.n	8003802 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7ff f8e3 	bl	80029a8 <HAL_GetTick>
 80037e2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e6:	f7ff f8df 	bl	80029a8 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b64      	cmp	r3, #100	@ 0x64
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e244      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80037f8:	f7ff fc95 	bl	8003126 <LL_RCC_HSE_IsReady>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f1      	bne.n	80037e6 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d046      	beq.n	800389c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	2b04      	cmp	r3, #4
 8003812:	d005      	beq.n	8003820 <HAL_RCC_OscConfig+0x290>
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	2b0c      	cmp	r3, #12
 8003818:	d10e      	bne.n	8003838 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d10b      	bne.n	8003838 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e22a      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff fcb6 	bl	80031a2 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003836:	e031      	b.n	800389c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d019      	beq.n	8003874 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003840:	f7ff fc82 	bl	8003148 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003844:	f7ff f8b0 	bl	80029a8 <HAL_GetTick>
 8003848:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800384c:	f7ff f8ac 	bl	80029a8 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e211      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800385e:	f7ff fc8f 	bl	8003180 <LL_RCC_HSI_IsReady>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0f1      	beq.n	800384c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff fc98 	bl	80031a2 <LL_RCC_HSI_SetCalibTrimming>
 8003872:	e013      	b.n	800389c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003874:	f7ff fc76 	bl	8003164 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003878:	f7ff f896 	bl	80029a8 <HAL_GetTick>
 800387c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003880:	f7ff f892 	bl	80029a8 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e1f7      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003892:	f7ff fc75 	bl	8003180 <LL_RCC_HSI_IsReady>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1f1      	bne.n	8003880 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d06e      	beq.n	8003986 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d056      	beq.n	800395e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80038b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038b8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69da      	ldr	r2, [r3, #28]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f003 0310 	and.w	r3, r3, #16
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d031      	beq.n	800392c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d006      	beq.n	80038e0 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e1d0      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d013      	beq.n	8003912 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80038ea:	f7ff fc8f 	bl	800320c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038ee:	f7ff f85b 	bl	80029a8 <HAL_GetTick>
 80038f2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f6:	f7ff f857 	bl	80029a8 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b11      	cmp	r3, #17
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e1bc      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003908:	f7ff fc90 	bl	800322c <LL_RCC_LSI_IsReady>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f1      	bne.n	80038f6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8003912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003916:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800391a:	f023 0210 	bic.w	r2, r3, #16
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800392c:	f7ff fc5e 	bl	80031ec <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003930:	f7ff f83a 	bl	80029a8 <HAL_GetTick>
 8003934:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003936:	e00c      	b.n	8003952 <HAL_RCC_OscConfig+0x3c2>
 8003938:	20000000 	.word	0x20000000
 800393c:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003940:	f7ff f832 	bl	80029a8 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b11      	cmp	r3, #17
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e197      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8003952:	f7ff fc6b 	bl	800322c <LL_RCC_LSI_IsReady>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0f1      	beq.n	8003940 <HAL_RCC_OscConfig+0x3b0>
 800395c:	e013      	b.n	8003986 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800395e:	f7ff fc55 	bl	800320c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003962:	f7ff f821 	bl	80029a8 <HAL_GetTick>
 8003966:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003968:	e008      	b.n	800397c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800396a:	f7ff f81d 	bl	80029a8 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b11      	cmp	r3, #17
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e182      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800397c:	f7ff fc56 	bl	800322c <LL_RCC_LSI_IsReady>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f1      	bne.n	800396a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 80d8 	beq.w	8003b44 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003994:	f7ff fb6c 	bl	8003070 <LL_PWR_IsEnabledBkUpAccess>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d113      	bne.n	80039c6 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800399e:	f7ff fb4d 	bl	800303c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a2:	f7ff f801 	bl	80029a8 <HAL_GetTick>
 80039a6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039aa:	f7fe fffd 	bl	80029a8 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e162      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80039bc:	f7ff fb58 	bl	8003070 <LL_PWR_IsEnabledBkUpAccess>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f1      	beq.n	80039aa <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d07b      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	2b85      	cmp	r3, #133	@ 0x85
 80039d4:	d003      	beq.n	80039de <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	2b05      	cmp	r3, #5
 80039dc:	d109      	bne.n	80039f2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80039de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039ea:	f043 0304 	orr.w	r3, r3, #4
 80039ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f2:	f7fe ffd9 	bl	80029a8 <HAL_GetTick>
 80039f6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80039f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003a0c:	e00a      	b.n	8003a24 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0e:	f7fe ffcb 	bl	80029a8 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e12e      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003a24:	f7ff fbd1 	bl	80031ca <LL_RCC_LSE_IsReady>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0ef      	beq.n	8003a0e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	2b81      	cmp	r3, #129	@ 0x81
 8003a34:	d003      	beq.n	8003a3e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	2b85      	cmp	r3, #133	@ 0x85
 8003a3c:	d121      	bne.n	8003a82 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3e:	f7fe ffb3 	bl	80029a8 <HAL_GetTick>
 8003a42:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003a44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003a58:	e00a      	b.n	8003a70 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5a:	f7fe ffa5 	bl	80029a8 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e108      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003a70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0ec      	beq.n	8003a5a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003a80:	e060      	b.n	8003b44 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a82:	f7fe ff91 	bl	80029a8 <HAL_GetTick>
 8003a86:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003a88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a9c:	e00a      	b.n	8003ab4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9e:	f7fe ff83 	bl	80029a8 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e0e6      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ab4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003abc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1ec      	bne.n	8003a9e <HAL_RCC_OscConfig+0x50e>
 8003ac4:	e03e      	b.n	8003b44 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac6:	f7fe ff6f 	bl	80029a8 <HAL_GetTick>
 8003aca:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003acc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ad8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003adc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ae0:	e00a      	b.n	8003af8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae2:	f7fe ff61 	bl	80029a8 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e0c4      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1ec      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b08:	f7fe ff4e 	bl	80029a8 <HAL_GetTick>
 8003b0c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003b22:	e00a      	b.n	8003b3a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b24:	f7fe ff40 	bl	80029a8 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e0a3      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003b3a:	f7ff fb46 	bl	80031ca <LL_RCC_LSE_IsReady>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1ef      	bne.n	8003b24 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 8099 	beq.w	8003c80 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	2b0c      	cmp	r3, #12
 8003b52:	d06c      	beq.n	8003c2e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d14b      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5c:	f7ff fc87 	bl	800346e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b60:	f7fe ff22 	bl	80029a8 <HAL_GetTick>
 8003b64:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b68:	f7fe ff1e 	bl	80029a8 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b0a      	cmp	r3, #10
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e083      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003b7a:	f7ff fc86 	bl	800348a <LL_RCC_PLL_IsReady>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1f1      	bne.n	8003b68 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	4b40      	ldr	r3, [pc, #256]	@ (8003c8c <HAL_RCC_OscConfig+0x6fc>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b96:	4311      	orrs	r1, r2
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b9c:	0212      	lsls	r2, r2, #8
 8003b9e:	4311      	orrs	r1, r2
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ba4:	4311      	orrs	r1, r2
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003baa:	4311      	orrs	r1, r2
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bba:	f7ff fc4a 	bl	8003452 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bcc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bce:	f7fe feeb 	bl	80029a8 <HAL_GetTick>
 8003bd2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd6:	f7fe fee7 	bl	80029a8 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b0a      	cmp	r3, #10
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e04c      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003be8:	f7ff fc4f 	bl	800348a <LL_RCC_PLL_IsReady>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f1      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x646>
 8003bf2:	e045      	b.n	8003c80 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf4:	f7ff fc3b 	bl	800346e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf8:	f7fe fed6 	bl	80029a8 <HAL_GetTick>
 8003bfc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c00:	f7fe fed2 	bl	80029a8 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b0a      	cmp	r3, #10
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e037      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003c12:	f7ff fc3a 	bl	800348a <LL_RCC_PLL_IsReady>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1f1      	bne.n	8003c00 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c26:	4b1a      	ldr	r3, [pc, #104]	@ (8003c90 <HAL_RCC_OscConfig+0x700>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	60cb      	str	r3, [r1, #12]
 8003c2c:	e028      	b.n	8003c80 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e023      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	f003 0203 	and.w	r2, r3, #3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d115      	bne.n	8003c7c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d10e      	bne.n	8003c7c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c68:	021b      	lsls	r3, r3, #8
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d106      	bne.n	8003c7c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d001      	beq.n	8003c80 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3720      	adds	r7, #32
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	11c1808c 	.word	0x11c1808c
 8003c90:	eefefffc 	.word	0xeefefffc

08003c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e10f      	b.n	8003ec8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca8:	4b89      	ldr	r3, [pc, #548]	@ (8003ed0 <HAL_RCC_ClockConfig+0x23c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d91b      	bls.n	8003cee <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb6:	4b86      	ldr	r3, [pc, #536]	@ (8003ed0 <HAL_RCC_ClockConfig+0x23c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f023 0207 	bic.w	r2, r3, #7
 8003cbe:	4984      	ldr	r1, [pc, #528]	@ (8003ed0 <HAL_RCC_ClockConfig+0x23c>)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cc6:	f7fe fe6f 	bl	80029a8 <HAL_GetTick>
 8003cca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003cce:	f7fe fe6b 	bl	80029a8 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e0f3      	b.n	8003ec8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce0:	4b7b      	ldr	r3, [pc, #492]	@ (8003ed0 <HAL_RCC_ClockConfig+0x23c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d1ef      	bne.n	8003cce <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d016      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff fb2a 	bl	8003358 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003d04:	f7fe fe50 	bl	80029a8 <HAL_GetTick>
 8003d08:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d0c:	f7fe fe4c 	bl	80029a8 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e0d4      	b.n	8003ec8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003d1e:	f7ff fbf2 	bl	8003506 <LL_RCC_IsActiveFlag_HPRE>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f1      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d016      	beq.n	8003d62 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff fb20 	bl	800337e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003d3e:	f7fe fe33 	bl	80029a8 <HAL_GetTick>
 8003d42:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d46:	f7fe fe2f 	bl	80029a8 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e0b7      	b.n	8003ec8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003d58:	f7ff fbe6 	bl	8003528 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f1      	beq.n	8003d46 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d016      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fb19 	bl	80033aa <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003d78:	f7fe fe16 	bl	80029a8 <HAL_GetTick>
 8003d7c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d80:	f7fe fe12 	bl	80029a8 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e09a      	b.n	8003ec8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003d92:	f7ff fbdb 	bl	800354c <LL_RCC_IsActiveFlag_PPRE1>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0f1      	beq.n	8003d80 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d017      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fb0e 	bl	80033d0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003db4:	f7fe fdf8 	bl	80029a8 <HAL_GetTick>
 8003db8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003dbc:	f7fe fdf4 	bl	80029a8 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e07c      	b.n	8003ec8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003dce:	f7ff fbce 	bl	800356e <LL_RCC_IsActiveFlag_PPRE2>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0f1      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d043      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d106      	bne.n	8003dfa <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003dec:	f7ff f99b 	bl	8003126 <LL_RCC_HSE_IsReady>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d11e      	bne.n	8003e34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e066      	b.n	8003ec8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d106      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003e02:	f7ff fb42 	bl	800348a <LL_RCC_PLL_IsReady>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d113      	bne.n	8003e34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e05b      	b.n	8003ec8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d106      	bne.n	8003e26 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003e18:	f7ff fa35 	bl	8003286 <LL_RCC_MSI_IsReady>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d108      	bne.n	8003e34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e050      	b.n	8003ec8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003e26:	f7ff f9ab 	bl	8003180 <LL_RCC_HSI_IsReady>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e049      	b.n	8003ec8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff fa6f 	bl	800331c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e3e:	f7fe fdb3 	bl	80029a8 <HAL_GetTick>
 8003e42:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e44:	e00a      	b.n	8003e5c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e46:	f7fe fdaf 	bl	80029a8 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e035      	b.n	8003ec8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5c:	f7ff fa71 	bl	8003342 <LL_RCC_GetSysClkSource>
 8003e60:	4602      	mov	r2, r0
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d1ec      	bne.n	8003e46 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e6c:	4b18      	ldr	r3, [pc, #96]	@ (8003ed0 <HAL_RCC_ClockConfig+0x23c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d21b      	bcs.n	8003eb2 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7a:	4b15      	ldr	r3, [pc, #84]	@ (8003ed0 <HAL_RCC_ClockConfig+0x23c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f023 0207 	bic.w	r2, r3, #7
 8003e82:	4913      	ldr	r1, [pc, #76]	@ (8003ed0 <HAL_RCC_ClockConfig+0x23c>)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e8a:	f7fe fd8d 	bl	80029a8 <HAL_GetTick>
 8003e8e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003e92:	f7fe fd89 	bl	80029a8 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e011      	b.n	8003ec8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed0 <HAL_RCC_ClockConfig+0x23c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d1ef      	bne.n	8003e92 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003eb2:	f000 f8b3 	bl	800401c <HAL_RCC_GetHCLKFreq>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	4a06      	ldr	r2, [pc, #24]	@ (8003ed4 <HAL_RCC_ClockConfig+0x240>)
 8003eba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003ebc:	4b06      	ldr	r3, [pc, #24]	@ (8003ed8 <HAL_RCC_ClockConfig+0x244>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7fe fd25 	bl	8002910 <HAL_InitTick>
 8003ec6:	4603      	mov	r3, r0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	58004000 	.word	0x58004000
 8003ed4:	20000000 	.word	0x20000000
 8003ed8:	20000004 	.word	0x20000004

08003edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003edc:	b590      	push	{r4, r7, lr}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eea:	f7ff fa2a 	bl	8003342 <LL_RCC_GetSysClkSource>
 8003eee:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ef0:	f7ff fafe 	bl	80034f0 <LL_RCC_PLL_GetMainSource>
 8003ef4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_GetSysClockFreq+0x2c>
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b0c      	cmp	r3, #12
 8003f00:	d139      	bne.n	8003f76 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d136      	bne.n	8003f76 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003f08:	f7ff f9cd 	bl	80032a6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d115      	bne.n	8003f3e <HAL_RCC_GetSysClockFreq+0x62>
 8003f12:	f7ff f9c8 	bl	80032a6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d106      	bne.n	8003f2a <HAL_RCC_GetSysClockFreq+0x4e>
 8003f1c:	f7ff f9d3 	bl	80032c6 <LL_RCC_MSI_GetRange>
 8003f20:	4603      	mov	r3, r0
 8003f22:	0a1b      	lsrs	r3, r3, #8
 8003f24:	f003 030f 	and.w	r3, r3, #15
 8003f28:	e005      	b.n	8003f36 <HAL_RCC_GetSysClockFreq+0x5a>
 8003f2a:	f7ff f9d7 	bl	80032dc <LL_RCC_MSI_GetRangeAfterStandby>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	0a1b      	lsrs	r3, r3, #8
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	4a36      	ldr	r2, [pc, #216]	@ (8004010 <HAL_RCC_GetSysClockFreq+0x134>)
 8003f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f3c:	e014      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x8c>
 8003f3e:	f7ff f9b2 	bl	80032a6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d106      	bne.n	8003f56 <HAL_RCC_GetSysClockFreq+0x7a>
 8003f48:	f7ff f9bd 	bl	80032c6 <LL_RCC_MSI_GetRange>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	091b      	lsrs	r3, r3, #4
 8003f50:	f003 030f 	and.w	r3, r3, #15
 8003f54:	e005      	b.n	8003f62 <HAL_RCC_GetSysClockFreq+0x86>
 8003f56:	f7ff f9c1 	bl	80032dc <LL_RCC_MSI_GetRangeAfterStandby>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	091b      	lsrs	r3, r3, #4
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	4a2b      	ldr	r2, [pc, #172]	@ (8004010 <HAL_RCC_GetSysClockFreq+0x134>)
 8003f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f68:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d115      	bne.n	8003f9c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f74:	e012      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d102      	bne.n	8003f82 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f7c:	4b25      	ldr	r3, [pc, #148]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x138>)
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	e00c      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d109      	bne.n	8003f9c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003f88:	f7ff f8a0 	bl	80030cc <LL_RCC_HSE_IsEnabledDiv2>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d102      	bne.n	8003f98 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003f92:	4b20      	ldr	r3, [pc, #128]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x138>)
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	e001      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003f98:	4b1f      	ldr	r3, [pc, #124]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003f9a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f9c:	f7ff f9d1 	bl	8003342 <LL_RCC_GetSysClkSource>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b0c      	cmp	r3, #12
 8003fa4:	d12f      	bne.n	8004006 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003fa6:	f7ff faa3 	bl	80034f0 <LL_RCC_PLL_GetMainSource>
 8003faa:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d003      	beq.n	8003fba <HAL_RCC_GetSysClockFreq+0xde>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d003      	beq.n	8003fc0 <HAL_RCC_GetSysClockFreq+0xe4>
 8003fb8:	e00d      	b.n	8003fd6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003fba:	4b16      	ldr	r3, [pc, #88]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x138>)
 8003fbc:	60fb      	str	r3, [r7, #12]
        break;
 8003fbe:	e00d      	b.n	8003fdc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003fc0:	f7ff f884 	bl	80030cc <LL_RCC_HSE_IsEnabledDiv2>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d102      	bne.n	8003fd0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003fca:	4b12      	ldr	r3, [pc, #72]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x138>)
 8003fcc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003fce:	e005      	b.n	8003fdc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003fd0:	4b11      	ldr	r3, [pc, #68]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003fd2:	60fb      	str	r3, [r7, #12]
        break;
 8003fd4:	e002      	b.n	8003fdc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	60fb      	str	r3, [r7, #12]
        break;
 8003fda:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003fdc:	f7ff fa66 	bl	80034ac <LL_RCC_PLL_GetN>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	fb03 f402 	mul.w	r4, r3, r2
 8003fe8:	f7ff fa77 	bl	80034da <LL_RCC_PLL_GetDivider>
 8003fec:	4603      	mov	r3, r0
 8003fee:	091b      	lsrs	r3, r3, #4
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	fbb4 f4f3 	udiv	r4, r4, r3
 8003ff6:	f7ff fa65 	bl	80034c4 <LL_RCC_PLL_GetR>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	0f5b      	lsrs	r3, r3, #29
 8003ffe:	3301      	adds	r3, #1
 8004000:	fbb4 f3f3 	udiv	r3, r4, r3
 8004004:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004006:	697b      	ldr	r3, [r7, #20]
}
 8004008:	4618      	mov	r0, r3
 800400a:	371c      	adds	r7, #28
 800400c:	46bd      	mov	sp, r7
 800400e:	bd90      	pop	{r4, r7, pc}
 8004010:	0800cbb0 	.word	0x0800cbb0
 8004014:	00f42400 	.word	0x00f42400
 8004018:	01e84800 	.word	0x01e84800

0800401c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800401c:	b598      	push	{r3, r4, r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004020:	f7ff ff5c 	bl	8003edc <HAL_RCC_GetSysClockFreq>
 8004024:	4604      	mov	r4, r0
 8004026:	f7ff f9e6 	bl	80033f6 <LL_RCC_GetAHBPrescaler>
 800402a:	4603      	mov	r3, r0
 800402c:	091b      	lsrs	r3, r3, #4
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	4a03      	ldr	r2, [pc, #12]	@ (8004040 <HAL_RCC_GetHCLKFreq+0x24>)
 8004034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004038:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800403c:	4618      	mov	r0, r3
 800403e:	bd98      	pop	{r3, r4, r7, pc}
 8004040:	0800cb50 	.word	0x0800cb50

08004044 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004044:	b598      	push	{r3, r4, r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004048:	f7ff ffe8 	bl	800401c <HAL_RCC_GetHCLKFreq>
 800404c:	4604      	mov	r4, r0
 800404e:	f7ff f9ea 	bl	8003426 <LL_RCC_GetAPB1Prescaler>
 8004052:	4603      	mov	r3, r0
 8004054:	0a1b      	lsrs	r3, r3, #8
 8004056:	4a03      	ldr	r2, [pc, #12]	@ (8004064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800405c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004060:	4618      	mov	r0, r3
 8004062:	bd98      	pop	{r3, r4, r7, pc}
 8004064:	0800cb90 	.word	0x0800cb90

08004068 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004068:	b598      	push	{r3, r4, r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800406c:	f7ff ffd6 	bl	800401c <HAL_RCC_GetHCLKFreq>
 8004070:	4604      	mov	r4, r0
 8004072:	f7ff f9e3 	bl	800343c <LL_RCC_GetAPB2Prescaler>
 8004076:	4603      	mov	r3, r0
 8004078:	0adb      	lsrs	r3, r3, #11
 800407a:	4a03      	ldr	r2, [pc, #12]	@ (8004088 <HAL_RCC_GetPCLK2Freq+0x20>)
 800407c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004080:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004084:	4618      	mov	r0, r3
 8004086:	bd98      	pop	{r3, r4, r7, pc}
 8004088:	0800cb90 	.word	0x0800cb90

0800408c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800408c:	b590      	push	{r4, r7, lr}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	091b      	lsrs	r3, r3, #4
 8004098:	f003 030f 	and.w	r3, r3, #15
 800409c:	4a10      	ldr	r2, [pc, #64]	@ (80040e0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800409e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80040a4:	f7ff f9b2 	bl	800340c <LL_RCC_GetAHB3Prescaler>
 80040a8:	4603      	mov	r3, r0
 80040aa:	091b      	lsrs	r3, r3, #4
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	4a0c      	ldr	r2, [pc, #48]	@ (80040e4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80040b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040bc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	4a09      	ldr	r2, [pc, #36]	@ (80040e8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	0c9c      	lsrs	r4, r3, #18
 80040c8:	f7fe ffc6 	bl	8003058 <HAL_PWREx_GetVoltageRange>
 80040cc:	4603      	mov	r3, r0
 80040ce:	4619      	mov	r1, r3
 80040d0:	4620      	mov	r0, r4
 80040d2:	f000 f80b 	bl	80040ec <RCC_SetFlashLatency>
 80040d6:	4603      	mov	r3, r0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd90      	pop	{r4, r7, pc}
 80040e0:	0800cbb0 	.word	0x0800cbb0
 80040e4:	0800cb50 	.word	0x0800cb50
 80040e8:	431bde83 	.word	0x431bde83

080040ec <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08e      	sub	sp, #56	@ 0x38
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80040f6:	4a3a      	ldr	r2, [pc, #232]	@ (80041e0 <RCC_SetFlashLatency+0xf4>)
 80040f8:	f107 0320 	add.w	r3, r7, #32
 80040fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004100:	6018      	str	r0, [r3, #0]
 8004102:	3304      	adds	r3, #4
 8004104:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004106:	4a37      	ldr	r2, [pc, #220]	@ (80041e4 <RCC_SetFlashLatency+0xf8>)
 8004108:	f107 0318 	add.w	r3, r7, #24
 800410c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004110:	6018      	str	r0, [r3, #0]
 8004112:	3304      	adds	r3, #4
 8004114:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004116:	4a34      	ldr	r2, [pc, #208]	@ (80041e8 <RCC_SetFlashLatency+0xfc>)
 8004118:	f107 030c 	add.w	r3, r7, #12
 800411c:	ca07      	ldmia	r2, {r0, r1, r2}
 800411e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004122:	2300      	movs	r3, #0
 8004124:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800412c:	d11b      	bne.n	8004166 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800412e:	2300      	movs	r3, #0
 8004130:	633b      	str	r3, [r7, #48]	@ 0x30
 8004132:	e014      	b.n	800415e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	3338      	adds	r3, #56	@ 0x38
 800413a:	443b      	add	r3, r7
 800413c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004140:	461a      	mov	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4293      	cmp	r3, r2
 8004146:	d807      	bhi.n	8004158 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	3338      	adds	r3, #56	@ 0x38
 800414e:	443b      	add	r3, r7
 8004150:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004154:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004156:	e021      	b.n	800419c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415a:	3301      	adds	r3, #1
 800415c:	633b      	str	r3, [r7, #48]	@ 0x30
 800415e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004160:	2b02      	cmp	r3, #2
 8004162:	d9e7      	bls.n	8004134 <RCC_SetFlashLatency+0x48>
 8004164:	e01a      	b.n	800419c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004166:	2300      	movs	r3, #0
 8004168:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800416a:	e014      	b.n	8004196 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800416c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	3338      	adds	r3, #56	@ 0x38
 8004172:	443b      	add	r3, r7
 8004174:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8004178:	461a      	mov	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4293      	cmp	r3, r2
 800417e:	d807      	bhi.n	8004190 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	3338      	adds	r3, #56	@ 0x38
 8004186:	443b      	add	r3, r7
 8004188:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800418c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800418e:	e005      	b.n	800419c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004192:	3301      	adds	r3, #1
 8004194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004198:	2b02      	cmp	r3, #2
 800419a:	d9e7      	bls.n	800416c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800419c:	4b13      	ldr	r3, [pc, #76]	@ (80041ec <RCC_SetFlashLatency+0x100>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f023 0207 	bic.w	r2, r3, #7
 80041a4:	4911      	ldr	r1, [pc, #68]	@ (80041ec <RCC_SetFlashLatency+0x100>)
 80041a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a8:	4313      	orrs	r3, r2
 80041aa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80041ac:	f7fe fbfc 	bl	80029a8 <HAL_GetTick>
 80041b0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80041b2:	e008      	b.n	80041c6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80041b4:	f7fe fbf8 	bl	80029a8 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e007      	b.n	80041d6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80041c6:	4b09      	ldr	r3, [pc, #36]	@ (80041ec <RCC_SetFlashLatency+0x100>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d1ef      	bne.n	80041b4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3738      	adds	r7, #56	@ 0x38
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	0800cad0 	.word	0x0800cad0
 80041e4:	0800cad8 	.word	0x0800cad8
 80041e8:	0800cae0 	.word	0x0800cae0
 80041ec:	58004000 	.word	0x58004000

080041f0 <LL_RCC_LSE_IsReady>:
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80041f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b02      	cmp	r3, #2
 8004202:	d101      	bne.n	8004208 <LL_RCC_LSE_IsReady+0x18>
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <LL_RCC_LSE_IsReady+0x1a>
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr

08004212 <LL_RCC_SetUSARTClockSource>:
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800421a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800421e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	0c1b      	lsrs	r3, r3, #16
 8004226:	43db      	mvns	r3, r3
 8004228:	401a      	ands	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	b29b      	uxth	r3, r3
 800422e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr

08004242 <LL_RCC_SetI2SClockSource>:
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800424a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004252:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004256:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr

0800426c <LL_RCC_SetLPUARTClockSource>:
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004280:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	bc80      	pop	{r7}
 8004294:	4770      	bx	lr

08004296 <LL_RCC_SetI2CClockSource>:
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800429e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80042ae:	43db      	mvns	r3, r3
 80042b0:	401a      	ands	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80042ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr

080042ce <LL_RCC_SetLPTIMClockSource>:
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80042d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042da:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	0c1b      	lsrs	r3, r3, #16
 80042e2:	041b      	lsls	r3, r3, #16
 80042e4:	43db      	mvns	r3, r3
 80042e6:	401a      	ands	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	041b      	lsls	r3, r3, #16
 80042ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr

08004300 <LL_RCC_SetRNGClockSource>:
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004308:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800430c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004310:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004314:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr

0800432a <LL_RCC_SetADCClockSource>:
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800433a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800433e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <LL_RCC_SetRTCClockSource>:
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800435c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004364:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004368:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	bc80      	pop	{r7}
 800437c:	4770      	bx	lr

0800437e <LL_RCC_GetRTCClockSource>:
{
 800437e:	b480      	push	{r7}
 8004380:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004382:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800438a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800438e:	4618      	mov	r0, r3
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr

08004396 <LL_RCC_ForceBackupDomainReset>:
{
 8004396:	b480      	push	{r7}
 8004398:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800439a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800439e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80043ae:	bf00      	nop
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr

080043b6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80043b6:	b480      	push	{r7}
 80043b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80043ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80043ce:	bf00      	nop
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr
	...

080043d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80043e4:	2300      	movs	r3, #0
 80043e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80043e8:	2300      	movs	r3, #0
 80043ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d058      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80043f8:	f7fe fe20 	bl	800303c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043fc:	f7fe fad4 	bl	80029a8 <HAL_GetTick>
 8004400:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004402:	e009      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004404:	f7fe fad0 	bl	80029a8 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d902      	bls.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	74fb      	strb	r3, [r7, #19]
        break;
 8004416:	e006      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004418:	4b7b      	ldr	r3, [pc, #492]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004424:	d1ee      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8004426:	7cfb      	ldrb	r3, [r7, #19]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d13c      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800442c:	f7ff ffa7 	bl	800437e <LL_RCC_GetRTCClockSource>
 8004430:	4602      	mov	r2, r0
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004436:	429a      	cmp	r2, r3
 8004438:	d00f      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800443a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800443e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004442:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004446:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004448:	f7ff ffa5 	bl	8004396 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800444c:	f7ff ffb3 	bl	80043b6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004450:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d014      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004464:	f7fe faa0 	bl	80029a8 <HAL_GetTick>
 8004468:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800446a:	e00b      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800446c:	f7fe fa9c 	bl	80029a8 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800447a:	4293      	cmp	r3, r2
 800447c:	d902      	bls.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	74fb      	strb	r3, [r7, #19]
            break;
 8004482:	e004      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8004484:	f7ff feb4 	bl	80041f0 <LL_RCC_LSE_IsReady>
 8004488:	4603      	mov	r3, r0
 800448a:	2b01      	cmp	r3, #1
 800448c:	d1ee      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800448e:	7cfb      	ldrb	r3, [r7, #19]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d105      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff ff5b 	bl	8004354 <LL_RCC_SetRTCClockSource>
 800449e:	e004      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044a0:	7cfb      	ldrb	r3, [r7, #19]
 80044a2:	74bb      	strb	r3, [r7, #18]
 80044a4:	e001      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a6:	7cfb      	ldrb	r3, [r7, #19]
 80044a8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d004      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff fea9 	bl	8004212 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d004      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff fe9e 	bl	8004212 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d004      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff fec0 	bl	800426c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d004      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff fee6 	bl	80042ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800450a:	2b00      	cmp	r3, #0
 800450c:	d004      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fedb 	bl	80042ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004520:	2b00      	cmp	r3, #0
 8004522:	d004      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff fed0 	bl	80042ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004536:	2b00      	cmp	r3, #0
 8004538:	d004      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff fea9 	bl	8004296 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800454c:	2b00      	cmp	r3, #0
 800454e:	d004      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff fe9e 	bl	8004296 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004562:	2b00      	cmp	r3, #0
 8004564:	d004      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff fe93 	bl	8004296 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0310 	and.w	r3, r3, #16
 8004578:	2b00      	cmp	r3, #0
 800457a:	d011      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff fe5e 	bl	8004242 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800458e:	d107      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004590:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800459a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800459e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d010      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff fea5 	bl	8004300 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d107      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80045be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045cc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d011      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff fea3 	bl	800432a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045ec:	d107      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045fc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80045fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	58000400 	.word	0x58000400

0800460c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e0c6      	b.n	80047ac <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004622:	2b00      	cmp	r3, #0
 8004624:	d108      	bne.n	8004638 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800462e:	d009      	beq.n	8004644 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	61da      	str	r2, [r3, #28]
 8004636:	e005      	b.n	8004644 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d106      	bne.n	800465e <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7fd ffe1 	bl	8002620 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2202      	movs	r2, #2
 8004662:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004674:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800467e:	d902      	bls.n	8004686 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	e002      	b.n	800468c <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004686:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800468a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004694:	d007      	beq.n	80046a6 <HAL_SPI_Init+0x9a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800469e:	d002      	beq.n	80046a6 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	431a      	orrs	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046e8:	ea42 0103 	orr.w	r1, r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004700:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004704:	d11b      	bne.n	800473e <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10b      	bne.n	8004726 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004716:	d903      	bls.n	8004720 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	631a      	str	r2, [r3, #48]	@ 0x30
 800471e:	e002      	b.n	8004726 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472a:	2b02      	cmp	r3, #2
 800472c:	d107      	bne.n	800473e <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800473c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	0c1b      	lsrs	r3, r3, #16
 8004744:	f003 0204 	and.w	r2, r3, #4
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474c:	f003 0310 	and.w	r3, r3, #16
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004764:	ea42 0103 	orr.w	r1, r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800477e:	d105      	bne.n	800478c <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	b292      	uxth	r2, r2
 800478a:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69da      	ldr	r2, [r3, #28]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800479a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_SPI_Transmit+0x22>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e181      	b.n	8004ada <HAL_SPI_Transmit+0x326>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047de:	f7fe f8e3 	bl	80029a8 <HAL_GetTick>
 80047e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047e4:	88fb      	ldrh	r3, [r7, #6]
 80047e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d002      	beq.n	80047fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047f4:	2302      	movs	r3, #2
 80047f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047f8:	e16a      	b.n	8004ad0 <HAL_SPI_Transmit+0x31c>
  }

  if ((pData == NULL) || (Size == 0U))
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <HAL_SPI_Transmit+0x52>
 8004800:	88fb      	ldrh	r3, [r7, #6]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d102      	bne.n	800480c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	77fb      	strb	r3, [r7, #31]
    goto error;
 800480a:	e161      	b.n	8004ad0 <HAL_SPI_Transmit+0x31c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2203      	movs	r2, #3
 8004810:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	88fa      	ldrh	r2, [r7, #6]
 8004824:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	88fa      	ldrh	r2, [r7, #6]
 800482a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004856:	d10f      	bne.n	8004878 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004866:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004876:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004880:	d10f      	bne.n	80048a2 <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048a0:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ac:	2b40      	cmp	r3, #64	@ 0x40
 80048ae:	d007      	beq.n	80048c0 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048c8:	d94f      	bls.n	800496a <HAL_SPI_Transmit+0x1b6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_SPI_Transmit+0x124>
 80048d2:	8afb      	ldrh	r3, [r7, #22]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d142      	bne.n	800495e <HAL_SPI_Transmit+0x1aa>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048dc:	881a      	ldrh	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e8:	1c9a      	adds	r2, r3, #2
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048fc:	e02f      	b.n	800495e <HAL_SPI_Transmit+0x1aa>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b02      	cmp	r3, #2
 800490a:	d112      	bne.n	8004932 <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004910:	881a      	ldrh	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491c:	1c9a      	adds	r2, r3, #2
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004930:	e015      	b.n	800495e <HAL_SPI_Transmit+0x1aa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004932:	f7fe f839 	bl	80029a8 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d803      	bhi.n	800494a <HAL_SPI_Transmit+0x196>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004948:	d102      	bne.n	8004950 <HAL_SPI_Transmit+0x19c>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d106      	bne.n	800495e <HAL_SPI_Transmit+0x1aa>
        {
          errorcode = HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800495c:	e0b8      	b.n	8004ad0 <HAL_SPI_Transmit+0x31c>
    while (hspi->TxXferCount > 0U)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1ca      	bne.n	80048fe <HAL_SPI_Transmit+0x14a>
 8004968:	e080      	b.n	8004a6c <HAL_SPI_Transmit+0x2b8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_SPI_Transmit+0x1c4>
 8004972:	8afb      	ldrh	r3, [r7, #22]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d174      	bne.n	8004a62 <HAL_SPI_Transmit+0x2ae>
    {
      if (hspi->TxXferCount > 1U)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b01      	cmp	r3, #1
 8004980:	d912      	bls.n	80049a8 <HAL_SPI_Transmit+0x1f4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004986:	881a      	ldrh	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004992:	1c9a      	adds	r2, r3, #2
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b02      	subs	r3, #2
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049a6:	e05c      	b.n	8004a62 <HAL_SPI_Transmit+0x2ae>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	330c      	adds	r3, #12
 80049b2:	7812      	ldrb	r2, [r2, #0]
 80049b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80049ce:	e048      	b.n	8004a62 <HAL_SPI_Transmit+0x2ae>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d12b      	bne.n	8004a36 <HAL_SPI_Transmit+0x282>
      {
        if (hspi->TxXferCount > 1U)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d912      	bls.n	8004a0e <HAL_SPI_Transmit+0x25a>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ec:	881a      	ldrh	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f8:	1c9a      	adds	r2, r3, #2
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b02      	subs	r3, #2
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a0c:	e029      	b.n	8004a62 <HAL_SPI_Transmit+0x2ae>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	330c      	adds	r3, #12
 8004a18:	7812      	ldrb	r2, [r2, #0]
 8004a1a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a34:	e015      	b.n	8004a62 <HAL_SPI_Transmit+0x2ae>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a36:	f7fd ffb7 	bl	80029a8 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d803      	bhi.n	8004a4e <HAL_SPI_Transmit+0x29a>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a4c:	d102      	bne.n	8004a54 <HAL_SPI_Transmit+0x2a0>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d106      	bne.n	8004a62 <HAL_SPI_Transmit+0x2ae>
        {
          errorcode = HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004a60:	e036      	b.n	8004ad0 <HAL_SPI_Transmit+0x31c>
    while (hspi->TxXferCount > 0U)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1b1      	bne.n	80049d0 <HAL_SPI_Transmit+0x21c>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a74:	d107      	bne.n	8004a86 <HAL_SPI_Transmit+0x2d2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a84:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	6839      	ldr	r1, [r7, #0]
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 fc86 	bl	800539c <SPI_EndRxTxTransaction>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d002      	beq.n	8004a9c <HAL_SPI_Transmit+0x2e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <HAL_SPI_Transmit+0x306>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	613b      	str	r3, [r7, #16]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <HAL_SPI_Transmit+0x314>
  {
    errorcode = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	77fb      	strb	r3, [r7, #31]
 8004ac6:	e003      	b.n	8004ad0 <HAL_SPI_Transmit+0x31c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004ad8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3720      	adds	r7, #32
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b092      	sub	sp, #72	@ 0x48
 8004ae6:	af02      	add	r7, sp, #8
 8004ae8:	60f8      	str	r0, [r7, #12]
 8004aea:	60b9      	str	r1, [r7, #8]
 8004aec:	607a      	str	r2, [r7, #4]
 8004aee:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004af8:	2301      	movs	r3, #1
 8004afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d101      	bne.n	8004b10 <HAL_SPI_TransmitReceive+0x2e>
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	e322      	b.n	8005156 <HAL_SPI_TransmitReceive+0x674>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b18:	f7fd ff46 	bl	80029a8 <HAL_GetTick>
 8004b1c:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  tmp_mode            = hspi->Init.Mode;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  initial_TxXferCount = Size;
 8004b2e:	887b      	ldrh	r3, [r7, #2]
 8004b30:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8004b32:	887b      	ldrh	r3, [r7, #2]
 8004b34:	853b      	strh	r3, [r7, #40]	@ 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b46:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d00f      	beq.n	8004b6e <HAL_SPI_TransmitReceive+0x8c>
 8004b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b54:	d107      	bne.n	8004b66 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d103      	bne.n	8004b66 <HAL_SPI_TransmitReceive+0x84>
 8004b5e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	d003      	beq.n	8004b6e <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8004b66:	2302      	movs	r3, #2
 8004b68:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    goto error;
 8004b6c:	e2ed      	b.n	800514a <HAL_SPI_TransmitReceive+0x668>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_SPI_TransmitReceive+0x9e>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <HAL_SPI_TransmitReceive+0x9e>
 8004b7a:	887b      	ldrh	r3, [r7, #2]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d103      	bne.n	8004b88 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    goto error;
 8004b86:	e2e0      	b.n	800514a <HAL_SPI_TransmitReceive+0x668>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d003      	beq.n	8004b9c <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2205      	movs	r2, #5
 8004b98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	887a      	ldrh	r2, [r7, #2]
 8004bac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	887a      	ldrh	r2, [r7, #2]
 8004bb4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	887a      	ldrh	r2, [r7, #2]
 8004bc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	887a      	ldrh	r2, [r7, #2]
 8004bc8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bde:	d10f      	bne.n	8004c00 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bfe:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c08:	d802      	bhi.n	8004c10 <HAL_SPI_TransmitReceive+0x12e>
 8004c0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d908      	bls.n	8004c22 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c1e:	605a      	str	r2, [r3, #4]
 8004c20:	e007      	b.n	8004c32 <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c30:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c3c:	2b40      	cmp	r3, #64	@ 0x40
 8004c3e:	d007      	beq.n	8004c50 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c58:	f240 80ce 	bls.w	8004df8 <HAL_SPI_TransmitReceive+0x316>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <HAL_SPI_TransmitReceive+0x18a>
 8004c64:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	f040 80b8 	bne.w	8004ddc <HAL_SPI_TransmitReceive+0x2fa>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c70:	881a      	ldrh	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7c:	1c9a      	adds	r2, r3, #2
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f040 80a0 	bne.w	8004ddc <HAL_SPI_TransmitReceive+0x2fa>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ca4:	f040 809a 	bne.w	8004ddc <HAL_SPI_TransmitReceive+0x2fa>
      {
        /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
        if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004caa:	f003 0304 	and.w	r3, r3, #4
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10c      	bne.n	8004ccc <HAL_SPI_TransmitReceive+0x1ea>
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d007      	beq.n	8004ccc <HAL_SPI_TransmitReceive+0x1ea>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cca:	601a      	str	r2, [r3, #0]
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004cda:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cdc:	e07e      	b.n	8004ddc <HAL_SPI_TransmitReceive+0x2fa>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d13f      	bne.n	8004d6c <HAL_SPI_TransmitReceive+0x28a>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d03a      	beq.n	8004d6c <HAL_SPI_TransmitReceive+0x28a>
 8004cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d137      	bne.n	8004d6c <HAL_SPI_TransmitReceive+0x28a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d00:	881a      	ldrh	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0c:	1c9a      	adds	r2, r3, #2
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	63fb      	str	r3, [r7, #60]	@ 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d11e      	bne.n	8004d6c <HAL_SPI_TransmitReceive+0x28a>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d36:	d119      	bne.n	8004d6c <HAL_SPI_TransmitReceive+0x28a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8004d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3a:	f003 0304 	and.w	r3, r3, #4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10c      	bne.n	8004d5c <HAL_SPI_TransmitReceive+0x27a>
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d007      	beq.n	8004d5c <HAL_SPI_TransmitReceive+0x27a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d5a:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004d6a:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d11c      	bne.n	8004db4 <HAL_SPI_TransmitReceive+0x2d2>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d016      	beq.n	8004db4 <HAL_SPI_TransmitReceive+0x2d2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d90:	b292      	uxth	r2, r2
 8004d92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d98:	1c9a      	adds	r2, r3, #2
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004db0:	2301      	movs	r3, #1
 8004db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004db4:	f7fd fdf8 	bl	80029a8 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d80b      	bhi.n	8004ddc <HAL_SPI_TransmitReceive+0x2fa>
 8004dc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dca:	d007      	beq.n	8004ddc <HAL_SPI_TransmitReceive+0x2fa>
      {
        errorcode = HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004dda:	e1b6      	b.n	800514a <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f47f af7b 	bne.w	8004cde <HAL_SPI_TransmitReceive+0x1fc>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f47f af74 	bne.w	8004cde <HAL_SPI_TransmitReceive+0x1fc>
 8004df6:	e12d      	b.n	8005054 <HAL_SPI_TransmitReceive+0x572>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_SPI_TransmitReceive+0x326>
 8004e00:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	f040 8119 	bne.w	800503a <HAL_SPI_TransmitReceive+0x558>
    {
      if (hspi->TxXferCount > 1U)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d912      	bls.n	8004e38 <HAL_SPI_TransmitReceive+0x356>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e16:	881a      	ldrh	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e22:	1c9a      	adds	r2, r3, #2
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b02      	subs	r3, #2
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e36:	e100      	b.n	800503a <HAL_SPI_TransmitReceive+0x558>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	330c      	adds	r3, #12
 8004e42:	7812      	ldrb	r2, [r2, #0]
 8004e44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f040 80e8 	bne.w	800503a <HAL_SPI_TransmitReceive+0x558>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e72:	f040 80e2 	bne.w	800503a <HAL_SPI_TransmitReceive+0x558>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10c      	bne.n	8004e9a <HAL_SPI_TransmitReceive+0x3b8>
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	f003 0308 	and.w	r3, r3, #8
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d007      	beq.n	8004e9a <HAL_SPI_TransmitReceive+0x3b8>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e98:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ea8:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eaa:	e0c6      	b.n	800503a <HAL_SPI_TransmitReceive+0x558>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d158      	bne.n	8004f6c <HAL_SPI_TransmitReceive+0x48a>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d053      	beq.n	8004f6c <HAL_SPI_TransmitReceive+0x48a>
 8004ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d150      	bne.n	8004f6c <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->TxXferCount > 1U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d912      	bls.n	8004efa <HAL_SPI_TransmitReceive+0x418>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed8:	881a      	ldrh	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee4:	1c9a      	adds	r2, r3, #2
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3b02      	subs	r3, #2
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ef8:	e012      	b.n	8004f20 <HAL_SPI_TransmitReceive+0x43e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	330c      	adds	r3, #12
 8004f04:	7812      	ldrb	r2, [r2, #0]
 8004f06:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	63fb      	str	r3, [r7, #60]	@ 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d11e      	bne.n	8004f6c <HAL_SPI_TransmitReceive+0x48a>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f36:	d119      	bne.n	8004f6c <HAL_SPI_TransmitReceive+0x48a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8004f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10c      	bne.n	8004f5c <HAL_SPI_TransmitReceive+0x47a>
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	f003 0308 	and.w	r3, r3, #8
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d007      	beq.n	8004f5c <HAL_SPI_TransmitReceive+0x47a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f5a:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004f6a:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d148      	bne.n	800500c <HAL_SPI_TransmitReceive+0x52a>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d042      	beq.n	800500c <HAL_SPI_TransmitReceive+0x52a>
      {
        if (hspi->RxXferCount > 1U)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d923      	bls.n	8004fda <HAL_SPI_TransmitReceive+0x4f8>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9c:	b292      	uxth	r2, r2
 8004f9e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa4:	1c9a      	adds	r2, r3, #2
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	3b02      	subs	r3, #2
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d81f      	bhi.n	8005008 <HAL_SPI_TransmitReceive+0x526>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004fd6:	605a      	str	r2, [r3, #4]
 8004fd8:	e016      	b.n	8005008 <HAL_SPI_TransmitReceive+0x526>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f103 020c 	add.w	r2, r3, #12
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe6:	7812      	ldrb	r2, [r2, #0]
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	3b01      	subs	r3, #1
 8005000:	b29a      	uxth	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005008:	2301      	movs	r3, #1
 800500a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800500c:	f7fd fccc 	bl	80029a8 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005018:	429a      	cmp	r2, r3
 800501a:	d803      	bhi.n	8005024 <HAL_SPI_TransmitReceive+0x542>
 800501c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800501e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005022:	d102      	bne.n	800502a <HAL_SPI_TransmitReceive+0x548>
 8005024:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005026:	2b00      	cmp	r3, #0
 8005028:	d107      	bne.n	800503a <HAL_SPI_TransmitReceive+0x558>
      {
        errorcode = HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005038:	e087      	b.n	800514a <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800503e:	b29b      	uxth	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	f47f af33 	bne.w	8004eac <HAL_SPI_TransmitReceive+0x3ca>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	f47f af2c 	bne.w	8004eac <HAL_SPI_TransmitReceive+0x3ca>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800505c:	d146      	bne.n	80050ec <HAL_SPI_TransmitReceive+0x60a>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800505e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005064:	2201      	movs	r2, #1
 8005066:	2101      	movs	r1, #1
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 f879 	bl	8005160 <SPI_WaitFlagStateUntilTimeout>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d009      	beq.n	8005088 <HAL_SPI_TransmitReceive+0x5a6>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005078:	f043 0202 	orr.w	r2, r3, #2
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      goto error;
 8005086:	e060      	b.n	800514a <HAL_SPI_TransmitReceive+0x668>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005090:	d105      	bne.n	800509e <HAL_SPI_TransmitReceive+0x5bc>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	e026      	b.n	80050ec <HAL_SPI_TransmitReceive+0x60a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	330c      	adds	r3, #12
 80050a4:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80050ae:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d119      	bne.n	80050ec <HAL_SPI_TransmitReceive+0x60a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80050b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050be:	2201      	movs	r2, #1
 80050c0:	2101      	movs	r1, #1
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 f84c 	bl	8005160 <SPI_WaitFlagStateUntilTimeout>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d009      	beq.n	80050e2 <HAL_SPI_TransmitReceive+0x600>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050d2:	f043 0202 	orr.w	r2, r3, #2
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	661a      	str	r2, [r3, #96]	@ 0x60
          errorcode = HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
          goto error;
 80050e0:	e033      	b.n	800514a <HAL_SPI_TransmitReceive+0x668>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80050ea:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 0310 	and.w	r3, r3, #16
 80050f6:	2b10      	cmp	r3, #16
 80050f8:	d10d      	bne.n	8005116 <HAL_SPI_TransmitReceive+0x634>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050fe:	f043 0202 	orr.w	r2, r3, #2
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800510e:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005116:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005118:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 f93e 	bl	800539c <SPI_EndRxTxTransaction>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <HAL_SPI_TransmitReceive+0x650>
  {
    errorcode = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2220      	movs	r2, #32
 8005130:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_SPI_TransmitReceive+0x660>
  {
    errorcode = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8005140:	e003      	b.n	800514a <HAL_SPI_TransmitReceive+0x668>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005152:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
}
 8005156:	4618      	mov	r0, r3
 8005158:	3740      	adds	r7, #64	@ 0x40
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	4613      	mov	r3, r2
 800516e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005170:	f7fd fc1a 	bl	80029a8 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005178:	1a9b      	subs	r3, r3, r2
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	4413      	add	r3, r2
 800517e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005180:	f7fd fc12 	bl	80029a8 <HAL_GetTick>
 8005184:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005186:	4b39      	ldr	r3, [pc, #228]	@ (800526c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	015b      	lsls	r3, r3, #5
 800518c:	0d1b      	lsrs	r3, r3, #20
 800518e:	69fa      	ldr	r2, [r7, #28]
 8005190:	fb02 f303 	mul.w	r3, r2, r3
 8005194:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005196:	e054      	b.n	8005242 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800519e:	d050      	beq.n	8005242 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051a0:	f7fd fc02 	bl	80029a8 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d902      	bls.n	80051b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d13d      	bne.n	8005232 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80051c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051ce:	d111      	bne.n	80051f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051d8:	d004      	beq.n	80051e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051e2:	d107      	bne.n	80051f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051fc:	d10f      	bne.n	800521e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800521c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e017      	b.n	8005262 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	3b01      	subs	r3, #1
 8005240:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	4013      	ands	r3, r2
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	429a      	cmp	r2, r3
 8005250:	bf0c      	ite	eq
 8005252:	2301      	moveq	r3, #1
 8005254:	2300      	movne	r3, #0
 8005256:	b2db      	uxtb	r3, r3
 8005258:	461a      	mov	r2, r3
 800525a:	79fb      	ldrb	r3, [r7, #7]
 800525c:	429a      	cmp	r2, r3
 800525e:	d19b      	bne.n	8005198 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3720      	adds	r7, #32
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	20000000 	.word	0x20000000

08005270 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b08a      	sub	sp, #40	@ 0x28
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005282:	f7fd fb91 	bl	80029a8 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528a:	1a9b      	subs	r3, r3, r2
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	4413      	add	r3, r2
 8005290:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005292:	f7fd fb89 	bl	80029a8 <HAL_GetTick>
 8005296:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	330c      	adds	r3, #12
 800529e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80052a0:	4b3d      	ldr	r3, [pc, #244]	@ (8005398 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	00da      	lsls	r2, r3, #3
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	0d1b      	lsrs	r3, r3, #20
 80052b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052b2:	fb02 f303 	mul.w	r3, r2, r3
 80052b6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80052b8:	e060      	b.n	800537c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80052c0:	d107      	bne.n	80052d2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d104      	bne.n	80052d2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80052d0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052d8:	d050      	beq.n	800537c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052da:	f7fd fb65 	bl	80029a8 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d902      	bls.n	80052f0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80052ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d13d      	bne.n	800536c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80052fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005308:	d111      	bne.n	800532e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005312:	d004      	beq.n	800531e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800531c:	d107      	bne.n	800532e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800532c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005332:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005336:	d10f      	bne.n	8005358 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005356:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e010      	b.n	800538e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	3b01      	subs	r3, #1
 800537a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	4013      	ands	r3, r2
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	429a      	cmp	r2, r3
 800538a:	d196      	bne.n	80052ba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3728      	adds	r7, #40	@ 0x28
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	20000000 	.word	0x20000000

0800539c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f7ff ff5b 	bl	8005270 <SPI_WaitFifoStateUntilTimeout>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d007      	beq.n	80053d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053c4:	f043 0220 	orr.w	r2, r3, #32
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e027      	b.n	8005420 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2200      	movs	r2, #0
 80053d8:	2180      	movs	r1, #128	@ 0x80
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f7ff fec0 	bl	8005160 <SPI_WaitFlagStateUntilTimeout>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d007      	beq.n	80053f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ea:	f043 0220 	orr.w	r2, r3, #32
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e014      	b.n	8005420 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f7ff ff34 	bl	8005270 <SPI_WaitFifoStateUntilTimeout>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d007      	beq.n	800541e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005412:	f043 0220 	orr.w	r2, r3, #32
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e000      	b.n	8005420 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <LL_RCC_GetUSARTClockSource>:
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8005430:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005434:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	401a      	ands	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	041b      	lsls	r3, r3, #16
 8005440:	4313      	orrs	r3, r2
}
 8005442:	4618      	mov	r0, r3
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	bc80      	pop	{r7}
 800544a:	4770      	bx	lr

0800544c <LL_RCC_GetLPUARTClockSource>:
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005458:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4013      	ands	r3, r2
}
 8005460:	4618      	mov	r0, r3
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr

0800546a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b082      	sub	sp, #8
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e042      	b.n	8005502 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7fd f87a 	bl	8002588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2224      	movs	r2, #36	@ 0x24
 8005498:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0201 	bic.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 fea3 	bl	8006200 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fc2c 	bl	8005d18 <UART_SetConfig>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d101      	bne.n	80054ca <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e01b      	b.n	8005502 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f042 0201 	orr.w	r2, r2, #1
 80054f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 ff21 	bl	8006342 <UART_CheckIdleState>
 8005500:	4603      	mov	r3, r0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b08a      	sub	sp, #40	@ 0x28
 800550e:	af02      	add	r7, sp, #8
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	603b      	str	r3, [r7, #0]
 8005516:	4613      	mov	r3, r2
 8005518:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005520:	2b20      	cmp	r3, #32
 8005522:	f040 80b1 	bne.w	8005688 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <HAL_UART_Receive+0x28>
 800552c:	88fb      	ldrh	r3, [r7, #6]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e0a9      	b.n	800568a <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2222      	movs	r2, #34	@ 0x22
 8005542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800554c:	f7fd fa2c 	bl	80029a8 <HAL_GetTick>
 8005550:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	88fa      	ldrh	r2, [r7, #6]
 8005556:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	88fa      	ldrh	r2, [r7, #6]
 800555e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800556a:	d10e      	bne.n	800558a <HAL_UART_Receive+0x80>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d105      	bne.n	8005580 <HAL_UART_Receive+0x76>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800557a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800557e:	e02d      	b.n	80055dc <HAL_UART_Receive+0xd2>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	22ff      	movs	r2, #255	@ 0xff
 8005584:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005588:	e028      	b.n	80055dc <HAL_UART_Receive+0xd2>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10d      	bne.n	80055ae <HAL_UART_Receive+0xa4>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d104      	bne.n	80055a4 <HAL_UART_Receive+0x9a>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	22ff      	movs	r2, #255	@ 0xff
 800559e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80055a2:	e01b      	b.n	80055dc <HAL_UART_Receive+0xd2>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	227f      	movs	r2, #127	@ 0x7f
 80055a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80055ac:	e016      	b.n	80055dc <HAL_UART_Receive+0xd2>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055b6:	d10d      	bne.n	80055d4 <HAL_UART_Receive+0xca>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d104      	bne.n	80055ca <HAL_UART_Receive+0xc0>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	227f      	movs	r2, #127	@ 0x7f
 80055c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80055c8:	e008      	b.n	80055dc <HAL_UART_Receive+0xd2>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	223f      	movs	r2, #63	@ 0x3f
 80055ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80055d2:	e003      	b.n	80055dc <HAL_UART_Receive+0xd2>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80055e2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ec:	d108      	bne.n	8005600 <HAL_UART_Receive+0xf6>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d104      	bne.n	8005600 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	61bb      	str	r3, [r7, #24]
 80055fe:	e003      	b.n	8005608 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005604:	2300      	movs	r3, #0
 8005606:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005608:	e032      	b.n	8005670 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	2200      	movs	r2, #0
 8005612:	2120      	movs	r1, #32
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 fee2 	bl	80063de <UART_WaitOnFlagUntilTimeout>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e032      	b.n	800568a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10c      	bne.n	8005644 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005630:	b29a      	uxth	r2, r3
 8005632:	8a7b      	ldrh	r3, [r7, #18]
 8005634:	4013      	ands	r3, r2
 8005636:	b29a      	uxth	r2, r3
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	3302      	adds	r3, #2
 8005640:	61bb      	str	r3, [r7, #24]
 8005642:	e00c      	b.n	800565e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564a:	b2da      	uxtb	r2, r3
 800564c:	8a7b      	ldrh	r3, [r7, #18]
 800564e:	b2db      	uxtb	r3, r3
 8005650:	4013      	ands	r3, r2
 8005652:	b2da      	uxtb	r2, r3
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	3301      	adds	r3, #1
 800565c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005664:	b29b      	uxth	r3, r3
 8005666:	3b01      	subs	r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005676:	b29b      	uxth	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1c6      	bne.n	800560a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2220      	movs	r2, #32
 8005680:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8005684:	2300      	movs	r3, #0
 8005686:	e000      	b.n	800568a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8005688:	2302      	movs	r3, #2
  }
}
 800568a:	4618      	mov	r0, r3
 800568c:	3720      	adds	r7, #32
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b0ba      	sub	sp, #232	@ 0xe8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80056ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80056be:	f640 030f 	movw	r3, #2063	@ 0x80f
 80056c2:	4013      	ands	r3, r2
 80056c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80056c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d11b      	bne.n	8005708 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80056d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056d4:	f003 0320 	and.w	r3, r3, #32
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d015      	beq.n	8005708 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80056dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056e0:	f003 0320 	and.w	r3, r3, #32
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d105      	bne.n	80056f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80056e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d009      	beq.n	8005708 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 82e3 	beq.w	8005cc4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	4798      	blx	r3
      }
      return;
 8005706:	e2dd      	b.n	8005cc4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005708:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 8123 	beq.w	8005958 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005712:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005716:	4b8d      	ldr	r3, [pc, #564]	@ (800594c <HAL_UART_IRQHandler+0x2b8>)
 8005718:	4013      	ands	r3, r2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d106      	bne.n	800572c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800571e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005722:	4b8b      	ldr	r3, [pc, #556]	@ (8005950 <HAL_UART_IRQHandler+0x2bc>)
 8005724:	4013      	ands	r3, r2
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 8116 	beq.w	8005958 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800572c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d011      	beq.n	800575c <HAL_UART_IRQHandler+0xc8>
 8005738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800573c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00b      	beq.n	800575c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2201      	movs	r2, #1
 800574a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005752:	f043 0201 	orr.w	r2, r3, #1
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800575c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d011      	beq.n	800578c <HAL_UART_IRQHandler+0xf8>
 8005768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00b      	beq.n	800578c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2202      	movs	r2, #2
 800577a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005782:	f043 0204 	orr.w	r2, r3, #4
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800578c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b00      	cmp	r3, #0
 8005796:	d011      	beq.n	80057bc <HAL_UART_IRQHandler+0x128>
 8005798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00b      	beq.n	80057bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2204      	movs	r2, #4
 80057aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b2:	f043 0202 	orr.w	r2, r3, #2
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80057bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057c0:	f003 0308 	and.w	r3, r3, #8
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d017      	beq.n	80057f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80057c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057cc:	f003 0320 	and.w	r3, r3, #32
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d105      	bne.n	80057e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80057d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80057d8:	4b5c      	ldr	r3, [pc, #368]	@ (800594c <HAL_UART_IRQHandler+0x2b8>)
 80057da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00b      	beq.n	80057f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2208      	movs	r2, #8
 80057e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ee:	f043 0208 	orr.w	r2, r3, #8
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80057f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005800:	2b00      	cmp	r3, #0
 8005802:	d012      	beq.n	800582a <HAL_UART_IRQHandler+0x196>
 8005804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005808:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00c      	beq.n	800582a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005818:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005820:	f043 0220 	orr.w	r2, r3, #32
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 8249 	beq.w	8005cc8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800583a:	f003 0320 	and.w	r3, r3, #32
 800583e:	2b00      	cmp	r3, #0
 8005840:	d013      	beq.n	800586a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005846:	f003 0320 	and.w	r3, r3, #32
 800584a:	2b00      	cmp	r3, #0
 800584c:	d105      	bne.n	800585a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800584e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d007      	beq.n	800586a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005870:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800587e:	2b40      	cmp	r3, #64	@ 0x40
 8005880:	d005      	beq.n	800588e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005886:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800588a:	2b00      	cmp	r3, #0
 800588c:	d054      	beq.n	8005938 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fe73 	bl	800657a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800589e:	2b40      	cmp	r3, #64	@ 0x40
 80058a0:	d146      	bne.n	8005930 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	3308      	adds	r3, #8
 80058a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80058b0:	e853 3f00 	ldrex	r3, [r3]
 80058b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80058b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3308      	adds	r3, #8
 80058ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80058ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80058d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80058da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80058de:	e841 2300 	strex	r3, r2, [r1]
 80058e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80058e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1d9      	bne.n	80058a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d017      	beq.n	8005928 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058fe:	4a15      	ldr	r2, [pc, #84]	@ (8005954 <HAL_UART_IRQHandler+0x2c0>)
 8005900:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005908:	4618      	mov	r0, r3
 800590a:	f7fd f9c0 	bl	8002c8e <HAL_DMA_Abort_IT>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d019      	beq.n	8005948 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800591a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005922:	4610      	mov	r0, r2
 8005924:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005926:	e00f      	b.n	8005948 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f9e0 	bl	8005cee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800592e:	e00b      	b.n	8005948 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f9dc 	bl	8005cee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005936:	e007      	b.n	8005948 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f9d8 	bl	8005cee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005946:	e1bf      	b.n	8005cc8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005948:	bf00      	nop
    return;
 800594a:	e1bd      	b.n	8005cc8 <HAL_UART_IRQHandler+0x634>
 800594c:	10000001 	.word	0x10000001
 8005950:	04000120 	.word	0x04000120
 8005954:	08006645 	.word	0x08006645

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800595c:	2b01      	cmp	r3, #1
 800595e:	f040 8153 	bne.w	8005c08 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005966:	f003 0310 	and.w	r3, r3, #16
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 814c 	beq.w	8005c08 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005974:	f003 0310 	and.w	r3, r3, #16
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 8145 	beq.w	8005c08 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2210      	movs	r2, #16
 8005984:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005990:	2b40      	cmp	r3, #64	@ 0x40
 8005992:	f040 80bb 	bne.w	8005b0c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 818f 	beq.w	8005ccc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80059b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059b8:	429a      	cmp	r2, r3
 80059ba:	f080 8187 	bcs.w	8005ccc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0320 	and.w	r3, r3, #32
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f040 8087 	bne.w	8005aea <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80059f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	461a      	mov	r2, r3
 8005a02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005a06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a0a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a12:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a16:	e841 2300 	strex	r3, r2, [r1]
 8005a1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1da      	bne.n	80059dc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3308      	adds	r3, #8
 8005a2c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3308      	adds	r3, #8
 8005a46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a4a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a50:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a52:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a56:	e841 2300 	strex	r3, r2, [r1]
 8005a5a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1e1      	bne.n	8005a26 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	3308      	adds	r3, #8
 8005a68:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a6c:	e853 3f00 	ldrex	r3, [r3]
 8005a70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3308      	adds	r3, #8
 8005a82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a8e:	e841 2300 	strex	r3, r2, [r1]
 8005a92:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1e3      	bne.n	8005a62 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
 8005ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ab8:	f023 0310 	bic.w	r3, r3, #16
 8005abc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005aca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005acc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ad0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ad8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e4      	bne.n	8005aa8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7fd f874 	bl	8002bd2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2202      	movs	r2, #2
 8005aee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	4619      	mov	r1, r3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f8fb 	bl	8005d00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b0a:	e0df      	b.n	8005ccc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 80d1 	beq.w	8005cd0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005b2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 80cc 	beq.w	8005cd0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b40:	e853 3f00 	ldrex	r3, [r3]
 8005b44:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	461a      	mov	r2, r3
 8005b56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b5c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e4      	bne.n	8005b38 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3308      	adds	r3, #8
 8005b74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b84:	f023 0301 	bic.w	r3, r3, #1
 8005b88:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3308      	adds	r3, #8
 8005b92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b96:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b9e:	e841 2300 	strex	r3, r2, [r1]
 8005ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1e1      	bne.n	8005b6e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	e853 3f00 	ldrex	r3, [r3]
 8005bca:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 0310 	bic.w	r3, r3, #16
 8005bd2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005be0:	61fb      	str	r3, [r7, #28]
 8005be2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be4:	69b9      	ldr	r1, [r7, #24]
 8005be6:	69fa      	ldr	r2, [r7, #28]
 8005be8:	e841 2300 	strex	r3, r2, [r1]
 8005bec:	617b      	str	r3, [r7, #20]
   return(result);
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1e4      	bne.n	8005bbe <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bfa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f87d 	bl	8005d00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c06:	e063      	b.n	8005cd0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00e      	beq.n	8005c32 <HAL_UART_IRQHandler+0x59e>
 8005c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d008      	beq.n	8005c32 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005c28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fd4b 	bl	80066c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c30:	e051      	b.n	8005cd6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d014      	beq.n	8005c68 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d105      	bne.n	8005c56 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d008      	beq.n	8005c68 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d03a      	beq.n	8005cd4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	4798      	blx	r3
    }
    return;
 8005c66:	e035      	b.n	8005cd4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d009      	beq.n	8005c88 <HAL_UART_IRQHandler+0x5f4>
 8005c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 fcf5 	bl	8006670 <UART_EndTransmit_IT>
    return;
 8005c86:	e026      	b.n	8005cd6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d009      	beq.n	8005ca8 <HAL_UART_IRQHandler+0x614>
 8005c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c98:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fd22 	bl	80066ea <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ca6:	e016      	b.n	8005cd6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d010      	beq.n	8005cd6 <HAL_UART_IRQHandler+0x642>
 8005cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	da0c      	bge.n	8005cd6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fd0b 	bl	80066d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cc2:	e008      	b.n	8005cd6 <HAL_UART_IRQHandler+0x642>
      return;
 8005cc4:	bf00      	nop
 8005cc6:	e006      	b.n	8005cd6 <HAL_UART_IRQHandler+0x642>
    return;
 8005cc8:	bf00      	nop
 8005cca:	e004      	b.n	8005cd6 <HAL_UART_IRQHandler+0x642>
      return;
 8005ccc:	bf00      	nop
 8005cce:	e002      	b.n	8005cd6 <HAL_UART_IRQHandler+0x642>
      return;
 8005cd0:	bf00      	nop
 8005cd2:	e000      	b.n	8005cd6 <HAL_UART_IRQHandler+0x642>
    return;
 8005cd4:	bf00      	nop
  }
}
 8005cd6:	37e8      	adds	r7, #232	@ 0xe8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bc80      	pop	{r7}
 8005cec:	4770      	bx	lr

08005cee <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bc80      	pop	{r7}
 8005cfe:	4770      	bx	lr

08005d00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bc80      	pop	{r7}
 8005d14:	4770      	bx	lr
	...

08005d18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d1c:	b08c      	sub	sp, #48	@ 0x30
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	431a      	orrs	r2, r3
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	431a      	orrs	r2, r3
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	4b94      	ldr	r3, [pc, #592]	@ (8005f98 <UART_SetConfig+0x280>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	6812      	ldr	r2, [r2, #0]
 8005d4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d50:	430b      	orrs	r3, r1
 8005d52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	68da      	ldr	r2, [r3, #12]
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a89      	ldr	r2, [pc, #548]	@ (8005f9c <UART_SetConfig+0x284>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d004      	beq.n	8005d84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d80:	4313      	orrs	r3, r2
 8005d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005d8e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	6812      	ldr	r2, [r2, #0]
 8005d96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da2:	f023 010f 	bic.w	r1, r3, #15
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a7a      	ldr	r2, [pc, #488]	@ (8005fa0 <UART_SetConfig+0x288>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d127      	bne.n	8005e0c <UART_SetConfig+0xf4>
 8005dbc:	2003      	movs	r0, #3
 8005dbe:	f7ff fb33 	bl	8005428 <LL_RCC_GetUSARTClockSource>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d81b      	bhi.n	8005e04 <UART_SetConfig+0xec>
 8005dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd4 <UART_SetConfig+0xbc>)
 8005dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd2:	bf00      	nop
 8005dd4:	08005de5 	.word	0x08005de5
 8005dd8:	08005df5 	.word	0x08005df5
 8005ddc:	08005ded 	.word	0x08005ded
 8005de0:	08005dfd 	.word	0x08005dfd
 8005de4:	2301      	movs	r3, #1
 8005de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dea:	e080      	b.n	8005eee <UART_SetConfig+0x1d6>
 8005dec:	2302      	movs	r3, #2
 8005dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005df2:	e07c      	b.n	8005eee <UART_SetConfig+0x1d6>
 8005df4:	2304      	movs	r3, #4
 8005df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dfa:	e078      	b.n	8005eee <UART_SetConfig+0x1d6>
 8005dfc:	2308      	movs	r3, #8
 8005dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e02:	e074      	b.n	8005eee <UART_SetConfig+0x1d6>
 8005e04:	2310      	movs	r3, #16
 8005e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e0a:	e070      	b.n	8005eee <UART_SetConfig+0x1d6>
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a64      	ldr	r2, [pc, #400]	@ (8005fa4 <UART_SetConfig+0x28c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d138      	bne.n	8005e88 <UART_SetConfig+0x170>
 8005e16:	200c      	movs	r0, #12
 8005e18:	f7ff fb06 	bl	8005428 <LL_RCC_GetUSARTClockSource>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8005e22:	2b0c      	cmp	r3, #12
 8005e24:	d82c      	bhi.n	8005e80 <UART_SetConfig+0x168>
 8005e26:	a201      	add	r2, pc, #4	@ (adr r2, 8005e2c <UART_SetConfig+0x114>)
 8005e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2c:	08005e61 	.word	0x08005e61
 8005e30:	08005e81 	.word	0x08005e81
 8005e34:	08005e81 	.word	0x08005e81
 8005e38:	08005e81 	.word	0x08005e81
 8005e3c:	08005e71 	.word	0x08005e71
 8005e40:	08005e81 	.word	0x08005e81
 8005e44:	08005e81 	.word	0x08005e81
 8005e48:	08005e81 	.word	0x08005e81
 8005e4c:	08005e69 	.word	0x08005e69
 8005e50:	08005e81 	.word	0x08005e81
 8005e54:	08005e81 	.word	0x08005e81
 8005e58:	08005e81 	.word	0x08005e81
 8005e5c:	08005e79 	.word	0x08005e79
 8005e60:	2300      	movs	r3, #0
 8005e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e66:	e042      	b.n	8005eee <UART_SetConfig+0x1d6>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e6e:	e03e      	b.n	8005eee <UART_SetConfig+0x1d6>
 8005e70:	2304      	movs	r3, #4
 8005e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e76:	e03a      	b.n	8005eee <UART_SetConfig+0x1d6>
 8005e78:	2308      	movs	r3, #8
 8005e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e7e:	e036      	b.n	8005eee <UART_SetConfig+0x1d6>
 8005e80:	2310      	movs	r3, #16
 8005e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e86:	e032      	b.n	8005eee <UART_SetConfig+0x1d6>
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a43      	ldr	r2, [pc, #268]	@ (8005f9c <UART_SetConfig+0x284>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d12a      	bne.n	8005ee8 <UART_SetConfig+0x1d0>
 8005e92:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8005e96:	f7ff fad9 	bl	800544c <LL_RCC_GetLPUARTClockSource>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ea0:	d01a      	beq.n	8005ed8 <UART_SetConfig+0x1c0>
 8005ea2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ea6:	d81b      	bhi.n	8005ee0 <UART_SetConfig+0x1c8>
 8005ea8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005eac:	d00c      	beq.n	8005ec8 <UART_SetConfig+0x1b0>
 8005eae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005eb2:	d815      	bhi.n	8005ee0 <UART_SetConfig+0x1c8>
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <UART_SetConfig+0x1a8>
 8005eb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ebc:	d008      	beq.n	8005ed0 <UART_SetConfig+0x1b8>
 8005ebe:	e00f      	b.n	8005ee0 <UART_SetConfig+0x1c8>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ec6:	e012      	b.n	8005eee <UART_SetConfig+0x1d6>
 8005ec8:	2302      	movs	r3, #2
 8005eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ece:	e00e      	b.n	8005eee <UART_SetConfig+0x1d6>
 8005ed0:	2304      	movs	r3, #4
 8005ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ed6:	e00a      	b.n	8005eee <UART_SetConfig+0x1d6>
 8005ed8:	2308      	movs	r3, #8
 8005eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ede:	e006      	b.n	8005eee <UART_SetConfig+0x1d6>
 8005ee0:	2310      	movs	r3, #16
 8005ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ee6:	e002      	b.n	8005eee <UART_SetConfig+0x1d6>
 8005ee8:	2310      	movs	r3, #16
 8005eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a2a      	ldr	r2, [pc, #168]	@ (8005f9c <UART_SetConfig+0x284>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	f040 80a4 	bne.w	8006042 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005efa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005efe:	2b08      	cmp	r3, #8
 8005f00:	d823      	bhi.n	8005f4a <UART_SetConfig+0x232>
 8005f02:	a201      	add	r2, pc, #4	@ (adr r2, 8005f08 <UART_SetConfig+0x1f0>)
 8005f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f08:	08005f2d 	.word	0x08005f2d
 8005f0c:	08005f4b 	.word	0x08005f4b
 8005f10:	08005f35 	.word	0x08005f35
 8005f14:	08005f4b 	.word	0x08005f4b
 8005f18:	08005f3b 	.word	0x08005f3b
 8005f1c:	08005f4b 	.word	0x08005f4b
 8005f20:	08005f4b 	.word	0x08005f4b
 8005f24:	08005f4b 	.word	0x08005f4b
 8005f28:	08005f43 	.word	0x08005f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f2c:	f7fe f88a 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 8005f30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f32:	e010      	b.n	8005f56 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f34:	4b1c      	ldr	r3, [pc, #112]	@ (8005fa8 <UART_SetConfig+0x290>)
 8005f36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f38:	e00d      	b.n	8005f56 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f3a:	f7fd ffcf 	bl	8003edc <HAL_RCC_GetSysClockFreq>
 8005f3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f40:	e009      	b.n	8005f56 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f48:	e005      	b.n	8005f56 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005f54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 8137 	beq.w	80061cc <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f62:	4a12      	ldr	r2, [pc, #72]	@ (8005fac <UART_SetConfig+0x294>)
 8005f64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	4613      	mov	r3, r2
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	4413      	add	r3, r2
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d305      	bcc.n	8005f8e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d910      	bls.n	8005fb0 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005f94:	e11a      	b.n	80061cc <UART_SetConfig+0x4b4>
 8005f96:	bf00      	nop
 8005f98:	cfff69f3 	.word	0xcfff69f3
 8005f9c:	40008000 	.word	0x40008000
 8005fa0:	40013800 	.word	0x40013800
 8005fa4:	40004400 	.word	0x40004400
 8005fa8:	00f42400 	.word	0x00f42400
 8005fac:	0800cbf0 	.word	0x0800cbf0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	60bb      	str	r3, [r7, #8]
 8005fb6:	60fa      	str	r2, [r7, #12]
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fbc:	4a8e      	ldr	r2, [pc, #568]	@ (80061f8 <UART_SetConfig+0x4e0>)
 8005fbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	607a      	str	r2, [r7, #4]
 8005fca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005fd2:	f7fa ff1f 	bl	8000e14 <__aeabi_uldivmod>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4610      	mov	r0, r2
 8005fdc:	4619      	mov	r1, r3
 8005fde:	f04f 0200 	mov.w	r2, #0
 8005fe2:	f04f 0300 	mov.w	r3, #0
 8005fe6:	020b      	lsls	r3, r1, #8
 8005fe8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005fec:	0202      	lsls	r2, r0, #8
 8005fee:	6979      	ldr	r1, [r7, #20]
 8005ff0:	6849      	ldr	r1, [r1, #4]
 8005ff2:	0849      	lsrs	r1, r1, #1
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	4605      	mov	r5, r0
 8005ffa:	eb12 0804 	adds.w	r8, r2, r4
 8005ffe:	eb43 0905 	adc.w	r9, r3, r5
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	469a      	mov	sl, r3
 800600a:	4693      	mov	fp, r2
 800600c:	4652      	mov	r2, sl
 800600e:	465b      	mov	r3, fp
 8006010:	4640      	mov	r0, r8
 8006012:	4649      	mov	r1, r9
 8006014:	f7fa fefe 	bl	8000e14 <__aeabi_uldivmod>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	4613      	mov	r3, r2
 800601e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006026:	d308      	bcc.n	800603a <UART_SetConfig+0x322>
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800602e:	d204      	bcs.n	800603a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6a3a      	ldr	r2, [r7, #32]
 8006036:	60da      	str	r2, [r3, #12]
 8006038:	e0c8      	b.n	80061cc <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006040:	e0c4      	b.n	80061cc <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800604a:	d167      	bne.n	800611c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800604c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006050:	2b08      	cmp	r3, #8
 8006052:	d828      	bhi.n	80060a6 <UART_SetConfig+0x38e>
 8006054:	a201      	add	r2, pc, #4	@ (adr r2, 800605c <UART_SetConfig+0x344>)
 8006056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605a:	bf00      	nop
 800605c:	08006081 	.word	0x08006081
 8006060:	08006089 	.word	0x08006089
 8006064:	08006091 	.word	0x08006091
 8006068:	080060a7 	.word	0x080060a7
 800606c:	08006097 	.word	0x08006097
 8006070:	080060a7 	.word	0x080060a7
 8006074:	080060a7 	.word	0x080060a7
 8006078:	080060a7 	.word	0x080060a7
 800607c:	0800609f 	.word	0x0800609f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006080:	f7fd ffe0 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 8006084:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006086:	e014      	b.n	80060b2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006088:	f7fd ffee 	bl	8004068 <HAL_RCC_GetPCLK2Freq>
 800608c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800608e:	e010      	b.n	80060b2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006090:	4b5a      	ldr	r3, [pc, #360]	@ (80061fc <UART_SetConfig+0x4e4>)
 8006092:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006094:	e00d      	b.n	80060b2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006096:	f7fd ff21 	bl	8003edc <HAL_RCC_GetSysClockFreq>
 800609a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800609c:	e009      	b.n	80060b2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800609e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80060a4:	e005      	b.n	80060b2 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80060b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8089 	beq.w	80061cc <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060be:	4a4e      	ldr	r2, [pc, #312]	@ (80061f8 <UART_SetConfig+0x4e0>)
 80060c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060c4:	461a      	mov	r2, r3
 80060c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80060cc:	005a      	lsls	r2, r3, #1
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	085b      	lsrs	r3, r3, #1
 80060d4:	441a      	add	r2, r3
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	fbb2 f3f3 	udiv	r3, r2, r3
 80060de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	2b0f      	cmp	r3, #15
 80060e4:	d916      	bls.n	8006114 <UART_SetConfig+0x3fc>
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060ec:	d212      	bcs.n	8006114 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	f023 030f 	bic.w	r3, r3, #15
 80060f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	085b      	lsrs	r3, r3, #1
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	f003 0307 	and.w	r3, r3, #7
 8006102:	b29a      	uxth	r2, r3
 8006104:	8bfb      	ldrh	r3, [r7, #30]
 8006106:	4313      	orrs	r3, r2
 8006108:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	8bfa      	ldrh	r2, [r7, #30]
 8006110:	60da      	str	r2, [r3, #12]
 8006112:	e05b      	b.n	80061cc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800611a:	e057      	b.n	80061cc <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800611c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006120:	2b08      	cmp	r3, #8
 8006122:	d828      	bhi.n	8006176 <UART_SetConfig+0x45e>
 8006124:	a201      	add	r2, pc, #4	@ (adr r2, 800612c <UART_SetConfig+0x414>)
 8006126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612a:	bf00      	nop
 800612c:	08006151 	.word	0x08006151
 8006130:	08006159 	.word	0x08006159
 8006134:	08006161 	.word	0x08006161
 8006138:	08006177 	.word	0x08006177
 800613c:	08006167 	.word	0x08006167
 8006140:	08006177 	.word	0x08006177
 8006144:	08006177 	.word	0x08006177
 8006148:	08006177 	.word	0x08006177
 800614c:	0800616f 	.word	0x0800616f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006150:	f7fd ff78 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 8006154:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006156:	e014      	b.n	8006182 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006158:	f7fd ff86 	bl	8004068 <HAL_RCC_GetPCLK2Freq>
 800615c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800615e:	e010      	b.n	8006182 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006160:	4b26      	ldr	r3, [pc, #152]	@ (80061fc <UART_SetConfig+0x4e4>)
 8006162:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006164:	e00d      	b.n	8006182 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006166:	f7fd feb9 	bl	8003edc <HAL_RCC_GetSysClockFreq>
 800616a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800616c:	e009      	b.n	8006182 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800616e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006172:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006174:	e005      	b.n	8006182 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006180:	bf00      	nop
    }

    if (pclk != 0U)
 8006182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006184:	2b00      	cmp	r3, #0
 8006186:	d021      	beq.n	80061cc <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618c:	4a1a      	ldr	r2, [pc, #104]	@ (80061f8 <UART_SetConfig+0x4e0>)
 800618e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006192:	461a      	mov	r2, r3
 8006194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006196:	fbb3 f2f2 	udiv	r2, r3, r2
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	085b      	lsrs	r3, r3, #1
 80061a0:	441a      	add	r2, r3
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	2b0f      	cmp	r3, #15
 80061b0:	d909      	bls.n	80061c6 <UART_SetConfig+0x4ae>
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061b8:	d205      	bcs.n	80061c6 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	b29a      	uxth	r2, r3
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60da      	str	r2, [r3, #12]
 80061c4:	e002      	b.n	80061cc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	2200      	movs	r2, #0
 80061e0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2200      	movs	r2, #0
 80061e6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80061e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3730      	adds	r7, #48	@ 0x30
 80061f0:	46bd      	mov	sp, r7
 80061f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061f6:	bf00      	nop
 80061f8:	0800cbf0 	.word	0x0800cbf0
 80061fc:	00f42400 	.word	0x00f42400

08006200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800620c:	f003 0308 	and.w	r3, r3, #8
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00a      	beq.n	800622a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00a      	beq.n	800626e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006272:	f003 0304 	and.w	r3, r3, #4
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00a      	beq.n	8006290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006294:	f003 0310 	and.w	r3, r3, #16
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00a      	beq.n	80062b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b6:	f003 0320 	and.w	r3, r3, #32
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d01a      	beq.n	8006316 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062fe:	d10a      	bne.n	8006316 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800631a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	605a      	str	r2, [r3, #4]
  }
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	bc80      	pop	{r7}
 8006340:	4770      	bx	lr

08006342 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b086      	sub	sp, #24
 8006346:	af02      	add	r7, sp, #8
 8006348:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006352:	f7fc fb29 	bl	80029a8 <HAL_GetTick>
 8006356:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0308 	and.w	r3, r3, #8
 8006362:	2b08      	cmp	r3, #8
 8006364:	d10e      	bne.n	8006384 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006366:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f832 	bl	80063de <UART_WaitOnFlagUntilTimeout>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e028      	b.n	80063d6 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0304 	and.w	r3, r3, #4
 800638e:	2b04      	cmp	r3, #4
 8006390:	d10e      	bne.n	80063b0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006392:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f81c 	bl	80063de <UART_WaitOnFlagUntilTimeout>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e012      	b.n	80063d6 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2220      	movs	r2, #32
 80063b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b09c      	sub	sp, #112	@ 0x70
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	60f8      	str	r0, [r7, #12]
 80063e6:	60b9      	str	r1, [r7, #8]
 80063e8:	603b      	str	r3, [r7, #0]
 80063ea:	4613      	mov	r3, r2
 80063ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ee:	e0af      	b.n	8006550 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063f6:	f000 80ab 	beq.w	8006550 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063fa:	f7fc fad5 	bl	80029a8 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006406:	429a      	cmp	r2, r3
 8006408:	d302      	bcc.n	8006410 <UART_WaitOnFlagUntilTimeout+0x32>
 800640a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800640c:	2b00      	cmp	r3, #0
 800640e:	d140      	bne.n	8006492 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006416:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006418:	e853 3f00 	ldrex	r3, [r3]
 800641c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800641e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006420:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006424:	667b      	str	r3, [r7, #100]	@ 0x64
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	461a      	mov	r2, r3
 800642c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800642e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006430:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006432:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006434:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006436:	e841 2300 	strex	r3, r2, [r1]
 800643a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800643c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1e6      	bne.n	8006410 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3308      	adds	r3, #8
 8006448:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800644c:	e853 3f00 	ldrex	r3, [r3]
 8006450:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006454:	f023 0301 	bic.w	r3, r3, #1
 8006458:	663b      	str	r3, [r7, #96]	@ 0x60
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3308      	adds	r3, #8
 8006460:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006462:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006464:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006466:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006468:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800646a:	e841 2300 	strex	r3, r2, [r1]
 800646e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006470:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1e5      	bne.n	8006442 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2220      	movs	r2, #32
 800647a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2220      	movs	r2, #32
 8006482:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e06f      	b.n	8006572 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0304 	and.w	r3, r3, #4
 800649c:	2b00      	cmp	r3, #0
 800649e:	d057      	beq.n	8006550 <UART_WaitOnFlagUntilTimeout+0x172>
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	2b80      	cmp	r3, #128	@ 0x80
 80064a4:	d054      	beq.n	8006550 <UART_WaitOnFlagUntilTimeout+0x172>
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2b40      	cmp	r3, #64	@ 0x40
 80064aa:	d051      	beq.n	8006550 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064ba:	d149      	bne.n	8006550 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ce:	e853 3f00 	ldrex	r3, [r3]
 80064d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80064da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	461a      	mov	r2, r3
 80064e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80064e6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80064ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064ec:	e841 2300 	strex	r3, r2, [r1]
 80064f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80064f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e6      	bne.n	80064c6 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	3308      	adds	r3, #8
 80064fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	e853 3f00 	ldrex	r3, [r3]
 8006506:	613b      	str	r3, [r7, #16]
   return(result);
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	f023 0301 	bic.w	r3, r3, #1
 800650e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3308      	adds	r3, #8
 8006516:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006518:	623a      	str	r2, [r7, #32]
 800651a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651c:	69f9      	ldr	r1, [r7, #28]
 800651e:	6a3a      	ldr	r2, [r7, #32]
 8006520:	e841 2300 	strex	r3, r2, [r1]
 8006524:	61bb      	str	r3, [r7, #24]
   return(result);
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1e5      	bne.n	80064f8 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2220      	movs	r2, #32
 8006530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2220      	movs	r2, #32
 8006538:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2220      	movs	r2, #32
 8006540:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e010      	b.n	8006572 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	69da      	ldr	r2, [r3, #28]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	4013      	ands	r3, r2
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	429a      	cmp	r2, r3
 800655e:	bf0c      	ite	eq
 8006560:	2301      	moveq	r3, #1
 8006562:	2300      	movne	r3, #0
 8006564:	b2db      	uxtb	r3, r3
 8006566:	461a      	mov	r2, r3
 8006568:	79fb      	ldrb	r3, [r7, #7]
 800656a:	429a      	cmp	r2, r3
 800656c:	f43f af40 	beq.w	80063f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3770      	adds	r7, #112	@ 0x70
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800657a:	b480      	push	{r7}
 800657c:	b095      	sub	sp, #84	@ 0x54
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800658a:	e853 3f00 	ldrex	r3, [r3]
 800658e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006592:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	461a      	mov	r2, r3
 800659e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80065a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065a8:	e841 2300 	strex	r3, r2, [r1]
 80065ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1e6      	bne.n	8006582 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3308      	adds	r3, #8
 80065ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	e853 3f00 	ldrex	r3, [r3]
 80065c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065ca:	f023 0301 	bic.w	r3, r3, #1
 80065ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3308      	adds	r3, #8
 80065d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065e0:	e841 2300 	strex	r3, r2, [r1]
 80065e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1e3      	bne.n	80065b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d118      	bne.n	8006626 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	e853 3f00 	ldrex	r3, [r3]
 8006600:	60bb      	str	r3, [r7, #8]
   return(result);
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f023 0310 	bic.w	r3, r3, #16
 8006608:	647b      	str	r3, [r7, #68]	@ 0x44
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006612:	61bb      	str	r3, [r7, #24]
 8006614:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	6979      	ldr	r1, [r7, #20]
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	e841 2300 	strex	r3, r2, [r1]
 800661e:	613b      	str	r3, [r7, #16]
   return(result);
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e6      	bne.n	80065f4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2220      	movs	r2, #32
 800662a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800663a:	bf00      	nop
 800663c:	3754      	adds	r7, #84	@ 0x54
 800663e:	46bd      	mov	sp, r7
 8006640:	bc80      	pop	{r7}
 8006642:	4770      	bx	lr

08006644 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006650:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f7ff fb43 	bl	8005cee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006668:	bf00      	nop
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b088      	sub	sp, #32
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	e853 3f00 	ldrex	r3, [r3]
 8006684:	60bb      	str	r3, [r7, #8]
   return(result);
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800668c:	61fb      	str	r3, [r7, #28]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	461a      	mov	r2, r3
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	61bb      	str	r3, [r7, #24]
 8006698:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	6979      	ldr	r1, [r7, #20]
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	e841 2300 	strex	r3, r2, [r1]
 80066a2:	613b      	str	r3, [r7, #16]
   return(result);
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1e6      	bne.n	8006678 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2220      	movs	r2, #32
 80066ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7ff fb0f 	bl	8005cdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066be:	bf00      	nop
 80066c0:	3720      	adds	r7, #32
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b083      	sub	sp, #12
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80066ce:	bf00      	nop
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bc80      	pop	{r7}
 80066d6:	4770      	bx	lr

080066d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bc80      	pop	{r7}
 80066e8:	4770      	bx	lr

080066ea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b083      	sub	sp, #12
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80066f2:	bf00      	nop
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bc80      	pop	{r7}
 80066fa:	4770      	bx	lr

080066fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800670a:	2b01      	cmp	r3, #1
 800670c:	d101      	bne.n	8006712 <HAL_UARTEx_DisableFifoMode+0x16>
 800670e:	2302      	movs	r3, #2
 8006710:	e027      	b.n	8006762 <HAL_UARTEx_DisableFifoMode+0x66>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2224      	movs	r2, #36	@ 0x24
 800671e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0201 	bic.w	r2, r2, #1
 8006738:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006740:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2220      	movs	r2, #32
 8006754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	bc80      	pop	{r7}
 800676a:	4770      	bx	lr

0800676c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800677c:	2b01      	cmp	r3, #1
 800677e:	d101      	bne.n	8006784 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006780:	2302      	movs	r3, #2
 8006782:	e02d      	b.n	80067e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2224      	movs	r2, #36	@ 0x24
 8006790:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0201 	bic.w	r2, r2, #1
 80067aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	430a      	orrs	r2, r1
 80067be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f84f 	bl	8006864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d101      	bne.n	8006800 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067fc:	2302      	movs	r3, #2
 80067fe:	e02d      	b.n	800685c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2224      	movs	r2, #36	@ 0x24
 800680c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 0201 	bic.w	r2, r2, #1
 8006826:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	430a      	orrs	r2, r1
 800683a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f811 	bl	8006864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2220      	movs	r2, #32
 800684e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006870:	2b00      	cmp	r3, #0
 8006872:	d108      	bne.n	8006886 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006884:	e031      	b.n	80068ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006886:	2308      	movs	r3, #8
 8006888:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800688a:	2308      	movs	r3, #8
 800688c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	0e5b      	lsrs	r3, r3, #25
 8006896:	b2db      	uxtb	r3, r3
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	0f5b      	lsrs	r3, r3, #29
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	f003 0307 	and.w	r3, r3, #7
 80068ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068ae:	7bbb      	ldrb	r3, [r7, #14]
 80068b0:	7b3a      	ldrb	r2, [r7, #12]
 80068b2:	4910      	ldr	r1, [pc, #64]	@ (80068f4 <UARTEx_SetNbDataToProcess+0x90>)
 80068b4:	5c8a      	ldrb	r2, [r1, r2]
 80068b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80068ba:	7b3a      	ldrb	r2, [r7, #12]
 80068bc:	490e      	ldr	r1, [pc, #56]	@ (80068f8 <UARTEx_SetNbDataToProcess+0x94>)
 80068be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	7b7a      	ldrb	r2, [r7, #13]
 80068d0:	4908      	ldr	r1, [pc, #32]	@ (80068f4 <UARTEx_SetNbDataToProcess+0x90>)
 80068d2:	5c8a      	ldrb	r2, [r1, r2]
 80068d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80068d8:	7b7a      	ldrb	r2, [r7, #13]
 80068da:	4907      	ldr	r1, [pc, #28]	@ (80068f8 <UARTEx_SetNbDataToProcess+0x94>)
 80068dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068de:	fb93 f3f2 	sdiv	r3, r3, r2
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80068ea:	bf00      	nop
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bc80      	pop	{r7}
 80068f2:	4770      	bx	lr
 80068f4:	0800cc08 	.word	0x0800cc08
 80068f8:	0800cc10 	.word	0x0800cc10

080068fc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b08b      	sub	sp, #44	@ 0x2c
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
#else
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	fa93 f3a3 	rbit	r3, r3
 8006916:	613b      	str	r3, [r7, #16]
  return result;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006922:	2320      	movs	r3, #32
 8006924:	e003      	b.n	800692e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	fab3 f383 	clz	r3, r3
 800692c:	b2db      	uxtb	r3, r3
 800692e:	005b      	lsls	r3, r3, #1
 8006930:	2103      	movs	r1, #3
 8006932:	fa01 f303 	lsl.w	r3, r1, r3
 8006936:	43db      	mvns	r3, r3
 8006938:	401a      	ands	r2, r3
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	fa93 f3a3 	rbit	r3, r3
 8006944:	61fb      	str	r3, [r7, #28]
  return result;
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800694a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694c:	2b00      	cmp	r3, #0
 800694e:	d101      	bne.n	8006954 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006950:	2320      	movs	r3, #32
 8006952:	e003      	b.n	800695c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006956:	fab3 f383 	clz	r3, r3
 800695a:	b2db      	uxtb	r3, r3
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	6879      	ldr	r1, [r7, #4]
 8006960:	fa01 f303 	lsl.w	r3, r1, r3
 8006964:	431a      	orrs	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	601a      	str	r2, [r3, #0]
#endif /* CORE_CM0PLUS */
}
 800696a:	bf00      	nop
 800696c:	372c      	adds	r7, #44	@ 0x2c
 800696e:	46bd      	mov	sp, r7
 8006970:	bc80      	pop	{r7}
 8006972:	4770      	bx	lr

08006974 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	43db      	mvns	r3, r3
 8006988:	401a      	ands	r2, r3
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	6879      	ldr	r1, [r7, #4]
 800698e:	fb01 f303 	mul.w	r3, r1, r3
 8006992:	431a      	orrs	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	605a      	str	r2, [r3, #4]
}
 8006998:	bf00      	nop
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	bc80      	pop	{r7}
 80069a0:	4770      	bx	lr

080069a2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b08b      	sub	sp, #44	@ 0x2c
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	60f8      	str	r0, [r7, #12]
 80069aa:	60b9      	str	r1, [r7, #8]
 80069ac:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
#else
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	689a      	ldr	r2, [r3, #8]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	fa93 f3a3 	rbit	r3, r3
 80069bc:	613b      	str	r3, [r7, #16]
  return result;
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80069c8:	2320      	movs	r3, #32
 80069ca:	e003      	b.n	80069d4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	fab3 f383 	clz	r3, r3
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	2103      	movs	r1, #3
 80069d8:	fa01 f303 	lsl.w	r3, r1, r3
 80069dc:	43db      	mvns	r3, r3
 80069de:	401a      	ands	r2, r3
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069e4:	6a3b      	ldr	r3, [r7, #32]
 80069e6:	fa93 f3a3 	rbit	r3, r3
 80069ea:	61fb      	str	r3, [r7, #28]
  return result;
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80069f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80069f6:	2320      	movs	r3, #32
 80069f8:	e003      	b.n	8006a02 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80069fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fc:	fab3 f383 	clz	r3, r3
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	005b      	lsls	r3, r3, #1
 8006a04:	6879      	ldr	r1, [r7, #4]
 8006a06:	fa01 f303 	lsl.w	r3, r1, r3
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
#endif /* CORE_CM0PLUS */
}
 8006a10:	bf00      	nop
 8006a12:	372c      	adds	r7, #44	@ 0x2c
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bc80      	pop	{r7}
 8006a18:	4770      	bx	lr

08006a1a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b08b      	sub	sp, #44	@ 0x2c
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	60f8      	str	r0, [r7, #12]
 8006a22:	60b9      	str	r1, [r7, #8]
 8006a24:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
#else
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	fa93 f3a3 	rbit	r3, r3
 8006a34:	613b      	str	r3, [r7, #16]
  return result;
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006a40:	2320      	movs	r3, #32
 8006a42:	e003      	b.n	8006a4c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	fab3 f383 	clz	r3, r3
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	005b      	lsls	r3, r3, #1
 8006a4e:	2103      	movs	r1, #3
 8006a50:	fa01 f303 	lsl.w	r3, r1, r3
 8006a54:	43db      	mvns	r3, r3
 8006a56:	401a      	ands	r2, r3
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	fa93 f3a3 	rbit	r3, r3
 8006a62:	61fb      	str	r3, [r7, #28]
  return result;
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006a6e:	2320      	movs	r3, #32
 8006a70:	e003      	b.n	8006a7a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a74:	fab3 f383 	clz	r3, r3
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	005b      	lsls	r3, r3, #1
 8006a7c:	6879      	ldr	r1, [r7, #4]
 8006a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a82:	431a      	orrs	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	60da      	str	r2, [r3, #12]
#endif /* CORE_CM0PLUS */
}
 8006a88:	bf00      	nop
 8006a8a:	372c      	adds	r7, #44	@ 0x2c
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bc80      	pop	{r7}
 8006a90:	4770      	bx	lr

08006a92 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b08b      	sub	sp, #44	@ 0x2c
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	60f8      	str	r0, [r7, #12]
 8006a9a:	60b9      	str	r1, [r7, #8]
 8006a9c:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
#else
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a1a      	ldr	r2, [r3, #32]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	fa93 f3a3 	rbit	r3, r3
 8006aac:	613b      	str	r3, [r7, #16]
  return result;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d101      	bne.n	8006abc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006ab8:	2320      	movs	r3, #32
 8006aba:	e003      	b.n	8006ac4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	fab3 f383 	clz	r3, r3
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	210f      	movs	r1, #15
 8006ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8006acc:	43db      	mvns	r3, r3
 8006ace:	401a      	ands	r2, r3
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	fa93 f3a3 	rbit	r3, r3
 8006ada:	61fb      	str	r3, [r7, #28]
  return result;
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d101      	bne.n	8006aea <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006ae6:	2320      	movs	r3, #32
 8006ae8:	e003      	b.n	8006af2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aec:	fab3 f383 	clz	r3, r3
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	6879      	ldr	r1, [r7, #4]
 8006af6:	fa01 f303 	lsl.w	r3, r1, r3
 8006afa:	431a      	orrs	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
#endif /* CORE_CM0PLUS */
}
 8006b00:	bf00      	nop
 8006b02:	372c      	adds	r7, #44	@ 0x2c
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bc80      	pop	{r7}
 8006b08:	4770      	bx	lr

08006b0a <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b08b      	sub	sp, #44	@ 0x2c
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	60f8      	str	r0, [r7, #12]
 8006b12:	60b9      	str	r1, [r7, #8]
 8006b14:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
#else
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	0a1b      	lsrs	r3, r3, #8
 8006b1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	fa93 f3a3 	rbit	r3, r3
 8006b26:	613b      	str	r3, [r7, #16]
  return result;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006b32:	2320      	movs	r3, #32
 8006b34:	e003      	b.n	8006b3e <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	fab3 f383 	clz	r3, r3
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	210f      	movs	r1, #15
 8006b42:	fa01 f303 	lsl.w	r3, r1, r3
 8006b46:	43db      	mvns	r3, r3
 8006b48:	401a      	ands	r2, r3
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	0a1b      	lsrs	r3, r3, #8
 8006b4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	fa93 f3a3 	rbit	r3, r3
 8006b56:	61fb      	str	r3, [r7, #28]
  return result;
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006b62:	2320      	movs	r3, #32
 8006b64:	e003      	b.n	8006b6e <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b68:	fab3 f383 	clz	r3, r3
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	6879      	ldr	r1, [r7, #4]
 8006b72:	fa01 f303 	lsl.w	r3, r1, r3
 8006b76:	431a      	orrs	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
#endif /* CORE_CM0PLUS */
}
 8006b7c:	bf00      	nop
 8006b7e:	372c      	adds	r7, #44	@ 0x2c
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bc80      	pop	{r7}
 8006b84:	4770      	bx	lr

08006b86 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b088      	sub	sp, #32
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	6039      	str	r1, [r7, #0]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
#if defined(CORE_CM0PLUS)
  pinpos = 0;
#else
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	fa93 f3a3 	rbit	r3, r3
 8006b9c:	60fb      	str	r3, [r7, #12]
  return result;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <LL_GPIO_Init+0x26>
    return 32U;
 8006ba8:	2320      	movs	r3, #32
 8006baa:	e003      	b.n	8006bb4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	fab3 f383 	clz	r3, r3
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	61fb      	str	r3, [r7, #28]
#endif /* CORE_CM0PLUS */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006bb6:	e047      	b.n	8006c48 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d039      	beq.n	8006c42 <LL_GPIO_Init+0xbc>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d003      	beq.n	8006bde <LL_GPIO_Init+0x58>
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d10d      	bne.n	8006bfa <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	461a      	mov	r2, r3
 8006be4:	69b9      	ldr	r1, [r7, #24]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7ff fedb 	bl	80069a2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	69b9      	ldr	r1, [r7, #24]
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7ff febd 	bl	8006974 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	69b9      	ldr	r1, [r7, #24]
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff ff09 	bl	8006a1a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d111      	bne.n	8006c34 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	2bff      	cmp	r3, #255	@ 0xff
 8006c14:	d807      	bhi.n	8006c26 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	69b9      	ldr	r1, [r7, #24]
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7ff ff37 	bl	8006a92 <LL_GPIO_SetAFPin_0_7>
 8006c24:	e006      	b.n	8006c34 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	69b9      	ldr	r1, [r7, #24]
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7ff ff6b 	bl	8006b0a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	69b9      	ldr	r1, [r7, #24]
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f7ff fe5d 	bl	80068fc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	3301      	adds	r3, #1
 8006c46:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1b0      	bne.n	8006bb8 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8006c56:	2301      	movs	r3, #1
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3720      	adds	r7, #32
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <LL_I2C_Enable>:
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f043 0201 	orr.w	r2, r3, #1
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	601a      	str	r2, [r3, #0]
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bc80      	pop	{r7}
 8006c7c:	4770      	bx	lr

08006c7e <LL_I2C_Disable>:
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b083      	sub	sp, #12
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f023 0201 	bic.w	r2, r3, #1
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	601a      	str	r2, [r3, #0]
}
 8006c92:	bf00      	nop
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bc80      	pop	{r7}
 8006c9a:	4770      	bx	lr

08006c9c <LL_I2C_ConfigFilters>:
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	0219      	lsls	r1, r3, #8
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	430b      	orrs	r3, r1
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	601a      	str	r2, [r3, #0]
}
 8006cbe:	bf00      	nop
 8006cc0:	3714      	adds	r7, #20
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bc80      	pop	{r7}
 8006cc6:	4770      	bx	lr

08006cc8 <LL_I2C_SetOwnAddress1>:
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006cdc:	f023 0307 	bic.w	r3, r3, #7
 8006ce0:	68b9      	ldr	r1, [r7, #8]
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	609a      	str	r2, [r3, #8]
}
 8006cec:	bf00      	nop
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bc80      	pop	{r7}
 8006cf4:	4770      	bx	lr

08006cf6 <LL_I2C_EnableOwnAddress1>:
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b083      	sub	sp, #12
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	609a      	str	r2, [r3, #8]
}
 8006d0a:	bf00      	nop
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bc80      	pop	{r7}
 8006d12:	4770      	bx	lr

08006d14 <LL_I2C_DisableOwnAddress1>:
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	609a      	str	r2, [r3, #8]
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bc80      	pop	{r7}
 8006d30:	4770      	bx	lr

08006d32 <LL_I2C_SetTiming>:
{
 8006d32:	b480      	push	{r7}
 8006d34:	b083      	sub	sp, #12
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	611a      	str	r2, [r3, #16]
}
 8006d42:	bf00      	nop
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bc80      	pop	{r7}
 8006d4a:	4770      	bx	lr

08006d4c <LL_I2C_SetMode>:
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	431a      	orrs	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	601a      	str	r2, [r3, #0]
}
 8006d66:	bf00      	nop
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bc80      	pop	{r7}
 8006d6e:	4770      	bx	lr

08006d70 <LL_I2C_AcknowledgeNextData>:
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	431a      	orrs	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	605a      	str	r2, [r3, #4]
}
 8006d8a:	bf00      	nop
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bc80      	pop	{r7}
 8006d92:	4770      	bx	lr

08006d94 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7ff ff6d 	bl	8006c7e <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	6899      	ldr	r1, [r3, #8]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	461a      	mov	r2, r3
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7ff ff74 	bl	8006c9c <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	4619      	mov	r1, r3
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7ff ffb9 	bl	8006d32 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7ff ff4d 	bl	8006c60 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7ff ffa4 	bl	8006d14 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	6919      	ldr	r1, [r3, #16]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7ff ff76 	bl	8006cc8 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d002      	beq.n	8006dea <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f7ff ff86 	bl	8006cf6 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4619      	mov	r1, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f7ff ffab 	bl	8006d4c <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7ff ffb7 	bl	8006d70 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8006e02:	2301      	movs	r3, #1
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8006e14:	4b0f      	ldr	r3, [pc, #60]	@ (8006e54 <LL_mDelay+0x48>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay;
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8006e1a:	68bb      	ldr	r3, [r7, #8]
  tmpDelay  = Delay;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e26:	d00c      	beq.n	8006e42 <LL_mDelay+0x36>
  {
    tmpDelay ++;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay  != 0U)
 8006e2e:	e008      	b.n	8006e42 <LL_mDelay+0x36>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8006e30:	4b08      	ldr	r3, [pc, #32]	@ (8006e54 <LL_mDelay+0x48>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <LL_mDelay+0x36>
    {
      tmpDelay --;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	60fb      	str	r3, [r7, #12]
  while (tmpDelay  != 0U)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1f3      	bne.n	8006e30 <LL_mDelay+0x24>
    }
  }
}
 8006e48:	bf00      	nop
 8006e4a:	bf00      	nop
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bc80      	pop	{r7}
 8006e52:	4770      	bx	lr
 8006e54:	e000e010 	.word	0xe000e010

08006e58 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8006e5c:	4907      	ldr	r1, [pc, #28]	@ (8006e7c <MX_FATFS_Init+0x24>)
 8006e5e:	4808      	ldr	r0, [pc, #32]	@ (8006e80 <MX_FATFS_Init+0x28>)
 8006e60:	f002 fede 	bl	8009c20 <FATFS_LinkDriver>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d002      	beq.n	8006e70 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8006e6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e6e:	e003      	b.n	8006e78 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8006e70:	4b04      	ldr	r3, [pc, #16]	@ (8006e84 <MX_FATFS_Init+0x2c>)
 8006e72:	2201      	movs	r2, #1
 8006e74:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8006e76:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	200009cc 	.word	0x200009cc
 8006e80:	2000000c 	.word	0x2000000c
 8006e84:	200009d0 	.word	0x200009d0

08006e88 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006e8c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bc80      	pop	{r7}
 8006e94:	4770      	bx	lr

08006e96 <USER_initialize>:
 * @brief  Initializes a Drive
 * @param  pdrv: Physical drive number (0..)
 * @retval DSTATUS: Operation status
 */
DSTATUS USER_initialize(BYTE pdrv /* Physical drive nmuber to identify the drive */
) {
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b082      	sub	sp, #8
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8006ea0:	79fb      	ldrb	r3, [r7, #7]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 f9d0 	bl	8007248 <USER_SPI_initialize>
 8006ea8:	4603      	mov	r3, r0
	/* USER CODE END INIT */
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <USER_status>:
 * @brief  Gets Disk Status
 * @param  pdrv: Physical drive number (0..)
 * @retval DSTATUS: Operation status
 */
DSTATUS USER_status(BYTE pdrv /* Physical drive number to identify the drive */
) {
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	4603      	mov	r3, r0
 8006eba:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8006ebc:	79fb      	ldrb	r3, [r7, #7]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fab8 	bl	8007434 <USER_SPI_status>
 8006ec4:	4603      	mov	r3, r0
	/* USER CODE END STATUS */
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <USER_read>:
 */
DRESULT USER_read(BYTE pdrv, /* Physical drive nmuber to identify the drive */
BYTE *buff, /* Data buffer to store read data */
DWORD sector, /* Sector address in LBA */
UINT count /* Number of sectors to read */
) {
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
 8006ed8:	603b      	str	r3, [r7, #0]
 8006eda:	4603      	mov	r3, r0
 8006edc:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8006ede:	7bf8      	ldrb	r0, [r7, #15]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	68b9      	ldr	r1, [r7, #8]
 8006ee6:	f000 fab9 	bl	800745c <USER_SPI_read>
 8006eea:	4603      	mov	r3, r0
	/* USER CODE END READ */
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <USER_write>:
#if _USE_WRITE == 1
DRESULT USER_write(BYTE pdrv, /* Physical drive nmuber to identify the drive */
const BYTE *buff, /* Data to be written */
DWORD sector, /* Sector address in LBA */
UINT count /* Number of sectors to write */
) {
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	607a      	str	r2, [r7, #4]
 8006efe:	603b      	str	r3, [r7, #0]
 8006f00:	4603      	mov	r3, r0
 8006f02:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8006f04:	7bf8      	ldrb	r0, [r7, #15]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	68b9      	ldr	r1, [r7, #8]
 8006f0c:	f000 fb0c 	bl	8007528 <USER_SPI_write>
 8006f10:	4603      	mov	r3, r0
	/* USER CODE END WRITE */
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <USER_ioctl>:
 */
#if _USE_IOCTL == 1
DRESULT USER_ioctl(BYTE pdrv, /* Physical drive nmuber (0..) */
BYTE cmd, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b082      	sub	sp, #8
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	4603      	mov	r3, r0
 8006f22:	603a      	str	r2, [r7, #0]
 8006f24:	71fb      	strb	r3, [r7, #7]
 8006f26:	460b      	mov	r3, r1
 8006f28:	71bb      	strb	r3, [r7, #6]
	/* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8006f2a:	79b9      	ldrb	r1, [r7, #6]
 8006f2c:	79fb      	ldrb	r3, [r7, #7]
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 fb75 	bl	8007620 <USER_SPI_ioctl>
 8006f36:	4603      	mov	r3, r0
	/* USER CODE END IOCTL */
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <SPI_Timer_On>:
static BYTE CardType; /* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
	spiTimerTickStart = HAL_GetTick();
 8006f48:	f7fb fd2e 	bl	80029a8 <HAL_GetTick>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	4a04      	ldr	r2, [pc, #16]	@ (8006f60 <SPI_Timer_On+0x20>)
 8006f50:	6013      	str	r3, [r2, #0]
	spiTimerTickDelay = waitTicks;
 8006f52:	4a04      	ldr	r2, [pc, #16]	@ (8006f64 <SPI_Timer_On+0x24>)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6013      	str	r3, [r2, #0]
}
 8006f58:	bf00      	nop
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	200009d4 	.word	0x200009d4
 8006f64:	200009d8 	.word	0x200009d8

08006f68 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	af00      	add	r7, sp, #0
	return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006f6c:	f7fb fd1c 	bl	80029a8 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	4b06      	ldr	r3, [pc, #24]	@ (8006f8c <SPI_Timer_Status+0x24>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	1ad2      	subs	r2, r2, r3
 8006f78:	4b05      	ldr	r3, [pc, #20]	@ (8006f90 <SPI_Timer_Status+0x28>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	bf34      	ite	cc
 8006f80:	2301      	movcc	r3, #1
 8006f82:	2300      	movcs	r3, #0
 8006f84:	b2db      	uxtb	r3, r3
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	200009d4 	.word	0x200009d4
 8006f90:	200009d8 	.word	0x200009d8

08006f94 <xchg_spi>:
/* SPI controls (Platform dependent)                                     */
/*-----------------------------------------------------------------------*/

/* Exchange a byte */
static BYTE xchg_spi(BYTE dat /* Data to send */
) {
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af02      	add	r7, sp, #8
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
	HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006f9e:	f107 020f 	add.w	r2, r7, #15
 8006fa2:	1df9      	adds	r1, r7, #7
 8006fa4:	2332      	movs	r3, #50	@ 0x32
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	2301      	movs	r3, #1
 8006faa:	4804      	ldr	r0, [pc, #16]	@ (8006fbc <xchg_spi+0x28>)
 8006fac:	f7fd fd99 	bl	8004ae2 <HAL_SPI_TransmitReceive>
	return rxDat;
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	200002d0 	.word	0x200002d0

08006fc0 <rcvr_spi_multi>:

/* Receive multiple byte */
static
void rcvr_spi_multi(BYTE *buff, /* Pointer to data buffer */
UINT btr /* Number of bytes to receive (even number) */
) {
 8006fc0:	b590      	push	{r4, r7, lr}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
	for (UINT i = 0; i < btr; i++) {
 8006fca:	2300      	movs	r3, #0
 8006fcc:	60fb      	str	r3, [r7, #12]
 8006fce:	e00a      	b.n	8006fe6 <rcvr_spi_multi+0x26>
		*(buff + i) = xchg_spi(0xFF);
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	18d4      	adds	r4, r2, r3
 8006fd6:	20ff      	movs	r0, #255	@ 0xff
 8006fd8:	f7ff ffdc 	bl	8006f94 <xchg_spi>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	7023      	strb	r3, [r4, #0]
	for (UINT i = 0; i < btr; i++) {
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	60fb      	str	r3, [r7, #12]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d3f0      	bcc.n	8006fd0 <rcvr_spi_multi+0x10>
	}
}
 8006fee:	bf00      	nop
 8006ff0:	bf00      	nop
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd90      	pop	{r4, r7, pc}

08006ff8 <xmit_spi_multi>:
#if _USE_WRITE
/* Send multiple byte */
static
void xmit_spi_multi(const BYTE *buff, /* Pointer to the data */
UINT btx /* Number of bytes to send (even number) */
) {
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, (uint8_t*) buff, btx, HAL_MAX_DELAY);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	b29a      	uxth	r2, r3
 8007006:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800700a:	6879      	ldr	r1, [r7, #4]
 800700c:	4803      	ldr	r0, [pc, #12]	@ (800701c <xmit_spi_multi+0x24>)
 800700e:	f7fd fbd1 	bl	80047b4 <HAL_SPI_Transmit>
}
 8007012:	bf00      	nop
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	200002d0 	.word	0x200002d0

08007020 <wait_ready>:
/*-----------------------------------------------------------------------*/

static
int wait_ready( /* 1:Ready, 0:Timeout */
UINT wt /* Timeout [ms] */
) {
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8007028:	f7fb fcbe 	bl	80029a8 <HAL_GetTick>
 800702c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t) wt;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8007032:	20ff      	movs	r0, #255	@ 0xff
 8007034:	f7ff ffae 	bl	8006f94 <xchg_spi>
 8007038:	4603      	mov	r3, r0
 800703a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF
			&& ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay)); /* Wait for card goes ready or timeout */
 800703c:	7bfb      	ldrb	r3, [r7, #15]
 800703e:	2bff      	cmp	r3, #255	@ 0xff
 8007040:	d007      	beq.n	8007052 <wait_ready+0x32>
 8007042:	f7fb fcb1 	bl	80029a8 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	429a      	cmp	r2, r3
 8007050:	d8ef      	bhi.n	8007032 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8007052:	7bfb      	ldrb	r3, [r7, #15]
 8007054:	2bff      	cmp	r3, #255	@ 0xff
 8007056:	bf0c      	ite	eq
 8007058:	2301      	moveq	r3, #1
 800705a:	2300      	movne	r3, #0
 800705c:	b2db      	uxtb	r3, r3
}
 800705e:	4618      	mov	r0, r3
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <despiselect>:
/*-----------------------------------------------------------------------*/
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect(void) {
 8007066:	b580      	push	{r7, lr}
 8007068:	af00      	add	r7, sp, #0
	CS_HIGH(); /* Set CS# high */
 800706a:	2201      	movs	r2, #1
 800706c:	2110      	movs	r1, #16
 800706e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007072:	f7fb ffcb 	bl	800300c <HAL_GPIO_WritePin>
	xchg_spi(0xFF); /* Dummy clock (force DO hi-z for multiple slave SPI) */
 8007076:	20ff      	movs	r0, #255	@ 0xff
 8007078:	f7ff ff8c 	bl	8006f94 <xchg_spi>

}
 800707c:	bf00      	nop
 800707e:	bd80      	pop	{r7, pc}

08007080 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect(void) /* 1:OK, 0:Timeout */
{
 8007080:	b580      	push	{r7, lr}
 8007082:	af00      	add	r7, sp, #0
	CS_LOW(); /* Set CS# low */
 8007084:	2200      	movs	r2, #0
 8007086:	2110      	movs	r1, #16
 8007088:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800708c:	f7fb ffbe 	bl	800300c <HAL_GPIO_WritePin>
	xchg_spi(0xFF); /* Dummy clock (force DO enabled) */
 8007090:	20ff      	movs	r0, #255	@ 0xff
 8007092:	f7ff ff7f 	bl	8006f94 <xchg_spi>
	if (wait_ready(500))
 8007096:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800709a:	f7ff ffc1 	bl	8007020 <wait_ready>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <spiselect+0x28>
		return 1; /* Wait for card ready */
 80070a4:	2301      	movs	r3, #1
 80070a6:	e002      	b.n	80070ae <spiselect+0x2e>

	despiselect();
 80070a8:	f7ff ffdd 	bl	8007066 <despiselect>
	return 0; /* Timeout */
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <rcvr_datablock>:

static
int rcvr_datablock( /* 1:OK, 0:Error */
BYTE *buff, /* Data buffer */
UINT btr /* Data block length (byte) */
) {
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b084      	sub	sp, #16
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	6039      	str	r1, [r7, #0]
	BYTE token;

	SPI_Timer_On(200);
 80070bc:	20c8      	movs	r0, #200	@ 0xc8
 80070be:	f7ff ff3f 	bl	8006f40 <SPI_Timer_On>
	do { /* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80070c2:	20ff      	movs	r0, #255	@ 0xff
 80070c4:	f7ff ff66 	bl	8006f94 <xchg_spi>
 80070c8:	4603      	mov	r3, r0
 80070ca:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
 80070ce:	2bff      	cmp	r3, #255	@ 0xff
 80070d0:	d104      	bne.n	80070dc <rcvr_datablock+0x2a>
 80070d2:	f7ff ff49 	bl	8006f68 <SPI_Timer_Status>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1f2      	bne.n	80070c2 <rcvr_datablock+0x10>
	if (token != 0xFE)
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
 80070de:	2bfe      	cmp	r3, #254	@ 0xfe
 80070e0:	d001      	beq.n	80070e6 <rcvr_datablock+0x34>
		return 0; /* Function fails if invalid DataStart token or timeout */
 80070e2:	2300      	movs	r3, #0
 80070e4:	e00a      	b.n	80070fc <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr); /* Store trailing data to the buffer */
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7ff ff69 	bl	8006fc0 <rcvr_spi_multi>
	xchg_spi(0xFF);
 80070ee:	20ff      	movs	r0, #255	@ 0xff
 80070f0:	f7ff ff50 	bl	8006f94 <xchg_spi>
	xchg_spi(0xFF); /* Discard CRC */
 80070f4:	20ff      	movs	r0, #255	@ 0xff
 80070f6:	f7ff ff4d 	bl	8006f94 <xchg_spi>

	return 1; /* Function succeeded */
 80070fa:	2301      	movs	r3, #1
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <xmit_datablock>:
#if _USE_WRITE
static
int xmit_datablock( /* 1:OK, 0:Failed */
const BYTE *buff, /* Ponter to 512 byte data to be sent */
BYTE token /* Token */
) {
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	460b      	mov	r3, r1
 800710e:	70fb      	strb	r3, [r7, #3]
	BYTE resp;

	if (!wait_ready(500))
 8007110:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007114:	f7ff ff84 	bl	8007020 <wait_ready>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d101      	bne.n	8007122 <xmit_datablock+0x1e>
		return 0; /* Wait for card ready */
 800711e:	2300      	movs	r3, #0
 8007120:	e01e      	b.n	8007160 <xmit_datablock+0x5c>

	xchg_spi(token); /* Send token */
 8007122:	78fb      	ldrb	r3, [r7, #3]
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff ff35 	bl	8006f94 <xchg_spi>
	if (token != 0xFD) { /* Send data if token is other than StopTran */
 800712a:	78fb      	ldrb	r3, [r7, #3]
 800712c:	2bfd      	cmp	r3, #253	@ 0xfd
 800712e:	d016      	beq.n	800715e <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512); /* Data */
 8007130:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7ff ff5f 	bl	8006ff8 <xmit_spi_multi>
		xchg_spi(0xFF);
 800713a:	20ff      	movs	r0, #255	@ 0xff
 800713c:	f7ff ff2a 	bl	8006f94 <xchg_spi>
		xchg_spi(0xFF); /* Dummy CRC */
 8007140:	20ff      	movs	r0, #255	@ 0xff
 8007142:	f7ff ff27 	bl	8006f94 <xchg_spi>

		resp = xchg_spi(0xFF); /* Receive data resp */
 8007146:	20ff      	movs	r0, #255	@ 0xff
 8007148:	f7ff ff24 	bl	8006f94 <xchg_spi>
 800714c:	4603      	mov	r3, r0
 800714e:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05)
 8007150:	7bfb      	ldrb	r3, [r7, #15]
 8007152:	f003 031f 	and.w	r3, r3, #31
 8007156:	2b05      	cmp	r3, #5
 8007158:	d001      	beq.n	800715e <xmit_datablock+0x5a>
			return 0; /* Function fails if the data packet was not accepted */
 800715a:	2300      	movs	r3, #0
 800715c:	e000      	b.n	8007160 <xmit_datablock+0x5c>
	}
	return 1;
 800715e:	2301      	movs	r3, #1
}
 8007160:	4618      	mov	r0, r3
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <send_cmd>:
/*-----------------------------------------------------------------------*/

static BYTE send_cmd( /* Return value: R1 resp (bit7==1:Failed to send) */
BYTE cmd, /* Command index */
DWORD arg /* Argument */
) {
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	4603      	mov	r3, r0
 8007170:	6039      	str	r1, [r7, #0]
 8007172:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (cmd & 0x80) { /* Send a CMD55 prior to ACMD<n> */
 8007174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007178:	2b00      	cmp	r3, #0
 800717a:	da0e      	bge.n	800719a <send_cmd+0x32>
		cmd &= 0x7F;
 800717c:	79fb      	ldrb	r3, [r7, #7]
 800717e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007182:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8007184:	2100      	movs	r1, #0
 8007186:	2037      	movs	r0, #55	@ 0x37
 8007188:	f7ff ffee 	bl	8007168 <send_cmd>
 800718c:	4603      	mov	r3, r0
 800718e:	73bb      	strb	r3, [r7, #14]
		if (res > 1)
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d901      	bls.n	800719a <send_cmd+0x32>
			return res;
 8007196:	7bbb      	ldrb	r3, [r7, #14]
 8007198:	e051      	b.n	800723e <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800719a:	79fb      	ldrb	r3, [r7, #7]
 800719c:	2b0c      	cmp	r3, #12
 800719e:	d008      	beq.n	80071b2 <send_cmd+0x4a>
		despiselect();
 80071a0:	f7ff ff61 	bl	8007066 <despiselect>
		if (!spiselect())
 80071a4:	f7ff ff6c 	bl	8007080 <spiselect>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <send_cmd+0x4a>
			return 0xFF;
 80071ae:	23ff      	movs	r3, #255	@ 0xff
 80071b0:	e045      	b.n	800723e <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd); /* Start + command index */
 80071b2:	79fb      	ldrb	r3, [r7, #7]
 80071b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7ff feea 	bl	8006f94 <xchg_spi>
	xchg_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	0e1b      	lsrs	r3, r3, #24
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7ff fee4 	bl	8006f94 <xchg_spi>
	xchg_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	0c1b      	lsrs	r3, r3, #16
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7ff fede 	bl	8006f94 <xchg_spi>
	xchg_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	0a1b      	lsrs	r3, r3, #8
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	4618      	mov	r0, r3
 80071e0:	f7ff fed8 	bl	8006f94 <xchg_spi>
	xchg_spi((BYTE) arg); /* Argument[7..0] */
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7ff fed3 	bl	8006f94 <xchg_spi>
	n = 0x01; /* Dummy CRC + Stop */
 80071ee:	2301      	movs	r3, #1
 80071f0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 80071f2:	79fb      	ldrb	r3, [r7, #7]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <send_cmd+0x94>
		n = 0x95; /* Valid CRC for CMD0(0) */
 80071f8:	2395      	movs	r3, #149	@ 0x95
 80071fa:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 80071fc:	79fb      	ldrb	r3, [r7, #7]
 80071fe:	2b08      	cmp	r3, #8
 8007200:	d101      	bne.n	8007206 <send_cmd+0x9e>
		n = 0x87; /* Valid CRC for CMD8(0x1AA) */
 8007202:	2387      	movs	r3, #135	@ 0x87
 8007204:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8007206:	7bfb      	ldrb	r3, [r7, #15]
 8007208:	4618      	mov	r0, r3
 800720a:	f7ff fec3 	bl	8006f94 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12)
 800720e:	79fb      	ldrb	r3, [r7, #7]
 8007210:	2b0c      	cmp	r3, #12
 8007212:	d102      	bne.n	800721a <send_cmd+0xb2>
		xchg_spi(0xFF); /* Diacard following one byte when CMD12 */
 8007214:	20ff      	movs	r0, #255	@ 0xff
 8007216:	f7ff febd 	bl	8006f94 <xchg_spi>
	n = 10; /* Wait for response (10 bytes max) */
 800721a:	230a      	movs	r3, #10
 800721c:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800721e:	20ff      	movs	r0, #255	@ 0xff
 8007220:	f7ff feb8 	bl	8006f94 <xchg_spi>
 8007224:	4603      	mov	r3, r0
 8007226:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8007228:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800722c:	2b00      	cmp	r3, #0
 800722e:	da05      	bge.n	800723c <send_cmd+0xd4>
 8007230:	7bfb      	ldrb	r3, [r7, #15]
 8007232:	3b01      	subs	r3, #1
 8007234:	73fb      	strb	r3, [r7, #15]
 8007236:	7bfb      	ldrb	r3, [r7, #15]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1f0      	bne.n	800721e <send_cmd+0xb6>

	return res; /* Return received response */
 800723c:	7bbb      	ldrb	r3, [r7, #14]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
	...

08007248 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize disk drive                                                 */
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize(BYTE drv /* Physical drive number (0) */
) {
 8007248:	b590      	push	{r4, r7, lr}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	4603      	mov	r3, r0
 8007250:	71fb      	strb	r3, [r7, #7]
	myprintf("USER_SPI_initialize started\r\n");
 8007252:	4874      	ldr	r0, [pc, #464]	@ (8007424 <USER_SPI_initialize+0x1dc>)
 8007254:	f7fa fed6 	bl	8002004 <myprintf>

	BYTE n, cmd, ty, ocr[4];

	if (drv != 0)
 8007258:	79fb      	ldrb	r3, [r7, #7]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <USER_SPI_initialize+0x1a>
		return STA_NOINIT; /* Supports only drive 0 */
 800725e:	2301      	movs	r3, #1
 8007260:	e0dc      	b.n	800741c <USER_SPI_initialize+0x1d4>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK)
 8007262:	4b71      	ldr	r3, [pc, #452]	@ (8007428 <USER_SPI_initialize+0x1e0>)
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	b2db      	uxtb	r3, r3
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d003      	beq.n	8007278 <USER_SPI_initialize+0x30>
		return Stat; /* Is card existing in the soket? */
 8007270:	4b6d      	ldr	r3, [pc, #436]	@ (8007428 <USER_SPI_initialize+0x1e0>)
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	b2db      	uxtb	r3, r3
 8007276:	e0d1      	b.n	800741c <USER_SPI_initialize+0x1d4>

	FCLK_SLOW();
 8007278:	4b6c      	ldr	r3, [pc, #432]	@ (800742c <USER_SPI_initialize+0x1e4>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007282:	4b6a      	ldr	r3, [pc, #424]	@ (800742c <USER_SPI_initialize+0x1e4>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800728a:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--)
 800728c:	230a      	movs	r3, #10
 800728e:	73fb      	strb	r3, [r7, #15]
 8007290:	e005      	b.n	800729e <USER_SPI_initialize+0x56>
		xchg_spi(0xFF); /* Send 80 dummy clocks */
 8007292:	20ff      	movs	r0, #255	@ 0xff
 8007294:	f7ff fe7e 	bl	8006f94 <xchg_spi>
	for (n = 10; n; n--)
 8007298:	7bfb      	ldrb	r3, [r7, #15]
 800729a:	3b01      	subs	r3, #1
 800729c:	73fb      	strb	r3, [r7, #15]
 800729e:	7bfb      	ldrb	r3, [r7, #15]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1f6      	bne.n	8007292 <USER_SPI_initialize+0x4a>

	ty = 0;
 80072a4:	2300      	movs	r3, #0
 80072a6:	737b      	strb	r3, [r7, #13]

	BYTE resp = send_cmd(CMD0, 0);
 80072a8:	2100      	movs	r1, #0
 80072aa:	2000      	movs	r0, #0
 80072ac:	f7ff ff5c 	bl	8007168 <send_cmd>
 80072b0:	4603      	mov	r3, r0
 80072b2:	733b      	strb	r3, [r7, #12]
	if (send_cmd(CMD0, 0) == 1) { /* Put the card SPI/Idle state */
 80072b4:	2100      	movs	r1, #0
 80072b6:	2000      	movs	r0, #0
 80072b8:	f7ff ff56 	bl	8007168 <send_cmd>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b01      	cmp	r3, #1
 80072c0:	f040 808b 	bne.w	80073da <USER_SPI_initialize+0x192>
		SPI_Timer_On(1000); /* Initialization timeout = 1 sec */
 80072c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80072c8:	f7ff fe3a 	bl	8006f40 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2? */
 80072cc:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80072d0:	2008      	movs	r0, #8
 80072d2:	f7ff ff49 	bl	8007168 <send_cmd>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d151      	bne.n	8007380 <USER_SPI_initialize+0x138>
			for (n = 0; n < 4; n++)
 80072dc:	2300      	movs	r3, #0
 80072de:	73fb      	strb	r3, [r7, #15]
 80072e0:	e00d      	b.n	80072fe <USER_SPI_initialize+0xb6>
				ocr[n] = xchg_spi(0xFF); /* Get 32 bit return value of R7 resp */
 80072e2:	7bfc      	ldrb	r4, [r7, #15]
 80072e4:	20ff      	movs	r0, #255	@ 0xff
 80072e6:	f7ff fe55 	bl	8006f94 <xchg_spi>
 80072ea:	4603      	mov	r3, r0
 80072ec:	461a      	mov	r2, r3
 80072ee:	f104 0310 	add.w	r3, r4, #16
 80072f2:	443b      	add	r3, r7
 80072f4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
 80072fa:	3301      	adds	r3, #1
 80072fc:	73fb      	strb	r3, [r7, #15]
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
 8007300:	2b03      	cmp	r3, #3
 8007302:	d9ee      	bls.n	80072e2 <USER_SPI_initialize+0x9a>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* Is the card supports vcc of 2.7-3.6V? */
 8007304:	7abb      	ldrb	r3, [r7, #10]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d167      	bne.n	80073da <USER_SPI_initialize+0x192>
 800730a:	7afb      	ldrb	r3, [r7, #11]
 800730c:	2baa      	cmp	r3, #170	@ 0xaa
 800730e:	d164      	bne.n	80073da <USER_SPI_initialize+0x192>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30))
 8007310:	bf00      	nop
 8007312:	f7ff fe29 	bl	8006f68 <SPI_Timer_Status>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d007      	beq.n	800732c <USER_SPI_initialize+0xe4>
 800731c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007320:	20a9      	movs	r0, #169	@ 0xa9
 8007322:	f7ff ff21 	bl	8007168 <send_cmd>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1f2      	bne.n	8007312 <USER_SPI_initialize+0xca>
					; /* Wait for end of initialization with ACMD41(HCS) */
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
 800732c:	f7ff fe1c 	bl	8006f68 <SPI_Timer_Status>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d051      	beq.n	80073da <USER_SPI_initialize+0x192>
 8007336:	2100      	movs	r1, #0
 8007338:	203a      	movs	r0, #58	@ 0x3a
 800733a:	f7ff ff15 	bl	8007168 <send_cmd>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d14a      	bne.n	80073da <USER_SPI_initialize+0x192>
					for (n = 0; n < 4; n++)
 8007344:	2300      	movs	r3, #0
 8007346:	73fb      	strb	r3, [r7, #15]
 8007348:	e00d      	b.n	8007366 <USER_SPI_initialize+0x11e>
						ocr[n] = xchg_spi(0xFF);
 800734a:	7bfc      	ldrb	r4, [r7, #15]
 800734c:	20ff      	movs	r0, #255	@ 0xff
 800734e:	f7ff fe21 	bl	8006f94 <xchg_spi>
 8007352:	4603      	mov	r3, r0
 8007354:	461a      	mov	r2, r3
 8007356:	f104 0310 	add.w	r3, r4, #16
 800735a:	443b      	add	r3, r7
 800735c:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8007360:	7bfb      	ldrb	r3, [r7, #15]
 8007362:	3301      	adds	r3, #1
 8007364:	73fb      	strb	r3, [r7, #15]
 8007366:	7bfb      	ldrb	r3, [r7, #15]
 8007368:	2b03      	cmp	r3, #3
 800736a:	d9ee      	bls.n	800734a <USER_SPI_initialize+0x102>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; /* Card id SDv2 */
 800736c:	7a3b      	ldrb	r3, [r7, #8]
 800736e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <USER_SPI_initialize+0x132>
 8007376:	230c      	movs	r3, #12
 8007378:	e000      	b.n	800737c <USER_SPI_initialize+0x134>
 800737a:	2304      	movs	r3, #4
 800737c:	737b      	strb	r3, [r7, #13]
 800737e:	e02c      	b.n	80073da <USER_SPI_initialize+0x192>
				}
			}
		} else { /* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) { /* SDv1 or MMC? */
 8007380:	2100      	movs	r1, #0
 8007382:	20a9      	movs	r0, #169	@ 0xa9
 8007384:	f7ff fef0 	bl	8007168 <send_cmd>
 8007388:	4603      	mov	r3, r0
 800738a:	2b01      	cmp	r3, #1
 800738c:	d804      	bhi.n	8007398 <USER_SPI_initialize+0x150>
				ty = CT_SD1;
 800738e:	2302      	movs	r3, #2
 8007390:	737b      	strb	r3, [r7, #13]
				cmd = ACMD41; /* SDv1 (ACMD41(0)) */
 8007392:	23a9      	movs	r3, #169	@ 0xa9
 8007394:	73bb      	strb	r3, [r7, #14]
 8007396:	e003      	b.n	80073a0 <USER_SPI_initialize+0x158>
			} else {
				ty = CT_MMC;
 8007398:	2301      	movs	r3, #1
 800739a:	737b      	strb	r3, [r7, #13]
				cmd = CMD1; /* MMCv3 (CMD1(0)) */
 800739c:	2301      	movs	r3, #1
 800739e:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0))
 80073a0:	bf00      	nop
 80073a2:	f7ff fde1 	bl	8006f68 <SPI_Timer_Status>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d007      	beq.n	80073bc <USER_SPI_initialize+0x174>
 80073ac:	7bbb      	ldrb	r3, [r7, #14]
 80073ae:	2100      	movs	r1, #0
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7ff fed9 	bl	8007168 <send_cmd>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1f2      	bne.n	80073a2 <USER_SPI_initialize+0x15a>
				; /* Wait for end of initialization */
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0) /* Set block length: 512 */
 80073bc:	f7ff fdd4 	bl	8006f68 <SPI_Timer_Status>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d007      	beq.n	80073d6 <USER_SPI_initialize+0x18e>
 80073c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80073ca:	2010      	movs	r0, #16
 80073cc:	f7ff fecc 	bl	8007168 <send_cmd>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d001      	beq.n	80073da <USER_SPI_initialize+0x192>
				ty = 0;
 80073d6:	2300      	movs	r3, #0
 80073d8:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty; /* Card type */
 80073da:	4a15      	ldr	r2, [pc, #84]	@ (8007430 <USER_SPI_initialize+0x1e8>)
 80073dc:	7b7b      	ldrb	r3, [r7, #13]
 80073de:	7013      	strb	r3, [r2, #0]
	despiselect();
 80073e0:	f7ff fe41 	bl	8007066 <despiselect>

	if (ty) { /* OK */
 80073e4:	7b7b      	ldrb	r3, [r7, #13]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d012      	beq.n	8007410 <USER_SPI_initialize+0x1c8>
		FCLK_FAST(); /* Set fast clock */
 80073ea:	4b10      	ldr	r3, [pc, #64]	@ (800742c <USER_SPI_initialize+0x1e4>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80073f4:	4b0d      	ldr	r3, [pc, #52]	@ (800742c <USER_SPI_initialize+0x1e4>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f042 0210 	orr.w	r2, r2, #16
 80073fc:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT flag */
 80073fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007428 <USER_SPI_initialize+0x1e0>)
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	b2db      	uxtb	r3, r3
 8007404:	f023 0301 	bic.w	r3, r3, #1
 8007408:	b2da      	uxtb	r2, r3
 800740a:	4b07      	ldr	r3, [pc, #28]	@ (8007428 <USER_SPI_initialize+0x1e0>)
 800740c:	701a      	strb	r2, [r3, #0]
 800740e:	e002      	b.n	8007416 <USER_SPI_initialize+0x1ce>
	} else { /* Failed */
		Stat = STA_NOINIT;
 8007410:	4b05      	ldr	r3, [pc, #20]	@ (8007428 <USER_SPI_initialize+0x1e0>)
 8007412:	2201      	movs	r2, #1
 8007414:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007416:	4b04      	ldr	r3, [pc, #16]	@ (8007428 <USER_SPI_initialize+0x1e0>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	b2db      	uxtb	r3, r3
}
 800741c:	4618      	mov	r0, r3
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	bd90      	pop	{r4, r7, pc}
 8007424:	0800caec 	.word	0x0800caec
 8007428:	20000020 	.word	0x20000020
 800742c:	200002d0 	.word	0x200002d0
 8007430:	200009d1 	.word	0x200009d1

08007434 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/
/* Get disk status                                                       */
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status(BYTE drv /* Physical drive number (0) */
) {
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	4603      	mov	r3, r0
 800743c:	71fb      	strb	r3, [r7, #7]
	if (drv)
 800743e:	79fb      	ldrb	r3, [r7, #7]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <USER_SPI_status+0x14>
		return STA_NOINIT; /* Supports only drive 0 */
 8007444:	2301      	movs	r3, #1
 8007446:	e002      	b.n	800744e <USER_SPI_status+0x1a>

	return Stat; /* Return disk status */
 8007448:	4b03      	ldr	r3, [pc, #12]	@ (8007458 <USER_SPI_status+0x24>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	b2db      	uxtb	r3, r3
}
 800744e:	4618      	mov	r0, r3
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	bc80      	pop	{r7}
 8007456:	4770      	bx	lr
 8007458:	20000020 	.word	0x20000020

0800745c <USER_SPI_read>:

inline DRESULT USER_SPI_read(BYTE drv, /* Physical drive number (0) */
BYTE *buff, /* Pointer to the data buffer to store read data */
DWORD sector, /* Start sector number (LBA) */
UINT count /* Number of sectors to read (1..128) */
) {
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	60b9      	str	r1, [r7, #8]
 8007464:	607a      	str	r2, [r7, #4]
 8007466:	603b      	str	r3, [r7, #0]
 8007468:	4603      	mov	r3, r0
 800746a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count)
 800746c:	7bfb      	ldrb	r3, [r7, #15]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d102      	bne.n	8007478 <USER_SPI_read+0x1c>
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <USER_SPI_read+0x20>
		return RES_PARERR; /* Check parameter */
 8007478:	2304      	movs	r3, #4
 800747a:	e04d      	b.n	8007518 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT)
 800747c:	4b28      	ldr	r3, [pc, #160]	@ (8007520 <USER_SPI_read+0xc4>)
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	b2db      	uxtb	r3, r3
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <USER_SPI_read+0x32>
		return RES_NOTRDY; /* Check if drive is ready */
 800748a:	2303      	movs	r3, #3
 800748c:	e044      	b.n	8007518 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK))
 800748e:	4b25      	ldr	r3, [pc, #148]	@ (8007524 <USER_SPI_read+0xc8>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	f003 0308 	and.w	r3, r3, #8
 8007496:	2b00      	cmp	r3, #0
 8007498:	d102      	bne.n	80074a0 <USER_SPI_read+0x44>
		sector *= 512; /* LBA ot BA conversion (byte addressing cards) */
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	025b      	lsls	r3, r3, #9
 800749e:	607b      	str	r3, [r7, #4]

	if (count == 1) { /* Single sector read */
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d111      	bne.n	80074ca <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 80074a6:	6879      	ldr	r1, [r7, #4]
 80074a8:	2011      	movs	r0, #17
 80074aa:	f7ff fe5d 	bl	8007168 <send_cmd>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d129      	bne.n	8007508 <USER_SPI_read+0xac>
		&& rcvr_datablock(buff, 512)) {
 80074b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80074b8:	68b8      	ldr	r0, [r7, #8]
 80074ba:	f7ff fdfa 	bl	80070b2 <rcvr_datablock>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d021      	beq.n	8007508 <USER_SPI_read+0xac>
			count = 0;
 80074c4:	2300      	movs	r3, #0
 80074c6:	603b      	str	r3, [r7, #0]
 80074c8:	e01e      	b.n	8007508 <USER_SPI_read+0xac>
		}
	} else { /* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	2012      	movs	r0, #18
 80074ce:	f7ff fe4b 	bl	8007168 <send_cmd>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d117      	bne.n	8007508 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512))
 80074d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80074dc:	68b8      	ldr	r0, [r7, #8]
 80074de:	f7ff fde8 	bl	80070b2 <rcvr_datablock>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00a      	beq.n	80074fe <USER_SPI_read+0xa2>
					break;
				buff += 512;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80074ee:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	3b01      	subs	r3, #1
 80074f4:	603b      	str	r3, [r7, #0]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1ed      	bne.n	80074d8 <USER_SPI_read+0x7c>
 80074fc:	e000      	b.n	8007500 <USER_SPI_read+0xa4>
					break;
 80074fe:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8007500:	2100      	movs	r1, #0
 8007502:	200c      	movs	r0, #12
 8007504:	f7ff fe30 	bl	8007168 <send_cmd>
		}
	}
	despiselect();
 8007508:	f7ff fdad 	bl	8007066 <despiselect>

	return count ? RES_ERROR : RES_OK; /* Return result */
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	bf14      	ite	ne
 8007512:	2301      	movne	r3, #1
 8007514:	2300      	moveq	r3, #0
 8007516:	b2db      	uxtb	r3, r3
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	20000020 	.word	0x20000020
 8007524:	200009d1 	.word	0x200009d1

08007528 <USER_SPI_write>:
#if _USE_WRITE
inline DRESULT USER_SPI_write(BYTE drv, /* Physical drive number (0) */
const BYTE *buff, /* Ponter to the data to write */
DWORD sector, /* Start sector number (LBA) */
UINT count /* Number of sectors to write (1..128) */
) {
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	60b9      	str	r1, [r7, #8]
 8007530:	607a      	str	r2, [r7, #4]
 8007532:	603b      	str	r3, [r7, #0]
 8007534:	4603      	mov	r3, r0
 8007536:	73fb      	strb	r3, [r7, #15]
	if (drv || !count)
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d102      	bne.n	8007544 <USER_SPI_write+0x1c>
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <USER_SPI_write+0x20>
		return RES_PARERR; /* Check parameter */
 8007544:	2304      	movs	r3, #4
 8007546:	e063      	b.n	8007610 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT)
 8007548:	4b33      	ldr	r3, [pc, #204]	@ (8007618 <USER_SPI_write+0xf0>)
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	b2db      	uxtb	r3, r3
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	2b00      	cmp	r3, #0
 8007554:	d001      	beq.n	800755a <USER_SPI_write+0x32>
		return RES_NOTRDY; /* Check drive status */
 8007556:	2303      	movs	r3, #3
 8007558:	e05a      	b.n	8007610 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT)
 800755a:	4b2f      	ldr	r3, [pc, #188]	@ (8007618 <USER_SPI_write+0xf0>)
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	b2db      	uxtb	r3, r3
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <USER_SPI_write+0x44>
		return RES_WRPRT; /* Check write protect */
 8007568:	2302      	movs	r3, #2
 800756a:	e051      	b.n	8007610 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK))
 800756c:	4b2b      	ldr	r3, [pc, #172]	@ (800761c <USER_SPI_write+0xf4>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	f003 0308 	and.w	r3, r3, #8
 8007574:	2b00      	cmp	r3, #0
 8007576:	d102      	bne.n	800757e <USER_SPI_write+0x56>
		sector *= 512; /* LBA ==> BA conversion (byte addressing cards) */
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	025b      	lsls	r3, r3, #9
 800757c:	607b      	str	r3, [r7, #4]

	if (count == 1) { /* Single sector write */
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d110      	bne.n	80075a6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8007584:	6879      	ldr	r1, [r7, #4]
 8007586:	2018      	movs	r0, #24
 8007588:	f7ff fdee 	bl	8007168 <send_cmd>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d136      	bne.n	8007600 <USER_SPI_write+0xd8>
		&& xmit_datablock(buff, 0xFE)) {
 8007592:	21fe      	movs	r1, #254	@ 0xfe
 8007594:	68b8      	ldr	r0, [r7, #8]
 8007596:	f7ff fdb5 	bl	8007104 <xmit_datablock>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d02f      	beq.n	8007600 <USER_SPI_write+0xd8>
			count = 0;
 80075a0:	2300      	movs	r3, #0
 80075a2:	603b      	str	r3, [r7, #0]
 80075a4:	e02c      	b.n	8007600 <USER_SPI_write+0xd8>
		}
	} else { /* Multiple sector write */
		if (CardType & CT_SDC)
 80075a6:	4b1d      	ldr	r3, [pc, #116]	@ (800761c <USER_SPI_write+0xf4>)
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	f003 0306 	and.w	r3, r3, #6
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <USER_SPI_write+0x92>
			send_cmd(ACMD23, count); /* Predefine number of sectors */
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	2097      	movs	r0, #151	@ 0x97
 80075b6:	f7ff fdd7 	bl	8007168 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 80075ba:	6879      	ldr	r1, [r7, #4]
 80075bc:	2019      	movs	r0, #25
 80075be:	f7ff fdd3 	bl	8007168 <send_cmd>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d11b      	bne.n	8007600 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC))
 80075c8:	21fc      	movs	r1, #252	@ 0xfc
 80075ca:	68b8      	ldr	r0, [r7, #8]
 80075cc:	f7ff fd9a 	bl	8007104 <xmit_datablock>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00a      	beq.n	80075ec <USER_SPI_write+0xc4>
					break;
				buff += 512;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80075dc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	3b01      	subs	r3, #1
 80075e2:	603b      	str	r3, [r7, #0]
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1ee      	bne.n	80075c8 <USER_SPI_write+0xa0>
 80075ea:	e000      	b.n	80075ee <USER_SPI_write+0xc6>
					break;
 80075ec:	bf00      	nop
			if (!xmit_datablock(0, 0xFD))
 80075ee:	21fd      	movs	r1, #253	@ 0xfd
 80075f0:	2000      	movs	r0, #0
 80075f2:	f7ff fd87 	bl	8007104 <xmit_datablock>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <USER_SPI_write+0xd8>
				count = 1; /* STOP_TRAN token */
 80075fc:	2301      	movs	r3, #1
 80075fe:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007600:	f7ff fd31 	bl	8007066 <despiselect>

	return count ? RES_ERROR : RES_OK; /* Return result */
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	bf14      	ite	ne
 800760a:	2301      	movne	r3, #1
 800760c:	2300      	moveq	r3, #0
 800760e:	b2db      	uxtb	r3, r3
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	20000020 	.word	0x20000020
 800761c:	200009d1 	.word	0x200009d1

08007620 <USER_SPI_ioctl>:

#if _USE_IOCTL
inline DRESULT USER_SPI_ioctl(BYTE drv, /* Physical drive number (0) */
BYTE cmd, /* Control command code */
void *buff /* Pointer to the conrtol data */
) {
 8007620:	b580      	push	{r7, lr}
 8007622:	b08c      	sub	sp, #48	@ 0x30
 8007624:	af00      	add	r7, sp, #0
 8007626:	4603      	mov	r3, r0
 8007628:	603a      	str	r2, [r7, #0]
 800762a:	71fb      	strb	r3, [r7, #7]
 800762c:	460b      	mov	r3, r1
 800762e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;

	if (drv)
 8007630:	79fb      	ldrb	r3, [r7, #7]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <USER_SPI_ioctl+0x1a>
		return RES_PARERR; /* Check parameter */
 8007636:	2304      	movs	r3, #4
 8007638:	e15a      	b.n	80078f0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT)
 800763a:	4baf      	ldr	r3, [pc, #700]	@ (80078f8 <USER_SPI_ioctl+0x2d8>)
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	b2db      	uxtb	r3, r3
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <USER_SPI_ioctl+0x2c>
		return RES_NOTRDY; /* Check if drive is ready */
 8007648:	2303      	movs	r3, #3
 800764a:	e151      	b.n	80078f0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8007652:	79bb      	ldrb	r3, [r7, #6]
 8007654:	2b04      	cmp	r3, #4
 8007656:	f200 8136 	bhi.w	80078c6 <USER_SPI_ioctl+0x2a6>
 800765a:	a201      	add	r2, pc, #4	@ (adr r2, 8007660 <USER_SPI_ioctl+0x40>)
 800765c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007660:	08007675 	.word	0x08007675
 8007664:	08007689 	.word	0x08007689
 8007668:	080078c7 	.word	0x080078c7
 800766c:	08007735 	.word	0x08007735
 8007670:	0800782b 	.word	0x0800782b
	case CTRL_SYNC: /* Wait for end of internal write process of the drive */
		if (spiselect())
 8007674:	f7ff fd04 	bl	8007080 <spiselect>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	f000 8127 	beq.w	80078ce <USER_SPI_ioctl+0x2ae>
			res = RES_OK;
 8007680:	2300      	movs	r3, #0
 8007682:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8007686:	e122      	b.n	80078ce <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT: /* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007688:	2100      	movs	r1, #0
 800768a:	2009      	movs	r0, #9
 800768c:	f7ff fd6c 	bl	8007168 <send_cmd>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	f040 811d 	bne.w	80078d2 <USER_SPI_ioctl+0x2b2>
 8007698:	f107 030c 	add.w	r3, r7, #12
 800769c:	2110      	movs	r1, #16
 800769e:	4618      	mov	r0, r3
 80076a0:	f7ff fd07 	bl	80070b2 <rcvr_datablock>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 8113 	beq.w	80078d2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 80076ac:	7b3b      	ldrb	r3, [r7, #12]
 80076ae:	099b      	lsrs	r3, r3, #6
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d111      	bne.n	80076da <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD) csd[8] << 8)
 80076b6:	7d7b      	ldrb	r3, [r7, #21]
 80076b8:	461a      	mov	r2, r3
 80076ba:	7d3b      	ldrb	r3, [r7, #20]
 80076bc:	021b      	lsls	r3, r3, #8
 80076be:	4413      	add	r3, r2
 80076c0:	461a      	mov	r2, r3
						+ ((DWORD) (csd[7] & 63) << 16) + 1;
 80076c2:	7cfb      	ldrb	r3, [r7, #19]
 80076c4:	041b      	lsls	r3, r3, #16
 80076c6:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80076ca:	4413      	add	r3, r2
				csize = csd[9] + ((WORD) csd[8] << 8)
 80076cc:	3301      	adds	r3, #1
 80076ce:	61fb      	str	r3, [r7, #28]
				*(DWORD*) buff = csize << 10;
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	029a      	lsls	r2, r3, #10
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	e028      	b.n	800772c <USER_SPI_ioctl+0x10c>
			} else { /* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1)
 80076da:	7c7b      	ldrb	r3, [r7, #17]
 80076dc:	f003 030f 	and.w	r3, r3, #15
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	7dbb      	ldrb	r3, [r7, #22]
 80076e4:	09db      	lsrs	r3, r3, #7
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	4413      	add	r3, r2
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	7d7b      	ldrb	r3, [r7, #21]
 80076ee:	005b      	lsls	r3, r3, #1
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	f003 0306 	and.w	r3, r3, #6
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	4413      	add	r3, r2
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	3302      	adds	r3, #2
 80076fe:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
						+ 2;
				csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8007702:	7d3b      	ldrb	r3, [r7, #20]
 8007704:	099b      	lsrs	r3, r3, #6
 8007706:	b2db      	uxtb	r3, r3
 8007708:	461a      	mov	r2, r3
 800770a:	7cfb      	ldrb	r3, [r7, #19]
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	441a      	add	r2, r3
						+ ((WORD) (csd[6] & 3) << 10) + 1;
 8007710:	7cbb      	ldrb	r3, [r7, #18]
 8007712:	029b      	lsls	r3, r3, #10
 8007714:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007718:	4413      	add	r3, r2
 800771a:	3301      	adds	r3, #1
				csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 800771c:	61fb      	str	r3, [r7, #28]
				*(DWORD*) buff = csize << (n - 9);
 800771e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007722:	3b09      	subs	r3, #9
 8007724:	69fa      	ldr	r2, [r7, #28]
 8007726:	409a      	lsls	r2, r3
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800772c:	2300      	movs	r3, #0
 800772e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8007732:	e0ce      	b.n	80078d2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE: /* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) { /* SDC ver 2.00 */
 8007734:	4b71      	ldr	r3, [pc, #452]	@ (80078fc <USER_SPI_ioctl+0x2dc>)
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b00      	cmp	r3, #0
 800773e:	d031      	beq.n	80077a4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) { /* Read SD status */
 8007740:	2100      	movs	r1, #0
 8007742:	208d      	movs	r0, #141	@ 0x8d
 8007744:	f7ff fd10 	bl	8007168 <send_cmd>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	f040 80c3 	bne.w	80078d6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8007750:	20ff      	movs	r0, #255	@ 0xff
 8007752:	f7ff fc1f 	bl	8006f94 <xchg_spi>
				if (rcvr_datablock(csd, 16)) { /* Read partial block */
 8007756:	f107 030c 	add.w	r3, r7, #12
 800775a:	2110      	movs	r1, #16
 800775c:	4618      	mov	r0, r3
 800775e:	f7ff fca8 	bl	80070b2 <rcvr_datablock>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 80b6 	beq.w	80078d6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--)
 800776a:	2330      	movs	r3, #48	@ 0x30
 800776c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007770:	e007      	b.n	8007782 <USER_SPI_ioctl+0x162>
						xchg_spi(0xFF); /* Purge trailing data */
 8007772:	20ff      	movs	r0, #255	@ 0xff
 8007774:	f7ff fc0e 	bl	8006f94 <xchg_spi>
					for (n = 64 - 16; n; n--)
 8007778:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800777c:	3b01      	subs	r3, #1
 800777e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007782:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1f3      	bne.n	8007772 <USER_SPI_ioctl+0x152>
					*(DWORD*) buff = 16UL << (csd[10] >> 4);
 800778a:	7dbb      	ldrb	r3, [r7, #22]
 800778c:	091b      	lsrs	r3, r3, #4
 800778e:	b2db      	uxtb	r3, r3
 8007790:	461a      	mov	r2, r3
 8007792:	2310      	movs	r3, #16
 8007794:	fa03 f202 	lsl.w	r2, r3, r2
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800779c:	2300      	movs	r3, #0
 800779e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
											+ ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80077a2:	e098      	b.n	80078d6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) { /* Read CSD */
 80077a4:	2100      	movs	r1, #0
 80077a6:	2009      	movs	r0, #9
 80077a8:	f7ff fcde 	bl	8007168 <send_cmd>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f040 8091 	bne.w	80078d6 <USER_SPI_ioctl+0x2b6>
 80077b4:	f107 030c 	add.w	r3, r7, #12
 80077b8:	2110      	movs	r1, #16
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7ff fc79 	bl	80070b2 <rcvr_datablock>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 8087 	beq.w	80078d6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) { /* SDC ver 1.XX */
 80077c8:	4b4c      	ldr	r3, [pc, #304]	@ (80078fc <USER_SPI_ioctl+0x2dc>)
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	f003 0302 	and.w	r3, r3, #2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d012      	beq.n	80077fa <USER_SPI_ioctl+0x1da>
					*(DWORD*) buff = (((csd[10] & 63) << 1)
 80077d4:	7dbb      	ldrb	r3, [r7, #22]
 80077d6:	005b      	lsls	r3, r3, #1
 80077d8:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
							+ ((WORD) (csd[11] & 128) >> 7) + 1)
 80077dc:	7dfa      	ldrb	r2, [r7, #23]
 80077de:	09d2      	lsrs	r2, r2, #7
 80077e0:	b2d2      	uxtb	r2, r2
 80077e2:	4413      	add	r3, r2
 80077e4:	1c5a      	adds	r2, r3, #1
							<< ((csd[13] >> 6) - 1);
 80077e6:	7e7b      	ldrb	r3, [r7, #25]
 80077e8:	099b      	lsrs	r3, r3, #6
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	3b01      	subs	r3, #1
 80077ee:	fa02 f303 	lsl.w	r3, r2, r3
 80077f2:	461a      	mov	r2, r3
					*(DWORD*) buff = (((csd[10] & 63) << 1)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	601a      	str	r2, [r3, #0]
 80077f8:	e013      	b.n	8007822 <USER_SPI_ioctl+0x202>
							((WORD) ((csd[10] & 124) >> 2) + 1)
 80077fa:	7dbb      	ldrb	r3, [r7, #22]
 80077fc:	109b      	asrs	r3, r3, #2
 80077fe:	b29b      	uxth	r3, r3
 8007800:	f003 031f 	and.w	r3, r3, #31
 8007804:	3301      	adds	r3, #1
									* (((csd[11] & 3) << 3)
 8007806:	7dfa      	ldrb	r2, [r7, #23]
 8007808:	00d2      	lsls	r2, r2, #3
 800780a:	f002 0218 	and.w	r2, r2, #24
											+ ((csd[11] & 224) >> 5) + 1);
 800780e:	7df9      	ldrb	r1, [r7, #23]
 8007810:	0949      	lsrs	r1, r1, #5
 8007812:	b2c9      	uxtb	r1, r1
 8007814:	440a      	add	r2, r1
 8007816:	3201      	adds	r2, #1
									* (((csd[11] & 3) << 3)
 8007818:	fb02 f303 	mul.w	r3, r2, r3
 800781c:	461a      	mov	r2, r3
					*(DWORD*) buff =
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8007828:	e055      	b.n	80078d6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM: /* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC))
 800782a:	4b34      	ldr	r3, [pc, #208]	@ (80078fc <USER_SPI_ioctl+0x2dc>)
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	f003 0306 	and.w	r3, r3, #6
 8007832:	2b00      	cmp	r3, #0
 8007834:	d051      	beq.n	80078da <USER_SPI_ioctl+0x2ba>
			break; /* Check if the card is SDC */
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd))
 8007836:	f107 020c 	add.w	r2, r7, #12
 800783a:	79fb      	ldrb	r3, [r7, #7]
 800783c:	210b      	movs	r1, #11
 800783e:	4618      	mov	r0, r3
 8007840:	f7ff feee 	bl	8007620 <USER_SPI_ioctl>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d149      	bne.n	80078de <USER_SPI_ioctl+0x2be>
			break; /* Get CSD */
		if (!(csd[0] >> 6) && !(csd[10] & 0x40))
 800784a:	7b3b      	ldrb	r3, [r7, #12]
 800784c:	099b      	lsrs	r3, r3, #6
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d104      	bne.n	800785e <USER_SPI_ioctl+0x23e>
 8007854:	7dbb      	ldrb	r3, [r7, #22]
 8007856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800785a:	2b00      	cmp	r3, #0
 800785c:	d041      	beq.n	80078e2 <USER_SPI_ioctl+0x2c2>
			break; /* Check if sector erase can be applied to the card */
		dp = buff;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	623b      	str	r3, [r7, #32]
		st = dp[0];
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	62bb      	str	r3, [r7, #40]	@ 0x28
		ed = dp[1]; /* Load sector block */
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800786e:	4b23      	ldr	r3, [pc, #140]	@ (80078fc <USER_SPI_ioctl+0x2dc>)
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	f003 0308 	and.w	r3, r3, #8
 8007876:	2b00      	cmp	r3, #0
 8007878:	d105      	bne.n	8007886 <USER_SPI_ioctl+0x266>
			st *= 512;
 800787a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800787c:	025b      	lsls	r3, r3, #9
 800787e:	62bb      	str	r3, [r7, #40]	@ 0x28
			ed *= 512;
 8007880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007882:	025b      	lsls	r3, r3, #9
 8007884:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0
 8007886:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007888:	2020      	movs	r0, #32
 800788a:	f7ff fc6d 	bl	8007168 <send_cmd>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d128      	bne.n	80078e6 <USER_SPI_ioctl+0x2c6>
 8007894:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007896:	2021      	movs	r0, #33	@ 0x21
 8007898:	f7ff fc66 	bl	8007168 <send_cmd>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d121      	bne.n	80078e6 <USER_SPI_ioctl+0x2c6>
				&& send_cmd(CMD38, 0) == 0 && wait_ready(30000)) { /* Erase sector block */
 80078a2:	2100      	movs	r1, #0
 80078a4:	2026      	movs	r0, #38	@ 0x26
 80078a6:	f7ff fc5f 	bl	8007168 <send_cmd>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d11a      	bne.n	80078e6 <USER_SPI_ioctl+0x2c6>
 80078b0:	f247 5030 	movw	r0, #30000	@ 0x7530
 80078b4:	f7ff fbb4 	bl	8007020 <wait_ready>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d013      	beq.n	80078e6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK; /* FatFs does not check result of this command */
 80078be:	2300      	movs	r3, #0
 80078c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80078c4:	e00f      	b.n	80078e6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80078c6:	2304      	movs	r3, #4
 80078c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80078cc:	e00c      	b.n	80078e8 <USER_SPI_ioctl+0x2c8>
		break;
 80078ce:	bf00      	nop
 80078d0:	e00a      	b.n	80078e8 <USER_SPI_ioctl+0x2c8>
		break;
 80078d2:	bf00      	nop
 80078d4:	e008      	b.n	80078e8 <USER_SPI_ioctl+0x2c8>
		break;
 80078d6:	bf00      	nop
 80078d8:	e006      	b.n	80078e8 <USER_SPI_ioctl+0x2c8>
			break; /* Check if the card is SDC */
 80078da:	bf00      	nop
 80078dc:	e004      	b.n	80078e8 <USER_SPI_ioctl+0x2c8>
			break; /* Get CSD */
 80078de:	bf00      	nop
 80078e0:	e002      	b.n	80078e8 <USER_SPI_ioctl+0x2c8>
			break; /* Check if sector erase can be applied to the card */
 80078e2:	bf00      	nop
 80078e4:	e000      	b.n	80078e8 <USER_SPI_ioctl+0x2c8>
		break;
 80078e6:	bf00      	nop
	}

	despiselect();
 80078e8:	f7ff fbbd 	bl	8007066 <despiselect>

	return res;
 80078ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3730      	adds	r7, #48	@ 0x30
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	20000020 	.word	0x20000020
 80078fc:	200009d1 	.word	0x200009d1

08007900 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	4603      	mov	r3, r0
 8007908:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800790a:	79fb      	ldrb	r3, [r7, #7]
 800790c:	4a08      	ldr	r2, [pc, #32]	@ (8007930 <disk_status+0x30>)
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4413      	add	r3, r2
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	79fa      	ldrb	r2, [r7, #7]
 8007918:	4905      	ldr	r1, [pc, #20]	@ (8007930 <disk_status+0x30>)
 800791a:	440a      	add	r2, r1
 800791c:	7a12      	ldrb	r2, [r2, #8]
 800791e:	4610      	mov	r0, r2
 8007920:	4798      	blx	r3
 8007922:	4603      	mov	r3, r0
 8007924:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007926:	7bfb      	ldrb	r3, [r7, #15]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	20000a04 	.word	0x20000a04

08007934 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	4603      	mov	r3, r0
 800793c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007942:	79fb      	ldrb	r3, [r7, #7]
 8007944:	4a0d      	ldr	r2, [pc, #52]	@ (800797c <disk_initialize+0x48>)
 8007946:	5cd3      	ldrb	r3, [r2, r3]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d111      	bne.n	8007970 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800794c:	79fb      	ldrb	r3, [r7, #7]
 800794e:	4a0b      	ldr	r2, [pc, #44]	@ (800797c <disk_initialize+0x48>)
 8007950:	2101      	movs	r1, #1
 8007952:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007954:	79fb      	ldrb	r3, [r7, #7]
 8007956:	4a09      	ldr	r2, [pc, #36]	@ (800797c <disk_initialize+0x48>)
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	79fa      	ldrb	r2, [r7, #7]
 8007962:	4906      	ldr	r1, [pc, #24]	@ (800797c <disk_initialize+0x48>)
 8007964:	440a      	add	r2, r1
 8007966:	7a12      	ldrb	r2, [r2, #8]
 8007968:	4610      	mov	r0, r2
 800796a:	4798      	blx	r3
 800796c:	4603      	mov	r3, r0
 800796e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007970:	7bfb      	ldrb	r3, [r7, #15]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	20000a04 	.word	0x20000a04

08007980 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007980:	b590      	push	{r4, r7, lr}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	60b9      	str	r1, [r7, #8]
 8007988:	607a      	str	r2, [r7, #4]
 800798a:	603b      	str	r3, [r7, #0]
 800798c:	4603      	mov	r3, r0
 800798e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007990:	7bfb      	ldrb	r3, [r7, #15]
 8007992:	4a0a      	ldr	r2, [pc, #40]	@ (80079bc <disk_read+0x3c>)
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	689c      	ldr	r4, [r3, #8]
 800799c:	7bfb      	ldrb	r3, [r7, #15]
 800799e:	4a07      	ldr	r2, [pc, #28]	@ (80079bc <disk_read+0x3c>)
 80079a0:	4413      	add	r3, r2
 80079a2:	7a18      	ldrb	r0, [r3, #8]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	68b9      	ldr	r1, [r7, #8]
 80079aa:	47a0      	blx	r4
 80079ac:	4603      	mov	r3, r0
 80079ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80079b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	371c      	adds	r7, #28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd90      	pop	{r4, r7, pc}
 80079ba:	bf00      	nop
 80079bc:	20000a04 	.word	0x20000a04

080079c0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80079c0:	b590      	push	{r4, r7, lr}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60b9      	str	r1, [r7, #8]
 80079c8:	607a      	str	r2, [r7, #4]
 80079ca:	603b      	str	r3, [r7, #0]
 80079cc:	4603      	mov	r3, r0
 80079ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
 80079d2:	4a0a      	ldr	r2, [pc, #40]	@ (80079fc <disk_write+0x3c>)
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	68dc      	ldr	r4, [r3, #12]
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
 80079de:	4a07      	ldr	r2, [pc, #28]	@ (80079fc <disk_write+0x3c>)
 80079e0:	4413      	add	r3, r2
 80079e2:	7a18      	ldrb	r0, [r3, #8]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	68b9      	ldr	r1, [r7, #8]
 80079ea:	47a0      	blx	r4
 80079ec:	4603      	mov	r3, r0
 80079ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80079f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	371c      	adds	r7, #28
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd90      	pop	{r4, r7, pc}
 80079fa:	bf00      	nop
 80079fc:	20000a04 	.word	0x20000a04

08007a00 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	4603      	mov	r3, r0
 8007a08:	603a      	str	r2, [r7, #0]
 8007a0a:	71fb      	strb	r3, [r7, #7]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007a10:	79fb      	ldrb	r3, [r7, #7]
 8007a12:	4a09      	ldr	r2, [pc, #36]	@ (8007a38 <disk_ioctl+0x38>)
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	79fa      	ldrb	r2, [r7, #7]
 8007a1e:	4906      	ldr	r1, [pc, #24]	@ (8007a38 <disk_ioctl+0x38>)
 8007a20:	440a      	add	r2, r1
 8007a22:	7a10      	ldrb	r0, [r2, #8]
 8007a24:	79b9      	ldrb	r1, [r7, #6]
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	4798      	blx	r3
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	73fb      	strb	r3, [r7, #15]
  return res;
 8007a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	20000a04 	.word	0x20000a04

08007a3c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	3301      	adds	r3, #1
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007a4c:	89fb      	ldrh	r3, [r7, #14]
 8007a4e:	021b      	lsls	r3, r3, #8
 8007a50:	b21a      	sxth	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	b21b      	sxth	r3, r3
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	b21b      	sxth	r3, r3
 8007a5c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007a5e:	89fb      	ldrh	r3, [r7, #14]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bc80      	pop	{r7}
 8007a68:	4770      	bx	lr

08007a6a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b085      	sub	sp, #20
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	3303      	adds	r3, #3
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	021b      	lsls	r3, r3, #8
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	3202      	adds	r2, #2
 8007a82:	7812      	ldrb	r2, [r2, #0]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	021b      	lsls	r3, r3, #8
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	3201      	adds	r2, #1
 8007a90:	7812      	ldrb	r2, [r2, #0]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	021b      	lsls	r3, r3, #8
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	7812      	ldrb	r2, [r2, #0]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	60fb      	str	r3, [r7, #12]
	return rv;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bc80      	pop	{r7}
 8007aac:	4770      	bx	lr

08007aae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b083      	sub	sp, #12
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	887a      	ldrh	r2, [r7, #2]
 8007ac2:	b2d2      	uxtb	r2, r2
 8007ac4:	701a      	strb	r2, [r3, #0]
 8007ac6:	887b      	ldrh	r3, [r7, #2]
 8007ac8:	0a1b      	lsrs	r3, r3, #8
 8007aca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	607a      	str	r2, [r7, #4]
 8007ad2:	887a      	ldrh	r2, [r7, #2]
 8007ad4:	b2d2      	uxtb	r2, r2
 8007ad6:	701a      	strb	r2, [r3, #0]
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bc80      	pop	{r7}
 8007ae0:	4770      	bx	lr

08007ae2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007ae2:	b480      	push	{r7}
 8007ae4:	b083      	sub	sp, #12
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
 8007aea:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	607a      	str	r2, [r7, #4]
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	b2d2      	uxtb	r2, r2
 8007af6:	701a      	strb	r2, [r3, #0]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	0a1b      	lsrs	r3, r3, #8
 8007afc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	1c5a      	adds	r2, r3, #1
 8007b02:	607a      	str	r2, [r7, #4]
 8007b04:	683a      	ldr	r2, [r7, #0]
 8007b06:	b2d2      	uxtb	r2, r2
 8007b08:	701a      	strb	r2, [r3, #0]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	0a1b      	lsrs	r3, r3, #8
 8007b0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	1c5a      	adds	r2, r3, #1
 8007b14:	607a      	str	r2, [r7, #4]
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	b2d2      	uxtb	r2, r2
 8007b1a:	701a      	strb	r2, [r3, #0]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	0a1b      	lsrs	r3, r3, #8
 8007b20:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	1c5a      	adds	r2, r3, #1
 8007b26:	607a      	str	r2, [r7, #4]
 8007b28:	683a      	ldr	r2, [r7, #0]
 8007b2a:	b2d2      	uxtb	r2, r2
 8007b2c:	701a      	strb	r2, [r3, #0]
}
 8007b2e:	bf00      	nop
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bc80      	pop	{r7}
 8007b36:	4770      	bx	lr

08007b38 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00d      	beq.n	8007b6e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	1c53      	adds	r3, r2, #1
 8007b56:	613b      	str	r3, [r7, #16]
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	1c59      	adds	r1, r3, #1
 8007b5c:	6179      	str	r1, [r7, #20]
 8007b5e:	7812      	ldrb	r2, [r2, #0]
 8007b60:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	3b01      	subs	r3, #1
 8007b66:	607b      	str	r3, [r7, #4]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1f1      	bne.n	8007b52 <mem_cpy+0x1a>
	}
}
 8007b6e:	bf00      	nop
 8007b70:	371c      	adds	r7, #28
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bc80      	pop	{r7}
 8007b76:	4770      	bx	lr

08007b78 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007b78:	b480      	push	{r7}
 8007b7a:	b087      	sub	sp, #28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	1c5a      	adds	r2, r3, #1
 8007b8c:	617a      	str	r2, [r7, #20]
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	b2d2      	uxtb	r2, r2
 8007b92:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	3b01      	subs	r3, #1
 8007b98:	607b      	str	r3, [r7, #4]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1f3      	bne.n	8007b88 <mem_set+0x10>
}
 8007ba0:	bf00      	nop
 8007ba2:	bf00      	nop
 8007ba4:	371c      	adds	r7, #28
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bc80      	pop	{r7}
 8007baa:	4770      	bx	lr

08007bac <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007bac:	b480      	push	{r7}
 8007bae:	b089      	sub	sp, #36	@ 0x24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	61fb      	str	r3, [r7, #28]
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	1c5a      	adds	r2, r3, #1
 8007bc8:	61fa      	str	r2, [r7, #28]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	1c5a      	adds	r2, r3, #1
 8007bd2:	61ba      	str	r2, [r7, #24]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	1acb      	subs	r3, r1, r3
 8007bd8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	607b      	str	r3, [r7, #4]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d002      	beq.n	8007bec <mem_cmp+0x40>
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d0eb      	beq.n	8007bc4 <mem_cmp+0x18>

	return r;
 8007bec:	697b      	ldr	r3, [r7, #20]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3724      	adds	r7, #36	@ 0x24
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bc80      	pop	{r7}
 8007bf6:	4770      	bx	lr

08007bf8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007c02:	e002      	b.n	8007c0a <chk_chr+0x12>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	3301      	adds	r3, #1
 8007c08:	607b      	str	r3, [r7, #4]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d005      	beq.n	8007c1e <chk_chr+0x26>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	461a      	mov	r2, r3
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d1f2      	bne.n	8007c04 <chk_chr+0xc>
	return *str;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	781b      	ldrb	r3, [r3, #0]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bc80      	pop	{r7}
 8007c2a:	4770      	bx	lr

08007c2c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007c36:	2300      	movs	r3, #0
 8007c38:	60bb      	str	r3, [r7, #8]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	60fb      	str	r3, [r7, #12]
 8007c3e:	e029      	b.n	8007c94 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007c40:	4a26      	ldr	r2, [pc, #152]	@ (8007cdc <chk_lock+0xb0>)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	011b      	lsls	r3, r3, #4
 8007c46:	4413      	add	r3, r2
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d01d      	beq.n	8007c8a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007c4e:	4a23      	ldr	r2, [pc, #140]	@ (8007cdc <chk_lock+0xb0>)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	011b      	lsls	r3, r3, #4
 8007c54:	4413      	add	r3, r2
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d116      	bne.n	8007c8e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007c60:	4a1e      	ldr	r2, [pc, #120]	@ (8007cdc <chk_lock+0xb0>)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	011b      	lsls	r3, r3, #4
 8007c66:	4413      	add	r3, r2
 8007c68:	3304      	adds	r3, #4
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d10c      	bne.n	8007c8e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007c74:	4a19      	ldr	r2, [pc, #100]	@ (8007cdc <chk_lock+0xb0>)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	011b      	lsls	r3, r3, #4
 8007c7a:	4413      	add	r3, r2
 8007c7c:	3308      	adds	r3, #8
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d102      	bne.n	8007c8e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007c88:	e007      	b.n	8007c9a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	3301      	adds	r3, #1
 8007c92:	60fb      	str	r3, [r7, #12]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d9d2      	bls.n	8007c40 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d109      	bne.n	8007cb4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d102      	bne.n	8007cac <chk_lock+0x80>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d101      	bne.n	8007cb0 <chk_lock+0x84>
 8007cac:	2300      	movs	r3, #0
 8007cae:	e010      	b.n	8007cd2 <chk_lock+0xa6>
 8007cb0:	2312      	movs	r3, #18
 8007cb2:	e00e      	b.n	8007cd2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d108      	bne.n	8007ccc <chk_lock+0xa0>
 8007cba:	4a08      	ldr	r2, [pc, #32]	@ (8007cdc <chk_lock+0xb0>)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	011b      	lsls	r3, r3, #4
 8007cc0:	4413      	add	r3, r2
 8007cc2:	330c      	adds	r3, #12
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cca:	d101      	bne.n	8007cd0 <chk_lock+0xa4>
 8007ccc:	2310      	movs	r3, #16
 8007cce:	e000      	b.n	8007cd2 <chk_lock+0xa6>
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bc80      	pop	{r7}
 8007cda:	4770      	bx	lr
 8007cdc:	200009e4 	.word	0x200009e4

08007ce0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	607b      	str	r3, [r7, #4]
 8007cea:	e002      	b.n	8007cf2 <enq_lock+0x12>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	607b      	str	r3, [r7, #4]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d806      	bhi.n	8007d06 <enq_lock+0x26>
 8007cf8:	4a08      	ldr	r2, [pc, #32]	@ (8007d1c <enq_lock+0x3c>)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	011b      	lsls	r3, r3, #4
 8007cfe:	4413      	add	r3, r2
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1f2      	bne.n	8007cec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	bf14      	ite	ne
 8007d0c:	2301      	movne	r3, #1
 8007d0e:	2300      	moveq	r3, #0
 8007d10:	b2db      	uxtb	r3, r3
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bc80      	pop	{r7}
 8007d1a:	4770      	bx	lr
 8007d1c:	200009e4 	.word	0x200009e4

08007d20 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	60fb      	str	r3, [r7, #12]
 8007d2e:	e01f      	b.n	8007d70 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007d30:	4a41      	ldr	r2, [pc, #260]	@ (8007e38 <inc_lock+0x118>)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	011b      	lsls	r3, r3, #4
 8007d36:	4413      	add	r3, r2
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d113      	bne.n	8007d6a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007d42:	4a3d      	ldr	r2, [pc, #244]	@ (8007e38 <inc_lock+0x118>)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	011b      	lsls	r3, r3, #4
 8007d48:	4413      	add	r3, r2
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d109      	bne.n	8007d6a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007d56:	4a38      	ldr	r2, [pc, #224]	@ (8007e38 <inc_lock+0x118>)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	011b      	lsls	r3, r3, #4
 8007d5c:	4413      	add	r3, r2
 8007d5e:	3308      	adds	r3, #8
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d006      	beq.n	8007d78 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d9dc      	bls.n	8007d30 <inc_lock+0x10>
 8007d76:	e000      	b.n	8007d7a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007d78:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d132      	bne.n	8007de6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007d80:	2300      	movs	r3, #0
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	e002      	b.n	8007d8c <inc_lock+0x6c>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d806      	bhi.n	8007da0 <inc_lock+0x80>
 8007d92:	4a29      	ldr	r2, [pc, #164]	@ (8007e38 <inc_lock+0x118>)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	011b      	lsls	r3, r3, #4
 8007d98:	4413      	add	r3, r2
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1f2      	bne.n	8007d86 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d101      	bne.n	8007daa <inc_lock+0x8a>
 8007da6:	2300      	movs	r3, #0
 8007da8:	e040      	b.n	8007e2c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	4922      	ldr	r1, [pc, #136]	@ (8007e38 <inc_lock+0x118>)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	011b      	lsls	r3, r3, #4
 8007db4:	440b      	add	r3, r1
 8007db6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	689a      	ldr	r2, [r3, #8]
 8007dbc:	491e      	ldr	r1, [pc, #120]	@ (8007e38 <inc_lock+0x118>)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	011b      	lsls	r3, r3, #4
 8007dc2:	440b      	add	r3, r1
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	695a      	ldr	r2, [r3, #20]
 8007dcc:	491a      	ldr	r1, [pc, #104]	@ (8007e38 <inc_lock+0x118>)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	011b      	lsls	r3, r3, #4
 8007dd2:	440b      	add	r3, r1
 8007dd4:	3308      	adds	r3, #8
 8007dd6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007dd8:	4a17      	ldr	r2, [pc, #92]	@ (8007e38 <inc_lock+0x118>)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	011b      	lsls	r3, r3, #4
 8007dde:	4413      	add	r3, r2
 8007de0:	330c      	adds	r3, #12
 8007de2:	2200      	movs	r2, #0
 8007de4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d009      	beq.n	8007e00 <inc_lock+0xe0>
 8007dec:	4a12      	ldr	r2, [pc, #72]	@ (8007e38 <inc_lock+0x118>)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	011b      	lsls	r3, r3, #4
 8007df2:	4413      	add	r3, r2
 8007df4:	330c      	adds	r3, #12
 8007df6:	881b      	ldrh	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <inc_lock+0xe0>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	e015      	b.n	8007e2c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d108      	bne.n	8007e18 <inc_lock+0xf8>
 8007e06:	4a0c      	ldr	r2, [pc, #48]	@ (8007e38 <inc_lock+0x118>)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	011b      	lsls	r3, r3, #4
 8007e0c:	4413      	add	r3, r2
 8007e0e:	330c      	adds	r3, #12
 8007e10:	881b      	ldrh	r3, [r3, #0]
 8007e12:	3301      	adds	r3, #1
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	e001      	b.n	8007e1c <inc_lock+0xfc>
 8007e18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e1c:	4906      	ldr	r1, [pc, #24]	@ (8007e38 <inc_lock+0x118>)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	011b      	lsls	r3, r3, #4
 8007e22:	440b      	add	r3, r1
 8007e24:	330c      	adds	r3, #12
 8007e26:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	3301      	adds	r3, #1
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3714      	adds	r7, #20
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bc80      	pop	{r7}
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	200009e4 	.word	0x200009e4

08007e3c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	3b01      	subs	r3, #1
 8007e48:	607b      	str	r3, [r7, #4]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d825      	bhi.n	8007e9c <dec_lock+0x60>
		n = Files[i].ctr;
 8007e50:	4a16      	ldr	r2, [pc, #88]	@ (8007eac <dec_lock+0x70>)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	011b      	lsls	r3, r3, #4
 8007e56:	4413      	add	r3, r2
 8007e58:	330c      	adds	r3, #12
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007e5e:	89fb      	ldrh	r3, [r7, #14]
 8007e60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e64:	d101      	bne.n	8007e6a <dec_lock+0x2e>
 8007e66:	2300      	movs	r3, #0
 8007e68:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007e6a:	89fb      	ldrh	r3, [r7, #14]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d002      	beq.n	8007e76 <dec_lock+0x3a>
 8007e70:	89fb      	ldrh	r3, [r7, #14]
 8007e72:	3b01      	subs	r3, #1
 8007e74:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007e76:	4a0d      	ldr	r2, [pc, #52]	@ (8007eac <dec_lock+0x70>)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	011b      	lsls	r3, r3, #4
 8007e7c:	4413      	add	r3, r2
 8007e7e:	330c      	adds	r3, #12
 8007e80:	89fa      	ldrh	r2, [r7, #14]
 8007e82:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007e84:	89fb      	ldrh	r3, [r7, #14]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d105      	bne.n	8007e96 <dec_lock+0x5a>
 8007e8a:	4a08      	ldr	r2, [pc, #32]	@ (8007eac <dec_lock+0x70>)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	011b      	lsls	r3, r3, #4
 8007e90:	4413      	add	r3, r2
 8007e92:	2200      	movs	r2, #0
 8007e94:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007e96:	2300      	movs	r3, #0
 8007e98:	737b      	strb	r3, [r7, #13]
 8007e9a:	e001      	b.n	8007ea0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007ea0:	7b7b      	ldrb	r3, [r7, #13]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bc80      	pop	{r7}
 8007eaa:	4770      	bx	lr
 8007eac:	200009e4 	.word	0x200009e4

08007eb0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007eb8:	2300      	movs	r3, #0
 8007eba:	60fb      	str	r3, [r7, #12]
 8007ebc:	e010      	b.n	8007ee0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007ebe:	4a0d      	ldr	r2, [pc, #52]	@ (8007ef4 <clear_lock+0x44>)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	011b      	lsls	r3, r3, #4
 8007ec4:	4413      	add	r3, r2
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d105      	bne.n	8007eda <clear_lock+0x2a>
 8007ece:	4a09      	ldr	r2, [pc, #36]	@ (8007ef4 <clear_lock+0x44>)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	011b      	lsls	r3, r3, #4
 8007ed4:	4413      	add	r3, r2
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	3301      	adds	r3, #1
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d9eb      	bls.n	8007ebe <clear_lock+0xe>
	}
}
 8007ee6:	bf00      	nop
 8007ee8:	bf00      	nop
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bc80      	pop	{r7}
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	200009e4 	.word	0x200009e4

08007ef8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007f00:	2300      	movs	r3, #0
 8007f02:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	78db      	ldrb	r3, [r3, #3]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d034      	beq.n	8007f76 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f10:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	7858      	ldrb	r0, [r3, #1]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	f7ff fd4e 	bl	80079c0 <disk_write>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d002      	beq.n	8007f30 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	73fb      	strb	r3, [r7, #15]
 8007f2e:	e022      	b.n	8007f76 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	1ad2      	subs	r2, r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d217      	bcs.n	8007f76 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	789b      	ldrb	r3, [r3, #2]
 8007f4a:	613b      	str	r3, [r7, #16]
 8007f4c:	e010      	b.n	8007f70 <sync_window+0x78>
					wsect += fs->fsize;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	4413      	add	r3, r2
 8007f56:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	7858      	ldrb	r0, [r3, #1]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007f62:	2301      	movs	r3, #1
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	f7ff fd2b 	bl	80079c0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	613b      	str	r3, [r7, #16]
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d8eb      	bhi.n	8007f4e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3718      	adds	r7, #24
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f92:	683a      	ldr	r2, [r7, #0]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d01b      	beq.n	8007fd0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7ff ffad 	bl	8007ef8 <sync_window>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007fa2:	7bfb      	ldrb	r3, [r7, #15]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d113      	bne.n	8007fd0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	7858      	ldrb	r0, [r3, #1]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	683a      	ldr	r2, [r7, #0]
 8007fb6:	f7ff fce3 	bl	8007980 <disk_read>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d004      	beq.n	8007fca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007fc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007fc4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	683a      	ldr	r2, [r7, #0]
 8007fce:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
	...

08007fdc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7ff ff87 	bl	8007ef8 <sync_window>
 8007fea:	4603      	mov	r3, r0
 8007fec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d158      	bne.n	80080a6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	2b03      	cmp	r3, #3
 8007ffa:	d148      	bne.n	800808e <sync_fs+0xb2>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	791b      	ldrb	r3, [r3, #4]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d144      	bne.n	800808e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	3330      	adds	r3, #48	@ 0x30
 8008008:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800800c:	2100      	movs	r1, #0
 800800e:	4618      	mov	r0, r3
 8008010:	f7ff fdb2 	bl	8007b78 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	3330      	adds	r3, #48	@ 0x30
 8008018:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800801c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008020:	4618      	mov	r0, r3
 8008022:	f7ff fd44 	bl	8007aae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	3330      	adds	r3, #48	@ 0x30
 800802a:	4921      	ldr	r1, [pc, #132]	@ (80080b0 <sync_fs+0xd4>)
 800802c:	4618      	mov	r0, r3
 800802e:	f7ff fd58 	bl	8007ae2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	3330      	adds	r3, #48	@ 0x30
 8008036:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800803a:	491e      	ldr	r1, [pc, #120]	@ (80080b4 <sync_fs+0xd8>)
 800803c:	4618      	mov	r0, r3
 800803e:	f7ff fd50 	bl	8007ae2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	3330      	adds	r3, #48	@ 0x30
 8008046:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	4619      	mov	r1, r3
 8008050:	4610      	mov	r0, r2
 8008052:	f7ff fd46 	bl	8007ae2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	3330      	adds	r3, #48	@ 0x30
 800805a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	4619      	mov	r1, r3
 8008064:	4610      	mov	r0, r2
 8008066:	f7ff fd3c 	bl	8007ae2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	69db      	ldr	r3, [r3, #28]
 800806e:	1c5a      	adds	r2, r3, #1
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	7858      	ldrb	r0, [r3, #1]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008082:	2301      	movs	r3, #1
 8008084:	f7ff fc9c 	bl	80079c0 <disk_write>
			fs->fsi_flag = 0;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	785b      	ldrb	r3, [r3, #1]
 8008092:	2200      	movs	r2, #0
 8008094:	2100      	movs	r1, #0
 8008096:	4618      	mov	r0, r3
 8008098:	f7ff fcb2 	bl	8007a00 <disk_ioctl>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <sync_fs+0xca>
 80080a2:	2301      	movs	r3, #1
 80080a4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80080a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	41615252 	.word	0x41615252
 80080b4:	61417272 	.word	0x61417272

080080b8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	3b02      	subs	r3, #2
 80080c6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	695b      	ldr	r3, [r3, #20]
 80080cc:	3b02      	subs	r3, #2
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d301      	bcc.n	80080d8 <clust2sect+0x20>
 80080d4:	2300      	movs	r3, #0
 80080d6:	e008      	b.n	80080ea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	895b      	ldrh	r3, [r3, #10]
 80080dc:	461a      	mov	r2, r3
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	fb03 f202 	mul.w	r2, r3, r2
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080e8:	4413      	add	r3, r2
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bc80      	pop	{r7}
 80080f2:	4770      	bx	lr

080080f4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d904      	bls.n	8008114 <get_fat+0x20>
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	429a      	cmp	r2, r3
 8008112:	d302      	bcc.n	800811a <get_fat+0x26>
		val = 1;	/* Internal error */
 8008114:	2301      	movs	r3, #1
 8008116:	617b      	str	r3, [r7, #20]
 8008118:	e08e      	b.n	8008238 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800811a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800811e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	2b03      	cmp	r3, #3
 8008126:	d061      	beq.n	80081ec <get_fat+0xf8>
 8008128:	2b03      	cmp	r3, #3
 800812a:	dc7b      	bgt.n	8008224 <get_fat+0x130>
 800812c:	2b01      	cmp	r3, #1
 800812e:	d002      	beq.n	8008136 <get_fat+0x42>
 8008130:	2b02      	cmp	r3, #2
 8008132:	d041      	beq.n	80081b8 <get_fat+0xc4>
 8008134:	e076      	b.n	8008224 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	60fb      	str	r3, [r7, #12]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	085b      	lsrs	r3, r3, #1
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	4413      	add	r3, r2
 8008142:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	6a1a      	ldr	r2, [r3, #32]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	0a5b      	lsrs	r3, r3, #9
 800814c:	4413      	add	r3, r2
 800814e:	4619      	mov	r1, r3
 8008150:	6938      	ldr	r0, [r7, #16]
 8008152:	f7ff ff15 	bl	8007f80 <move_window>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d166      	bne.n	800822a <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	1c5a      	adds	r2, r3, #1
 8008160:	60fa      	str	r2, [r7, #12]
 8008162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	4413      	add	r3, r2
 800816a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800816e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	6a1a      	ldr	r2, [r3, #32]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	0a5b      	lsrs	r3, r3, #9
 8008178:	4413      	add	r3, r2
 800817a:	4619      	mov	r1, r3
 800817c:	6938      	ldr	r0, [r7, #16]
 800817e:	f7ff feff 	bl	8007f80 <move_window>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d152      	bne.n	800822e <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	4413      	add	r3, r2
 8008192:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008196:	021b      	lsls	r3, r3, #8
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	4313      	orrs	r3, r2
 800819c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d002      	beq.n	80081ae <get_fat+0xba>
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	091b      	lsrs	r3, r3, #4
 80081ac:	e002      	b.n	80081b4 <get_fat+0xc0>
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081b4:	617b      	str	r3, [r7, #20]
			break;
 80081b6:	e03f      	b.n	8008238 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	6a1a      	ldr	r2, [r3, #32]
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	0a1b      	lsrs	r3, r3, #8
 80081c0:	4413      	add	r3, r2
 80081c2:	4619      	mov	r1, r3
 80081c4:	6938      	ldr	r0, [r7, #16]
 80081c6:	f7ff fedb 	bl	8007f80 <move_window>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d130      	bne.n	8008232 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	005b      	lsls	r3, r3, #1
 80081da:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80081de:	4413      	add	r3, r2
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7ff fc2b 	bl	8007a3c <ld_word>
 80081e6:	4603      	mov	r3, r0
 80081e8:	617b      	str	r3, [r7, #20]
			break;
 80081ea:	e025      	b.n	8008238 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	6a1a      	ldr	r2, [r3, #32]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	09db      	lsrs	r3, r3, #7
 80081f4:	4413      	add	r3, r2
 80081f6:	4619      	mov	r1, r3
 80081f8:	6938      	ldr	r0, [r7, #16]
 80081fa:	f7ff fec1 	bl	8007f80 <move_window>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d118      	bne.n	8008236 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008212:	4413      	add	r3, r2
 8008214:	4618      	mov	r0, r3
 8008216:	f7ff fc28 	bl	8007a6a <ld_dword>
 800821a:	4603      	mov	r3, r0
 800821c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008220:	617b      	str	r3, [r7, #20]
			break;
 8008222:	e009      	b.n	8008238 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008224:	2301      	movs	r3, #1
 8008226:	617b      	str	r3, [r7, #20]
 8008228:	e006      	b.n	8008238 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800822a:	bf00      	nop
 800822c:	e004      	b.n	8008238 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800822e:	bf00      	nop
 8008230:	e002      	b.n	8008238 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008232:	bf00      	nop
 8008234:	e000      	b.n	8008238 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008236:	bf00      	nop
		}
	}

	return val;
 8008238:	697b      	ldr	r3, [r7, #20]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3718      	adds	r7, #24
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008242:	b590      	push	{r4, r7, lr}
 8008244:	b089      	sub	sp, #36	@ 0x24
 8008246:	af00      	add	r7, sp, #0
 8008248:	60f8      	str	r0, [r7, #12]
 800824a:	60b9      	str	r1, [r7, #8]
 800824c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800824e:	2302      	movs	r3, #2
 8008250:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	2b01      	cmp	r3, #1
 8008256:	f240 80d9 	bls.w	800840c <put_fat+0x1ca>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	429a      	cmp	r2, r3
 8008262:	f080 80d3 	bcs.w	800840c <put_fat+0x1ca>
		switch (fs->fs_type) {
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	2b03      	cmp	r3, #3
 800826c:	f000 8096 	beq.w	800839c <put_fat+0x15a>
 8008270:	2b03      	cmp	r3, #3
 8008272:	f300 80cb 	bgt.w	800840c <put_fat+0x1ca>
 8008276:	2b01      	cmp	r3, #1
 8008278:	d002      	beq.n	8008280 <put_fat+0x3e>
 800827a:	2b02      	cmp	r3, #2
 800827c:	d06e      	beq.n	800835c <put_fat+0x11a>
 800827e:	e0c5      	b.n	800840c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	61bb      	str	r3, [r7, #24]
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	085b      	lsrs	r3, r3, #1
 8008288:	69ba      	ldr	r2, [r7, #24]
 800828a:	4413      	add	r3, r2
 800828c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6a1a      	ldr	r2, [r3, #32]
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	0a5b      	lsrs	r3, r3, #9
 8008296:	4413      	add	r3, r2
 8008298:	4619      	mov	r1, r3
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f7ff fe70 	bl	8007f80 <move_window>
 80082a0:	4603      	mov	r3, r0
 80082a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80082a4:	7ffb      	ldrb	r3, [r7, #31]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f040 80a9 	bne.w	80083fe <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	1c59      	adds	r1, r3, #1
 80082b6:	61b9      	str	r1, [r7, #24]
 80082b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082bc:	4413      	add	r3, r2
 80082be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	f003 0301 	and.w	r3, r3, #1
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00d      	beq.n	80082e6 <put_fat+0xa4>
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	b25b      	sxtb	r3, r3
 80082d0:	f003 030f 	and.w	r3, r3, #15
 80082d4:	b25a      	sxtb	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	011b      	lsls	r3, r3, #4
 80082dc:	b25b      	sxtb	r3, r3
 80082de:	4313      	orrs	r3, r2
 80082e0:	b25b      	sxtb	r3, r3
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	e001      	b.n	80082ea <put_fat+0xa8>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2201      	movs	r2, #1
 80082f2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6a1a      	ldr	r2, [r3, #32]
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	0a5b      	lsrs	r3, r3, #9
 80082fc:	4413      	add	r3, r2
 80082fe:	4619      	mov	r1, r3
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f7ff fe3d 	bl	8007f80 <move_window>
 8008306:	4603      	mov	r3, r0
 8008308:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800830a:	7ffb      	ldrb	r3, [r7, #31]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d178      	bne.n	8008402 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800831c:	4413      	add	r3, r2
 800831e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	2b00      	cmp	r3, #0
 8008328:	d003      	beq.n	8008332 <put_fat+0xf0>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	091b      	lsrs	r3, r3, #4
 800832e:	b2db      	uxtb	r3, r3
 8008330:	e00e      	b.n	8008350 <put_fat+0x10e>
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	b25b      	sxtb	r3, r3
 8008338:	f023 030f 	bic.w	r3, r3, #15
 800833c:	b25a      	sxtb	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	0a1b      	lsrs	r3, r3, #8
 8008342:	b25b      	sxtb	r3, r3
 8008344:	f003 030f 	and.w	r3, r3, #15
 8008348:	b25b      	sxtb	r3, r3
 800834a:	4313      	orrs	r3, r2
 800834c:	b25b      	sxtb	r3, r3
 800834e:	b2db      	uxtb	r3, r3
 8008350:	697a      	ldr	r2, [r7, #20]
 8008352:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2201      	movs	r2, #1
 8008358:	70da      	strb	r2, [r3, #3]
			break;
 800835a:	e057      	b.n	800840c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6a1a      	ldr	r2, [r3, #32]
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	0a1b      	lsrs	r3, r3, #8
 8008364:	4413      	add	r3, r2
 8008366:	4619      	mov	r1, r3
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f7ff fe09 	bl	8007f80 <move_window>
 800836e:	4603      	mov	r3, r0
 8008370:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008372:	7ffb      	ldrb	r3, [r7, #31]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d146      	bne.n	8008406 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	005b      	lsls	r3, r3, #1
 8008382:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008386:	4413      	add	r3, r2
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	b292      	uxth	r2, r2
 800838c:	4611      	mov	r1, r2
 800838e:	4618      	mov	r0, r3
 8008390:	f7ff fb8d 	bl	8007aae <st_word>
			fs->wflag = 1;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2201      	movs	r2, #1
 8008398:	70da      	strb	r2, [r3, #3]
			break;
 800839a:	e037      	b.n	800840c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6a1a      	ldr	r2, [r3, #32]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	09db      	lsrs	r3, r3, #7
 80083a4:	4413      	add	r3, r2
 80083a6:	4619      	mov	r1, r3
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f7ff fde9 	bl	8007f80 <move_window>
 80083ae:	4603      	mov	r3, r0
 80083b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80083b2:	7ffb      	ldrb	r3, [r7, #31]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d128      	bne.n	800840a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80083cc:	4413      	add	r3, r2
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7ff fb4b 	bl	8007a6a <ld_dword>
 80083d4:	4603      	mov	r3, r0
 80083d6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80083da:	4323      	orrs	r3, r4
 80083dc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80083ec:	4413      	add	r3, r2
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7ff fb76 	bl	8007ae2 <st_dword>
			fs->wflag = 1;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2201      	movs	r2, #1
 80083fa:	70da      	strb	r2, [r3, #3]
			break;
 80083fc:	e006      	b.n	800840c <put_fat+0x1ca>
			if (res != FR_OK) break;
 80083fe:	bf00      	nop
 8008400:	e004      	b.n	800840c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008402:	bf00      	nop
 8008404:	e002      	b.n	800840c <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008406:	bf00      	nop
 8008408:	e000      	b.n	800840c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800840a:	bf00      	nop
		}
	}
	return res;
 800840c:	7ffb      	ldrb	r3, [r7, #31]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3724      	adds	r7, #36	@ 0x24
 8008412:	46bd      	mov	sp, r7
 8008414:	bd90      	pop	{r4, r7, pc}

08008416 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b088      	sub	sp, #32
 800841a:	af00      	add	r7, sp, #0
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	60b9      	str	r1, [r7, #8]
 8008420:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008422:	2300      	movs	r3, #0
 8008424:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d904      	bls.n	800843c <remove_chain+0x26>
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	429a      	cmp	r2, r3
 800843a:	d301      	bcc.n	8008440 <remove_chain+0x2a>
 800843c:	2302      	movs	r3, #2
 800843e:	e04b      	b.n	80084d8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00c      	beq.n	8008460 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008446:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800844a:	6879      	ldr	r1, [r7, #4]
 800844c:	69b8      	ldr	r0, [r7, #24]
 800844e:	f7ff fef8 	bl	8008242 <put_fat>
 8008452:	4603      	mov	r3, r0
 8008454:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008456:	7ffb      	ldrb	r3, [r7, #31]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d001      	beq.n	8008460 <remove_chain+0x4a>
 800845c:	7ffb      	ldrb	r3, [r7, #31]
 800845e:	e03b      	b.n	80084d8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008460:	68b9      	ldr	r1, [r7, #8]
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f7ff fe46 	bl	80080f4 <get_fat>
 8008468:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d031      	beq.n	80084d4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d101      	bne.n	800847a <remove_chain+0x64>
 8008476:	2302      	movs	r3, #2
 8008478:	e02e      	b.n	80084d8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008480:	d101      	bne.n	8008486 <remove_chain+0x70>
 8008482:	2301      	movs	r3, #1
 8008484:	e028      	b.n	80084d8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008486:	2200      	movs	r2, #0
 8008488:	68b9      	ldr	r1, [r7, #8]
 800848a:	69b8      	ldr	r0, [r7, #24]
 800848c:	f7ff fed9 	bl	8008242 <put_fat>
 8008490:	4603      	mov	r3, r0
 8008492:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008494:	7ffb      	ldrb	r3, [r7, #31]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d001      	beq.n	800849e <remove_chain+0x88>
 800849a:	7ffb      	ldrb	r3, [r7, #31]
 800849c:	e01c      	b.n	80084d8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	691a      	ldr	r2, [r3, #16]
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	3b02      	subs	r3, #2
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d20b      	bcs.n	80084c4 <remove_chain+0xae>
			fs->free_clst++;
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	791b      	ldrb	r3, [r3, #4]
 80084ba:	f043 0301 	orr.w	r3, r3, #1
 80084be:	b2da      	uxtb	r2, r3
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	695b      	ldr	r3, [r3, #20]
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d3c6      	bcc.n	8008460 <remove_chain+0x4a>
 80084d2:	e000      	b.n	80084d6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80084d4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3720      	adds	r7, #32
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b088      	sub	sp, #32
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10d      	bne.n	8008512 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d004      	beq.n	800850c <create_chain+0x2c>
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	69ba      	ldr	r2, [r7, #24]
 8008508:	429a      	cmp	r2, r3
 800850a:	d31b      	bcc.n	8008544 <create_chain+0x64>
 800850c:	2301      	movs	r3, #1
 800850e:	61bb      	str	r3, [r7, #24]
 8008510:	e018      	b.n	8008544 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008512:	6839      	ldr	r1, [r7, #0]
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f7ff fded 	bl	80080f4 <get_fat>
 800851a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d801      	bhi.n	8008526 <create_chain+0x46>
 8008522:	2301      	movs	r3, #1
 8008524:	e070      	b.n	8008608 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800852c:	d101      	bne.n	8008532 <create_chain+0x52>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	e06a      	b.n	8008608 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	695b      	ldr	r3, [r3, #20]
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	429a      	cmp	r2, r3
 800853a:	d201      	bcs.n	8008540 <create_chain+0x60>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	e063      	b.n	8008608 <create_chain+0x128>
		scl = clst;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	3301      	adds	r3, #1
 800854c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	69fa      	ldr	r2, [r7, #28]
 8008554:	429a      	cmp	r2, r3
 8008556:	d307      	bcc.n	8008568 <create_chain+0x88>
				ncl = 2;
 8008558:	2302      	movs	r3, #2
 800855a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800855c:	69fa      	ldr	r2, [r7, #28]
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	429a      	cmp	r2, r3
 8008562:	d901      	bls.n	8008568 <create_chain+0x88>
 8008564:	2300      	movs	r3, #0
 8008566:	e04f      	b.n	8008608 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008568:	69f9      	ldr	r1, [r7, #28]
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7ff fdc2 	bl	80080f4 <get_fat>
 8008570:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00e      	beq.n	8008596 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d003      	beq.n	8008586 <create_chain+0xa6>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008584:	d101      	bne.n	800858a <create_chain+0xaa>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	e03e      	b.n	8008608 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800858a:	69fa      	ldr	r2, [r7, #28]
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	429a      	cmp	r2, r3
 8008590:	d1da      	bne.n	8008548 <create_chain+0x68>
 8008592:	2300      	movs	r3, #0
 8008594:	e038      	b.n	8008608 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008596:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008598:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800859c:	69f9      	ldr	r1, [r7, #28]
 800859e:	6938      	ldr	r0, [r7, #16]
 80085a0:	f7ff fe4f 	bl	8008242 <put_fat>
 80085a4:	4603      	mov	r3, r0
 80085a6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80085a8:	7dfb      	ldrb	r3, [r7, #23]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d109      	bne.n	80085c2 <create_chain+0xe2>
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d006      	beq.n	80085c2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80085b4:	69fa      	ldr	r2, [r7, #28]
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	6938      	ldr	r0, [r7, #16]
 80085ba:	f7ff fe42 	bl	8008242 <put_fat>
 80085be:	4603      	mov	r3, r0
 80085c0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80085c2:	7dfb      	ldrb	r3, [r7, #23]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d116      	bne.n	80085f6 <create_chain+0x116>
		fs->last_clst = ncl;
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	69fa      	ldr	r2, [r7, #28]
 80085cc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	691a      	ldr	r2, [r3, #16]
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	3b02      	subs	r3, #2
 80085d8:	429a      	cmp	r2, r3
 80085da:	d804      	bhi.n	80085e6 <create_chain+0x106>
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	1e5a      	subs	r2, r3, #1
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	791b      	ldrb	r3, [r3, #4]
 80085ea:	f043 0301 	orr.w	r3, r3, #1
 80085ee:	b2da      	uxtb	r2, r3
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	711a      	strb	r2, [r3, #4]
 80085f4:	e007      	b.n	8008606 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80085f6:	7dfb      	ldrb	r3, [r7, #23]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d102      	bne.n	8008602 <create_chain+0x122>
 80085fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008600:	e000      	b.n	8008604 <create_chain+0x124>
 8008602:	2301      	movs	r3, #1
 8008604:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008606:	69fb      	ldr	r3, [r7, #28]
}
 8008608:	4618      	mov	r0, r3
 800860a:	3720      	adds	r7, #32
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008610:	b480      	push	{r7}
 8008612:	b087      	sub	sp, #28
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008624:	3304      	adds	r3, #4
 8008626:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	0a5b      	lsrs	r3, r3, #9
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	8952      	ldrh	r2, [r2, #10]
 8008630:	fbb3 f3f2 	udiv	r3, r3, r2
 8008634:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	1d1a      	adds	r2, r3, #4
 800863a:	613a      	str	r2, [r7, #16]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d101      	bne.n	800864a <clmt_clust+0x3a>
 8008646:	2300      	movs	r3, #0
 8008648:	e010      	b.n	800866c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	429a      	cmp	r2, r3
 8008650:	d307      	bcc.n	8008662 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008652:	697a      	ldr	r2, [r7, #20]
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	617b      	str	r3, [r7, #20]
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	3304      	adds	r3, #4
 800865e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008660:	e7e9      	b.n	8008636 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008662:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	4413      	add	r3, r2
}
 800866c:	4618      	mov	r0, r3
 800866e:	371c      	adds	r7, #28
 8008670:	46bd      	mov	sp, r7
 8008672:	bc80      	pop	{r7}
 8008674:	4770      	bx	lr

08008676 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b086      	sub	sp, #24
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800868c:	d204      	bcs.n	8008698 <dir_sdi+0x22>
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	f003 031f 	and.w	r3, r3, #31
 8008694:	2b00      	cmp	r3, #0
 8008696:	d001      	beq.n	800869c <dir_sdi+0x26>
		return FR_INT_ERR;
 8008698:	2302      	movs	r3, #2
 800869a:	e063      	b.n	8008764 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d106      	bne.n	80086bc <dir_sdi+0x46>
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d902      	bls.n	80086bc <dir_sdi+0x46>
		clst = fs->dirbase;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ba:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10c      	bne.n	80086dc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	095b      	lsrs	r3, r3, #5
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	8912      	ldrh	r2, [r2, #8]
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d301      	bcc.n	80086d2 <dir_sdi+0x5c>
 80086ce:	2302      	movs	r3, #2
 80086d0:	e048      	b.n	8008764 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	61da      	str	r2, [r3, #28]
 80086da:	e029      	b.n	8008730 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	895b      	ldrh	r3, [r3, #10]
 80086e0:	025b      	lsls	r3, r3, #9
 80086e2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80086e4:	e019      	b.n	800871a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6979      	ldr	r1, [r7, #20]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7ff fd02 	bl	80080f4 <get_fat>
 80086f0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086f8:	d101      	bne.n	80086fe <dir_sdi+0x88>
 80086fa:	2301      	movs	r3, #1
 80086fc:	e032      	b.n	8008764 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d904      	bls.n	800870e <dir_sdi+0x98>
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	697a      	ldr	r2, [r7, #20]
 800870a:	429a      	cmp	r2, r3
 800870c:	d301      	bcc.n	8008712 <dir_sdi+0x9c>
 800870e:	2302      	movs	r3, #2
 8008710:	e028      	b.n	8008764 <dir_sdi+0xee>
			ofs -= csz;
 8008712:	683a      	ldr	r2, [r7, #0]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	429a      	cmp	r2, r3
 8008720:	d2e1      	bcs.n	80086e6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008722:	6979      	ldr	r1, [r7, #20]
 8008724:	6938      	ldr	r0, [r7, #16]
 8008726:	f7ff fcc7 	bl	80080b8 <clust2sect>
 800872a:	4602      	mov	r2, r0
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d101      	bne.n	8008742 <dir_sdi+0xcc>
 800873e:	2302      	movs	r3, #2
 8008740:	e010      	b.n	8008764 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	69da      	ldr	r2, [r3, #28]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	0a5b      	lsrs	r3, r3, #9
 800874a:	441a      	add	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800875c:	441a      	add	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3718      	adds	r7, #24
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	695b      	ldr	r3, [r3, #20]
 8008780:	3320      	adds	r3, #32
 8008782:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	69db      	ldr	r3, [r3, #28]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <dir_next+0x28>
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008792:	d301      	bcc.n	8008798 <dir_next+0x2c>
 8008794:	2304      	movs	r3, #4
 8008796:	e0aa      	b.n	80088ee <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f040 8098 	bne.w	80088d4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	69db      	ldr	r3, [r3, #28]
 80087a8:	1c5a      	adds	r2, r3, #1
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	699b      	ldr	r3, [r3, #24]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10b      	bne.n	80087ce <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	095b      	lsrs	r3, r3, #5
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	8912      	ldrh	r2, [r2, #8]
 80087be:	4293      	cmp	r3, r2
 80087c0:	f0c0 8088 	bcc.w	80088d4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	61da      	str	r2, [r3, #28]
 80087ca:	2304      	movs	r3, #4
 80087cc:	e08f      	b.n	80088ee <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	0a5b      	lsrs	r3, r3, #9
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	8952      	ldrh	r2, [r2, #10]
 80087d6:	3a01      	subs	r2, #1
 80087d8:	4013      	ands	r3, r2
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d17a      	bne.n	80088d4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	4619      	mov	r1, r3
 80087e6:	4610      	mov	r0, r2
 80087e8:	f7ff fc84 	bl	80080f4 <get_fat>
 80087ec:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d801      	bhi.n	80087f8 <dir_next+0x8c>
 80087f4:	2302      	movs	r3, #2
 80087f6:	e07a      	b.n	80088ee <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087fe:	d101      	bne.n	8008804 <dir_next+0x98>
 8008800:	2301      	movs	r3, #1
 8008802:	e074      	b.n	80088ee <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	695b      	ldr	r3, [r3, #20]
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	429a      	cmp	r2, r3
 800880c:	d358      	bcc.n	80088c0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d104      	bne.n	800881e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	61da      	str	r2, [r3, #28]
 800881a:	2304      	movs	r3, #4
 800881c:	e067      	b.n	80088ee <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	699b      	ldr	r3, [r3, #24]
 8008824:	4619      	mov	r1, r3
 8008826:	4610      	mov	r0, r2
 8008828:	f7ff fe5a 	bl	80084e0 <create_chain>
 800882c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d101      	bne.n	8008838 <dir_next+0xcc>
 8008834:	2307      	movs	r3, #7
 8008836:	e05a      	b.n	80088ee <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d101      	bne.n	8008842 <dir_next+0xd6>
 800883e:	2302      	movs	r3, #2
 8008840:	e055      	b.n	80088ee <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008848:	d101      	bne.n	800884e <dir_next+0xe2>
 800884a:	2301      	movs	r3, #1
 800884c:	e04f      	b.n	80088ee <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f7ff fb52 	bl	8007ef8 <sync_window>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <dir_next+0xf2>
 800885a:	2301      	movs	r3, #1
 800885c:	e047      	b.n	80088ee <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3330      	adds	r3, #48	@ 0x30
 8008862:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008866:	2100      	movs	r1, #0
 8008868:	4618      	mov	r0, r3
 800886a:	f7ff f985 	bl	8007b78 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800886e:	2300      	movs	r3, #0
 8008870:	613b      	str	r3, [r7, #16]
 8008872:	6979      	ldr	r1, [r7, #20]
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f7ff fc1f 	bl	80080b8 <clust2sect>
 800887a:	4602      	mov	r2, r0
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008880:	e012      	b.n	80088a8 <dir_next+0x13c>
						fs->wflag = 1;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2201      	movs	r2, #1
 8008886:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f7ff fb35 	bl	8007ef8 <sync_window>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d001      	beq.n	8008898 <dir_next+0x12c>
 8008894:	2301      	movs	r3, #1
 8008896:	e02a      	b.n	80088ee <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	3301      	adds	r3, #1
 800889c:	613b      	str	r3, [r7, #16]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a2:	1c5a      	adds	r2, r3, #1
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	895b      	ldrh	r3, [r3, #10]
 80088ac:	461a      	mov	r2, r3
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d3e6      	bcc.n	8008882 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	1ad2      	subs	r2, r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80088c6:	6979      	ldr	r1, [r7, #20]
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f7ff fbf5 	bl	80080b8 <clust2sect>
 80088ce:	4602      	mov	r2, r0
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088e6:	441a      	add	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3718      	adds	r7, #24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b086      	sub	sp, #24
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008906:	2100      	movs	r1, #0
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f7ff feb4 	bl	8008676 <dir_sdi>
 800890e:	4603      	mov	r3, r0
 8008910:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008912:	7dfb      	ldrb	r3, [r7, #23]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d12b      	bne.n	8008970 <dir_alloc+0x7a>
		n = 0;
 8008918:	2300      	movs	r3, #0
 800891a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	69db      	ldr	r3, [r3, #28]
 8008920:	4619      	mov	r1, r3
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f7ff fb2c 	bl	8007f80 <move_window>
 8008928:	4603      	mov	r3, r0
 800892a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800892c:	7dfb      	ldrb	r3, [r7, #23]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d11d      	bne.n	800896e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	2be5      	cmp	r3, #229	@ 0xe5
 800893a:	d004      	beq.n	8008946 <dir_alloc+0x50>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a1b      	ldr	r3, [r3, #32]
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d107      	bne.n	8008956 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	3301      	adds	r3, #1
 800894a:	613b      	str	r3, [r7, #16]
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	429a      	cmp	r2, r3
 8008952:	d102      	bne.n	800895a <dir_alloc+0x64>
 8008954:	e00c      	b.n	8008970 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008956:	2300      	movs	r3, #0
 8008958:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800895a:	2101      	movs	r1, #1
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f7ff ff05 	bl	800876c <dir_next>
 8008962:	4603      	mov	r3, r0
 8008964:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008966:	7dfb      	ldrb	r3, [r7, #23]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d0d7      	beq.n	800891c <dir_alloc+0x26>
 800896c:	e000      	b.n	8008970 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800896e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008970:	7dfb      	ldrb	r3, [r7, #23]
 8008972:	2b04      	cmp	r3, #4
 8008974:	d101      	bne.n	800897a <dir_alloc+0x84>
 8008976:	2307      	movs	r3, #7
 8008978:	75fb      	strb	r3, [r7, #23]
	return res;
 800897a:	7dfb      	ldrb	r3, [r7, #23]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3718      	adds	r7, #24
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	331a      	adds	r3, #26
 8008992:	4618      	mov	r0, r3
 8008994:	f7ff f852 	bl	8007a3c <ld_word>
 8008998:	4603      	mov	r3, r0
 800899a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	2b03      	cmp	r3, #3
 80089a2:	d109      	bne.n	80089b8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	3314      	adds	r3, #20
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7ff f847 	bl	8007a3c <ld_word>
 80089ae:	4603      	mov	r3, r0
 80089b0:	041b      	lsls	r3, r3, #16
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80089b8:	68fb      	ldr	r3, [r7, #12]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b084      	sub	sp, #16
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	60f8      	str	r0, [r7, #12]
 80089ca:	60b9      	str	r1, [r7, #8]
 80089cc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	331a      	adds	r3, #26
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	b292      	uxth	r2, r2
 80089d6:	4611      	mov	r1, r2
 80089d8:	4618      	mov	r0, r3
 80089da:	f7ff f868 	bl	8007aae <st_word>
	if (fs->fs_type == FS_FAT32) {
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	2b03      	cmp	r3, #3
 80089e4:	d109      	bne.n	80089fa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	f103 0214 	add.w	r2, r3, #20
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	0c1b      	lsrs	r3, r3, #16
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	4619      	mov	r1, r3
 80089f4:	4610      	mov	r0, r2
 80089f6:	f7ff f85a 	bl	8007aae <st_word>
	}
}
 80089fa:	bf00      	nop
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b086      	sub	sp, #24
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008a10:	2100      	movs	r1, #0
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f7ff fe2f 	bl	8008676 <dir_sdi>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008a1c:	7dfb      	ldrb	r3, [r7, #23]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <dir_find+0x24>
 8008a22:	7dfb      	ldrb	r3, [r7, #23]
 8008a24:	e03e      	b.n	8008aa4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	69db      	ldr	r3, [r3, #28]
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6938      	ldr	r0, [r7, #16]
 8008a2e:	f7ff faa7 	bl	8007f80 <move_window>
 8008a32:	4603      	mov	r3, r0
 8008a34:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008a36:	7dfb      	ldrb	r3, [r7, #23]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d12f      	bne.n	8008a9c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a1b      	ldr	r3, [r3, #32]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d102      	bne.n	8008a50 <dir_find+0x4e>
 8008a4a:	2304      	movs	r3, #4
 8008a4c:	75fb      	strb	r3, [r7, #23]
 8008a4e:	e028      	b.n	8008aa2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6a1b      	ldr	r3, [r3, #32]
 8008a54:	330b      	adds	r3, #11
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	330b      	adds	r3, #11
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	f003 0308 	and.w	r3, r3, #8
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10a      	bne.n	8008a88 <dir_find+0x86>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a18      	ldr	r0, [r3, #32]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	3324      	adds	r3, #36	@ 0x24
 8008a7a:	220b      	movs	r2, #11
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	f7ff f895 	bl	8007bac <mem_cmp>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00b      	beq.n	8008aa0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008a88:	2100      	movs	r1, #0
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7ff fe6e 	bl	800876c <dir_next>
 8008a90:	4603      	mov	r3, r0
 8008a92:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008a94:	7dfb      	ldrb	r3, [r7, #23]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d0c5      	beq.n	8008a26 <dir_find+0x24>
 8008a9a:	e002      	b.n	8008aa2 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008a9c:	bf00      	nop
 8008a9e:	e000      	b.n	8008aa2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008aa0:	bf00      	nop

	return res;
 8008aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3718      	adds	r7, #24
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008aba:	2101      	movs	r1, #1
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7ff ff1a 	bl	80088f6 <dir_alloc>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d11c      	bne.n	8008b06 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	69db      	ldr	r3, [r3, #28]
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	68b8      	ldr	r0, [r7, #8]
 8008ad4:	f7ff fa54 	bl	8007f80 <move_window>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d111      	bne.n	8008b06 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	2220      	movs	r2, #32
 8008ae8:	2100      	movs	r1, #0
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7ff f844 	bl	8007b78 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a18      	ldr	r0, [r3, #32]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3324      	adds	r3, #36	@ 0x24
 8008af8:	220b      	movs	r2, #11
 8008afa:	4619      	mov	r1, r3
 8008afc:	f7ff f81c 	bl	8007b38 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	2201      	movs	r2, #1
 8008b04:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b088      	sub	sp, #32
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	60fb      	str	r3, [r7, #12]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3324      	adds	r3, #36	@ 0x24
 8008b24:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008b26:	220b      	movs	r2, #11
 8008b28:	2120      	movs	r1, #32
 8008b2a:	68b8      	ldr	r0, [r7, #8]
 8008b2c:	f7ff f824 	bl	8007b78 <mem_set>
	si = i = 0; ni = 8;
 8008b30:	2300      	movs	r3, #0
 8008b32:	613b      	str	r3, [r7, #16]
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	61fb      	str	r3, [r7, #28]
 8008b38:	2308      	movs	r3, #8
 8008b3a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	1c5a      	adds	r2, r3, #1
 8008b40:	61fa      	str	r2, [r7, #28]
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	4413      	add	r3, r2
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008b4a:	7efb      	ldrb	r3, [r7, #27]
 8008b4c:	2b20      	cmp	r3, #32
 8008b4e:	d94e      	bls.n	8008bee <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008b50:	7efb      	ldrb	r3, [r7, #27]
 8008b52:	2b2f      	cmp	r3, #47	@ 0x2f
 8008b54:	d006      	beq.n	8008b64 <create_name+0x54>
 8008b56:	7efb      	ldrb	r3, [r7, #27]
 8008b58:	2b5c      	cmp	r3, #92	@ 0x5c
 8008b5a:	d110      	bne.n	8008b7e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008b5c:	e002      	b.n	8008b64 <create_name+0x54>
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	3301      	adds	r3, #1
 8008b62:	61fb      	str	r3, [r7, #28]
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	4413      	add	r3, r2
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	2b2f      	cmp	r3, #47	@ 0x2f
 8008b6e:	d0f6      	beq.n	8008b5e <create_name+0x4e>
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	4413      	add	r3, r2
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	2b5c      	cmp	r3, #92	@ 0x5c
 8008b7a:	d0f0      	beq.n	8008b5e <create_name+0x4e>
			break;
 8008b7c:	e038      	b.n	8008bf0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008b7e:	7efb      	ldrb	r3, [r7, #27]
 8008b80:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b82:	d003      	beq.n	8008b8c <create_name+0x7c>
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d30c      	bcc.n	8008ba6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	2b0b      	cmp	r3, #11
 8008b90:	d002      	beq.n	8008b98 <create_name+0x88>
 8008b92:	7efb      	ldrb	r3, [r7, #27]
 8008b94:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b96:	d001      	beq.n	8008b9c <create_name+0x8c>
 8008b98:	2306      	movs	r3, #6
 8008b9a:	e044      	b.n	8008c26 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008b9c:	2308      	movs	r3, #8
 8008b9e:	613b      	str	r3, [r7, #16]
 8008ba0:	230b      	movs	r3, #11
 8008ba2:	617b      	str	r3, [r7, #20]
			continue;
 8008ba4:	e022      	b.n	8008bec <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008ba6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	da04      	bge.n	8008bb8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008bae:	7efb      	ldrb	r3, [r7, #27]
 8008bb0:	3b80      	subs	r3, #128	@ 0x80
 8008bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8008c30 <create_name+0x120>)
 8008bb4:	5cd3      	ldrb	r3, [r2, r3]
 8008bb6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008bb8:	7efb      	ldrb	r3, [r7, #27]
 8008bba:	4619      	mov	r1, r3
 8008bbc:	481d      	ldr	r0, [pc, #116]	@ (8008c34 <create_name+0x124>)
 8008bbe:	f7ff f81b 	bl	8007bf8 <chk_chr>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d001      	beq.n	8008bcc <create_name+0xbc>
 8008bc8:	2306      	movs	r3, #6
 8008bca:	e02c      	b.n	8008c26 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008bcc:	7efb      	ldrb	r3, [r7, #27]
 8008bce:	2b60      	cmp	r3, #96	@ 0x60
 8008bd0:	d905      	bls.n	8008bde <create_name+0xce>
 8008bd2:	7efb      	ldrb	r3, [r7, #27]
 8008bd4:	2b7a      	cmp	r3, #122	@ 0x7a
 8008bd6:	d802      	bhi.n	8008bde <create_name+0xce>
 8008bd8:	7efb      	ldrb	r3, [r7, #27]
 8008bda:	3b20      	subs	r3, #32
 8008bdc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	1c5a      	adds	r2, r3, #1
 8008be2:	613a      	str	r2, [r7, #16]
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	4413      	add	r3, r2
 8008be8:	7efa      	ldrb	r2, [r7, #27]
 8008bea:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008bec:	e7a6      	b.n	8008b3c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008bee:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	441a      	add	r2, r3
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d101      	bne.n	8008c04 <create_name+0xf4>
 8008c00:	2306      	movs	r3, #6
 8008c02:	e010      	b.n	8008c26 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	2be5      	cmp	r3, #229	@ 0xe5
 8008c0a:	d102      	bne.n	8008c12 <create_name+0x102>
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	2205      	movs	r2, #5
 8008c10:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008c12:	7efb      	ldrb	r3, [r7, #27]
 8008c14:	2b20      	cmp	r3, #32
 8008c16:	d801      	bhi.n	8008c1c <create_name+0x10c>
 8008c18:	2204      	movs	r2, #4
 8008c1a:	e000      	b.n	8008c1e <create_name+0x10e>
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	330b      	adds	r3, #11
 8008c22:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008c24:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3720      	adds	r7, #32
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	0800cc18 	.word	0x0800cc18
 8008c34:	0800cb0c 	.word	0x0800cb0c

08008c38 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008c4c:	e002      	b.n	8008c54 <follow_path+0x1c>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	3301      	adds	r3, #1
 8008c52:	603b      	str	r3, [r7, #0]
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	2b2f      	cmp	r3, #47	@ 0x2f
 8008c5a:	d0f8      	beq.n	8008c4e <follow_path+0x16>
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	2b5c      	cmp	r3, #92	@ 0x5c
 8008c62:	d0f4      	beq.n	8008c4e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	2200      	movs	r2, #0
 8008c68:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	2b1f      	cmp	r3, #31
 8008c70:	d80a      	bhi.n	8008c88 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2280      	movs	r2, #128	@ 0x80
 8008c76:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f7ff fcfa 	bl	8008676 <dir_sdi>
 8008c82:	4603      	mov	r3, r0
 8008c84:	75fb      	strb	r3, [r7, #23]
 8008c86:	e043      	b.n	8008d10 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008c88:	463b      	mov	r3, r7
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f7ff ff3f 	bl	8008b10 <create_name>
 8008c92:	4603      	mov	r3, r0
 8008c94:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008c96:	7dfb      	ldrb	r3, [r7, #23]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d134      	bne.n	8008d06 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7ff feb0 	bl	8008a02 <dir_find>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008cac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008cae:	7dfb      	ldrb	r3, [r7, #23]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00a      	beq.n	8008cca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008cb4:	7dfb      	ldrb	r3, [r7, #23]
 8008cb6:	2b04      	cmp	r3, #4
 8008cb8:	d127      	bne.n	8008d0a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008cba:	7afb      	ldrb	r3, [r7, #11]
 8008cbc:	f003 0304 	and.w	r3, r3, #4
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d122      	bne.n	8008d0a <follow_path+0xd2>
 8008cc4:	2305      	movs	r3, #5
 8008cc6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008cc8:	e01f      	b.n	8008d0a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008cca:	7afb      	ldrb	r3, [r7, #11]
 8008ccc:	f003 0304 	and.w	r3, r3, #4
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d11c      	bne.n	8008d0e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	799b      	ldrb	r3, [r3, #6]
 8008cd8:	f003 0310 	and.w	r3, r3, #16
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d102      	bne.n	8008ce6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008ce0:	2305      	movs	r3, #5
 8008ce2:	75fb      	strb	r3, [r7, #23]
 8008ce4:	e014      	b.n	8008d10 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	695b      	ldr	r3, [r3, #20]
 8008cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cf4:	4413      	add	r3, r2
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f7ff fe43 	bl	8008984 <ld_clust>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008d04:	e7c0      	b.n	8008c88 <follow_path+0x50>
			if (res != FR_OK) break;
 8008d06:	bf00      	nop
 8008d08:	e002      	b.n	8008d10 <follow_path+0xd8>
				break;
 8008d0a:	bf00      	nop
 8008d0c:	e000      	b.n	8008d10 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008d0e:	bf00      	nop
			}
		}
	}

	return res;
 8008d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3718      	adds	r7, #24
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	b087      	sub	sp, #28
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008d22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d26:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d031      	beq.n	8008d94 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	617b      	str	r3, [r7, #20]
 8008d36:	e002      	b.n	8008d3e <get_ldnumber+0x24>
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	617b      	str	r3, [r7, #20]
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	2b20      	cmp	r3, #32
 8008d44:	d903      	bls.n	8008d4e <get_ldnumber+0x34>
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	2b3a      	cmp	r3, #58	@ 0x3a
 8008d4c:	d1f4      	bne.n	8008d38 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	2b3a      	cmp	r3, #58	@ 0x3a
 8008d54:	d11c      	bne.n	8008d90 <get_ldnumber+0x76>
			tp = *path;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	1c5a      	adds	r2, r3, #1
 8008d60:	60fa      	str	r2, [r7, #12]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	3b30      	subs	r3, #48	@ 0x30
 8008d66:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2b09      	cmp	r3, #9
 8008d6c:	d80e      	bhi.n	8008d8c <get_ldnumber+0x72>
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d10a      	bne.n	8008d8c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d107      	bne.n	8008d8c <get_ldnumber+0x72>
					vol = (int)i;
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	3301      	adds	r3, #1
 8008d84:	617b      	str	r3, [r7, #20]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	697a      	ldr	r2, [r7, #20]
 8008d8a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	e002      	b.n	8008d96 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008d90:	2300      	movs	r3, #0
 8008d92:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008d94:	693b      	ldr	r3, [r7, #16]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	371c      	adds	r7, #28
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bc80      	pop	{r7}
 8008d9e:	4770      	bx	lr

08008da0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	70da      	strb	r2, [r3, #3]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008db6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008db8:	6839      	ldr	r1, [r7, #0]
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7ff f8e0 	bl	8007f80 <move_window>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d001      	beq.n	8008dca <check_fs+0x2a>
 8008dc6:	2304      	movs	r3, #4
 8008dc8:	e038      	b.n	8008e3c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	3330      	adds	r3, #48	@ 0x30
 8008dce:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fe fe32 	bl	8007a3c <ld_word>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	461a      	mov	r2, r3
 8008ddc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d001      	beq.n	8008de8 <check_fs+0x48>
 8008de4:	2303      	movs	r3, #3
 8008de6:	e029      	b.n	8008e3c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008dee:	2be9      	cmp	r3, #233	@ 0xe9
 8008df0:	d009      	beq.n	8008e06 <check_fs+0x66>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008df8:	2beb      	cmp	r3, #235	@ 0xeb
 8008dfa:	d11e      	bne.n	8008e3a <check_fs+0x9a>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008e02:	2b90      	cmp	r3, #144	@ 0x90
 8008e04:	d119      	bne.n	8008e3a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	3330      	adds	r3, #48	@ 0x30
 8008e0a:	3336      	adds	r3, #54	@ 0x36
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7fe fe2c 	bl	8007a6a <ld_dword>
 8008e12:	4603      	mov	r3, r0
 8008e14:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008e18:	4a0a      	ldr	r2, [pc, #40]	@ (8008e44 <check_fs+0xa4>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d101      	bne.n	8008e22 <check_fs+0x82>
 8008e1e:	2300      	movs	r3, #0
 8008e20:	e00c      	b.n	8008e3c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	3330      	adds	r3, #48	@ 0x30
 8008e26:	3352      	adds	r3, #82	@ 0x52
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7fe fe1e 	bl	8007a6a <ld_dword>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	4a05      	ldr	r2, [pc, #20]	@ (8008e48 <check_fs+0xa8>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d101      	bne.n	8008e3a <check_fs+0x9a>
 8008e36:	2300      	movs	r3, #0
 8008e38:	e000      	b.n	8008e3c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008e3a:	2302      	movs	r3, #2
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	00544146 	.word	0x00544146
 8008e48:	33544146 	.word	0x33544146

08008e4c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b096      	sub	sp, #88	@ 0x58
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	4613      	mov	r3, r2
 8008e58:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f7ff ff5a 	bl	8008d1a <get_ldnumber>
 8008e66:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	da01      	bge.n	8008e72 <find_volume+0x26>
 8008e6e:	230b      	movs	r3, #11
 8008e70:	e22d      	b.n	80092ce <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008e72:	4aa1      	ldr	r2, [pc, #644]	@ (80090f8 <find_volume+0x2ac>)
 8008e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d101      	bne.n	8008e86 <find_volume+0x3a>
 8008e82:	230c      	movs	r3, #12
 8008e84:	e223      	b.n	80092ce <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e8a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008e8c:	79fb      	ldrb	r3, [r7, #7]
 8008e8e:	f023 0301 	bic.w	r3, r3, #1
 8008e92:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d01a      	beq.n	8008ed2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e9e:	785b      	ldrb	r3, [r3, #1]
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fe fd2d 	bl	8007900 <disk_status>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008eac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008eb0:	f003 0301 	and.w	r3, r3, #1
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10c      	bne.n	8008ed2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008eb8:	79fb      	ldrb	r3, [r7, #7]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d007      	beq.n	8008ece <find_volume+0x82>
 8008ebe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008ec2:	f003 0304 	and.w	r3, r3, #4
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d001      	beq.n	8008ece <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008eca:	230a      	movs	r3, #10
 8008ecc:	e1ff      	b.n	80092ce <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008ece:	2300      	movs	r3, #0
 8008ed0:	e1fd      	b.n	80092ce <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008eda:	b2da      	uxtb	r2, r3
 8008edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ede:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee2:	785b      	ldrb	r3, [r3, #1]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7fe fd25 	bl	8007934 <disk_initialize>
 8008eea:	4603      	mov	r3, r0
 8008eec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008ef0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008ef4:	f003 0301 	and.w	r3, r3, #1
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d001      	beq.n	8008f00 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008efc:	2303      	movs	r3, #3
 8008efe:	e1e6      	b.n	80092ce <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008f00:	79fb      	ldrb	r3, [r7, #7]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d007      	beq.n	8008f16 <find_volume+0xca>
 8008f06:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008f0a:	f003 0304 	and.w	r3, r3, #4
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008f12:	230a      	movs	r3, #10
 8008f14:	e1db      	b.n	80092ce <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008f16:	2300      	movs	r3, #0
 8008f18:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008f1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008f1c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008f1e:	f7ff ff3f 	bl	8008da0 <check_fs>
 8008f22:	4603      	mov	r3, r0
 8008f24:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008f28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d149      	bne.n	8008fc4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008f30:	2300      	movs	r3, #0
 8008f32:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f34:	e01e      	b.n	8008f74 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f38:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008f3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f3e:	011b      	lsls	r3, r3, #4
 8008f40:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008f44:	4413      	add	r3, r2
 8008f46:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d006      	beq.n	8008f60 <find_volume+0x114>
 8008f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f54:	3308      	adds	r3, #8
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7fe fd87 	bl	8007a6a <ld_dword>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	e000      	b.n	8008f62 <find_volume+0x116>
 8008f60:	2200      	movs	r2, #0
 8008f62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	3358      	adds	r3, #88	@ 0x58
 8008f68:	443b      	add	r3, r7
 8008f6a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008f6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f70:	3301      	adds	r3, #1
 8008f72:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f76:	2b03      	cmp	r3, #3
 8008f78:	d9dd      	bls.n	8008f36 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008f7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d002      	beq.n	8008f8a <find_volume+0x13e>
 8008f84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f86:	3b01      	subs	r3, #1
 8008f88:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008f8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	3358      	adds	r3, #88	@ 0x58
 8008f90:	443b      	add	r3, r7
 8008f92:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008f96:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d005      	beq.n	8008faa <find_volume+0x15e>
 8008f9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008fa0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008fa2:	f7ff fefd 	bl	8008da0 <check_fs>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	e000      	b.n	8008fac <find_volume+0x160>
 8008faa:	2303      	movs	r3, #3
 8008fac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008fb0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d905      	bls.n	8008fc4 <find_volume+0x178>
 8008fb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fba:	3301      	adds	r3, #1
 8008fbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fc0:	2b03      	cmp	r3, #3
 8008fc2:	d9e2      	bls.n	8008f8a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008fc4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008fc8:	2b04      	cmp	r3, #4
 8008fca:	d101      	bne.n	8008fd0 <find_volume+0x184>
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e17e      	b.n	80092ce <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008fd0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d901      	bls.n	8008fdc <find_volume+0x190>
 8008fd8:	230d      	movs	r3, #13
 8008fda:	e178      	b.n	80092ce <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fde:	3330      	adds	r3, #48	@ 0x30
 8008fe0:	330b      	adds	r3, #11
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fe fd2a 	bl	8007a3c <ld_word>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fee:	d001      	beq.n	8008ff4 <find_volume+0x1a8>
 8008ff0:	230d      	movs	r3, #13
 8008ff2:	e16c      	b.n	80092ce <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff6:	3330      	adds	r3, #48	@ 0x30
 8008ff8:	3316      	adds	r3, #22
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fe fd1e 	bl	8007a3c <ld_word>
 8009000:	4603      	mov	r3, r0
 8009002:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009006:	2b00      	cmp	r3, #0
 8009008:	d106      	bne.n	8009018 <find_volume+0x1cc>
 800900a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800900c:	3330      	adds	r3, #48	@ 0x30
 800900e:	3324      	adds	r3, #36	@ 0x24
 8009010:	4618      	mov	r0, r3
 8009012:	f7fe fd2a 	bl	8007a6a <ld_dword>
 8009016:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800901a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800901c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800901e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009020:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8009024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009026:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800902a:	789b      	ldrb	r3, [r3, #2]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d005      	beq.n	800903c <find_volume+0x1f0>
 8009030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009032:	789b      	ldrb	r3, [r3, #2]
 8009034:	2b02      	cmp	r3, #2
 8009036:	d001      	beq.n	800903c <find_volume+0x1f0>
 8009038:	230d      	movs	r3, #13
 800903a:	e148      	b.n	80092ce <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800903c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800903e:	789b      	ldrb	r3, [r3, #2]
 8009040:	461a      	mov	r2, r3
 8009042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009044:	fb02 f303 	mul.w	r3, r2, r3
 8009048:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800904a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800904c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009050:	461a      	mov	r2, r3
 8009052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009054:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009058:	895b      	ldrh	r3, [r3, #10]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d008      	beq.n	8009070 <find_volume+0x224>
 800905e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009060:	895b      	ldrh	r3, [r3, #10]
 8009062:	461a      	mov	r2, r3
 8009064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009066:	895b      	ldrh	r3, [r3, #10]
 8009068:	3b01      	subs	r3, #1
 800906a:	4013      	ands	r3, r2
 800906c:	2b00      	cmp	r3, #0
 800906e:	d001      	beq.n	8009074 <find_volume+0x228>
 8009070:	230d      	movs	r3, #13
 8009072:	e12c      	b.n	80092ce <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009076:	3330      	adds	r3, #48	@ 0x30
 8009078:	3311      	adds	r3, #17
 800907a:	4618      	mov	r0, r3
 800907c:	f7fe fcde 	bl	8007a3c <ld_word>
 8009080:	4603      	mov	r3, r0
 8009082:	461a      	mov	r2, r3
 8009084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009086:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800908a:	891b      	ldrh	r3, [r3, #8]
 800908c:	f003 030f 	and.w	r3, r3, #15
 8009090:	b29b      	uxth	r3, r3
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <find_volume+0x24e>
 8009096:	230d      	movs	r3, #13
 8009098:	e119      	b.n	80092ce <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800909a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800909c:	3330      	adds	r3, #48	@ 0x30
 800909e:	3313      	adds	r3, #19
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7fe fccb 	bl	8007a3c <ld_word>
 80090a6:	4603      	mov	r3, r0
 80090a8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80090aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d106      	bne.n	80090be <find_volume+0x272>
 80090b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b2:	3330      	adds	r3, #48	@ 0x30
 80090b4:	3320      	adds	r3, #32
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7fe fcd7 	bl	8007a6a <ld_dword>
 80090bc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80090be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c0:	3330      	adds	r3, #48	@ 0x30
 80090c2:	330e      	adds	r3, #14
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7fe fcb9 	bl	8007a3c <ld_word>
 80090ca:	4603      	mov	r3, r0
 80090cc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80090ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d101      	bne.n	80090d8 <find_volume+0x28c>
 80090d4:	230d      	movs	r3, #13
 80090d6:	e0fa      	b.n	80092ce <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80090d8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80090da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090dc:	4413      	add	r3, r2
 80090de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80090e0:	8912      	ldrh	r2, [r2, #8]
 80090e2:	0912      	lsrs	r2, r2, #4
 80090e4:	b292      	uxth	r2, r2
 80090e6:	4413      	add	r3, r2
 80090e8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80090ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d204      	bcs.n	80090fc <find_volume+0x2b0>
 80090f2:	230d      	movs	r3, #13
 80090f4:	e0eb      	b.n	80092ce <find_volume+0x482>
 80090f6:	bf00      	nop
 80090f8:	200009dc 	.word	0x200009dc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80090fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009104:	8952      	ldrh	r2, [r2, #10]
 8009106:	fbb3 f3f2 	udiv	r3, r3, r2
 800910a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800910c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800910e:	2b00      	cmp	r3, #0
 8009110:	d101      	bne.n	8009116 <find_volume+0x2ca>
 8009112:	230d      	movs	r3, #13
 8009114:	e0db      	b.n	80092ce <find_volume+0x482>
		fmt = FS_FAT32;
 8009116:	2303      	movs	r3, #3
 8009118:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800911c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800911e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009122:	4293      	cmp	r3, r2
 8009124:	d802      	bhi.n	800912c <find_volume+0x2e0>
 8009126:	2302      	movs	r3, #2
 8009128:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800912c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009132:	4293      	cmp	r3, r2
 8009134:	d802      	bhi.n	800913c <find_volume+0x2f0>
 8009136:	2301      	movs	r3, #1
 8009138:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800913c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913e:	1c9a      	adds	r2, r3, #2
 8009140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009142:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009146:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009148:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800914a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800914c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800914e:	441a      	add	r2, r3
 8009150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009152:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009154:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009158:	441a      	add	r2, r3
 800915a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800915c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800915e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009162:	2b03      	cmp	r3, #3
 8009164:	d11e      	bne.n	80091a4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009168:	3330      	adds	r3, #48	@ 0x30
 800916a:	332a      	adds	r3, #42	@ 0x2a
 800916c:	4618      	mov	r0, r3
 800916e:	f7fe fc65 	bl	8007a3c <ld_word>
 8009172:	4603      	mov	r3, r0
 8009174:	2b00      	cmp	r3, #0
 8009176:	d001      	beq.n	800917c <find_volume+0x330>
 8009178:	230d      	movs	r3, #13
 800917a:	e0a8      	b.n	80092ce <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800917c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917e:	891b      	ldrh	r3, [r3, #8]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <find_volume+0x33c>
 8009184:	230d      	movs	r3, #13
 8009186:	e0a2      	b.n	80092ce <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800918a:	3330      	adds	r3, #48	@ 0x30
 800918c:	332c      	adds	r3, #44	@ 0x2c
 800918e:	4618      	mov	r0, r3
 8009190:	f7fe fc6b 	bl	8007a6a <ld_dword>
 8009194:	4602      	mov	r2, r0
 8009196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009198:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800919a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80091a2:	e01f      	b.n	80091e4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80091a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a6:	891b      	ldrh	r3, [r3, #8]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d101      	bne.n	80091b0 <find_volume+0x364>
 80091ac:	230d      	movs	r3, #13
 80091ae:	e08e      	b.n	80092ce <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80091b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b2:	6a1a      	ldr	r2, [r3, #32]
 80091b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091b6:	441a      	add	r2, r3
 80091b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ba:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80091bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d103      	bne.n	80091cc <find_volume+0x380>
 80091c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c6:	695b      	ldr	r3, [r3, #20]
 80091c8:	005b      	lsls	r3, r3, #1
 80091ca:	e00a      	b.n	80091e2 <find_volume+0x396>
 80091cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ce:	695a      	ldr	r2, [r3, #20]
 80091d0:	4613      	mov	r3, r2
 80091d2:	005b      	lsls	r3, r3, #1
 80091d4:	4413      	add	r3, r2
 80091d6:	085a      	lsrs	r2, r3, #1
 80091d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091da:	695b      	ldr	r3, [r3, #20]
 80091dc:	f003 0301 	and.w	r3, r3, #1
 80091e0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80091e2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80091e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e6:	699a      	ldr	r2, [r3, #24]
 80091e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091ea:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80091ee:	0a5b      	lsrs	r3, r3, #9
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d201      	bcs.n	80091f8 <find_volume+0x3ac>
 80091f4:	230d      	movs	r3, #13
 80091f6:	e06a      	b.n	80092ce <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80091f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80091fe:	611a      	str	r2, [r3, #16]
 8009200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009202:	691a      	ldr	r2, [r3, #16]
 8009204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009206:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800920a:	2280      	movs	r2, #128	@ 0x80
 800920c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800920e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009212:	2b03      	cmp	r3, #3
 8009214:	d149      	bne.n	80092aa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009218:	3330      	adds	r3, #48	@ 0x30
 800921a:	3330      	adds	r3, #48	@ 0x30
 800921c:	4618      	mov	r0, r3
 800921e:	f7fe fc0d 	bl	8007a3c <ld_word>
 8009222:	4603      	mov	r3, r0
 8009224:	2b01      	cmp	r3, #1
 8009226:	d140      	bne.n	80092aa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800922a:	3301      	adds	r3, #1
 800922c:	4619      	mov	r1, r3
 800922e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009230:	f7fe fea6 	bl	8007f80 <move_window>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d137      	bne.n	80092aa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800923a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800923c:	2200      	movs	r2, #0
 800923e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009242:	3330      	adds	r3, #48	@ 0x30
 8009244:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009248:	4618      	mov	r0, r3
 800924a:	f7fe fbf7 	bl	8007a3c <ld_word>
 800924e:	4603      	mov	r3, r0
 8009250:	461a      	mov	r2, r3
 8009252:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009256:	429a      	cmp	r2, r3
 8009258:	d127      	bne.n	80092aa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800925a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800925c:	3330      	adds	r3, #48	@ 0x30
 800925e:	4618      	mov	r0, r3
 8009260:	f7fe fc03 	bl	8007a6a <ld_dword>
 8009264:	4603      	mov	r3, r0
 8009266:	4a1c      	ldr	r2, [pc, #112]	@ (80092d8 <find_volume+0x48c>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d11e      	bne.n	80092aa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800926c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800926e:	3330      	adds	r3, #48	@ 0x30
 8009270:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009274:	4618      	mov	r0, r3
 8009276:	f7fe fbf8 	bl	8007a6a <ld_dword>
 800927a:	4603      	mov	r3, r0
 800927c:	4a17      	ldr	r2, [pc, #92]	@ (80092dc <find_volume+0x490>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d113      	bne.n	80092aa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009284:	3330      	adds	r3, #48	@ 0x30
 8009286:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800928a:	4618      	mov	r0, r3
 800928c:	f7fe fbed 	bl	8007a6a <ld_dword>
 8009290:	4602      	mov	r2, r0
 8009292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009294:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009298:	3330      	adds	r3, #48	@ 0x30
 800929a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fe fbe3 	bl	8007a6a <ld_dword>
 80092a4:	4602      	mov	r2, r0
 80092a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80092aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ac:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80092b0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80092b2:	4b0b      	ldr	r3, [pc, #44]	@ (80092e0 <find_volume+0x494>)
 80092b4:	881b      	ldrh	r3, [r3, #0]
 80092b6:	3301      	adds	r3, #1
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	4b09      	ldr	r3, [pc, #36]	@ (80092e0 <find_volume+0x494>)
 80092bc:	801a      	strh	r2, [r3, #0]
 80092be:	4b08      	ldr	r3, [pc, #32]	@ (80092e0 <find_volume+0x494>)
 80092c0:	881a      	ldrh	r2, [r3, #0]
 80092c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80092c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80092c8:	f7fe fdf2 	bl	8007eb0 <clear_lock>
#endif
	return FR_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3758      	adds	r7, #88	@ 0x58
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	41615252 	.word	0x41615252
 80092dc:	61417272 	.word	0x61417272
 80092e0:	200009e0 	.word	0x200009e0

080092e4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80092ee:	2309      	movs	r3, #9
 80092f0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d01c      	beq.n	8009332 <validate+0x4e>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d018      	beq.n	8009332 <validate+0x4e>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d013      	beq.n	8009332 <validate+0x4e>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	889a      	ldrh	r2, [r3, #4]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	88db      	ldrh	r3, [r3, #6]
 8009314:	429a      	cmp	r2, r3
 8009316:	d10c      	bne.n	8009332 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	785b      	ldrb	r3, [r3, #1]
 800931e:	4618      	mov	r0, r3
 8009320:	f7fe faee 	bl	8007900 <disk_status>
 8009324:	4603      	mov	r3, r0
 8009326:	f003 0301 	and.w	r3, r3, #1
 800932a:	2b00      	cmp	r3, #0
 800932c:	d101      	bne.n	8009332 <validate+0x4e>
			res = FR_OK;
 800932e:	2300      	movs	r3, #0
 8009330:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009332:	7bfb      	ldrb	r3, [r7, #15]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d102      	bne.n	800933e <validate+0x5a>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	e000      	b.n	8009340 <validate+0x5c>
 800933e:	2300      	movs	r3, #0
 8009340:	683a      	ldr	r2, [r7, #0]
 8009342:	6013      	str	r3, [r2, #0]
	return res;
 8009344:	7bfb      	ldrb	r3, [r7, #15]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
	...

08009350 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b088      	sub	sp, #32
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	4613      	mov	r3, r2
 800935c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009362:	f107 0310 	add.w	r3, r7, #16
 8009366:	4618      	mov	r0, r3
 8009368:	f7ff fcd7 	bl	8008d1a <get_ldnumber>
 800936c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	2b00      	cmp	r3, #0
 8009372:	da01      	bge.n	8009378 <f_mount+0x28>
 8009374:	230b      	movs	r3, #11
 8009376:	e02b      	b.n	80093d0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009378:	4a17      	ldr	r2, [pc, #92]	@ (80093d8 <f_mount+0x88>)
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009380:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d005      	beq.n	8009394 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009388:	69b8      	ldr	r0, [r7, #24]
 800938a:	f7fe fd91 	bl	8007eb0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	2200      	movs	r2, #0
 8009392:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d002      	beq.n	80093a0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	490d      	ldr	r1, [pc, #52]	@ (80093d8 <f_mount+0x88>)
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d002      	beq.n	80093b6 <f_mount+0x66>
 80093b0:	79fb      	ldrb	r3, [r7, #7]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d001      	beq.n	80093ba <f_mount+0x6a>
 80093b6:	2300      	movs	r3, #0
 80093b8:	e00a      	b.n	80093d0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80093ba:	f107 010c 	add.w	r1, r7, #12
 80093be:	f107 0308 	add.w	r3, r7, #8
 80093c2:	2200      	movs	r2, #0
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7ff fd41 	bl	8008e4c <find_volume>
 80093ca:	4603      	mov	r3, r0
 80093cc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80093ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3720      	adds	r7, #32
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	200009dc 	.word	0x200009dc

080093dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b098      	sub	sp, #96	@ 0x60
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	4613      	mov	r3, r2
 80093e8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d101      	bne.n	80093f4 <f_open+0x18>
 80093f0:	2309      	movs	r3, #9
 80093f2:	e1a9      	b.n	8009748 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80093f4:	79fb      	ldrb	r3, [r7, #7]
 80093f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80093fa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80093fc:	79fa      	ldrb	r2, [r7, #7]
 80093fe:	f107 0110 	add.w	r1, r7, #16
 8009402:	f107 0308 	add.w	r3, r7, #8
 8009406:	4618      	mov	r0, r3
 8009408:	f7ff fd20 	bl	8008e4c <find_volume>
 800940c:	4603      	mov	r3, r0
 800940e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8009412:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009416:	2b00      	cmp	r3, #0
 8009418:	f040 818d 	bne.w	8009736 <f_open+0x35a>
		dj.obj.fs = fs;
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009420:	68ba      	ldr	r2, [r7, #8]
 8009422:	f107 0314 	add.w	r3, r7, #20
 8009426:	4611      	mov	r1, r2
 8009428:	4618      	mov	r0, r3
 800942a:	f7ff fc05 	bl	8008c38 <follow_path>
 800942e:	4603      	mov	r3, r0
 8009430:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009434:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009438:	2b00      	cmp	r3, #0
 800943a:	d118      	bne.n	800946e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800943c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009440:	b25b      	sxtb	r3, r3
 8009442:	2b00      	cmp	r3, #0
 8009444:	da03      	bge.n	800944e <f_open+0x72>
				res = FR_INVALID_NAME;
 8009446:	2306      	movs	r3, #6
 8009448:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800944c:	e00f      	b.n	800946e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800944e:	79fb      	ldrb	r3, [r7, #7]
 8009450:	2b01      	cmp	r3, #1
 8009452:	bf8c      	ite	hi
 8009454:	2301      	movhi	r3, #1
 8009456:	2300      	movls	r3, #0
 8009458:	b2db      	uxtb	r3, r3
 800945a:	461a      	mov	r2, r3
 800945c:	f107 0314 	add.w	r3, r7, #20
 8009460:	4611      	mov	r1, r2
 8009462:	4618      	mov	r0, r3
 8009464:	f7fe fbe2 	bl	8007c2c <chk_lock>
 8009468:	4603      	mov	r3, r0
 800946a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800946e:	79fb      	ldrb	r3, [r7, #7]
 8009470:	f003 031c 	and.w	r3, r3, #28
 8009474:	2b00      	cmp	r3, #0
 8009476:	d07f      	beq.n	8009578 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009478:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800947c:	2b00      	cmp	r3, #0
 800947e:	d017      	beq.n	80094b0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009480:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009484:	2b04      	cmp	r3, #4
 8009486:	d10e      	bne.n	80094a6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009488:	f7fe fc2a 	bl	8007ce0 <enq_lock>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d006      	beq.n	80094a0 <f_open+0xc4>
 8009492:	f107 0314 	add.w	r3, r7, #20
 8009496:	4618      	mov	r0, r3
 8009498:	f7ff fb08 	bl	8008aac <dir_register>
 800949c:	4603      	mov	r3, r0
 800949e:	e000      	b.n	80094a2 <f_open+0xc6>
 80094a0:	2312      	movs	r3, #18
 80094a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80094a6:	79fb      	ldrb	r3, [r7, #7]
 80094a8:	f043 0308 	orr.w	r3, r3, #8
 80094ac:	71fb      	strb	r3, [r7, #7]
 80094ae:	e010      	b.n	80094d2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80094b0:	7ebb      	ldrb	r3, [r7, #26]
 80094b2:	f003 0311 	and.w	r3, r3, #17
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d003      	beq.n	80094c2 <f_open+0xe6>
					res = FR_DENIED;
 80094ba:	2307      	movs	r3, #7
 80094bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80094c0:	e007      	b.n	80094d2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80094c2:	79fb      	ldrb	r3, [r7, #7]
 80094c4:	f003 0304 	and.w	r3, r3, #4
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d002      	beq.n	80094d2 <f_open+0xf6>
 80094cc:	2308      	movs	r3, #8
 80094ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80094d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d168      	bne.n	80095ac <f_open+0x1d0>
 80094da:	79fb      	ldrb	r3, [r7, #7]
 80094dc:	f003 0308 	and.w	r3, r3, #8
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d063      	beq.n	80095ac <f_open+0x1d0>
				dw = GET_FATTIME();
 80094e4:	f7fd fcd0 	bl	8006e88 <get_fattime>
 80094e8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80094ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094ec:	330e      	adds	r3, #14
 80094ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7fe faf6 	bl	8007ae2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80094f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094f8:	3316      	adds	r3, #22
 80094fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7fe faf0 	bl	8007ae2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009504:	330b      	adds	r3, #11
 8009506:	2220      	movs	r2, #32
 8009508:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800950e:	4611      	mov	r1, r2
 8009510:	4618      	mov	r0, r3
 8009512:	f7ff fa37 	bl	8008984 <ld_clust>
 8009516:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800951c:	2200      	movs	r2, #0
 800951e:	4618      	mov	r0, r3
 8009520:	f7ff fa4f 	bl	80089c2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009526:	331c      	adds	r3, #28
 8009528:	2100      	movs	r1, #0
 800952a:	4618      	mov	r0, r3
 800952c:	f7fe fad9 	bl	8007ae2 <st_dword>
					fs->wflag = 1;
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	2201      	movs	r2, #1
 8009534:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009536:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009538:	2b00      	cmp	r3, #0
 800953a:	d037      	beq.n	80095ac <f_open+0x1d0>
						dw = fs->winsect;
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009540:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009542:	f107 0314 	add.w	r3, r7, #20
 8009546:	2200      	movs	r2, #0
 8009548:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800954a:	4618      	mov	r0, r3
 800954c:	f7fe ff63 	bl	8008416 <remove_chain>
 8009550:	4603      	mov	r3, r0
 8009552:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8009556:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800955a:	2b00      	cmp	r3, #0
 800955c:	d126      	bne.n	80095ac <f_open+0x1d0>
							res = move_window(fs, dw);
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009562:	4618      	mov	r0, r3
 8009564:	f7fe fd0c 	bl	8007f80 <move_window>
 8009568:	4603      	mov	r3, r0
 800956a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009572:	3a01      	subs	r2, #1
 8009574:	60da      	str	r2, [r3, #12]
 8009576:	e019      	b.n	80095ac <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009578:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800957c:	2b00      	cmp	r3, #0
 800957e:	d115      	bne.n	80095ac <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009580:	7ebb      	ldrb	r3, [r7, #26]
 8009582:	f003 0310 	and.w	r3, r3, #16
 8009586:	2b00      	cmp	r3, #0
 8009588:	d003      	beq.n	8009592 <f_open+0x1b6>
					res = FR_NO_FILE;
 800958a:	2304      	movs	r3, #4
 800958c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009590:	e00c      	b.n	80095ac <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009592:	79fb      	ldrb	r3, [r7, #7]
 8009594:	f003 0302 	and.w	r3, r3, #2
 8009598:	2b00      	cmp	r3, #0
 800959a:	d007      	beq.n	80095ac <f_open+0x1d0>
 800959c:	7ebb      	ldrb	r3, [r7, #26]
 800959e:	f003 0301 	and.w	r3, r3, #1
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d002      	beq.n	80095ac <f_open+0x1d0>
						res = FR_DENIED;
 80095a6:	2307      	movs	r3, #7
 80095a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80095ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d126      	bne.n	8009602 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80095b4:	79fb      	ldrb	r3, [r7, #7]
 80095b6:	f003 0308 	and.w	r3, r3, #8
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d003      	beq.n	80095c6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80095be:	79fb      	ldrb	r3, [r7, #7]
 80095c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80095ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80095d4:	79fb      	ldrb	r3, [r7, #7]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	bf8c      	ite	hi
 80095da:	2301      	movhi	r3, #1
 80095dc:	2300      	movls	r3, #0
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	461a      	mov	r2, r3
 80095e2:	f107 0314 	add.w	r3, r7, #20
 80095e6:	4611      	mov	r1, r2
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7fe fb99 	bl	8007d20 <inc_lock>
 80095ee:	4602      	mov	r2, r0
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d102      	bne.n	8009602 <f_open+0x226>
 80095fc:	2302      	movs	r3, #2
 80095fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009602:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009606:	2b00      	cmp	r3, #0
 8009608:	f040 8095 	bne.w	8009736 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009610:	4611      	mov	r1, r2
 8009612:	4618      	mov	r0, r3
 8009614:	f7ff f9b6 	bl	8008984 <ld_clust>
 8009618:	4602      	mov	r2, r0
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800961e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009620:	331c      	adds	r3, #28
 8009622:	4618      	mov	r0, r3
 8009624:	f7fe fa21 	bl	8007a6a <ld_dword>
 8009628:	4602      	mov	r2, r0
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009634:	693a      	ldr	r2, [r7, #16]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	88da      	ldrh	r2, [r3, #6]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	79fa      	ldrb	r2, [r7, #7]
 8009646:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2200      	movs	r2, #0
 800964c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	3330      	adds	r3, #48	@ 0x30
 800965e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009662:	2100      	movs	r1, #0
 8009664:	4618      	mov	r0, r3
 8009666:	f7fe fa87 	bl	8007b78 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800966a:	79fb      	ldrb	r3, [r7, #7]
 800966c:	f003 0320 	and.w	r3, r3, #32
 8009670:	2b00      	cmp	r3, #0
 8009672:	d060      	beq.n	8009736 <f_open+0x35a>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d05c      	beq.n	8009736 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	68da      	ldr	r2, [r3, #12]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	895b      	ldrh	r3, [r3, #10]
 8009688:	025b      	lsls	r3, r3, #9
 800968a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	657b      	str	r3, [r7, #84]	@ 0x54
 8009698:	e016      	b.n	80096c8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800969e:	4618      	mov	r0, r3
 80096a0:	f7fe fd28 	bl	80080f4 <get_fat>
 80096a4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80096a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d802      	bhi.n	80096b2 <f_open+0x2d6>
 80096ac:	2302      	movs	r3, #2
 80096ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80096b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80096b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096b8:	d102      	bne.n	80096c0 <f_open+0x2e4>
 80096ba:	2301      	movs	r3, #1
 80096bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80096c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80096c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80096c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d103      	bne.n	80096d8 <f_open+0x2fc>
 80096d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80096d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d8e0      	bhi.n	800969a <f_open+0x2be>
				}
				fp->clust = clst;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80096dc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80096de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d127      	bne.n	8009736 <f_open+0x35a>
 80096e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d022      	beq.n	8009736 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fe fcdf 	bl	80080b8 <clust2sect>
 80096fa:	6478      	str	r0, [r7, #68]	@ 0x44
 80096fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d103      	bne.n	800970a <f_open+0x32e>
						res = FR_INT_ERR;
 8009702:	2302      	movs	r3, #2
 8009704:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009708:	e015      	b.n	8009736 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800970a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800970c:	0a5a      	lsrs	r2, r3, #9
 800970e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009710:	441a      	add	r2, r3
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	7858      	ldrb	r0, [r3, #1]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6a1a      	ldr	r2, [r3, #32]
 8009724:	2301      	movs	r3, #1
 8009726:	f7fe f92b 	bl	8007980 <disk_read>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d002      	beq.n	8009736 <f_open+0x35a>
 8009730:	2301      	movs	r3, #1
 8009732:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009736:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800973a:	2b00      	cmp	r3, #0
 800973c:	d002      	beq.n	8009744 <f_open+0x368>
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2200      	movs	r2, #0
 8009742:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009744:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8009748:	4618      	mov	r0, r3
 800974a:	3760      	adds	r7, #96	@ 0x60
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b08c      	sub	sp, #48	@ 0x30
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	607a      	str	r2, [r7, #4]
 800975c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2200      	movs	r2, #0
 8009766:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f107 0210 	add.w	r2, r7, #16
 800976e:	4611      	mov	r1, r2
 8009770:	4618      	mov	r0, r3
 8009772:	f7ff fdb7 	bl	80092e4 <validate>
 8009776:	4603      	mov	r3, r0
 8009778:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800977c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009780:	2b00      	cmp	r3, #0
 8009782:	d107      	bne.n	8009794 <f_write+0x44>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	7d5b      	ldrb	r3, [r3, #21]
 8009788:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800978c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009790:	2b00      	cmp	r3, #0
 8009792:	d002      	beq.n	800979a <f_write+0x4a>
 8009794:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009798:	e14b      	b.n	8009a32 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	7d1b      	ldrb	r3, [r3, #20]
 800979e:	f003 0302 	and.w	r3, r3, #2
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d101      	bne.n	80097aa <f_write+0x5a>
 80097a6:	2307      	movs	r3, #7
 80097a8:	e143      	b.n	8009a32 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	699a      	ldr	r2, [r3, #24]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	441a      	add	r2, r3
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	f080 812d 	bcs.w	8009a16 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	43db      	mvns	r3, r3
 80097c2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80097c4:	e127      	b.n	8009a16 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	f040 80e3 	bne.w	800999a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	699b      	ldr	r3, [r3, #24]
 80097d8:	0a5b      	lsrs	r3, r3, #9
 80097da:	693a      	ldr	r2, [r7, #16]
 80097dc:	8952      	ldrh	r2, [r2, #10]
 80097de:	3a01      	subs	r2, #1
 80097e0:	4013      	ands	r3, r2
 80097e2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d143      	bne.n	8009872 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	699b      	ldr	r3, [r3, #24]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10c      	bne.n	800980c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80097f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d11a      	bne.n	8009834 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2100      	movs	r1, #0
 8009802:	4618      	mov	r0, r3
 8009804:	f7fe fe6c 	bl	80084e0 <create_chain>
 8009808:	62b8      	str	r0, [r7, #40]	@ 0x28
 800980a:	e013      	b.n	8009834 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009810:	2b00      	cmp	r3, #0
 8009812:	d007      	beq.n	8009824 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	4619      	mov	r1, r3
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f7fe fef8 	bl	8008610 <clmt_clust>
 8009820:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009822:	e007      	b.n	8009834 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	69db      	ldr	r3, [r3, #28]
 800982a:	4619      	mov	r1, r3
 800982c:	4610      	mov	r0, r2
 800982e:	f7fe fe57 	bl	80084e0 <create_chain>
 8009832:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009836:	2b00      	cmp	r3, #0
 8009838:	f000 80f2 	beq.w	8009a20 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800983c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800983e:	2b01      	cmp	r3, #1
 8009840:	d104      	bne.n	800984c <f_write+0xfc>
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2202      	movs	r2, #2
 8009846:	755a      	strb	r2, [r3, #21]
 8009848:	2302      	movs	r3, #2
 800984a:	e0f2      	b.n	8009a32 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800984c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800984e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009852:	d104      	bne.n	800985e <f_write+0x10e>
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2201      	movs	r2, #1
 8009858:	755a      	strb	r2, [r3, #21]
 800985a:	2301      	movs	r3, #1
 800985c:	e0e9      	b.n	8009a32 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009862:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d102      	bne.n	8009872 <f_write+0x122>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009870:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	7d1b      	ldrb	r3, [r3, #20]
 8009876:	b25b      	sxtb	r3, r3
 8009878:	2b00      	cmp	r3, #0
 800987a:	da18      	bge.n	80098ae <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	7858      	ldrb	r0, [r3, #1]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6a1a      	ldr	r2, [r3, #32]
 800988a:	2301      	movs	r3, #1
 800988c:	f7fe f898 	bl	80079c0 <disk_write>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d004      	beq.n	80098a0 <f_write+0x150>
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2201      	movs	r2, #1
 800989a:	755a      	strb	r2, [r3, #21]
 800989c:	2301      	movs	r3, #1
 800989e:	e0c8      	b.n	8009a32 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	7d1b      	ldrb	r3, [r3, #20]
 80098a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098a8:	b2da      	uxtb	r2, r3
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80098ae:	693a      	ldr	r2, [r7, #16]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	69db      	ldr	r3, [r3, #28]
 80098b4:	4619      	mov	r1, r3
 80098b6:	4610      	mov	r0, r2
 80098b8:	f7fe fbfe 	bl	80080b8 <clust2sect>
 80098bc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d104      	bne.n	80098ce <f_write+0x17e>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2202      	movs	r2, #2
 80098c8:	755a      	strb	r2, [r3, #21]
 80098ca:	2302      	movs	r3, #2
 80098cc:	e0b1      	b.n	8009a32 <f_write+0x2e2>
			sect += csect;
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	4413      	add	r3, r2
 80098d4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	0a5b      	lsrs	r3, r3, #9
 80098da:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d03c      	beq.n	800995c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80098e2:	69ba      	ldr	r2, [r7, #24]
 80098e4:	6a3b      	ldr	r3, [r7, #32]
 80098e6:	4413      	add	r3, r2
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	8952      	ldrh	r2, [r2, #10]
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d905      	bls.n	80098fc <f_write+0x1ac>
					cc = fs->csize - csect;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	895b      	ldrh	r3, [r3, #10]
 80098f4:	461a      	mov	r2, r3
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	7858      	ldrb	r0, [r3, #1]
 8009900:	6a3b      	ldr	r3, [r7, #32]
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	69f9      	ldr	r1, [r7, #28]
 8009906:	f7fe f85b 	bl	80079c0 <disk_write>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d004      	beq.n	800991a <f_write+0x1ca>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2201      	movs	r2, #1
 8009914:	755a      	strb	r2, [r3, #21]
 8009916:	2301      	movs	r3, #1
 8009918:	e08b      	b.n	8009a32 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6a1a      	ldr	r2, [r3, #32]
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	6a3a      	ldr	r2, [r7, #32]
 8009924:	429a      	cmp	r2, r3
 8009926:	d915      	bls.n	8009954 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6a1a      	ldr	r2, [r3, #32]
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	025b      	lsls	r3, r3, #9
 8009938:	69fa      	ldr	r2, [r7, #28]
 800993a:	4413      	add	r3, r2
 800993c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009940:	4619      	mov	r1, r3
 8009942:	f7fe f8f9 	bl	8007b38 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	7d1b      	ldrb	r3, [r3, #20]
 800994a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800994e:	b2da      	uxtb	r2, r3
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009954:	6a3b      	ldr	r3, [r7, #32]
 8009956:	025b      	lsls	r3, r3, #9
 8009958:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800995a:	e03f      	b.n	80099dc <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	6a1b      	ldr	r3, [r3, #32]
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	429a      	cmp	r2, r3
 8009964:	d016      	beq.n	8009994 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	699a      	ldr	r2, [r3, #24]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800996e:	429a      	cmp	r2, r3
 8009970:	d210      	bcs.n	8009994 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	7858      	ldrb	r0, [r3, #1]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800997c:	2301      	movs	r3, #1
 800997e:	697a      	ldr	r2, [r7, #20]
 8009980:	f7fd fffe 	bl	8007980 <disk_read>
 8009984:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009986:	2b00      	cmp	r3, #0
 8009988:	d004      	beq.n	8009994 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2201      	movs	r2, #1
 800998e:	755a      	strb	r2, [r3, #21]
 8009990:	2301      	movs	r3, #1
 8009992:	e04e      	b.n	8009a32 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099a2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80099a6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80099a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d901      	bls.n	80099b4 <f_write+0x264>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	699b      	ldr	r3, [r3, #24]
 80099be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099c2:	4413      	add	r3, r2
 80099c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099c6:	69f9      	ldr	r1, [r7, #28]
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7fe f8b5 	bl	8007b38 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	7d1b      	ldrb	r3, [r3, #20]
 80099d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80099d6:	b2da      	uxtb	r2, r3
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80099dc:	69fa      	ldr	r2, [r7, #28]
 80099de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e0:	4413      	add	r3, r2
 80099e2:	61fb      	str	r3, [r7, #28]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	699a      	ldr	r2, [r3, #24]
 80099e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ea:	441a      	add	r2, r3
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	619a      	str	r2, [r3, #24]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	68da      	ldr	r2, [r3, #12]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	429a      	cmp	r2, r3
 80099fa:	bf38      	it	cc
 80099fc:	461a      	movcc	r2, r3
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	60da      	str	r2, [r3, #12]
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a08:	441a      	add	r2, r3
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a12:	1ad3      	subs	r3, r2, r3
 8009a14:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f47f aed4 	bne.w	80097c6 <f_write+0x76>
 8009a1e:	e000      	b.n	8009a22 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009a20:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	7d1b      	ldrb	r3, [r3, #20]
 8009a26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a2a:	b2da      	uxtb	r2, r3
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3730      	adds	r7, #48	@ 0x30
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b086      	sub	sp, #24
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f107 0208 	add.w	r2, r7, #8
 8009a48:	4611      	mov	r1, r2
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7ff fc4a 	bl	80092e4 <validate>
 8009a50:	4603      	mov	r3, r0
 8009a52:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009a54:	7dfb      	ldrb	r3, [r7, #23]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d168      	bne.n	8009b2c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	7d1b      	ldrb	r3, [r3, #20]
 8009a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d062      	beq.n	8009b2c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	7d1b      	ldrb	r3, [r3, #20]
 8009a6a:	b25b      	sxtb	r3, r3
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	da15      	bge.n	8009a9c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	7858      	ldrb	r0, [r3, #1]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a1a      	ldr	r2, [r3, #32]
 8009a7e:	2301      	movs	r3, #1
 8009a80:	f7fd ff9e 	bl	80079c0 <disk_write>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d001      	beq.n	8009a8e <f_sync+0x54>
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e04f      	b.n	8009b2e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	7d1b      	ldrb	r3, [r3, #20]
 8009a92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a96:	b2da      	uxtb	r2, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009a9c:	f7fd f9f4 	bl	8006e88 <get_fattime>
 8009aa0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	4610      	mov	r0, r2
 8009aac:	f7fe fa68 	bl	8007f80 <move_window>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009ab4:	7dfb      	ldrb	r3, [r7, #23]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d138      	bne.n	8009b2c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009abe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	330b      	adds	r3, #11
 8009ac4:	781a      	ldrb	r2, [r3, #0]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	330b      	adds	r3, #11
 8009aca:	f042 0220 	orr.w	r2, r2, #32
 8009ace:	b2d2      	uxtb	r2, r2
 8009ad0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6818      	ldr	r0, [r3, #0]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	461a      	mov	r2, r3
 8009adc:	68f9      	ldr	r1, [r7, #12]
 8009ade:	f7fe ff70 	bl	80089c2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f103 021c 	add.w	r2, r3, #28
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	4619      	mov	r1, r3
 8009aee:	4610      	mov	r0, r2
 8009af0:	f7fd fff7 	bl	8007ae2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	3316      	adds	r3, #22
 8009af8:	6939      	ldr	r1, [r7, #16]
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fd fff1 	bl	8007ae2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	3312      	adds	r3, #18
 8009b04:	2100      	movs	r1, #0
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fd ffd1 	bl	8007aae <st_word>
					fs->wflag = 1;
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fe fa61 	bl	8007fdc <sync_fs>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	7d1b      	ldrb	r3, [r3, #20]
 8009b22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b26:	b2da      	uxtb	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3718      	adds	r7, #24
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b084      	sub	sp, #16
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f7ff ff7b 	bl	8009a3a <f_sync>
 8009b44:	4603      	mov	r3, r0
 8009b46:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009b48:	7bfb      	ldrb	r3, [r7, #15]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d118      	bne.n	8009b80 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f107 0208 	add.w	r2, r7, #8
 8009b54:	4611      	mov	r1, r2
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7ff fbc4 	bl	80092e4 <validate>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009b60:	7bfb      	ldrb	r3, [r7, #15]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d10c      	bne.n	8009b80 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	691b      	ldr	r3, [r3, #16]
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fe f966 	bl	8007e3c <dec_lock>
 8009b70:	4603      	mov	r3, r0
 8009b72:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009b74:	7bfb      	ldrb	r3, [r7, #15]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d102      	bne.n	8009b80 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
	...

08009b8c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b087      	sub	sp, #28
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	4613      	mov	r3, r2
 8009b98:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8009c1c <FATFS_LinkDriverEx+0x90>)
 8009ba4:	7a5b      	ldrb	r3, [r3, #9]
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d131      	bne.n	8009c10 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009bac:	4b1b      	ldr	r3, [pc, #108]	@ (8009c1c <FATFS_LinkDriverEx+0x90>)
 8009bae:	7a5b      	ldrb	r3, [r3, #9]
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	4b19      	ldr	r3, [pc, #100]	@ (8009c1c <FATFS_LinkDriverEx+0x90>)
 8009bb6:	2100      	movs	r1, #0
 8009bb8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009bba:	4b18      	ldr	r3, [pc, #96]	@ (8009c1c <FATFS_LinkDriverEx+0x90>)
 8009bbc:	7a5b      	ldrb	r3, [r3, #9]
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	4a16      	ldr	r2, [pc, #88]	@ (8009c1c <FATFS_LinkDriverEx+0x90>)
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4413      	add	r3, r2
 8009bc6:	68fa      	ldr	r2, [r7, #12]
 8009bc8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009bca:	4b14      	ldr	r3, [pc, #80]	@ (8009c1c <FATFS_LinkDriverEx+0x90>)
 8009bcc:	7a5b      	ldrb	r3, [r3, #9]
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	4b12      	ldr	r3, [pc, #72]	@ (8009c1c <FATFS_LinkDriverEx+0x90>)
 8009bd4:	4413      	add	r3, r2
 8009bd6:	79fa      	ldrb	r2, [r7, #7]
 8009bd8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009bda:	4b10      	ldr	r3, [pc, #64]	@ (8009c1c <FATFS_LinkDriverEx+0x90>)
 8009bdc:	7a5b      	ldrb	r3, [r3, #9]
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	1c5a      	adds	r2, r3, #1
 8009be2:	b2d1      	uxtb	r1, r2
 8009be4:	4a0d      	ldr	r2, [pc, #52]	@ (8009c1c <FATFS_LinkDriverEx+0x90>)
 8009be6:	7251      	strb	r1, [r2, #9]
 8009be8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009bea:	7dbb      	ldrb	r3, [r7, #22]
 8009bec:	3330      	adds	r3, #48	@ 0x30
 8009bee:	b2da      	uxtb	r2, r3
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	223a      	movs	r2, #58	@ 0x3a
 8009bfa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	3302      	adds	r3, #2
 8009c00:	222f      	movs	r2, #47	@ 0x2f
 8009c02:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	3303      	adds	r3, #3
 8009c08:	2200      	movs	r2, #0
 8009c0a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	371c      	adds	r7, #28
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bc80      	pop	{r7}
 8009c1a:	4770      	bx	lr
 8009c1c:	20000a04 	.word	0x20000a04

08009c20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	6839      	ldr	r1, [r7, #0]
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f7ff ffac 	bl	8009b8c <FATFS_LinkDriverEx>
 8009c34:	4603      	mov	r3, r0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3708      	adds	r7, #8
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <__cvt>:
 8009c3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c42:	b088      	sub	sp, #32
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	461d      	mov	r5, r3
 8009c48:	4614      	mov	r4, r2
 8009c4a:	bfbc      	itt	lt
 8009c4c:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8009c50:	4614      	movlt	r4, r2
 8009c52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009c54:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009c56:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009c5a:	bfb6      	itet	lt
 8009c5c:	461d      	movlt	r5, r3
 8009c5e:	2300      	movge	r3, #0
 8009c60:	232d      	movlt	r3, #45	@ 0x2d
 8009c62:	7013      	strb	r3, [r2, #0]
 8009c64:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009c66:	f023 0820 	bic.w	r8, r3, #32
 8009c6a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009c6e:	d005      	beq.n	8009c7c <__cvt+0x3e>
 8009c70:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009c74:	d100      	bne.n	8009c78 <__cvt+0x3a>
 8009c76:	3601      	adds	r6, #1
 8009c78:	2302      	movs	r3, #2
 8009c7a:	e000      	b.n	8009c7e <__cvt+0x40>
 8009c7c:	2303      	movs	r3, #3
 8009c7e:	aa07      	add	r2, sp, #28
 8009c80:	9204      	str	r2, [sp, #16]
 8009c82:	aa06      	add	r2, sp, #24
 8009c84:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009c88:	e9cd 3600 	strd	r3, r6, [sp]
 8009c8c:	4622      	mov	r2, r4
 8009c8e:	462b      	mov	r3, r5
 8009c90:	f000 fe2e 	bl	800a8f0 <_dtoa_r>
 8009c94:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009c98:	4607      	mov	r7, r0
 8009c9a:	d119      	bne.n	8009cd0 <__cvt+0x92>
 8009c9c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009c9e:	07db      	lsls	r3, r3, #31
 8009ca0:	d50e      	bpl.n	8009cc0 <__cvt+0x82>
 8009ca2:	eb00 0906 	add.w	r9, r0, r6
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	2300      	movs	r3, #0
 8009caa:	4620      	mov	r0, r4
 8009cac:	4629      	mov	r1, r5
 8009cae:	f7f6 fee3 	bl	8000a78 <__aeabi_dcmpeq>
 8009cb2:	b108      	cbz	r0, 8009cb8 <__cvt+0x7a>
 8009cb4:	f8cd 901c 	str.w	r9, [sp, #28]
 8009cb8:	2230      	movs	r2, #48	@ 0x30
 8009cba:	9b07      	ldr	r3, [sp, #28]
 8009cbc:	454b      	cmp	r3, r9
 8009cbe:	d31e      	bcc.n	8009cfe <__cvt+0xc0>
 8009cc0:	9b07      	ldr	r3, [sp, #28]
 8009cc2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009cc4:	1bdb      	subs	r3, r3, r7
 8009cc6:	4638      	mov	r0, r7
 8009cc8:	6013      	str	r3, [r2, #0]
 8009cca:	b008      	add	sp, #32
 8009ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009cd4:	eb00 0906 	add.w	r9, r0, r6
 8009cd8:	d1e5      	bne.n	8009ca6 <__cvt+0x68>
 8009cda:	7803      	ldrb	r3, [r0, #0]
 8009cdc:	2b30      	cmp	r3, #48	@ 0x30
 8009cde:	d10a      	bne.n	8009cf6 <__cvt+0xb8>
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	4629      	mov	r1, r5
 8009ce8:	f7f6 fec6 	bl	8000a78 <__aeabi_dcmpeq>
 8009cec:	b918      	cbnz	r0, 8009cf6 <__cvt+0xb8>
 8009cee:	f1c6 0601 	rsb	r6, r6, #1
 8009cf2:	f8ca 6000 	str.w	r6, [sl]
 8009cf6:	f8da 3000 	ldr.w	r3, [sl]
 8009cfa:	4499      	add	r9, r3
 8009cfc:	e7d3      	b.n	8009ca6 <__cvt+0x68>
 8009cfe:	1c59      	adds	r1, r3, #1
 8009d00:	9107      	str	r1, [sp, #28]
 8009d02:	701a      	strb	r2, [r3, #0]
 8009d04:	e7d9      	b.n	8009cba <__cvt+0x7c>

08009d06 <__exponent>:
 8009d06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d08:	2900      	cmp	r1, #0
 8009d0a:	bfba      	itte	lt
 8009d0c:	4249      	neglt	r1, r1
 8009d0e:	232d      	movlt	r3, #45	@ 0x2d
 8009d10:	232b      	movge	r3, #43	@ 0x2b
 8009d12:	2909      	cmp	r1, #9
 8009d14:	7002      	strb	r2, [r0, #0]
 8009d16:	7043      	strb	r3, [r0, #1]
 8009d18:	dd29      	ble.n	8009d6e <__exponent+0x68>
 8009d1a:	f10d 0307 	add.w	r3, sp, #7
 8009d1e:	461d      	mov	r5, r3
 8009d20:	270a      	movs	r7, #10
 8009d22:	461a      	mov	r2, r3
 8009d24:	fbb1 f6f7 	udiv	r6, r1, r7
 8009d28:	fb07 1416 	mls	r4, r7, r6, r1
 8009d2c:	3430      	adds	r4, #48	@ 0x30
 8009d2e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009d32:	460c      	mov	r4, r1
 8009d34:	2c63      	cmp	r4, #99	@ 0x63
 8009d36:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009d3a:	4631      	mov	r1, r6
 8009d3c:	dcf1      	bgt.n	8009d22 <__exponent+0x1c>
 8009d3e:	3130      	adds	r1, #48	@ 0x30
 8009d40:	1e94      	subs	r4, r2, #2
 8009d42:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009d46:	1c41      	adds	r1, r0, #1
 8009d48:	4623      	mov	r3, r4
 8009d4a:	42ab      	cmp	r3, r5
 8009d4c:	d30a      	bcc.n	8009d64 <__exponent+0x5e>
 8009d4e:	f10d 0309 	add.w	r3, sp, #9
 8009d52:	1a9b      	subs	r3, r3, r2
 8009d54:	42ac      	cmp	r4, r5
 8009d56:	bf88      	it	hi
 8009d58:	2300      	movhi	r3, #0
 8009d5a:	3302      	adds	r3, #2
 8009d5c:	4403      	add	r3, r0
 8009d5e:	1a18      	subs	r0, r3, r0
 8009d60:	b003      	add	sp, #12
 8009d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d64:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009d68:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009d6c:	e7ed      	b.n	8009d4a <__exponent+0x44>
 8009d6e:	2330      	movs	r3, #48	@ 0x30
 8009d70:	3130      	adds	r1, #48	@ 0x30
 8009d72:	7083      	strb	r3, [r0, #2]
 8009d74:	70c1      	strb	r1, [r0, #3]
 8009d76:	1d03      	adds	r3, r0, #4
 8009d78:	e7f1      	b.n	8009d5e <__exponent+0x58>
	...

08009d7c <_printf_float>:
 8009d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d80:	b091      	sub	sp, #68	@ 0x44
 8009d82:	460c      	mov	r4, r1
 8009d84:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8009d88:	4616      	mov	r6, r2
 8009d8a:	461f      	mov	r7, r3
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	f000 fce7 	bl	800a760 <_localeconv_r>
 8009d92:	6803      	ldr	r3, [r0, #0]
 8009d94:	9308      	str	r3, [sp, #32]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7f6 fa42 	bl	8000220 <strlen>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	930e      	str	r3, [sp, #56]	@ 0x38
 8009da0:	f8d8 3000 	ldr.w	r3, [r8]
 8009da4:	9009      	str	r0, [sp, #36]	@ 0x24
 8009da6:	3307      	adds	r3, #7
 8009da8:	f023 0307 	bic.w	r3, r3, #7
 8009dac:	f103 0208 	add.w	r2, r3, #8
 8009db0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009db4:	f8d4 b000 	ldr.w	fp, [r4]
 8009db8:	f8c8 2000 	str.w	r2, [r8]
 8009dbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009dc0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009dc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009dc6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009dca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009dce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009dd2:	4b9d      	ldr	r3, [pc, #628]	@ (800a048 <_printf_float+0x2cc>)
 8009dd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009dd8:	f7f6 fe80 	bl	8000adc <__aeabi_dcmpun>
 8009ddc:	bb70      	cbnz	r0, 8009e3c <_printf_float+0xc0>
 8009dde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009de2:	4b99      	ldr	r3, [pc, #612]	@ (800a048 <_printf_float+0x2cc>)
 8009de4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009de8:	f7f6 fe5a 	bl	8000aa0 <__aeabi_dcmple>
 8009dec:	bb30      	cbnz	r0, 8009e3c <_printf_float+0xc0>
 8009dee:	2200      	movs	r2, #0
 8009df0:	2300      	movs	r3, #0
 8009df2:	4640      	mov	r0, r8
 8009df4:	4649      	mov	r1, r9
 8009df6:	f7f6 fe49 	bl	8000a8c <__aeabi_dcmplt>
 8009dfa:	b110      	cbz	r0, 8009e02 <_printf_float+0x86>
 8009dfc:	232d      	movs	r3, #45	@ 0x2d
 8009dfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e02:	4a92      	ldr	r2, [pc, #584]	@ (800a04c <_printf_float+0x2d0>)
 8009e04:	4b92      	ldr	r3, [pc, #584]	@ (800a050 <_printf_float+0x2d4>)
 8009e06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009e0a:	bf94      	ite	ls
 8009e0c:	4690      	movls	r8, r2
 8009e0e:	4698      	movhi	r8, r3
 8009e10:	2303      	movs	r3, #3
 8009e12:	6123      	str	r3, [r4, #16]
 8009e14:	f02b 0304 	bic.w	r3, fp, #4
 8009e18:	6023      	str	r3, [r4, #0]
 8009e1a:	f04f 0900 	mov.w	r9, #0
 8009e1e:	9700      	str	r7, [sp, #0]
 8009e20:	4633      	mov	r3, r6
 8009e22:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009e24:	4621      	mov	r1, r4
 8009e26:	4628      	mov	r0, r5
 8009e28:	f000 f9d4 	bl	800a1d4 <_printf_common>
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	f040 808f 	bne.w	8009f50 <_printf_float+0x1d4>
 8009e32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e36:	b011      	add	sp, #68	@ 0x44
 8009e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e3c:	4642      	mov	r2, r8
 8009e3e:	464b      	mov	r3, r9
 8009e40:	4640      	mov	r0, r8
 8009e42:	4649      	mov	r1, r9
 8009e44:	f7f6 fe4a 	bl	8000adc <__aeabi_dcmpun>
 8009e48:	b140      	cbz	r0, 8009e5c <_printf_float+0xe0>
 8009e4a:	464b      	mov	r3, r9
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	bfbc      	itt	lt
 8009e50:	232d      	movlt	r3, #45	@ 0x2d
 8009e52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009e56:	4a7f      	ldr	r2, [pc, #508]	@ (800a054 <_printf_float+0x2d8>)
 8009e58:	4b7f      	ldr	r3, [pc, #508]	@ (800a058 <_printf_float+0x2dc>)
 8009e5a:	e7d4      	b.n	8009e06 <_printf_float+0x8a>
 8009e5c:	6863      	ldr	r3, [r4, #4]
 8009e5e:	1c5a      	adds	r2, r3, #1
 8009e60:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009e64:	d13f      	bne.n	8009ee6 <_printf_float+0x16a>
 8009e66:	2306      	movs	r3, #6
 8009e68:	6063      	str	r3, [r4, #4]
 8009e6a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8009e6e:	2200      	movs	r2, #0
 8009e70:	6023      	str	r3, [r4, #0]
 8009e72:	9206      	str	r2, [sp, #24]
 8009e74:	aa0e      	add	r2, sp, #56	@ 0x38
 8009e76:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009e7a:	aa0d      	add	r2, sp, #52	@ 0x34
 8009e7c:	9203      	str	r2, [sp, #12]
 8009e7e:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009e82:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009e86:	6863      	ldr	r3, [r4, #4]
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	4642      	mov	r2, r8
 8009e8c:	464b      	mov	r3, r9
 8009e8e:	4628      	mov	r0, r5
 8009e90:	910a      	str	r1, [sp, #40]	@ 0x28
 8009e92:	f7ff fed4 	bl	8009c3e <__cvt>
 8009e96:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e98:	2947      	cmp	r1, #71	@ 0x47
 8009e9a:	4680      	mov	r8, r0
 8009e9c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009e9e:	d128      	bne.n	8009ef2 <_printf_float+0x176>
 8009ea0:	1cc8      	adds	r0, r1, #3
 8009ea2:	db02      	blt.n	8009eaa <_printf_float+0x12e>
 8009ea4:	6863      	ldr	r3, [r4, #4]
 8009ea6:	4299      	cmp	r1, r3
 8009ea8:	dd40      	ble.n	8009f2c <_printf_float+0x1b0>
 8009eaa:	f1aa 0a02 	sub.w	sl, sl, #2
 8009eae:	fa5f fa8a 	uxtb.w	sl, sl
 8009eb2:	3901      	subs	r1, #1
 8009eb4:	4652      	mov	r2, sl
 8009eb6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009eba:	910d      	str	r1, [sp, #52]	@ 0x34
 8009ebc:	f7ff ff23 	bl	8009d06 <__exponent>
 8009ec0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ec2:	1813      	adds	r3, r2, r0
 8009ec4:	2a01      	cmp	r2, #1
 8009ec6:	4681      	mov	r9, r0
 8009ec8:	6123      	str	r3, [r4, #16]
 8009eca:	dc02      	bgt.n	8009ed2 <_printf_float+0x156>
 8009ecc:	6822      	ldr	r2, [r4, #0]
 8009ece:	07d2      	lsls	r2, r2, #31
 8009ed0:	d501      	bpl.n	8009ed6 <_printf_float+0x15a>
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	6123      	str	r3, [r4, #16]
 8009ed6:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d09f      	beq.n	8009e1e <_printf_float+0xa2>
 8009ede:	232d      	movs	r3, #45	@ 0x2d
 8009ee0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ee4:	e79b      	b.n	8009e1e <_printf_float+0xa2>
 8009ee6:	2947      	cmp	r1, #71	@ 0x47
 8009ee8:	d1bf      	bne.n	8009e6a <_printf_float+0xee>
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d1bd      	bne.n	8009e6a <_printf_float+0xee>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e7ba      	b.n	8009e68 <_printf_float+0xec>
 8009ef2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009ef6:	d9dc      	bls.n	8009eb2 <_printf_float+0x136>
 8009ef8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009efc:	d118      	bne.n	8009f30 <_printf_float+0x1b4>
 8009efe:	2900      	cmp	r1, #0
 8009f00:	6863      	ldr	r3, [r4, #4]
 8009f02:	dd0b      	ble.n	8009f1c <_printf_float+0x1a0>
 8009f04:	6121      	str	r1, [r4, #16]
 8009f06:	b913      	cbnz	r3, 8009f0e <_printf_float+0x192>
 8009f08:	6822      	ldr	r2, [r4, #0]
 8009f0a:	07d0      	lsls	r0, r2, #31
 8009f0c:	d502      	bpl.n	8009f14 <_printf_float+0x198>
 8009f0e:	3301      	adds	r3, #1
 8009f10:	440b      	add	r3, r1
 8009f12:	6123      	str	r3, [r4, #16]
 8009f14:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009f16:	f04f 0900 	mov.w	r9, #0
 8009f1a:	e7dc      	b.n	8009ed6 <_printf_float+0x15a>
 8009f1c:	b913      	cbnz	r3, 8009f24 <_printf_float+0x1a8>
 8009f1e:	6822      	ldr	r2, [r4, #0]
 8009f20:	07d2      	lsls	r2, r2, #31
 8009f22:	d501      	bpl.n	8009f28 <_printf_float+0x1ac>
 8009f24:	3302      	adds	r3, #2
 8009f26:	e7f4      	b.n	8009f12 <_printf_float+0x196>
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e7f2      	b.n	8009f12 <_printf_float+0x196>
 8009f2c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009f30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f32:	4299      	cmp	r1, r3
 8009f34:	db05      	blt.n	8009f42 <_printf_float+0x1c6>
 8009f36:	6823      	ldr	r3, [r4, #0]
 8009f38:	6121      	str	r1, [r4, #16]
 8009f3a:	07d8      	lsls	r0, r3, #31
 8009f3c:	d5ea      	bpl.n	8009f14 <_printf_float+0x198>
 8009f3e:	1c4b      	adds	r3, r1, #1
 8009f40:	e7e7      	b.n	8009f12 <_printf_float+0x196>
 8009f42:	2900      	cmp	r1, #0
 8009f44:	bfd4      	ite	le
 8009f46:	f1c1 0202 	rsble	r2, r1, #2
 8009f4a:	2201      	movgt	r2, #1
 8009f4c:	4413      	add	r3, r2
 8009f4e:	e7e0      	b.n	8009f12 <_printf_float+0x196>
 8009f50:	6823      	ldr	r3, [r4, #0]
 8009f52:	055a      	lsls	r2, r3, #21
 8009f54:	d407      	bmi.n	8009f66 <_printf_float+0x1ea>
 8009f56:	6923      	ldr	r3, [r4, #16]
 8009f58:	4642      	mov	r2, r8
 8009f5a:	4631      	mov	r1, r6
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	47b8      	blx	r7
 8009f60:	3001      	adds	r0, #1
 8009f62:	d12b      	bne.n	8009fbc <_printf_float+0x240>
 8009f64:	e765      	b.n	8009e32 <_printf_float+0xb6>
 8009f66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009f6a:	f240 80dd 	bls.w	800a128 <_printf_float+0x3ac>
 8009f6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009f72:	2200      	movs	r2, #0
 8009f74:	2300      	movs	r3, #0
 8009f76:	f7f6 fd7f 	bl	8000a78 <__aeabi_dcmpeq>
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	d033      	beq.n	8009fe6 <_printf_float+0x26a>
 8009f7e:	4a37      	ldr	r2, [pc, #220]	@ (800a05c <_printf_float+0x2e0>)
 8009f80:	2301      	movs	r3, #1
 8009f82:	4631      	mov	r1, r6
 8009f84:	4628      	mov	r0, r5
 8009f86:	47b8      	blx	r7
 8009f88:	3001      	adds	r0, #1
 8009f8a:	f43f af52 	beq.w	8009e32 <_printf_float+0xb6>
 8009f8e:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009f92:	4543      	cmp	r3, r8
 8009f94:	db02      	blt.n	8009f9c <_printf_float+0x220>
 8009f96:	6823      	ldr	r3, [r4, #0]
 8009f98:	07d8      	lsls	r0, r3, #31
 8009f9a:	d50f      	bpl.n	8009fbc <_printf_float+0x240>
 8009f9c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009fa0:	4631      	mov	r1, r6
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	47b8      	blx	r7
 8009fa6:	3001      	adds	r0, #1
 8009fa8:	f43f af43 	beq.w	8009e32 <_printf_float+0xb6>
 8009fac:	f04f 0900 	mov.w	r9, #0
 8009fb0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009fb4:	f104 0a1a 	add.w	sl, r4, #26
 8009fb8:	45c8      	cmp	r8, r9
 8009fba:	dc09      	bgt.n	8009fd0 <_printf_float+0x254>
 8009fbc:	6823      	ldr	r3, [r4, #0]
 8009fbe:	079b      	lsls	r3, r3, #30
 8009fc0:	f100 8103 	bmi.w	800a1ca <_printf_float+0x44e>
 8009fc4:	68e0      	ldr	r0, [r4, #12]
 8009fc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fc8:	4298      	cmp	r0, r3
 8009fca:	bfb8      	it	lt
 8009fcc:	4618      	movlt	r0, r3
 8009fce:	e732      	b.n	8009e36 <_printf_float+0xba>
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	4652      	mov	r2, sl
 8009fd4:	4631      	mov	r1, r6
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	47b8      	blx	r7
 8009fda:	3001      	adds	r0, #1
 8009fdc:	f43f af29 	beq.w	8009e32 <_printf_float+0xb6>
 8009fe0:	f109 0901 	add.w	r9, r9, #1
 8009fe4:	e7e8      	b.n	8009fb8 <_printf_float+0x23c>
 8009fe6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	dc39      	bgt.n	800a060 <_printf_float+0x2e4>
 8009fec:	4a1b      	ldr	r2, [pc, #108]	@ (800a05c <_printf_float+0x2e0>)
 8009fee:	2301      	movs	r3, #1
 8009ff0:	4631      	mov	r1, r6
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	47b8      	blx	r7
 8009ff6:	3001      	adds	r0, #1
 8009ff8:	f43f af1b 	beq.w	8009e32 <_printf_float+0xb6>
 8009ffc:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800a000:	ea59 0303 	orrs.w	r3, r9, r3
 800a004:	d102      	bne.n	800a00c <_printf_float+0x290>
 800a006:	6823      	ldr	r3, [r4, #0]
 800a008:	07d9      	lsls	r1, r3, #31
 800a00a:	d5d7      	bpl.n	8009fbc <_printf_float+0x240>
 800a00c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a010:	4631      	mov	r1, r6
 800a012:	4628      	mov	r0, r5
 800a014:	47b8      	blx	r7
 800a016:	3001      	adds	r0, #1
 800a018:	f43f af0b 	beq.w	8009e32 <_printf_float+0xb6>
 800a01c:	f04f 0a00 	mov.w	sl, #0
 800a020:	f104 0b1a 	add.w	fp, r4, #26
 800a024:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a026:	425b      	negs	r3, r3
 800a028:	4553      	cmp	r3, sl
 800a02a:	dc01      	bgt.n	800a030 <_printf_float+0x2b4>
 800a02c:	464b      	mov	r3, r9
 800a02e:	e793      	b.n	8009f58 <_printf_float+0x1dc>
 800a030:	2301      	movs	r3, #1
 800a032:	465a      	mov	r2, fp
 800a034:	4631      	mov	r1, r6
 800a036:	4628      	mov	r0, r5
 800a038:	47b8      	blx	r7
 800a03a:	3001      	adds	r0, #1
 800a03c:	f43f aef9 	beq.w	8009e32 <_printf_float+0xb6>
 800a040:	f10a 0a01 	add.w	sl, sl, #1
 800a044:	e7ee      	b.n	800a024 <_printf_float+0x2a8>
 800a046:	bf00      	nop
 800a048:	7fefffff 	.word	0x7fefffff
 800a04c:	0800cc98 	.word	0x0800cc98
 800a050:	0800cc9c 	.word	0x0800cc9c
 800a054:	0800cca0 	.word	0x0800cca0
 800a058:	0800cca4 	.word	0x0800cca4
 800a05c:	0800cca8 	.word	0x0800cca8
 800a060:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a062:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a066:	4553      	cmp	r3, sl
 800a068:	bfa8      	it	ge
 800a06a:	4653      	movge	r3, sl
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	4699      	mov	r9, r3
 800a070:	dc36      	bgt.n	800a0e0 <_printf_float+0x364>
 800a072:	f04f 0b00 	mov.w	fp, #0
 800a076:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a07a:	f104 021a 	add.w	r2, r4, #26
 800a07e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a080:	930a      	str	r3, [sp, #40]	@ 0x28
 800a082:	eba3 0309 	sub.w	r3, r3, r9
 800a086:	455b      	cmp	r3, fp
 800a088:	dc31      	bgt.n	800a0ee <_printf_float+0x372>
 800a08a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a08c:	459a      	cmp	sl, r3
 800a08e:	dc3a      	bgt.n	800a106 <_printf_float+0x38a>
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	07da      	lsls	r2, r3, #31
 800a094:	d437      	bmi.n	800a106 <_printf_float+0x38a>
 800a096:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a098:	ebaa 0903 	sub.w	r9, sl, r3
 800a09c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a09e:	ebaa 0303 	sub.w	r3, sl, r3
 800a0a2:	4599      	cmp	r9, r3
 800a0a4:	bfa8      	it	ge
 800a0a6:	4699      	movge	r9, r3
 800a0a8:	f1b9 0f00 	cmp.w	r9, #0
 800a0ac:	dc33      	bgt.n	800a116 <_printf_float+0x39a>
 800a0ae:	f04f 0800 	mov.w	r8, #0
 800a0b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0b6:	f104 0b1a 	add.w	fp, r4, #26
 800a0ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a0bc:	ebaa 0303 	sub.w	r3, sl, r3
 800a0c0:	eba3 0309 	sub.w	r3, r3, r9
 800a0c4:	4543      	cmp	r3, r8
 800a0c6:	f77f af79 	ble.w	8009fbc <_printf_float+0x240>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	465a      	mov	r2, fp
 800a0ce:	4631      	mov	r1, r6
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	47b8      	blx	r7
 800a0d4:	3001      	adds	r0, #1
 800a0d6:	f43f aeac 	beq.w	8009e32 <_printf_float+0xb6>
 800a0da:	f108 0801 	add.w	r8, r8, #1
 800a0de:	e7ec      	b.n	800a0ba <_printf_float+0x33e>
 800a0e0:	4642      	mov	r2, r8
 800a0e2:	4631      	mov	r1, r6
 800a0e4:	4628      	mov	r0, r5
 800a0e6:	47b8      	blx	r7
 800a0e8:	3001      	adds	r0, #1
 800a0ea:	d1c2      	bne.n	800a072 <_printf_float+0x2f6>
 800a0ec:	e6a1      	b.n	8009e32 <_printf_float+0xb6>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	4631      	mov	r1, r6
 800a0f2:	4628      	mov	r0, r5
 800a0f4:	920a      	str	r2, [sp, #40]	@ 0x28
 800a0f6:	47b8      	blx	r7
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	f43f ae9a 	beq.w	8009e32 <_printf_float+0xb6>
 800a0fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a100:	f10b 0b01 	add.w	fp, fp, #1
 800a104:	e7bb      	b.n	800a07e <_printf_float+0x302>
 800a106:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a10a:	4631      	mov	r1, r6
 800a10c:	4628      	mov	r0, r5
 800a10e:	47b8      	blx	r7
 800a110:	3001      	adds	r0, #1
 800a112:	d1c0      	bne.n	800a096 <_printf_float+0x31a>
 800a114:	e68d      	b.n	8009e32 <_printf_float+0xb6>
 800a116:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a118:	464b      	mov	r3, r9
 800a11a:	4442      	add	r2, r8
 800a11c:	4631      	mov	r1, r6
 800a11e:	4628      	mov	r0, r5
 800a120:	47b8      	blx	r7
 800a122:	3001      	adds	r0, #1
 800a124:	d1c3      	bne.n	800a0ae <_printf_float+0x332>
 800a126:	e684      	b.n	8009e32 <_printf_float+0xb6>
 800a128:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a12c:	f1ba 0f01 	cmp.w	sl, #1
 800a130:	dc01      	bgt.n	800a136 <_printf_float+0x3ba>
 800a132:	07db      	lsls	r3, r3, #31
 800a134:	d536      	bpl.n	800a1a4 <_printf_float+0x428>
 800a136:	2301      	movs	r3, #1
 800a138:	4642      	mov	r2, r8
 800a13a:	4631      	mov	r1, r6
 800a13c:	4628      	mov	r0, r5
 800a13e:	47b8      	blx	r7
 800a140:	3001      	adds	r0, #1
 800a142:	f43f ae76 	beq.w	8009e32 <_printf_float+0xb6>
 800a146:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a14a:	4631      	mov	r1, r6
 800a14c:	4628      	mov	r0, r5
 800a14e:	47b8      	blx	r7
 800a150:	3001      	adds	r0, #1
 800a152:	f43f ae6e 	beq.w	8009e32 <_printf_float+0xb6>
 800a156:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a15a:	2200      	movs	r2, #0
 800a15c:	2300      	movs	r3, #0
 800a15e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a162:	f7f6 fc89 	bl	8000a78 <__aeabi_dcmpeq>
 800a166:	b9c0      	cbnz	r0, 800a19a <_printf_float+0x41e>
 800a168:	4653      	mov	r3, sl
 800a16a:	f108 0201 	add.w	r2, r8, #1
 800a16e:	4631      	mov	r1, r6
 800a170:	4628      	mov	r0, r5
 800a172:	47b8      	blx	r7
 800a174:	3001      	adds	r0, #1
 800a176:	d10c      	bne.n	800a192 <_printf_float+0x416>
 800a178:	e65b      	b.n	8009e32 <_printf_float+0xb6>
 800a17a:	2301      	movs	r3, #1
 800a17c:	465a      	mov	r2, fp
 800a17e:	4631      	mov	r1, r6
 800a180:	4628      	mov	r0, r5
 800a182:	47b8      	blx	r7
 800a184:	3001      	adds	r0, #1
 800a186:	f43f ae54 	beq.w	8009e32 <_printf_float+0xb6>
 800a18a:	f108 0801 	add.w	r8, r8, #1
 800a18e:	45d0      	cmp	r8, sl
 800a190:	dbf3      	blt.n	800a17a <_printf_float+0x3fe>
 800a192:	464b      	mov	r3, r9
 800a194:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a198:	e6df      	b.n	8009f5a <_printf_float+0x1de>
 800a19a:	f04f 0800 	mov.w	r8, #0
 800a19e:	f104 0b1a 	add.w	fp, r4, #26
 800a1a2:	e7f4      	b.n	800a18e <_printf_float+0x412>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	4642      	mov	r2, r8
 800a1a8:	e7e1      	b.n	800a16e <_printf_float+0x3f2>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	464a      	mov	r2, r9
 800a1ae:	4631      	mov	r1, r6
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	47b8      	blx	r7
 800a1b4:	3001      	adds	r0, #1
 800a1b6:	f43f ae3c 	beq.w	8009e32 <_printf_float+0xb6>
 800a1ba:	f108 0801 	add.w	r8, r8, #1
 800a1be:	68e3      	ldr	r3, [r4, #12]
 800a1c0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a1c2:	1a5b      	subs	r3, r3, r1
 800a1c4:	4543      	cmp	r3, r8
 800a1c6:	dcf0      	bgt.n	800a1aa <_printf_float+0x42e>
 800a1c8:	e6fc      	b.n	8009fc4 <_printf_float+0x248>
 800a1ca:	f04f 0800 	mov.w	r8, #0
 800a1ce:	f104 0919 	add.w	r9, r4, #25
 800a1d2:	e7f4      	b.n	800a1be <_printf_float+0x442>

0800a1d4 <_printf_common>:
 800a1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1d8:	4616      	mov	r6, r2
 800a1da:	4698      	mov	r8, r3
 800a1dc:	688a      	ldr	r2, [r1, #8]
 800a1de:	690b      	ldr	r3, [r1, #16]
 800a1e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	bfb8      	it	lt
 800a1e8:	4613      	movlt	r3, r2
 800a1ea:	6033      	str	r3, [r6, #0]
 800a1ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a1f0:	4607      	mov	r7, r0
 800a1f2:	460c      	mov	r4, r1
 800a1f4:	b10a      	cbz	r2, 800a1fa <_printf_common+0x26>
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	6033      	str	r3, [r6, #0]
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	0699      	lsls	r1, r3, #26
 800a1fe:	bf42      	ittt	mi
 800a200:	6833      	ldrmi	r3, [r6, #0]
 800a202:	3302      	addmi	r3, #2
 800a204:	6033      	strmi	r3, [r6, #0]
 800a206:	6825      	ldr	r5, [r4, #0]
 800a208:	f015 0506 	ands.w	r5, r5, #6
 800a20c:	d106      	bne.n	800a21c <_printf_common+0x48>
 800a20e:	f104 0a19 	add.w	sl, r4, #25
 800a212:	68e3      	ldr	r3, [r4, #12]
 800a214:	6832      	ldr	r2, [r6, #0]
 800a216:	1a9b      	subs	r3, r3, r2
 800a218:	42ab      	cmp	r3, r5
 800a21a:	dc26      	bgt.n	800a26a <_printf_common+0x96>
 800a21c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a220:	6822      	ldr	r2, [r4, #0]
 800a222:	3b00      	subs	r3, #0
 800a224:	bf18      	it	ne
 800a226:	2301      	movne	r3, #1
 800a228:	0692      	lsls	r2, r2, #26
 800a22a:	d42b      	bmi.n	800a284 <_printf_common+0xb0>
 800a22c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a230:	4641      	mov	r1, r8
 800a232:	4638      	mov	r0, r7
 800a234:	47c8      	blx	r9
 800a236:	3001      	adds	r0, #1
 800a238:	d01e      	beq.n	800a278 <_printf_common+0xa4>
 800a23a:	6823      	ldr	r3, [r4, #0]
 800a23c:	6922      	ldr	r2, [r4, #16]
 800a23e:	f003 0306 	and.w	r3, r3, #6
 800a242:	2b04      	cmp	r3, #4
 800a244:	bf02      	ittt	eq
 800a246:	68e5      	ldreq	r5, [r4, #12]
 800a248:	6833      	ldreq	r3, [r6, #0]
 800a24a:	1aed      	subeq	r5, r5, r3
 800a24c:	68a3      	ldr	r3, [r4, #8]
 800a24e:	bf0c      	ite	eq
 800a250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a254:	2500      	movne	r5, #0
 800a256:	4293      	cmp	r3, r2
 800a258:	bfc4      	itt	gt
 800a25a:	1a9b      	subgt	r3, r3, r2
 800a25c:	18ed      	addgt	r5, r5, r3
 800a25e:	2600      	movs	r6, #0
 800a260:	341a      	adds	r4, #26
 800a262:	42b5      	cmp	r5, r6
 800a264:	d11a      	bne.n	800a29c <_printf_common+0xc8>
 800a266:	2000      	movs	r0, #0
 800a268:	e008      	b.n	800a27c <_printf_common+0xa8>
 800a26a:	2301      	movs	r3, #1
 800a26c:	4652      	mov	r2, sl
 800a26e:	4641      	mov	r1, r8
 800a270:	4638      	mov	r0, r7
 800a272:	47c8      	blx	r9
 800a274:	3001      	adds	r0, #1
 800a276:	d103      	bne.n	800a280 <_printf_common+0xac>
 800a278:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a27c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a280:	3501      	adds	r5, #1
 800a282:	e7c6      	b.n	800a212 <_printf_common+0x3e>
 800a284:	18e1      	adds	r1, r4, r3
 800a286:	1c5a      	adds	r2, r3, #1
 800a288:	2030      	movs	r0, #48	@ 0x30
 800a28a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a28e:	4422      	add	r2, r4
 800a290:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a294:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a298:	3302      	adds	r3, #2
 800a29a:	e7c7      	b.n	800a22c <_printf_common+0x58>
 800a29c:	2301      	movs	r3, #1
 800a29e:	4622      	mov	r2, r4
 800a2a0:	4641      	mov	r1, r8
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	47c8      	blx	r9
 800a2a6:	3001      	adds	r0, #1
 800a2a8:	d0e6      	beq.n	800a278 <_printf_common+0xa4>
 800a2aa:	3601      	adds	r6, #1
 800a2ac:	e7d9      	b.n	800a262 <_printf_common+0x8e>
	...

0800a2b0 <_printf_i>:
 800a2b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2b4:	7e0f      	ldrb	r7, [r1, #24]
 800a2b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a2b8:	2f78      	cmp	r7, #120	@ 0x78
 800a2ba:	4691      	mov	r9, r2
 800a2bc:	4680      	mov	r8, r0
 800a2be:	460c      	mov	r4, r1
 800a2c0:	469a      	mov	sl, r3
 800a2c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a2c6:	d807      	bhi.n	800a2d8 <_printf_i+0x28>
 800a2c8:	2f62      	cmp	r7, #98	@ 0x62
 800a2ca:	d80a      	bhi.n	800a2e2 <_printf_i+0x32>
 800a2cc:	2f00      	cmp	r7, #0
 800a2ce:	f000 80d2 	beq.w	800a476 <_printf_i+0x1c6>
 800a2d2:	2f58      	cmp	r7, #88	@ 0x58
 800a2d4:	f000 80b9 	beq.w	800a44a <_printf_i+0x19a>
 800a2d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a2e0:	e03a      	b.n	800a358 <_printf_i+0xa8>
 800a2e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a2e6:	2b15      	cmp	r3, #21
 800a2e8:	d8f6      	bhi.n	800a2d8 <_printf_i+0x28>
 800a2ea:	a101      	add	r1, pc, #4	@ (adr r1, 800a2f0 <_printf_i+0x40>)
 800a2ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2f0:	0800a349 	.word	0x0800a349
 800a2f4:	0800a35d 	.word	0x0800a35d
 800a2f8:	0800a2d9 	.word	0x0800a2d9
 800a2fc:	0800a2d9 	.word	0x0800a2d9
 800a300:	0800a2d9 	.word	0x0800a2d9
 800a304:	0800a2d9 	.word	0x0800a2d9
 800a308:	0800a35d 	.word	0x0800a35d
 800a30c:	0800a2d9 	.word	0x0800a2d9
 800a310:	0800a2d9 	.word	0x0800a2d9
 800a314:	0800a2d9 	.word	0x0800a2d9
 800a318:	0800a2d9 	.word	0x0800a2d9
 800a31c:	0800a45d 	.word	0x0800a45d
 800a320:	0800a387 	.word	0x0800a387
 800a324:	0800a417 	.word	0x0800a417
 800a328:	0800a2d9 	.word	0x0800a2d9
 800a32c:	0800a2d9 	.word	0x0800a2d9
 800a330:	0800a47f 	.word	0x0800a47f
 800a334:	0800a2d9 	.word	0x0800a2d9
 800a338:	0800a387 	.word	0x0800a387
 800a33c:	0800a2d9 	.word	0x0800a2d9
 800a340:	0800a2d9 	.word	0x0800a2d9
 800a344:	0800a41f 	.word	0x0800a41f
 800a348:	6833      	ldr	r3, [r6, #0]
 800a34a:	1d1a      	adds	r2, r3, #4
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	6032      	str	r2, [r6, #0]
 800a350:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a354:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a358:	2301      	movs	r3, #1
 800a35a:	e09d      	b.n	800a498 <_printf_i+0x1e8>
 800a35c:	6833      	ldr	r3, [r6, #0]
 800a35e:	6820      	ldr	r0, [r4, #0]
 800a360:	1d19      	adds	r1, r3, #4
 800a362:	6031      	str	r1, [r6, #0]
 800a364:	0606      	lsls	r6, r0, #24
 800a366:	d501      	bpl.n	800a36c <_printf_i+0xbc>
 800a368:	681d      	ldr	r5, [r3, #0]
 800a36a:	e003      	b.n	800a374 <_printf_i+0xc4>
 800a36c:	0645      	lsls	r5, r0, #25
 800a36e:	d5fb      	bpl.n	800a368 <_printf_i+0xb8>
 800a370:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a374:	2d00      	cmp	r5, #0
 800a376:	da03      	bge.n	800a380 <_printf_i+0xd0>
 800a378:	232d      	movs	r3, #45	@ 0x2d
 800a37a:	426d      	negs	r5, r5
 800a37c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a380:	4859      	ldr	r0, [pc, #356]	@ (800a4e8 <_printf_i+0x238>)
 800a382:	230a      	movs	r3, #10
 800a384:	e011      	b.n	800a3aa <_printf_i+0xfa>
 800a386:	6821      	ldr	r1, [r4, #0]
 800a388:	6833      	ldr	r3, [r6, #0]
 800a38a:	0608      	lsls	r0, r1, #24
 800a38c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a390:	d402      	bmi.n	800a398 <_printf_i+0xe8>
 800a392:	0649      	lsls	r1, r1, #25
 800a394:	bf48      	it	mi
 800a396:	b2ad      	uxthmi	r5, r5
 800a398:	2f6f      	cmp	r7, #111	@ 0x6f
 800a39a:	4853      	ldr	r0, [pc, #332]	@ (800a4e8 <_printf_i+0x238>)
 800a39c:	6033      	str	r3, [r6, #0]
 800a39e:	bf14      	ite	ne
 800a3a0:	230a      	movne	r3, #10
 800a3a2:	2308      	moveq	r3, #8
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a3aa:	6866      	ldr	r6, [r4, #4]
 800a3ac:	60a6      	str	r6, [r4, #8]
 800a3ae:	2e00      	cmp	r6, #0
 800a3b0:	bfa2      	ittt	ge
 800a3b2:	6821      	ldrge	r1, [r4, #0]
 800a3b4:	f021 0104 	bicge.w	r1, r1, #4
 800a3b8:	6021      	strge	r1, [r4, #0]
 800a3ba:	b90d      	cbnz	r5, 800a3c0 <_printf_i+0x110>
 800a3bc:	2e00      	cmp	r6, #0
 800a3be:	d04b      	beq.n	800a458 <_printf_i+0x1a8>
 800a3c0:	4616      	mov	r6, r2
 800a3c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a3c6:	fb03 5711 	mls	r7, r3, r1, r5
 800a3ca:	5dc7      	ldrb	r7, [r0, r7]
 800a3cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a3d0:	462f      	mov	r7, r5
 800a3d2:	42bb      	cmp	r3, r7
 800a3d4:	460d      	mov	r5, r1
 800a3d6:	d9f4      	bls.n	800a3c2 <_printf_i+0x112>
 800a3d8:	2b08      	cmp	r3, #8
 800a3da:	d10b      	bne.n	800a3f4 <_printf_i+0x144>
 800a3dc:	6823      	ldr	r3, [r4, #0]
 800a3de:	07df      	lsls	r7, r3, #31
 800a3e0:	d508      	bpl.n	800a3f4 <_printf_i+0x144>
 800a3e2:	6923      	ldr	r3, [r4, #16]
 800a3e4:	6861      	ldr	r1, [r4, #4]
 800a3e6:	4299      	cmp	r1, r3
 800a3e8:	bfde      	ittt	le
 800a3ea:	2330      	movle	r3, #48	@ 0x30
 800a3ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a3f0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a3f4:	1b92      	subs	r2, r2, r6
 800a3f6:	6122      	str	r2, [r4, #16]
 800a3f8:	f8cd a000 	str.w	sl, [sp]
 800a3fc:	464b      	mov	r3, r9
 800a3fe:	aa03      	add	r2, sp, #12
 800a400:	4621      	mov	r1, r4
 800a402:	4640      	mov	r0, r8
 800a404:	f7ff fee6 	bl	800a1d4 <_printf_common>
 800a408:	3001      	adds	r0, #1
 800a40a:	d14a      	bne.n	800a4a2 <_printf_i+0x1f2>
 800a40c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a410:	b004      	add	sp, #16
 800a412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a416:	6823      	ldr	r3, [r4, #0]
 800a418:	f043 0320 	orr.w	r3, r3, #32
 800a41c:	6023      	str	r3, [r4, #0]
 800a41e:	4833      	ldr	r0, [pc, #204]	@ (800a4ec <_printf_i+0x23c>)
 800a420:	2778      	movs	r7, #120	@ 0x78
 800a422:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	6831      	ldr	r1, [r6, #0]
 800a42a:	061f      	lsls	r7, r3, #24
 800a42c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a430:	d402      	bmi.n	800a438 <_printf_i+0x188>
 800a432:	065f      	lsls	r7, r3, #25
 800a434:	bf48      	it	mi
 800a436:	b2ad      	uxthmi	r5, r5
 800a438:	6031      	str	r1, [r6, #0]
 800a43a:	07d9      	lsls	r1, r3, #31
 800a43c:	bf44      	itt	mi
 800a43e:	f043 0320 	orrmi.w	r3, r3, #32
 800a442:	6023      	strmi	r3, [r4, #0]
 800a444:	b11d      	cbz	r5, 800a44e <_printf_i+0x19e>
 800a446:	2310      	movs	r3, #16
 800a448:	e7ac      	b.n	800a3a4 <_printf_i+0xf4>
 800a44a:	4827      	ldr	r0, [pc, #156]	@ (800a4e8 <_printf_i+0x238>)
 800a44c:	e7e9      	b.n	800a422 <_printf_i+0x172>
 800a44e:	6823      	ldr	r3, [r4, #0]
 800a450:	f023 0320 	bic.w	r3, r3, #32
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	e7f6      	b.n	800a446 <_printf_i+0x196>
 800a458:	4616      	mov	r6, r2
 800a45a:	e7bd      	b.n	800a3d8 <_printf_i+0x128>
 800a45c:	6833      	ldr	r3, [r6, #0]
 800a45e:	6825      	ldr	r5, [r4, #0]
 800a460:	6961      	ldr	r1, [r4, #20]
 800a462:	1d18      	adds	r0, r3, #4
 800a464:	6030      	str	r0, [r6, #0]
 800a466:	062e      	lsls	r6, r5, #24
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	d501      	bpl.n	800a470 <_printf_i+0x1c0>
 800a46c:	6019      	str	r1, [r3, #0]
 800a46e:	e002      	b.n	800a476 <_printf_i+0x1c6>
 800a470:	0668      	lsls	r0, r5, #25
 800a472:	d5fb      	bpl.n	800a46c <_printf_i+0x1bc>
 800a474:	8019      	strh	r1, [r3, #0]
 800a476:	2300      	movs	r3, #0
 800a478:	6123      	str	r3, [r4, #16]
 800a47a:	4616      	mov	r6, r2
 800a47c:	e7bc      	b.n	800a3f8 <_printf_i+0x148>
 800a47e:	6833      	ldr	r3, [r6, #0]
 800a480:	1d1a      	adds	r2, r3, #4
 800a482:	6032      	str	r2, [r6, #0]
 800a484:	681e      	ldr	r6, [r3, #0]
 800a486:	6862      	ldr	r2, [r4, #4]
 800a488:	2100      	movs	r1, #0
 800a48a:	4630      	mov	r0, r6
 800a48c:	f7f5 fe78 	bl	8000180 <memchr>
 800a490:	b108      	cbz	r0, 800a496 <_printf_i+0x1e6>
 800a492:	1b80      	subs	r0, r0, r6
 800a494:	6060      	str	r0, [r4, #4]
 800a496:	6863      	ldr	r3, [r4, #4]
 800a498:	6123      	str	r3, [r4, #16]
 800a49a:	2300      	movs	r3, #0
 800a49c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4a0:	e7aa      	b.n	800a3f8 <_printf_i+0x148>
 800a4a2:	6923      	ldr	r3, [r4, #16]
 800a4a4:	4632      	mov	r2, r6
 800a4a6:	4649      	mov	r1, r9
 800a4a8:	4640      	mov	r0, r8
 800a4aa:	47d0      	blx	sl
 800a4ac:	3001      	adds	r0, #1
 800a4ae:	d0ad      	beq.n	800a40c <_printf_i+0x15c>
 800a4b0:	6823      	ldr	r3, [r4, #0]
 800a4b2:	079b      	lsls	r3, r3, #30
 800a4b4:	d413      	bmi.n	800a4de <_printf_i+0x22e>
 800a4b6:	68e0      	ldr	r0, [r4, #12]
 800a4b8:	9b03      	ldr	r3, [sp, #12]
 800a4ba:	4298      	cmp	r0, r3
 800a4bc:	bfb8      	it	lt
 800a4be:	4618      	movlt	r0, r3
 800a4c0:	e7a6      	b.n	800a410 <_printf_i+0x160>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	4632      	mov	r2, r6
 800a4c6:	4649      	mov	r1, r9
 800a4c8:	4640      	mov	r0, r8
 800a4ca:	47d0      	blx	sl
 800a4cc:	3001      	adds	r0, #1
 800a4ce:	d09d      	beq.n	800a40c <_printf_i+0x15c>
 800a4d0:	3501      	adds	r5, #1
 800a4d2:	68e3      	ldr	r3, [r4, #12]
 800a4d4:	9903      	ldr	r1, [sp, #12]
 800a4d6:	1a5b      	subs	r3, r3, r1
 800a4d8:	42ab      	cmp	r3, r5
 800a4da:	dcf2      	bgt.n	800a4c2 <_printf_i+0x212>
 800a4dc:	e7eb      	b.n	800a4b6 <_printf_i+0x206>
 800a4de:	2500      	movs	r5, #0
 800a4e0:	f104 0619 	add.w	r6, r4, #25
 800a4e4:	e7f5      	b.n	800a4d2 <_printf_i+0x222>
 800a4e6:	bf00      	nop
 800a4e8:	0800ccaa 	.word	0x0800ccaa
 800a4ec:	0800ccbb 	.word	0x0800ccbb

0800a4f0 <sniprintf>:
 800a4f0:	b40c      	push	{r2, r3}
 800a4f2:	b530      	push	{r4, r5, lr}
 800a4f4:	4b17      	ldr	r3, [pc, #92]	@ (800a554 <sniprintf+0x64>)
 800a4f6:	1e0c      	subs	r4, r1, #0
 800a4f8:	681d      	ldr	r5, [r3, #0]
 800a4fa:	b09d      	sub	sp, #116	@ 0x74
 800a4fc:	da08      	bge.n	800a510 <sniprintf+0x20>
 800a4fe:	238b      	movs	r3, #139	@ 0x8b
 800a500:	602b      	str	r3, [r5, #0]
 800a502:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a506:	b01d      	add	sp, #116	@ 0x74
 800a508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a50c:	b002      	add	sp, #8
 800a50e:	4770      	bx	lr
 800a510:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a514:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a518:	bf14      	ite	ne
 800a51a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800a51e:	4623      	moveq	r3, r4
 800a520:	9304      	str	r3, [sp, #16]
 800a522:	9307      	str	r3, [sp, #28]
 800a524:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a528:	9002      	str	r0, [sp, #8]
 800a52a:	9006      	str	r0, [sp, #24]
 800a52c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a530:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a532:	ab21      	add	r3, sp, #132	@ 0x84
 800a534:	a902      	add	r1, sp, #8
 800a536:	4628      	mov	r0, r5
 800a538:	9301      	str	r3, [sp, #4]
 800a53a:	f000 fffd 	bl	800b538 <_svfiprintf_r>
 800a53e:	1c43      	adds	r3, r0, #1
 800a540:	bfbc      	itt	lt
 800a542:	238b      	movlt	r3, #139	@ 0x8b
 800a544:	602b      	strlt	r3, [r5, #0]
 800a546:	2c00      	cmp	r4, #0
 800a548:	d0dd      	beq.n	800a506 <sniprintf+0x16>
 800a54a:	9b02      	ldr	r3, [sp, #8]
 800a54c:	2200      	movs	r2, #0
 800a54e:	701a      	strb	r2, [r3, #0]
 800a550:	e7d9      	b.n	800a506 <sniprintf+0x16>
 800a552:	bf00      	nop
 800a554:	20000030 	.word	0x20000030

0800a558 <std>:
 800a558:	2300      	movs	r3, #0
 800a55a:	b510      	push	{r4, lr}
 800a55c:	4604      	mov	r4, r0
 800a55e:	e9c0 3300 	strd	r3, r3, [r0]
 800a562:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a566:	6083      	str	r3, [r0, #8]
 800a568:	8181      	strh	r1, [r0, #12]
 800a56a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a56c:	81c2      	strh	r2, [r0, #14]
 800a56e:	6183      	str	r3, [r0, #24]
 800a570:	4619      	mov	r1, r3
 800a572:	2208      	movs	r2, #8
 800a574:	305c      	adds	r0, #92	@ 0x5c
 800a576:	f000 f8eb 	bl	800a750 <memset>
 800a57a:	4b0d      	ldr	r3, [pc, #52]	@ (800a5b0 <std+0x58>)
 800a57c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a57e:	4b0d      	ldr	r3, [pc, #52]	@ (800a5b4 <std+0x5c>)
 800a580:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a582:	4b0d      	ldr	r3, [pc, #52]	@ (800a5b8 <std+0x60>)
 800a584:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a586:	4b0d      	ldr	r3, [pc, #52]	@ (800a5bc <std+0x64>)
 800a588:	6323      	str	r3, [r4, #48]	@ 0x30
 800a58a:	4b0d      	ldr	r3, [pc, #52]	@ (800a5c0 <std+0x68>)
 800a58c:	6224      	str	r4, [r4, #32]
 800a58e:	429c      	cmp	r4, r3
 800a590:	d006      	beq.n	800a5a0 <std+0x48>
 800a592:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a596:	4294      	cmp	r4, r2
 800a598:	d002      	beq.n	800a5a0 <std+0x48>
 800a59a:	33d0      	adds	r3, #208	@ 0xd0
 800a59c:	429c      	cmp	r4, r3
 800a59e:	d105      	bne.n	800a5ac <std+0x54>
 800a5a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a5a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5a8:	f000 b908 	b.w	800a7bc <__retarget_lock_init_recursive>
 800a5ac:	bd10      	pop	{r4, pc}
 800a5ae:	bf00      	nop
 800a5b0:	0800c0ed 	.word	0x0800c0ed
 800a5b4:	0800c10f 	.word	0x0800c10f
 800a5b8:	0800c147 	.word	0x0800c147
 800a5bc:	0800c16b 	.word	0x0800c16b
 800a5c0:	20000a10 	.word	0x20000a10

0800a5c4 <stdio_exit_handler>:
 800a5c4:	4a02      	ldr	r2, [pc, #8]	@ (800a5d0 <stdio_exit_handler+0xc>)
 800a5c6:	4903      	ldr	r1, [pc, #12]	@ (800a5d4 <stdio_exit_handler+0x10>)
 800a5c8:	4803      	ldr	r0, [pc, #12]	@ (800a5d8 <stdio_exit_handler+0x14>)
 800a5ca:	f000 b869 	b.w	800a6a0 <_fwalk_sglue>
 800a5ce:	bf00      	nop
 800a5d0:	20000024 	.word	0x20000024
 800a5d4:	0800b985 	.word	0x0800b985
 800a5d8:	20000034 	.word	0x20000034

0800a5dc <cleanup_stdio>:
 800a5dc:	6841      	ldr	r1, [r0, #4]
 800a5de:	4b0c      	ldr	r3, [pc, #48]	@ (800a610 <cleanup_stdio+0x34>)
 800a5e0:	4299      	cmp	r1, r3
 800a5e2:	b510      	push	{r4, lr}
 800a5e4:	4604      	mov	r4, r0
 800a5e6:	d001      	beq.n	800a5ec <cleanup_stdio+0x10>
 800a5e8:	f001 f9cc 	bl	800b984 <_fflush_r>
 800a5ec:	68a1      	ldr	r1, [r4, #8]
 800a5ee:	4b09      	ldr	r3, [pc, #36]	@ (800a614 <cleanup_stdio+0x38>)
 800a5f0:	4299      	cmp	r1, r3
 800a5f2:	d002      	beq.n	800a5fa <cleanup_stdio+0x1e>
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	f001 f9c5 	bl	800b984 <_fflush_r>
 800a5fa:	68e1      	ldr	r1, [r4, #12]
 800a5fc:	4b06      	ldr	r3, [pc, #24]	@ (800a618 <cleanup_stdio+0x3c>)
 800a5fe:	4299      	cmp	r1, r3
 800a600:	d004      	beq.n	800a60c <cleanup_stdio+0x30>
 800a602:	4620      	mov	r0, r4
 800a604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a608:	f001 b9bc 	b.w	800b984 <_fflush_r>
 800a60c:	bd10      	pop	{r4, pc}
 800a60e:	bf00      	nop
 800a610:	20000a10 	.word	0x20000a10
 800a614:	20000a78 	.word	0x20000a78
 800a618:	20000ae0 	.word	0x20000ae0

0800a61c <global_stdio_init.part.0>:
 800a61c:	b510      	push	{r4, lr}
 800a61e:	4b0b      	ldr	r3, [pc, #44]	@ (800a64c <global_stdio_init.part.0+0x30>)
 800a620:	4c0b      	ldr	r4, [pc, #44]	@ (800a650 <global_stdio_init.part.0+0x34>)
 800a622:	4a0c      	ldr	r2, [pc, #48]	@ (800a654 <global_stdio_init.part.0+0x38>)
 800a624:	601a      	str	r2, [r3, #0]
 800a626:	4620      	mov	r0, r4
 800a628:	2200      	movs	r2, #0
 800a62a:	2104      	movs	r1, #4
 800a62c:	f7ff ff94 	bl	800a558 <std>
 800a630:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a634:	2201      	movs	r2, #1
 800a636:	2109      	movs	r1, #9
 800a638:	f7ff ff8e 	bl	800a558 <std>
 800a63c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a640:	2202      	movs	r2, #2
 800a642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a646:	2112      	movs	r1, #18
 800a648:	f7ff bf86 	b.w	800a558 <std>
 800a64c:	20000b48 	.word	0x20000b48
 800a650:	20000a10 	.word	0x20000a10
 800a654:	0800a5c5 	.word	0x0800a5c5

0800a658 <__sfp_lock_acquire>:
 800a658:	4801      	ldr	r0, [pc, #4]	@ (800a660 <__sfp_lock_acquire+0x8>)
 800a65a:	f000 b8b0 	b.w	800a7be <__retarget_lock_acquire_recursive>
 800a65e:	bf00      	nop
 800a660:	20000b4d 	.word	0x20000b4d

0800a664 <__sfp_lock_release>:
 800a664:	4801      	ldr	r0, [pc, #4]	@ (800a66c <__sfp_lock_release+0x8>)
 800a666:	f000 b8ab 	b.w	800a7c0 <__retarget_lock_release_recursive>
 800a66a:	bf00      	nop
 800a66c:	20000b4d 	.word	0x20000b4d

0800a670 <__sinit>:
 800a670:	b510      	push	{r4, lr}
 800a672:	4604      	mov	r4, r0
 800a674:	f7ff fff0 	bl	800a658 <__sfp_lock_acquire>
 800a678:	6a23      	ldr	r3, [r4, #32]
 800a67a:	b11b      	cbz	r3, 800a684 <__sinit+0x14>
 800a67c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a680:	f7ff bff0 	b.w	800a664 <__sfp_lock_release>
 800a684:	4b04      	ldr	r3, [pc, #16]	@ (800a698 <__sinit+0x28>)
 800a686:	6223      	str	r3, [r4, #32]
 800a688:	4b04      	ldr	r3, [pc, #16]	@ (800a69c <__sinit+0x2c>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d1f5      	bne.n	800a67c <__sinit+0xc>
 800a690:	f7ff ffc4 	bl	800a61c <global_stdio_init.part.0>
 800a694:	e7f2      	b.n	800a67c <__sinit+0xc>
 800a696:	bf00      	nop
 800a698:	0800a5dd 	.word	0x0800a5dd
 800a69c:	20000b48 	.word	0x20000b48

0800a6a0 <_fwalk_sglue>:
 800a6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6a4:	4607      	mov	r7, r0
 800a6a6:	4688      	mov	r8, r1
 800a6a8:	4614      	mov	r4, r2
 800a6aa:	2600      	movs	r6, #0
 800a6ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6b0:	f1b9 0901 	subs.w	r9, r9, #1
 800a6b4:	d505      	bpl.n	800a6c2 <_fwalk_sglue+0x22>
 800a6b6:	6824      	ldr	r4, [r4, #0]
 800a6b8:	2c00      	cmp	r4, #0
 800a6ba:	d1f7      	bne.n	800a6ac <_fwalk_sglue+0xc>
 800a6bc:	4630      	mov	r0, r6
 800a6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6c2:	89ab      	ldrh	r3, [r5, #12]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d907      	bls.n	800a6d8 <_fwalk_sglue+0x38>
 800a6c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	d003      	beq.n	800a6d8 <_fwalk_sglue+0x38>
 800a6d0:	4629      	mov	r1, r5
 800a6d2:	4638      	mov	r0, r7
 800a6d4:	47c0      	blx	r8
 800a6d6:	4306      	orrs	r6, r0
 800a6d8:	3568      	adds	r5, #104	@ 0x68
 800a6da:	e7e9      	b.n	800a6b0 <_fwalk_sglue+0x10>

0800a6dc <_vsniprintf_r>:
 800a6dc:	b530      	push	{r4, r5, lr}
 800a6de:	4614      	mov	r4, r2
 800a6e0:	2c00      	cmp	r4, #0
 800a6e2:	b09b      	sub	sp, #108	@ 0x6c
 800a6e4:	4605      	mov	r5, r0
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	da05      	bge.n	800a6f6 <_vsniprintf_r+0x1a>
 800a6ea:	238b      	movs	r3, #139	@ 0x8b
 800a6ec:	6003      	str	r3, [r0, #0]
 800a6ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a6f2:	b01b      	add	sp, #108	@ 0x6c
 800a6f4:	bd30      	pop	{r4, r5, pc}
 800a6f6:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a6fa:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a6fe:	bf14      	ite	ne
 800a700:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800a704:	4623      	moveq	r3, r4
 800a706:	9302      	str	r3, [sp, #8]
 800a708:	9305      	str	r3, [sp, #20]
 800a70a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a70e:	9100      	str	r1, [sp, #0]
 800a710:	9104      	str	r1, [sp, #16]
 800a712:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a716:	4669      	mov	r1, sp
 800a718:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a71a:	f000 ff0d 	bl	800b538 <_svfiprintf_r>
 800a71e:	1c43      	adds	r3, r0, #1
 800a720:	bfbc      	itt	lt
 800a722:	238b      	movlt	r3, #139	@ 0x8b
 800a724:	602b      	strlt	r3, [r5, #0]
 800a726:	2c00      	cmp	r4, #0
 800a728:	d0e3      	beq.n	800a6f2 <_vsniprintf_r+0x16>
 800a72a:	9b00      	ldr	r3, [sp, #0]
 800a72c:	2200      	movs	r2, #0
 800a72e:	701a      	strb	r2, [r3, #0]
 800a730:	e7df      	b.n	800a6f2 <_vsniprintf_r+0x16>
	...

0800a734 <vsniprintf>:
 800a734:	b507      	push	{r0, r1, r2, lr}
 800a736:	9300      	str	r3, [sp, #0]
 800a738:	4613      	mov	r3, r2
 800a73a:	460a      	mov	r2, r1
 800a73c:	4601      	mov	r1, r0
 800a73e:	4803      	ldr	r0, [pc, #12]	@ (800a74c <vsniprintf+0x18>)
 800a740:	6800      	ldr	r0, [r0, #0]
 800a742:	f7ff ffcb 	bl	800a6dc <_vsniprintf_r>
 800a746:	b003      	add	sp, #12
 800a748:	f85d fb04 	ldr.w	pc, [sp], #4
 800a74c:	20000030 	.word	0x20000030

0800a750 <memset>:
 800a750:	4402      	add	r2, r0
 800a752:	4603      	mov	r3, r0
 800a754:	4293      	cmp	r3, r2
 800a756:	d100      	bne.n	800a75a <memset+0xa>
 800a758:	4770      	bx	lr
 800a75a:	f803 1b01 	strb.w	r1, [r3], #1
 800a75e:	e7f9      	b.n	800a754 <memset+0x4>

0800a760 <_localeconv_r>:
 800a760:	4800      	ldr	r0, [pc, #0]	@ (800a764 <_localeconv_r+0x4>)
 800a762:	4770      	bx	lr
 800a764:	20000170 	.word	0x20000170

0800a768 <__errno>:
 800a768:	4b01      	ldr	r3, [pc, #4]	@ (800a770 <__errno+0x8>)
 800a76a:	6818      	ldr	r0, [r3, #0]
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop
 800a770:	20000030 	.word	0x20000030

0800a774 <__libc_init_array>:
 800a774:	b570      	push	{r4, r5, r6, lr}
 800a776:	4d0d      	ldr	r5, [pc, #52]	@ (800a7ac <__libc_init_array+0x38>)
 800a778:	4c0d      	ldr	r4, [pc, #52]	@ (800a7b0 <__libc_init_array+0x3c>)
 800a77a:	1b64      	subs	r4, r4, r5
 800a77c:	10a4      	asrs	r4, r4, #2
 800a77e:	2600      	movs	r6, #0
 800a780:	42a6      	cmp	r6, r4
 800a782:	d109      	bne.n	800a798 <__libc_init_array+0x24>
 800a784:	4d0b      	ldr	r5, [pc, #44]	@ (800a7b4 <__libc_init_array+0x40>)
 800a786:	4c0c      	ldr	r4, [pc, #48]	@ (800a7b8 <__libc_init_array+0x44>)
 800a788:	f002 f8ea 	bl	800c960 <_init>
 800a78c:	1b64      	subs	r4, r4, r5
 800a78e:	10a4      	asrs	r4, r4, #2
 800a790:	2600      	movs	r6, #0
 800a792:	42a6      	cmp	r6, r4
 800a794:	d105      	bne.n	800a7a2 <__libc_init_array+0x2e>
 800a796:	bd70      	pop	{r4, r5, r6, pc}
 800a798:	f855 3b04 	ldr.w	r3, [r5], #4
 800a79c:	4798      	blx	r3
 800a79e:	3601      	adds	r6, #1
 800a7a0:	e7ee      	b.n	800a780 <__libc_init_array+0xc>
 800a7a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7a6:	4798      	blx	r3
 800a7a8:	3601      	adds	r6, #1
 800a7aa:	e7f2      	b.n	800a792 <__libc_init_array+0x1e>
 800a7ac:	0800d010 	.word	0x0800d010
 800a7b0:	0800d010 	.word	0x0800d010
 800a7b4:	0800d010 	.word	0x0800d010
 800a7b8:	0800d014 	.word	0x0800d014

0800a7bc <__retarget_lock_init_recursive>:
 800a7bc:	4770      	bx	lr

0800a7be <__retarget_lock_acquire_recursive>:
 800a7be:	4770      	bx	lr

0800a7c0 <__retarget_lock_release_recursive>:
 800a7c0:	4770      	bx	lr

0800a7c2 <memcpy>:
 800a7c2:	440a      	add	r2, r1
 800a7c4:	4291      	cmp	r1, r2
 800a7c6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a7ca:	d100      	bne.n	800a7ce <memcpy+0xc>
 800a7cc:	4770      	bx	lr
 800a7ce:	b510      	push	{r4, lr}
 800a7d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7d8:	4291      	cmp	r1, r2
 800a7da:	d1f9      	bne.n	800a7d0 <memcpy+0xe>
 800a7dc:	bd10      	pop	{r4, pc}

0800a7de <quorem>:
 800a7de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e2:	6903      	ldr	r3, [r0, #16]
 800a7e4:	690c      	ldr	r4, [r1, #16]
 800a7e6:	42a3      	cmp	r3, r4
 800a7e8:	4607      	mov	r7, r0
 800a7ea:	db7e      	blt.n	800a8ea <quorem+0x10c>
 800a7ec:	3c01      	subs	r4, #1
 800a7ee:	f101 0814 	add.w	r8, r1, #20
 800a7f2:	00a3      	lsls	r3, r4, #2
 800a7f4:	f100 0514 	add.w	r5, r0, #20
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7fe:	9301      	str	r3, [sp, #4]
 800a800:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a804:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a808:	3301      	adds	r3, #1
 800a80a:	429a      	cmp	r2, r3
 800a80c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a810:	fbb2 f6f3 	udiv	r6, r2, r3
 800a814:	d32e      	bcc.n	800a874 <quorem+0x96>
 800a816:	f04f 0a00 	mov.w	sl, #0
 800a81a:	46c4      	mov	ip, r8
 800a81c:	46ae      	mov	lr, r5
 800a81e:	46d3      	mov	fp, sl
 800a820:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a824:	b298      	uxth	r0, r3
 800a826:	fb06 a000 	mla	r0, r6, r0, sl
 800a82a:	0c02      	lsrs	r2, r0, #16
 800a82c:	0c1b      	lsrs	r3, r3, #16
 800a82e:	fb06 2303 	mla	r3, r6, r3, r2
 800a832:	f8de 2000 	ldr.w	r2, [lr]
 800a836:	b280      	uxth	r0, r0
 800a838:	b292      	uxth	r2, r2
 800a83a:	1a12      	subs	r2, r2, r0
 800a83c:	445a      	add	r2, fp
 800a83e:	f8de 0000 	ldr.w	r0, [lr]
 800a842:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a846:	b29b      	uxth	r3, r3
 800a848:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a84c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a850:	b292      	uxth	r2, r2
 800a852:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a856:	45e1      	cmp	r9, ip
 800a858:	f84e 2b04 	str.w	r2, [lr], #4
 800a85c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a860:	d2de      	bcs.n	800a820 <quorem+0x42>
 800a862:	9b00      	ldr	r3, [sp, #0]
 800a864:	58eb      	ldr	r3, [r5, r3]
 800a866:	b92b      	cbnz	r3, 800a874 <quorem+0x96>
 800a868:	9b01      	ldr	r3, [sp, #4]
 800a86a:	3b04      	subs	r3, #4
 800a86c:	429d      	cmp	r5, r3
 800a86e:	461a      	mov	r2, r3
 800a870:	d32f      	bcc.n	800a8d2 <quorem+0xf4>
 800a872:	613c      	str	r4, [r7, #16]
 800a874:	4638      	mov	r0, r7
 800a876:	f001 fb33 	bl	800bee0 <__mcmp>
 800a87a:	2800      	cmp	r0, #0
 800a87c:	db25      	blt.n	800a8ca <quorem+0xec>
 800a87e:	4629      	mov	r1, r5
 800a880:	2000      	movs	r0, #0
 800a882:	f858 2b04 	ldr.w	r2, [r8], #4
 800a886:	f8d1 c000 	ldr.w	ip, [r1]
 800a88a:	fa1f fe82 	uxth.w	lr, r2
 800a88e:	fa1f f38c 	uxth.w	r3, ip
 800a892:	eba3 030e 	sub.w	r3, r3, lr
 800a896:	4403      	add	r3, r0
 800a898:	0c12      	lsrs	r2, r2, #16
 800a89a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a89e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8a8:	45c1      	cmp	r9, r8
 800a8aa:	f841 3b04 	str.w	r3, [r1], #4
 800a8ae:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a8b2:	d2e6      	bcs.n	800a882 <quorem+0xa4>
 800a8b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8bc:	b922      	cbnz	r2, 800a8c8 <quorem+0xea>
 800a8be:	3b04      	subs	r3, #4
 800a8c0:	429d      	cmp	r5, r3
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	d30b      	bcc.n	800a8de <quorem+0x100>
 800a8c6:	613c      	str	r4, [r7, #16]
 800a8c8:	3601      	adds	r6, #1
 800a8ca:	4630      	mov	r0, r6
 800a8cc:	b003      	add	sp, #12
 800a8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d2:	6812      	ldr	r2, [r2, #0]
 800a8d4:	3b04      	subs	r3, #4
 800a8d6:	2a00      	cmp	r2, #0
 800a8d8:	d1cb      	bne.n	800a872 <quorem+0x94>
 800a8da:	3c01      	subs	r4, #1
 800a8dc:	e7c6      	b.n	800a86c <quorem+0x8e>
 800a8de:	6812      	ldr	r2, [r2, #0]
 800a8e0:	3b04      	subs	r3, #4
 800a8e2:	2a00      	cmp	r2, #0
 800a8e4:	d1ef      	bne.n	800a8c6 <quorem+0xe8>
 800a8e6:	3c01      	subs	r4, #1
 800a8e8:	e7ea      	b.n	800a8c0 <quorem+0xe2>
 800a8ea:	2000      	movs	r0, #0
 800a8ec:	e7ee      	b.n	800a8cc <quorem+0xee>
	...

0800a8f0 <_dtoa_r>:
 800a8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f4:	69c7      	ldr	r7, [r0, #28]
 800a8f6:	b097      	sub	sp, #92	@ 0x5c
 800a8f8:	4614      	mov	r4, r2
 800a8fa:	461d      	mov	r5, r3
 800a8fc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a900:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800a902:	4683      	mov	fp, r0
 800a904:	b97f      	cbnz	r7, 800a926 <_dtoa_r+0x36>
 800a906:	2010      	movs	r0, #16
 800a908:	f000 ff12 	bl	800b730 <malloc>
 800a90c:	4602      	mov	r2, r0
 800a90e:	f8cb 001c 	str.w	r0, [fp, #28]
 800a912:	b920      	cbnz	r0, 800a91e <_dtoa_r+0x2e>
 800a914:	4ba8      	ldr	r3, [pc, #672]	@ (800abb8 <_dtoa_r+0x2c8>)
 800a916:	21ef      	movs	r1, #239	@ 0xef
 800a918:	48a8      	ldr	r0, [pc, #672]	@ (800abbc <_dtoa_r+0x2cc>)
 800a91a:	f001 fcc9 	bl	800c2b0 <__assert_func>
 800a91e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a922:	6007      	str	r7, [r0, #0]
 800a924:	60c7      	str	r7, [r0, #12]
 800a926:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a92a:	6819      	ldr	r1, [r3, #0]
 800a92c:	b159      	cbz	r1, 800a946 <_dtoa_r+0x56>
 800a92e:	685a      	ldr	r2, [r3, #4]
 800a930:	604a      	str	r2, [r1, #4]
 800a932:	2301      	movs	r3, #1
 800a934:	4093      	lsls	r3, r2
 800a936:	608b      	str	r3, [r1, #8]
 800a938:	4658      	mov	r0, fp
 800a93a:	f001 f897 	bl	800ba6c <_Bfree>
 800a93e:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a942:	2200      	movs	r2, #0
 800a944:	601a      	str	r2, [r3, #0]
 800a946:	1e2b      	subs	r3, r5, #0
 800a948:	bfb9      	ittee	lt
 800a94a:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a94e:	9303      	strlt	r3, [sp, #12]
 800a950:	2300      	movge	r3, #0
 800a952:	6033      	strge	r3, [r6, #0]
 800a954:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a958:	4b99      	ldr	r3, [pc, #612]	@ (800abc0 <_dtoa_r+0x2d0>)
 800a95a:	bfbc      	itt	lt
 800a95c:	2201      	movlt	r2, #1
 800a95e:	6032      	strlt	r2, [r6, #0]
 800a960:	ea33 0308 	bics.w	r3, r3, r8
 800a964:	d112      	bne.n	800a98c <_dtoa_r+0x9c>
 800a966:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a968:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a96c:	6013      	str	r3, [r2, #0]
 800a96e:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a972:	4323      	orrs	r3, r4
 800a974:	f000 8551 	beq.w	800b41a <_dtoa_r+0xb2a>
 800a978:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a97a:	f8df a248 	ldr.w	sl, [pc, #584]	@ 800abc4 <_dtoa_r+0x2d4>
 800a97e:	2b00      	cmp	r3, #0
 800a980:	f000 8553 	beq.w	800b42a <_dtoa_r+0xb3a>
 800a984:	f10a 0303 	add.w	r3, sl, #3
 800a988:	f000 bd4d 	b.w	800b426 <_dtoa_r+0xb36>
 800a98c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a990:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a994:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a998:	2200      	movs	r2, #0
 800a99a:	2300      	movs	r3, #0
 800a99c:	f7f6 f86c 	bl	8000a78 <__aeabi_dcmpeq>
 800a9a0:	4607      	mov	r7, r0
 800a9a2:	b158      	cbz	r0, 800a9bc <_dtoa_r+0xcc>
 800a9a4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	6013      	str	r3, [r2, #0]
 800a9aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a9ac:	b113      	cbz	r3, 800a9b4 <_dtoa_r+0xc4>
 800a9ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a9b0:	4b85      	ldr	r3, [pc, #532]	@ (800abc8 <_dtoa_r+0x2d8>)
 800a9b2:	6013      	str	r3, [r2, #0]
 800a9b4:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800abcc <_dtoa_r+0x2dc>
 800a9b8:	f000 bd37 	b.w	800b42a <_dtoa_r+0xb3a>
 800a9bc:	ab14      	add	r3, sp, #80	@ 0x50
 800a9be:	9301      	str	r3, [sp, #4]
 800a9c0:	ab15      	add	r3, sp, #84	@ 0x54
 800a9c2:	9300      	str	r3, [sp, #0]
 800a9c4:	4658      	mov	r0, fp
 800a9c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a9ca:	f001 fb37 	bl	800c03c <__d2b>
 800a9ce:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a9d2:	4681      	mov	r9, r0
 800a9d4:	2e00      	cmp	r6, #0
 800a9d6:	d076      	beq.n	800aac6 <_dtoa_r+0x1d6>
 800a9d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a9da:	9712      	str	r7, [sp, #72]	@ 0x48
 800a9dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a9e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a9ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	4b76      	ldr	r3, [pc, #472]	@ (800abd0 <_dtoa_r+0x2e0>)
 800a9f6:	f7f5 fc1f 	bl	8000238 <__aeabi_dsub>
 800a9fa:	a369      	add	r3, pc, #420	@ (adr r3, 800aba0 <_dtoa_r+0x2b0>)
 800a9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa00:	f7f5 fdd2 	bl	80005a8 <__aeabi_dmul>
 800aa04:	a368      	add	r3, pc, #416	@ (adr r3, 800aba8 <_dtoa_r+0x2b8>)
 800aa06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0a:	f7f5 fc17 	bl	800023c <__adddf3>
 800aa0e:	4604      	mov	r4, r0
 800aa10:	4630      	mov	r0, r6
 800aa12:	460d      	mov	r5, r1
 800aa14:	f7f5 fd5e 	bl	80004d4 <__aeabi_i2d>
 800aa18:	a365      	add	r3, pc, #404	@ (adr r3, 800abb0 <_dtoa_r+0x2c0>)
 800aa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1e:	f7f5 fdc3 	bl	80005a8 <__aeabi_dmul>
 800aa22:	4602      	mov	r2, r0
 800aa24:	460b      	mov	r3, r1
 800aa26:	4620      	mov	r0, r4
 800aa28:	4629      	mov	r1, r5
 800aa2a:	f7f5 fc07 	bl	800023c <__adddf3>
 800aa2e:	4604      	mov	r4, r0
 800aa30:	460d      	mov	r5, r1
 800aa32:	f7f6 f869 	bl	8000b08 <__aeabi_d2iz>
 800aa36:	2200      	movs	r2, #0
 800aa38:	4607      	mov	r7, r0
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	4629      	mov	r1, r5
 800aa40:	f7f6 f824 	bl	8000a8c <__aeabi_dcmplt>
 800aa44:	b140      	cbz	r0, 800aa58 <_dtoa_r+0x168>
 800aa46:	4638      	mov	r0, r7
 800aa48:	f7f5 fd44 	bl	80004d4 <__aeabi_i2d>
 800aa4c:	4622      	mov	r2, r4
 800aa4e:	462b      	mov	r3, r5
 800aa50:	f7f6 f812 	bl	8000a78 <__aeabi_dcmpeq>
 800aa54:	b900      	cbnz	r0, 800aa58 <_dtoa_r+0x168>
 800aa56:	3f01      	subs	r7, #1
 800aa58:	2f16      	cmp	r7, #22
 800aa5a:	d852      	bhi.n	800ab02 <_dtoa_r+0x212>
 800aa5c:	4b5d      	ldr	r3, [pc, #372]	@ (800abd4 <_dtoa_r+0x2e4>)
 800aa5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aa62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa6a:	f7f6 f80f 	bl	8000a8c <__aeabi_dcmplt>
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	d049      	beq.n	800ab06 <_dtoa_r+0x216>
 800aa72:	3f01      	subs	r7, #1
 800aa74:	2300      	movs	r3, #0
 800aa76:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aa78:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800aa7a:	1b9b      	subs	r3, r3, r6
 800aa7c:	1e5a      	subs	r2, r3, #1
 800aa7e:	bf44      	itt	mi
 800aa80:	f1c3 0801 	rsbmi	r8, r3, #1
 800aa84:	2300      	movmi	r3, #0
 800aa86:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa88:	bf54      	ite	pl
 800aa8a:	f04f 0800 	movpl.w	r8, #0
 800aa8e:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800aa90:	2f00      	cmp	r7, #0
 800aa92:	db3a      	blt.n	800ab0a <_dtoa_r+0x21a>
 800aa94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa96:	970e      	str	r7, [sp, #56]	@ 0x38
 800aa98:	443b      	add	r3, r7
 800aa9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800aaa0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aaa2:	2b09      	cmp	r3, #9
 800aaa4:	d865      	bhi.n	800ab72 <_dtoa_r+0x282>
 800aaa6:	2b05      	cmp	r3, #5
 800aaa8:	bfc4      	itt	gt
 800aaaa:	3b04      	subgt	r3, #4
 800aaac:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800aaae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aab0:	f1a3 0302 	sub.w	r3, r3, #2
 800aab4:	bfcc      	ite	gt
 800aab6:	2400      	movgt	r4, #0
 800aab8:	2401      	movle	r4, #1
 800aaba:	2b03      	cmp	r3, #3
 800aabc:	d864      	bhi.n	800ab88 <_dtoa_r+0x298>
 800aabe:	e8df f003 	tbb	[pc, r3]
 800aac2:	382b      	.short	0x382b
 800aac4:	5636      	.short	0x5636
 800aac6:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800aaca:	441e      	add	r6, r3
 800aacc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aad0:	2b20      	cmp	r3, #32
 800aad2:	bfc1      	itttt	gt
 800aad4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aad8:	fa08 f803 	lslgt.w	r8, r8, r3
 800aadc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800aae0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aae4:	bfd6      	itet	le
 800aae6:	f1c3 0320 	rsble	r3, r3, #32
 800aaea:	ea48 0003 	orrgt.w	r0, r8, r3
 800aaee:	fa04 f003 	lslle.w	r0, r4, r3
 800aaf2:	f7f5 fcdf 	bl	80004b4 <__aeabi_ui2d>
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aafc:	3e01      	subs	r6, #1
 800aafe:	9212      	str	r2, [sp, #72]	@ 0x48
 800ab00:	e776      	b.n	800a9f0 <_dtoa_r+0x100>
 800ab02:	2301      	movs	r3, #1
 800ab04:	e7b7      	b.n	800aa76 <_dtoa_r+0x186>
 800ab06:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ab08:	e7b6      	b.n	800aa78 <_dtoa_r+0x188>
 800ab0a:	427b      	negs	r3, r7
 800ab0c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab0e:	2300      	movs	r3, #0
 800ab10:	eba8 0807 	sub.w	r8, r8, r7
 800ab14:	930e      	str	r3, [sp, #56]	@ 0x38
 800ab16:	e7c3      	b.n	800aaa0 <_dtoa_r+0x1b0>
 800ab18:	2300      	movs	r3, #0
 800ab1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	dc35      	bgt.n	800ab8e <_dtoa_r+0x29e>
 800ab22:	2301      	movs	r3, #1
 800ab24:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800ab28:	461a      	mov	r2, r3
 800ab2a:	9221      	str	r2, [sp, #132]	@ 0x84
 800ab2c:	e00b      	b.n	800ab46 <_dtoa_r+0x256>
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e7f3      	b.n	800ab1a <_dtoa_r+0x22a>
 800ab32:	2300      	movs	r3, #0
 800ab34:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab38:	18fb      	adds	r3, r7, r3
 800ab3a:	9308      	str	r3, [sp, #32]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	9307      	str	r3, [sp, #28]
 800ab42:	bfb8      	it	lt
 800ab44:	2301      	movlt	r3, #1
 800ab46:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	2204      	movs	r2, #4
 800ab4e:	f102 0514 	add.w	r5, r2, #20
 800ab52:	429d      	cmp	r5, r3
 800ab54:	d91f      	bls.n	800ab96 <_dtoa_r+0x2a6>
 800ab56:	6041      	str	r1, [r0, #4]
 800ab58:	4658      	mov	r0, fp
 800ab5a:	f000 ff47 	bl	800b9ec <_Balloc>
 800ab5e:	4682      	mov	sl, r0
 800ab60:	2800      	cmp	r0, #0
 800ab62:	d13b      	bne.n	800abdc <_dtoa_r+0x2ec>
 800ab64:	4b1c      	ldr	r3, [pc, #112]	@ (800abd8 <_dtoa_r+0x2e8>)
 800ab66:	4602      	mov	r2, r0
 800ab68:	f240 11af 	movw	r1, #431	@ 0x1af
 800ab6c:	e6d4      	b.n	800a918 <_dtoa_r+0x28>
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e7e0      	b.n	800ab34 <_dtoa_r+0x244>
 800ab72:	2401      	movs	r4, #1
 800ab74:	2300      	movs	r3, #0
 800ab76:	9320      	str	r3, [sp, #128]	@ 0x80
 800ab78:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ab7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab7e:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800ab82:	2200      	movs	r2, #0
 800ab84:	2312      	movs	r3, #18
 800ab86:	e7d0      	b.n	800ab2a <_dtoa_r+0x23a>
 800ab88:	2301      	movs	r3, #1
 800ab8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab8c:	e7f5      	b.n	800ab7a <_dtoa_r+0x28a>
 800ab8e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab90:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800ab94:	e7d7      	b.n	800ab46 <_dtoa_r+0x256>
 800ab96:	3101      	adds	r1, #1
 800ab98:	0052      	lsls	r2, r2, #1
 800ab9a:	e7d8      	b.n	800ab4e <_dtoa_r+0x25e>
 800ab9c:	f3af 8000 	nop.w
 800aba0:	636f4361 	.word	0x636f4361
 800aba4:	3fd287a7 	.word	0x3fd287a7
 800aba8:	8b60c8b3 	.word	0x8b60c8b3
 800abac:	3fc68a28 	.word	0x3fc68a28
 800abb0:	509f79fb 	.word	0x509f79fb
 800abb4:	3fd34413 	.word	0x3fd34413
 800abb8:	0800ccd9 	.word	0x0800ccd9
 800abbc:	0800ccf0 	.word	0x0800ccf0
 800abc0:	7ff00000 	.word	0x7ff00000
 800abc4:	0800ccd5 	.word	0x0800ccd5
 800abc8:	0800cca9 	.word	0x0800cca9
 800abcc:	0800cca8 	.word	0x0800cca8
 800abd0:	3ff80000 	.word	0x3ff80000
 800abd4:	0800cdf8 	.word	0x0800cdf8
 800abd8:	0800cd48 	.word	0x0800cd48
 800abdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800abe0:	6018      	str	r0, [r3, #0]
 800abe2:	9b07      	ldr	r3, [sp, #28]
 800abe4:	2b0e      	cmp	r3, #14
 800abe6:	f200 80a4 	bhi.w	800ad32 <_dtoa_r+0x442>
 800abea:	2c00      	cmp	r4, #0
 800abec:	f000 80a1 	beq.w	800ad32 <_dtoa_r+0x442>
 800abf0:	2f00      	cmp	r7, #0
 800abf2:	dd33      	ble.n	800ac5c <_dtoa_r+0x36c>
 800abf4:	4b86      	ldr	r3, [pc, #536]	@ (800ae10 <_dtoa_r+0x520>)
 800abf6:	f007 020f 	and.w	r2, r7, #15
 800abfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac02:	05f8      	lsls	r0, r7, #23
 800ac04:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ac08:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ac0c:	d516      	bpl.n	800ac3c <_dtoa_r+0x34c>
 800ac0e:	4b81      	ldr	r3, [pc, #516]	@ (800ae14 <_dtoa_r+0x524>)
 800ac10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac18:	f7f5 fdf0 	bl	80007fc <__aeabi_ddiv>
 800ac1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac20:	f004 040f 	and.w	r4, r4, #15
 800ac24:	2603      	movs	r6, #3
 800ac26:	4d7b      	ldr	r5, [pc, #492]	@ (800ae14 <_dtoa_r+0x524>)
 800ac28:	b954      	cbnz	r4, 800ac40 <_dtoa_r+0x350>
 800ac2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac32:	f7f5 fde3 	bl	80007fc <__aeabi_ddiv>
 800ac36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac3a:	e028      	b.n	800ac8e <_dtoa_r+0x39e>
 800ac3c:	2602      	movs	r6, #2
 800ac3e:	e7f2      	b.n	800ac26 <_dtoa_r+0x336>
 800ac40:	07e1      	lsls	r1, r4, #31
 800ac42:	d508      	bpl.n	800ac56 <_dtoa_r+0x366>
 800ac44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac48:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac4c:	f7f5 fcac 	bl	80005a8 <__aeabi_dmul>
 800ac50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac54:	3601      	adds	r6, #1
 800ac56:	1064      	asrs	r4, r4, #1
 800ac58:	3508      	adds	r5, #8
 800ac5a:	e7e5      	b.n	800ac28 <_dtoa_r+0x338>
 800ac5c:	f000 80d2 	beq.w	800ae04 <_dtoa_r+0x514>
 800ac60:	427c      	negs	r4, r7
 800ac62:	4b6b      	ldr	r3, [pc, #428]	@ (800ae10 <_dtoa_r+0x520>)
 800ac64:	4d6b      	ldr	r5, [pc, #428]	@ (800ae14 <_dtoa_r+0x524>)
 800ac66:	f004 020f 	and.w	r2, r4, #15
 800ac6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac76:	f7f5 fc97 	bl	80005a8 <__aeabi_dmul>
 800ac7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac7e:	1124      	asrs	r4, r4, #4
 800ac80:	2300      	movs	r3, #0
 800ac82:	2602      	movs	r6, #2
 800ac84:	2c00      	cmp	r4, #0
 800ac86:	f040 80b2 	bne.w	800adee <_dtoa_r+0x4fe>
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d1d3      	bne.n	800ac36 <_dtoa_r+0x346>
 800ac8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac90:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f000 80b7 	beq.w	800ae08 <_dtoa_r+0x518>
 800ac9a:	4b5f      	ldr	r3, [pc, #380]	@ (800ae18 <_dtoa_r+0x528>)
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	4620      	mov	r0, r4
 800aca0:	4629      	mov	r1, r5
 800aca2:	f7f5 fef3 	bl	8000a8c <__aeabi_dcmplt>
 800aca6:	2800      	cmp	r0, #0
 800aca8:	f000 80ae 	beq.w	800ae08 <_dtoa_r+0x518>
 800acac:	9b07      	ldr	r3, [sp, #28]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f000 80aa 	beq.w	800ae08 <_dtoa_r+0x518>
 800acb4:	9b08      	ldr	r3, [sp, #32]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	dd37      	ble.n	800ad2a <_dtoa_r+0x43a>
 800acba:	1e7b      	subs	r3, r7, #1
 800acbc:	9304      	str	r3, [sp, #16]
 800acbe:	4620      	mov	r0, r4
 800acc0:	4b56      	ldr	r3, [pc, #344]	@ (800ae1c <_dtoa_r+0x52c>)
 800acc2:	2200      	movs	r2, #0
 800acc4:	4629      	mov	r1, r5
 800acc6:	f7f5 fc6f 	bl	80005a8 <__aeabi_dmul>
 800acca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acce:	9c08      	ldr	r4, [sp, #32]
 800acd0:	3601      	adds	r6, #1
 800acd2:	4630      	mov	r0, r6
 800acd4:	f7f5 fbfe 	bl	80004d4 <__aeabi_i2d>
 800acd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800acdc:	f7f5 fc64 	bl	80005a8 <__aeabi_dmul>
 800ace0:	4b4f      	ldr	r3, [pc, #316]	@ (800ae20 <_dtoa_r+0x530>)
 800ace2:	2200      	movs	r2, #0
 800ace4:	f7f5 faaa 	bl	800023c <__adddf3>
 800ace8:	4605      	mov	r5, r0
 800acea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800acee:	2c00      	cmp	r4, #0
 800acf0:	f040 809a 	bne.w	800ae28 <_dtoa_r+0x538>
 800acf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acf8:	4b4a      	ldr	r3, [pc, #296]	@ (800ae24 <_dtoa_r+0x534>)
 800acfa:	2200      	movs	r2, #0
 800acfc:	f7f5 fa9c 	bl	8000238 <__aeabi_dsub>
 800ad00:	4602      	mov	r2, r0
 800ad02:	460b      	mov	r3, r1
 800ad04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad08:	462a      	mov	r2, r5
 800ad0a:	4633      	mov	r3, r6
 800ad0c:	f7f5 fedc 	bl	8000ac8 <__aeabi_dcmpgt>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	f040 828e 	bne.w	800b232 <_dtoa_r+0x942>
 800ad16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad1a:	462a      	mov	r2, r5
 800ad1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ad20:	f7f5 feb4 	bl	8000a8c <__aeabi_dcmplt>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	f040 8127 	bne.w	800af78 <_dtoa_r+0x688>
 800ad2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ad2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ad32:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f2c0 8163 	blt.w	800b000 <_dtoa_r+0x710>
 800ad3a:	2f0e      	cmp	r7, #14
 800ad3c:	f300 8160 	bgt.w	800b000 <_dtoa_r+0x710>
 800ad40:	4b33      	ldr	r3, [pc, #204]	@ (800ae10 <_dtoa_r+0x520>)
 800ad42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ad46:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad4a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ad4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	da03      	bge.n	800ad5c <_dtoa_r+0x46c>
 800ad54:	9b07      	ldr	r3, [sp, #28]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	f340 8100 	ble.w	800af5c <_dtoa_r+0x66c>
 800ad5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ad60:	4656      	mov	r6, sl
 800ad62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad66:	4620      	mov	r0, r4
 800ad68:	4629      	mov	r1, r5
 800ad6a:	f7f5 fd47 	bl	80007fc <__aeabi_ddiv>
 800ad6e:	f7f5 fecb 	bl	8000b08 <__aeabi_d2iz>
 800ad72:	4680      	mov	r8, r0
 800ad74:	f7f5 fbae 	bl	80004d4 <__aeabi_i2d>
 800ad78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad7c:	f7f5 fc14 	bl	80005a8 <__aeabi_dmul>
 800ad80:	4602      	mov	r2, r0
 800ad82:	460b      	mov	r3, r1
 800ad84:	4620      	mov	r0, r4
 800ad86:	4629      	mov	r1, r5
 800ad88:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ad8c:	f7f5 fa54 	bl	8000238 <__aeabi_dsub>
 800ad90:	f806 4b01 	strb.w	r4, [r6], #1
 800ad94:	9d07      	ldr	r5, [sp, #28]
 800ad96:	eba6 040a 	sub.w	r4, r6, sl
 800ad9a:	42a5      	cmp	r5, r4
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	460b      	mov	r3, r1
 800ada0:	f040 8116 	bne.w	800afd0 <_dtoa_r+0x6e0>
 800ada4:	f7f5 fa4a 	bl	800023c <__adddf3>
 800ada8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adac:	4604      	mov	r4, r0
 800adae:	460d      	mov	r5, r1
 800adb0:	f7f5 fe8a 	bl	8000ac8 <__aeabi_dcmpgt>
 800adb4:	2800      	cmp	r0, #0
 800adb6:	f040 80f8 	bne.w	800afaa <_dtoa_r+0x6ba>
 800adba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adbe:	4620      	mov	r0, r4
 800adc0:	4629      	mov	r1, r5
 800adc2:	f7f5 fe59 	bl	8000a78 <__aeabi_dcmpeq>
 800adc6:	b118      	cbz	r0, 800add0 <_dtoa_r+0x4e0>
 800adc8:	f018 0f01 	tst.w	r8, #1
 800adcc:	f040 80ed 	bne.w	800afaa <_dtoa_r+0x6ba>
 800add0:	4649      	mov	r1, r9
 800add2:	4658      	mov	r0, fp
 800add4:	f000 fe4a 	bl	800ba6c <_Bfree>
 800add8:	2300      	movs	r3, #0
 800adda:	7033      	strb	r3, [r6, #0]
 800addc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800adde:	3701      	adds	r7, #1
 800ade0:	601f      	str	r7, [r3, #0]
 800ade2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f000 8320 	beq.w	800b42a <_dtoa_r+0xb3a>
 800adea:	601e      	str	r6, [r3, #0]
 800adec:	e31d      	b.n	800b42a <_dtoa_r+0xb3a>
 800adee:	07e2      	lsls	r2, r4, #31
 800adf0:	d505      	bpl.n	800adfe <_dtoa_r+0x50e>
 800adf2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800adf6:	f7f5 fbd7 	bl	80005a8 <__aeabi_dmul>
 800adfa:	3601      	adds	r6, #1
 800adfc:	2301      	movs	r3, #1
 800adfe:	1064      	asrs	r4, r4, #1
 800ae00:	3508      	adds	r5, #8
 800ae02:	e73f      	b.n	800ac84 <_dtoa_r+0x394>
 800ae04:	2602      	movs	r6, #2
 800ae06:	e742      	b.n	800ac8e <_dtoa_r+0x39e>
 800ae08:	9c07      	ldr	r4, [sp, #28]
 800ae0a:	9704      	str	r7, [sp, #16]
 800ae0c:	e761      	b.n	800acd2 <_dtoa_r+0x3e2>
 800ae0e:	bf00      	nop
 800ae10:	0800cdf8 	.word	0x0800cdf8
 800ae14:	0800cdd0 	.word	0x0800cdd0
 800ae18:	3ff00000 	.word	0x3ff00000
 800ae1c:	40240000 	.word	0x40240000
 800ae20:	401c0000 	.word	0x401c0000
 800ae24:	40140000 	.word	0x40140000
 800ae28:	4b70      	ldr	r3, [pc, #448]	@ (800afec <_dtoa_r+0x6fc>)
 800ae2a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ae2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ae34:	4454      	add	r4, sl
 800ae36:	2900      	cmp	r1, #0
 800ae38:	d045      	beq.n	800aec6 <_dtoa_r+0x5d6>
 800ae3a:	496d      	ldr	r1, [pc, #436]	@ (800aff0 <_dtoa_r+0x700>)
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	f7f5 fcdd 	bl	80007fc <__aeabi_ddiv>
 800ae42:	4633      	mov	r3, r6
 800ae44:	462a      	mov	r2, r5
 800ae46:	f7f5 f9f7 	bl	8000238 <__aeabi_dsub>
 800ae4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae4e:	4656      	mov	r6, sl
 800ae50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae54:	f7f5 fe58 	bl	8000b08 <__aeabi_d2iz>
 800ae58:	4605      	mov	r5, r0
 800ae5a:	f7f5 fb3b 	bl	80004d4 <__aeabi_i2d>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	460b      	mov	r3, r1
 800ae62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae66:	f7f5 f9e7 	bl	8000238 <__aeabi_dsub>
 800ae6a:	3530      	adds	r5, #48	@ 0x30
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	460b      	mov	r3, r1
 800ae70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae74:	f806 5b01 	strb.w	r5, [r6], #1
 800ae78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae7c:	f7f5 fe06 	bl	8000a8c <__aeabi_dcmplt>
 800ae80:	2800      	cmp	r0, #0
 800ae82:	d163      	bne.n	800af4c <_dtoa_r+0x65c>
 800ae84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae88:	495a      	ldr	r1, [pc, #360]	@ (800aff4 <_dtoa_r+0x704>)
 800ae8a:	2000      	movs	r0, #0
 800ae8c:	f7f5 f9d4 	bl	8000238 <__aeabi_dsub>
 800ae90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae94:	f7f5 fdfa 	bl	8000a8c <__aeabi_dcmplt>
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	f040 8087 	bne.w	800afac <_dtoa_r+0x6bc>
 800ae9e:	42a6      	cmp	r6, r4
 800aea0:	f43f af43 	beq.w	800ad2a <_dtoa_r+0x43a>
 800aea4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aea8:	4b53      	ldr	r3, [pc, #332]	@ (800aff8 <_dtoa_r+0x708>)
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f7f5 fb7c 	bl	80005a8 <__aeabi_dmul>
 800aeb0:	4b51      	ldr	r3, [pc, #324]	@ (800aff8 <_dtoa_r+0x708>)
 800aeb2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aebc:	f7f5 fb74 	bl	80005a8 <__aeabi_dmul>
 800aec0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aec4:	e7c4      	b.n	800ae50 <_dtoa_r+0x560>
 800aec6:	4631      	mov	r1, r6
 800aec8:	4628      	mov	r0, r5
 800aeca:	f7f5 fb6d 	bl	80005a8 <__aeabi_dmul>
 800aece:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aed2:	9413      	str	r4, [sp, #76]	@ 0x4c
 800aed4:	4656      	mov	r6, sl
 800aed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeda:	f7f5 fe15 	bl	8000b08 <__aeabi_d2iz>
 800aede:	4605      	mov	r5, r0
 800aee0:	f7f5 faf8 	bl	80004d4 <__aeabi_i2d>
 800aee4:	4602      	mov	r2, r0
 800aee6:	460b      	mov	r3, r1
 800aee8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeec:	f7f5 f9a4 	bl	8000238 <__aeabi_dsub>
 800aef0:	3530      	adds	r5, #48	@ 0x30
 800aef2:	f806 5b01 	strb.w	r5, [r6], #1
 800aef6:	4602      	mov	r2, r0
 800aef8:	460b      	mov	r3, r1
 800aefa:	42a6      	cmp	r6, r4
 800aefc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af00:	f04f 0200 	mov.w	r2, #0
 800af04:	d124      	bne.n	800af50 <_dtoa_r+0x660>
 800af06:	4b3a      	ldr	r3, [pc, #232]	@ (800aff0 <_dtoa_r+0x700>)
 800af08:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800af0c:	f7f5 f996 	bl	800023c <__adddf3>
 800af10:	4602      	mov	r2, r0
 800af12:	460b      	mov	r3, r1
 800af14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af18:	f7f5 fdd6 	bl	8000ac8 <__aeabi_dcmpgt>
 800af1c:	2800      	cmp	r0, #0
 800af1e:	d145      	bne.n	800afac <_dtoa_r+0x6bc>
 800af20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af24:	4932      	ldr	r1, [pc, #200]	@ (800aff0 <_dtoa_r+0x700>)
 800af26:	2000      	movs	r0, #0
 800af28:	f7f5 f986 	bl	8000238 <__aeabi_dsub>
 800af2c:	4602      	mov	r2, r0
 800af2e:	460b      	mov	r3, r1
 800af30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af34:	f7f5 fdaa 	bl	8000a8c <__aeabi_dcmplt>
 800af38:	2800      	cmp	r0, #0
 800af3a:	f43f aef6 	beq.w	800ad2a <_dtoa_r+0x43a>
 800af3e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800af40:	1e73      	subs	r3, r6, #1
 800af42:	9313      	str	r3, [sp, #76]	@ 0x4c
 800af44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800af48:	2b30      	cmp	r3, #48	@ 0x30
 800af4a:	d0f8      	beq.n	800af3e <_dtoa_r+0x64e>
 800af4c:	9f04      	ldr	r7, [sp, #16]
 800af4e:	e73f      	b.n	800add0 <_dtoa_r+0x4e0>
 800af50:	4b29      	ldr	r3, [pc, #164]	@ (800aff8 <_dtoa_r+0x708>)
 800af52:	f7f5 fb29 	bl	80005a8 <__aeabi_dmul>
 800af56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af5a:	e7bc      	b.n	800aed6 <_dtoa_r+0x5e6>
 800af5c:	d10c      	bne.n	800af78 <_dtoa_r+0x688>
 800af5e:	4b27      	ldr	r3, [pc, #156]	@ (800affc <_dtoa_r+0x70c>)
 800af60:	2200      	movs	r2, #0
 800af62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af66:	f7f5 fb1f 	bl	80005a8 <__aeabi_dmul>
 800af6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af6e:	f7f5 fda1 	bl	8000ab4 <__aeabi_dcmpge>
 800af72:	2800      	cmp	r0, #0
 800af74:	f000 815b 	beq.w	800b22e <_dtoa_r+0x93e>
 800af78:	2400      	movs	r4, #0
 800af7a:	4625      	mov	r5, r4
 800af7c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800af7e:	43db      	mvns	r3, r3
 800af80:	9304      	str	r3, [sp, #16]
 800af82:	4656      	mov	r6, sl
 800af84:	2700      	movs	r7, #0
 800af86:	4621      	mov	r1, r4
 800af88:	4658      	mov	r0, fp
 800af8a:	f000 fd6f 	bl	800ba6c <_Bfree>
 800af8e:	2d00      	cmp	r5, #0
 800af90:	d0dc      	beq.n	800af4c <_dtoa_r+0x65c>
 800af92:	b12f      	cbz	r7, 800afa0 <_dtoa_r+0x6b0>
 800af94:	42af      	cmp	r7, r5
 800af96:	d003      	beq.n	800afa0 <_dtoa_r+0x6b0>
 800af98:	4639      	mov	r1, r7
 800af9a:	4658      	mov	r0, fp
 800af9c:	f000 fd66 	bl	800ba6c <_Bfree>
 800afa0:	4629      	mov	r1, r5
 800afa2:	4658      	mov	r0, fp
 800afa4:	f000 fd62 	bl	800ba6c <_Bfree>
 800afa8:	e7d0      	b.n	800af4c <_dtoa_r+0x65c>
 800afaa:	9704      	str	r7, [sp, #16]
 800afac:	4633      	mov	r3, r6
 800afae:	461e      	mov	r6, r3
 800afb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afb4:	2a39      	cmp	r2, #57	@ 0x39
 800afb6:	d107      	bne.n	800afc8 <_dtoa_r+0x6d8>
 800afb8:	459a      	cmp	sl, r3
 800afba:	d1f8      	bne.n	800afae <_dtoa_r+0x6be>
 800afbc:	9a04      	ldr	r2, [sp, #16]
 800afbe:	3201      	adds	r2, #1
 800afc0:	9204      	str	r2, [sp, #16]
 800afc2:	2230      	movs	r2, #48	@ 0x30
 800afc4:	f88a 2000 	strb.w	r2, [sl]
 800afc8:	781a      	ldrb	r2, [r3, #0]
 800afca:	3201      	adds	r2, #1
 800afcc:	701a      	strb	r2, [r3, #0]
 800afce:	e7bd      	b.n	800af4c <_dtoa_r+0x65c>
 800afd0:	4b09      	ldr	r3, [pc, #36]	@ (800aff8 <_dtoa_r+0x708>)
 800afd2:	2200      	movs	r2, #0
 800afd4:	f7f5 fae8 	bl	80005a8 <__aeabi_dmul>
 800afd8:	2200      	movs	r2, #0
 800afda:	2300      	movs	r3, #0
 800afdc:	4604      	mov	r4, r0
 800afde:	460d      	mov	r5, r1
 800afe0:	f7f5 fd4a 	bl	8000a78 <__aeabi_dcmpeq>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	f43f aebc 	beq.w	800ad62 <_dtoa_r+0x472>
 800afea:	e6f1      	b.n	800add0 <_dtoa_r+0x4e0>
 800afec:	0800cdf8 	.word	0x0800cdf8
 800aff0:	3fe00000 	.word	0x3fe00000
 800aff4:	3ff00000 	.word	0x3ff00000
 800aff8:	40240000 	.word	0x40240000
 800affc:	40140000 	.word	0x40140000
 800b000:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b002:	2a00      	cmp	r2, #0
 800b004:	f000 80db 	beq.w	800b1be <_dtoa_r+0x8ce>
 800b008:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b00a:	2a01      	cmp	r2, #1
 800b00c:	f300 80bf 	bgt.w	800b18e <_dtoa_r+0x89e>
 800b010:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b012:	2a00      	cmp	r2, #0
 800b014:	f000 80b7 	beq.w	800b186 <_dtoa_r+0x896>
 800b018:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b01c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b01e:	4646      	mov	r6, r8
 800b020:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b022:	2101      	movs	r1, #1
 800b024:	441a      	add	r2, r3
 800b026:	4658      	mov	r0, fp
 800b028:	4498      	add	r8, r3
 800b02a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b02c:	f000 fdd2 	bl	800bbd4 <__i2b>
 800b030:	4605      	mov	r5, r0
 800b032:	b15e      	cbz	r6, 800b04c <_dtoa_r+0x75c>
 800b034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b036:	2b00      	cmp	r3, #0
 800b038:	dd08      	ble.n	800b04c <_dtoa_r+0x75c>
 800b03a:	42b3      	cmp	r3, r6
 800b03c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b03e:	bfa8      	it	ge
 800b040:	4633      	movge	r3, r6
 800b042:	eba8 0803 	sub.w	r8, r8, r3
 800b046:	1af6      	subs	r6, r6, r3
 800b048:	1ad3      	subs	r3, r2, r3
 800b04a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b04c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b04e:	b1f3      	cbz	r3, 800b08e <_dtoa_r+0x79e>
 800b050:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b052:	2b00      	cmp	r3, #0
 800b054:	f000 80b7 	beq.w	800b1c6 <_dtoa_r+0x8d6>
 800b058:	b18c      	cbz	r4, 800b07e <_dtoa_r+0x78e>
 800b05a:	4629      	mov	r1, r5
 800b05c:	4622      	mov	r2, r4
 800b05e:	4658      	mov	r0, fp
 800b060:	f000 fe78 	bl	800bd54 <__pow5mult>
 800b064:	464a      	mov	r2, r9
 800b066:	4601      	mov	r1, r0
 800b068:	4605      	mov	r5, r0
 800b06a:	4658      	mov	r0, fp
 800b06c:	f000 fdc8 	bl	800bc00 <__multiply>
 800b070:	4649      	mov	r1, r9
 800b072:	9004      	str	r0, [sp, #16]
 800b074:	4658      	mov	r0, fp
 800b076:	f000 fcf9 	bl	800ba6c <_Bfree>
 800b07a:	9b04      	ldr	r3, [sp, #16]
 800b07c:	4699      	mov	r9, r3
 800b07e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b080:	1b1a      	subs	r2, r3, r4
 800b082:	d004      	beq.n	800b08e <_dtoa_r+0x79e>
 800b084:	4649      	mov	r1, r9
 800b086:	4658      	mov	r0, fp
 800b088:	f000 fe64 	bl	800bd54 <__pow5mult>
 800b08c:	4681      	mov	r9, r0
 800b08e:	2101      	movs	r1, #1
 800b090:	4658      	mov	r0, fp
 800b092:	f000 fd9f 	bl	800bbd4 <__i2b>
 800b096:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b098:	4604      	mov	r4, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	f000 81c9 	beq.w	800b432 <_dtoa_r+0xb42>
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	4601      	mov	r1, r0
 800b0a4:	4658      	mov	r0, fp
 800b0a6:	f000 fe55 	bl	800bd54 <__pow5mult>
 800b0aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	4604      	mov	r4, r0
 800b0b0:	f300 808f 	bgt.w	800b1d2 <_dtoa_r+0x8e2>
 800b0b4:	9b02      	ldr	r3, [sp, #8]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	f040 8087 	bne.w	800b1ca <_dtoa_r+0x8da>
 800b0bc:	9b03      	ldr	r3, [sp, #12]
 800b0be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	f040 8083 	bne.w	800b1ce <_dtoa_r+0x8de>
 800b0c8:	9b03      	ldr	r3, [sp, #12]
 800b0ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b0ce:	0d1b      	lsrs	r3, r3, #20
 800b0d0:	051b      	lsls	r3, r3, #20
 800b0d2:	b12b      	cbz	r3, 800b0e0 <_dtoa_r+0x7f0>
 800b0d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0da:	f108 0801 	add.w	r8, r8, #1
 800b0de:	2301      	movs	r3, #1
 800b0e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	f000 81aa 	beq.w	800b43e <_dtoa_r+0xb4e>
 800b0ea:	6923      	ldr	r3, [r4, #16]
 800b0ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b0f0:	6918      	ldr	r0, [r3, #16]
 800b0f2:	f000 fd23 	bl	800bb3c <__hi0bits>
 800b0f6:	f1c0 0020 	rsb	r0, r0, #32
 800b0fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0fc:	4418      	add	r0, r3
 800b0fe:	f010 001f 	ands.w	r0, r0, #31
 800b102:	d071      	beq.n	800b1e8 <_dtoa_r+0x8f8>
 800b104:	f1c0 0320 	rsb	r3, r0, #32
 800b108:	2b04      	cmp	r3, #4
 800b10a:	dd65      	ble.n	800b1d8 <_dtoa_r+0x8e8>
 800b10c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b10e:	f1c0 001c 	rsb	r0, r0, #28
 800b112:	4403      	add	r3, r0
 800b114:	4480      	add	r8, r0
 800b116:	4406      	add	r6, r0
 800b118:	9309      	str	r3, [sp, #36]	@ 0x24
 800b11a:	f1b8 0f00 	cmp.w	r8, #0
 800b11e:	dd05      	ble.n	800b12c <_dtoa_r+0x83c>
 800b120:	4649      	mov	r1, r9
 800b122:	4642      	mov	r2, r8
 800b124:	4658      	mov	r0, fp
 800b126:	f000 fe6f 	bl	800be08 <__lshift>
 800b12a:	4681      	mov	r9, r0
 800b12c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b12e:	2b00      	cmp	r3, #0
 800b130:	dd05      	ble.n	800b13e <_dtoa_r+0x84e>
 800b132:	4621      	mov	r1, r4
 800b134:	461a      	mov	r2, r3
 800b136:	4658      	mov	r0, fp
 800b138:	f000 fe66 	bl	800be08 <__lshift>
 800b13c:	4604      	mov	r4, r0
 800b13e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b140:	2b00      	cmp	r3, #0
 800b142:	d053      	beq.n	800b1ec <_dtoa_r+0x8fc>
 800b144:	4621      	mov	r1, r4
 800b146:	4648      	mov	r0, r9
 800b148:	f000 feca 	bl	800bee0 <__mcmp>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	da4d      	bge.n	800b1ec <_dtoa_r+0x8fc>
 800b150:	1e7b      	subs	r3, r7, #1
 800b152:	9304      	str	r3, [sp, #16]
 800b154:	4649      	mov	r1, r9
 800b156:	2300      	movs	r3, #0
 800b158:	220a      	movs	r2, #10
 800b15a:	4658      	mov	r0, fp
 800b15c:	f000 fca8 	bl	800bab0 <__multadd>
 800b160:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b162:	4681      	mov	r9, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	f000 816c 	beq.w	800b442 <_dtoa_r+0xb52>
 800b16a:	2300      	movs	r3, #0
 800b16c:	4629      	mov	r1, r5
 800b16e:	220a      	movs	r2, #10
 800b170:	4658      	mov	r0, fp
 800b172:	f000 fc9d 	bl	800bab0 <__multadd>
 800b176:	9b08      	ldr	r3, [sp, #32]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	4605      	mov	r5, r0
 800b17c:	dc61      	bgt.n	800b242 <_dtoa_r+0x952>
 800b17e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b180:	2b02      	cmp	r3, #2
 800b182:	dc3b      	bgt.n	800b1fc <_dtoa_r+0x90c>
 800b184:	e05d      	b.n	800b242 <_dtoa_r+0x952>
 800b186:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b188:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b18c:	e746      	b.n	800b01c <_dtoa_r+0x72c>
 800b18e:	9b07      	ldr	r3, [sp, #28]
 800b190:	1e5c      	subs	r4, r3, #1
 800b192:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b194:	42a3      	cmp	r3, r4
 800b196:	bfbf      	itttt	lt
 800b198:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b19a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800b19c:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b19e:	1ae3      	sublt	r3, r4, r3
 800b1a0:	bfb4      	ite	lt
 800b1a2:	18d2      	addlt	r2, r2, r3
 800b1a4:	1b1c      	subge	r4, r3, r4
 800b1a6:	9b07      	ldr	r3, [sp, #28]
 800b1a8:	bfbc      	itt	lt
 800b1aa:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800b1ac:	2400      	movlt	r4, #0
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	bfb5      	itete	lt
 800b1b2:	eba8 0603 	sublt.w	r6, r8, r3
 800b1b6:	9b07      	ldrge	r3, [sp, #28]
 800b1b8:	2300      	movlt	r3, #0
 800b1ba:	4646      	movge	r6, r8
 800b1bc:	e730      	b.n	800b020 <_dtoa_r+0x730>
 800b1be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b1c0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b1c2:	4646      	mov	r6, r8
 800b1c4:	e735      	b.n	800b032 <_dtoa_r+0x742>
 800b1c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b1c8:	e75c      	b.n	800b084 <_dtoa_r+0x794>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	e788      	b.n	800b0e0 <_dtoa_r+0x7f0>
 800b1ce:	9b02      	ldr	r3, [sp, #8]
 800b1d0:	e786      	b.n	800b0e0 <_dtoa_r+0x7f0>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1d6:	e788      	b.n	800b0ea <_dtoa_r+0x7fa>
 800b1d8:	d09f      	beq.n	800b11a <_dtoa_r+0x82a>
 800b1da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1dc:	331c      	adds	r3, #28
 800b1de:	441a      	add	r2, r3
 800b1e0:	4498      	add	r8, r3
 800b1e2:	441e      	add	r6, r3
 800b1e4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1e6:	e798      	b.n	800b11a <_dtoa_r+0x82a>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	e7f6      	b.n	800b1da <_dtoa_r+0x8ea>
 800b1ec:	9b07      	ldr	r3, [sp, #28]
 800b1ee:	9704      	str	r7, [sp, #16]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	dc20      	bgt.n	800b236 <_dtoa_r+0x946>
 800b1f4:	9308      	str	r3, [sp, #32]
 800b1f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	dd1e      	ble.n	800b23a <_dtoa_r+0x94a>
 800b1fc:	9b08      	ldr	r3, [sp, #32]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	f47f aebc 	bne.w	800af7c <_dtoa_r+0x68c>
 800b204:	4621      	mov	r1, r4
 800b206:	2205      	movs	r2, #5
 800b208:	4658      	mov	r0, fp
 800b20a:	f000 fc51 	bl	800bab0 <__multadd>
 800b20e:	4601      	mov	r1, r0
 800b210:	4604      	mov	r4, r0
 800b212:	4648      	mov	r0, r9
 800b214:	f000 fe64 	bl	800bee0 <__mcmp>
 800b218:	2800      	cmp	r0, #0
 800b21a:	f77f aeaf 	ble.w	800af7c <_dtoa_r+0x68c>
 800b21e:	4656      	mov	r6, sl
 800b220:	2331      	movs	r3, #49	@ 0x31
 800b222:	f806 3b01 	strb.w	r3, [r6], #1
 800b226:	9b04      	ldr	r3, [sp, #16]
 800b228:	3301      	adds	r3, #1
 800b22a:	9304      	str	r3, [sp, #16]
 800b22c:	e6aa      	b.n	800af84 <_dtoa_r+0x694>
 800b22e:	9c07      	ldr	r4, [sp, #28]
 800b230:	9704      	str	r7, [sp, #16]
 800b232:	4625      	mov	r5, r4
 800b234:	e7f3      	b.n	800b21e <_dtoa_r+0x92e>
 800b236:	9b07      	ldr	r3, [sp, #28]
 800b238:	9308      	str	r3, [sp, #32]
 800b23a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	f000 8104 	beq.w	800b44a <_dtoa_r+0xb5a>
 800b242:	2e00      	cmp	r6, #0
 800b244:	dd05      	ble.n	800b252 <_dtoa_r+0x962>
 800b246:	4629      	mov	r1, r5
 800b248:	4632      	mov	r2, r6
 800b24a:	4658      	mov	r0, fp
 800b24c:	f000 fddc 	bl	800be08 <__lshift>
 800b250:	4605      	mov	r5, r0
 800b252:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b254:	2b00      	cmp	r3, #0
 800b256:	d05a      	beq.n	800b30e <_dtoa_r+0xa1e>
 800b258:	6869      	ldr	r1, [r5, #4]
 800b25a:	4658      	mov	r0, fp
 800b25c:	f000 fbc6 	bl	800b9ec <_Balloc>
 800b260:	4606      	mov	r6, r0
 800b262:	b928      	cbnz	r0, 800b270 <_dtoa_r+0x980>
 800b264:	4b84      	ldr	r3, [pc, #528]	@ (800b478 <_dtoa_r+0xb88>)
 800b266:	4602      	mov	r2, r0
 800b268:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b26c:	f7ff bb54 	b.w	800a918 <_dtoa_r+0x28>
 800b270:	692a      	ldr	r2, [r5, #16]
 800b272:	3202      	adds	r2, #2
 800b274:	0092      	lsls	r2, r2, #2
 800b276:	f105 010c 	add.w	r1, r5, #12
 800b27a:	300c      	adds	r0, #12
 800b27c:	f7ff faa1 	bl	800a7c2 <memcpy>
 800b280:	2201      	movs	r2, #1
 800b282:	4631      	mov	r1, r6
 800b284:	4658      	mov	r0, fp
 800b286:	f000 fdbf 	bl	800be08 <__lshift>
 800b28a:	f10a 0301 	add.w	r3, sl, #1
 800b28e:	9307      	str	r3, [sp, #28]
 800b290:	9b08      	ldr	r3, [sp, #32]
 800b292:	4453      	add	r3, sl
 800b294:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b296:	9b02      	ldr	r3, [sp, #8]
 800b298:	f003 0301 	and.w	r3, r3, #1
 800b29c:	462f      	mov	r7, r5
 800b29e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2a0:	4605      	mov	r5, r0
 800b2a2:	9b07      	ldr	r3, [sp, #28]
 800b2a4:	4621      	mov	r1, r4
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	4648      	mov	r0, r9
 800b2aa:	9302      	str	r3, [sp, #8]
 800b2ac:	f7ff fa97 	bl	800a7de <quorem>
 800b2b0:	4639      	mov	r1, r7
 800b2b2:	9008      	str	r0, [sp, #32]
 800b2b4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b2b8:	4648      	mov	r0, r9
 800b2ba:	f000 fe11 	bl	800bee0 <__mcmp>
 800b2be:	462a      	mov	r2, r5
 800b2c0:	9009      	str	r0, [sp, #36]	@ 0x24
 800b2c2:	4621      	mov	r1, r4
 800b2c4:	4658      	mov	r0, fp
 800b2c6:	f000 fe27 	bl	800bf18 <__mdiff>
 800b2ca:	68c2      	ldr	r2, [r0, #12]
 800b2cc:	4606      	mov	r6, r0
 800b2ce:	bb02      	cbnz	r2, 800b312 <_dtoa_r+0xa22>
 800b2d0:	4601      	mov	r1, r0
 800b2d2:	4648      	mov	r0, r9
 800b2d4:	f000 fe04 	bl	800bee0 <__mcmp>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	4631      	mov	r1, r6
 800b2dc:	4658      	mov	r0, fp
 800b2de:	920c      	str	r2, [sp, #48]	@ 0x30
 800b2e0:	f000 fbc4 	bl	800ba6c <_Bfree>
 800b2e4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b2e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b2e8:	9e07      	ldr	r6, [sp, #28]
 800b2ea:	ea43 0102 	orr.w	r1, r3, r2
 800b2ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2f0:	4319      	orrs	r1, r3
 800b2f2:	d110      	bne.n	800b316 <_dtoa_r+0xa26>
 800b2f4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b2f8:	d029      	beq.n	800b34e <_dtoa_r+0xa5e>
 800b2fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	dd02      	ble.n	800b306 <_dtoa_r+0xa16>
 800b300:	9b08      	ldr	r3, [sp, #32]
 800b302:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b306:	9b02      	ldr	r3, [sp, #8]
 800b308:	f883 8000 	strb.w	r8, [r3]
 800b30c:	e63b      	b.n	800af86 <_dtoa_r+0x696>
 800b30e:	4628      	mov	r0, r5
 800b310:	e7bb      	b.n	800b28a <_dtoa_r+0x99a>
 800b312:	2201      	movs	r2, #1
 800b314:	e7e1      	b.n	800b2da <_dtoa_r+0x9ea>
 800b316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b318:	2b00      	cmp	r3, #0
 800b31a:	db04      	blt.n	800b326 <_dtoa_r+0xa36>
 800b31c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800b31e:	430b      	orrs	r3, r1
 800b320:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b322:	430b      	orrs	r3, r1
 800b324:	d120      	bne.n	800b368 <_dtoa_r+0xa78>
 800b326:	2a00      	cmp	r2, #0
 800b328:	dded      	ble.n	800b306 <_dtoa_r+0xa16>
 800b32a:	4649      	mov	r1, r9
 800b32c:	2201      	movs	r2, #1
 800b32e:	4658      	mov	r0, fp
 800b330:	f000 fd6a 	bl	800be08 <__lshift>
 800b334:	4621      	mov	r1, r4
 800b336:	4681      	mov	r9, r0
 800b338:	f000 fdd2 	bl	800bee0 <__mcmp>
 800b33c:	2800      	cmp	r0, #0
 800b33e:	dc03      	bgt.n	800b348 <_dtoa_r+0xa58>
 800b340:	d1e1      	bne.n	800b306 <_dtoa_r+0xa16>
 800b342:	f018 0f01 	tst.w	r8, #1
 800b346:	d0de      	beq.n	800b306 <_dtoa_r+0xa16>
 800b348:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b34c:	d1d8      	bne.n	800b300 <_dtoa_r+0xa10>
 800b34e:	9a02      	ldr	r2, [sp, #8]
 800b350:	2339      	movs	r3, #57	@ 0x39
 800b352:	7013      	strb	r3, [r2, #0]
 800b354:	4633      	mov	r3, r6
 800b356:	461e      	mov	r6, r3
 800b358:	3b01      	subs	r3, #1
 800b35a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b35e:	2a39      	cmp	r2, #57	@ 0x39
 800b360:	d052      	beq.n	800b408 <_dtoa_r+0xb18>
 800b362:	3201      	adds	r2, #1
 800b364:	701a      	strb	r2, [r3, #0]
 800b366:	e60e      	b.n	800af86 <_dtoa_r+0x696>
 800b368:	2a00      	cmp	r2, #0
 800b36a:	dd07      	ble.n	800b37c <_dtoa_r+0xa8c>
 800b36c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b370:	d0ed      	beq.n	800b34e <_dtoa_r+0xa5e>
 800b372:	9a02      	ldr	r2, [sp, #8]
 800b374:	f108 0301 	add.w	r3, r8, #1
 800b378:	7013      	strb	r3, [r2, #0]
 800b37a:	e604      	b.n	800af86 <_dtoa_r+0x696>
 800b37c:	9b07      	ldr	r3, [sp, #28]
 800b37e:	9a07      	ldr	r2, [sp, #28]
 800b380:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b384:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b386:	4293      	cmp	r3, r2
 800b388:	d028      	beq.n	800b3dc <_dtoa_r+0xaec>
 800b38a:	4649      	mov	r1, r9
 800b38c:	2300      	movs	r3, #0
 800b38e:	220a      	movs	r2, #10
 800b390:	4658      	mov	r0, fp
 800b392:	f000 fb8d 	bl	800bab0 <__multadd>
 800b396:	42af      	cmp	r7, r5
 800b398:	4681      	mov	r9, r0
 800b39a:	f04f 0300 	mov.w	r3, #0
 800b39e:	f04f 020a 	mov.w	r2, #10
 800b3a2:	4639      	mov	r1, r7
 800b3a4:	4658      	mov	r0, fp
 800b3a6:	d107      	bne.n	800b3b8 <_dtoa_r+0xac8>
 800b3a8:	f000 fb82 	bl	800bab0 <__multadd>
 800b3ac:	4607      	mov	r7, r0
 800b3ae:	4605      	mov	r5, r0
 800b3b0:	9b07      	ldr	r3, [sp, #28]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	9307      	str	r3, [sp, #28]
 800b3b6:	e774      	b.n	800b2a2 <_dtoa_r+0x9b2>
 800b3b8:	f000 fb7a 	bl	800bab0 <__multadd>
 800b3bc:	4629      	mov	r1, r5
 800b3be:	4607      	mov	r7, r0
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	220a      	movs	r2, #10
 800b3c4:	4658      	mov	r0, fp
 800b3c6:	f000 fb73 	bl	800bab0 <__multadd>
 800b3ca:	4605      	mov	r5, r0
 800b3cc:	e7f0      	b.n	800b3b0 <_dtoa_r+0xac0>
 800b3ce:	9b08      	ldr	r3, [sp, #32]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	bfcc      	ite	gt
 800b3d4:	461e      	movgt	r6, r3
 800b3d6:	2601      	movle	r6, #1
 800b3d8:	4456      	add	r6, sl
 800b3da:	2700      	movs	r7, #0
 800b3dc:	4649      	mov	r1, r9
 800b3de:	2201      	movs	r2, #1
 800b3e0:	4658      	mov	r0, fp
 800b3e2:	f000 fd11 	bl	800be08 <__lshift>
 800b3e6:	4621      	mov	r1, r4
 800b3e8:	4681      	mov	r9, r0
 800b3ea:	f000 fd79 	bl	800bee0 <__mcmp>
 800b3ee:	2800      	cmp	r0, #0
 800b3f0:	dcb0      	bgt.n	800b354 <_dtoa_r+0xa64>
 800b3f2:	d102      	bne.n	800b3fa <_dtoa_r+0xb0a>
 800b3f4:	f018 0f01 	tst.w	r8, #1
 800b3f8:	d1ac      	bne.n	800b354 <_dtoa_r+0xa64>
 800b3fa:	4633      	mov	r3, r6
 800b3fc:	461e      	mov	r6, r3
 800b3fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b402:	2a30      	cmp	r2, #48	@ 0x30
 800b404:	d0fa      	beq.n	800b3fc <_dtoa_r+0xb0c>
 800b406:	e5be      	b.n	800af86 <_dtoa_r+0x696>
 800b408:	459a      	cmp	sl, r3
 800b40a:	d1a4      	bne.n	800b356 <_dtoa_r+0xa66>
 800b40c:	9b04      	ldr	r3, [sp, #16]
 800b40e:	3301      	adds	r3, #1
 800b410:	9304      	str	r3, [sp, #16]
 800b412:	2331      	movs	r3, #49	@ 0x31
 800b414:	f88a 3000 	strb.w	r3, [sl]
 800b418:	e5b5      	b.n	800af86 <_dtoa_r+0x696>
 800b41a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b41c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b47c <_dtoa_r+0xb8c>
 800b420:	b11b      	cbz	r3, 800b42a <_dtoa_r+0xb3a>
 800b422:	f10a 0308 	add.w	r3, sl, #8
 800b426:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b428:	6013      	str	r3, [r2, #0]
 800b42a:	4650      	mov	r0, sl
 800b42c:	b017      	add	sp, #92	@ 0x5c
 800b42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b432:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b434:	2b01      	cmp	r3, #1
 800b436:	f77f ae3d 	ble.w	800b0b4 <_dtoa_r+0x7c4>
 800b43a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b43c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b43e:	2001      	movs	r0, #1
 800b440:	e65b      	b.n	800b0fa <_dtoa_r+0x80a>
 800b442:	9b08      	ldr	r3, [sp, #32]
 800b444:	2b00      	cmp	r3, #0
 800b446:	f77f aed6 	ble.w	800b1f6 <_dtoa_r+0x906>
 800b44a:	4656      	mov	r6, sl
 800b44c:	4621      	mov	r1, r4
 800b44e:	4648      	mov	r0, r9
 800b450:	f7ff f9c5 	bl	800a7de <quorem>
 800b454:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b458:	f806 8b01 	strb.w	r8, [r6], #1
 800b45c:	9b08      	ldr	r3, [sp, #32]
 800b45e:	eba6 020a 	sub.w	r2, r6, sl
 800b462:	4293      	cmp	r3, r2
 800b464:	ddb3      	ble.n	800b3ce <_dtoa_r+0xade>
 800b466:	4649      	mov	r1, r9
 800b468:	2300      	movs	r3, #0
 800b46a:	220a      	movs	r2, #10
 800b46c:	4658      	mov	r0, fp
 800b46e:	f000 fb1f 	bl	800bab0 <__multadd>
 800b472:	4681      	mov	r9, r0
 800b474:	e7ea      	b.n	800b44c <_dtoa_r+0xb5c>
 800b476:	bf00      	nop
 800b478:	0800cd48 	.word	0x0800cd48
 800b47c:	0800cccc 	.word	0x0800cccc

0800b480 <__ssputs_r>:
 800b480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b484:	688e      	ldr	r6, [r1, #8]
 800b486:	461f      	mov	r7, r3
 800b488:	42be      	cmp	r6, r7
 800b48a:	680b      	ldr	r3, [r1, #0]
 800b48c:	4682      	mov	sl, r0
 800b48e:	460c      	mov	r4, r1
 800b490:	4690      	mov	r8, r2
 800b492:	d82d      	bhi.n	800b4f0 <__ssputs_r+0x70>
 800b494:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b498:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b49c:	d026      	beq.n	800b4ec <__ssputs_r+0x6c>
 800b49e:	6965      	ldr	r5, [r4, #20]
 800b4a0:	6909      	ldr	r1, [r1, #16]
 800b4a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4a6:	eba3 0901 	sub.w	r9, r3, r1
 800b4aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4ae:	1c7b      	adds	r3, r7, #1
 800b4b0:	444b      	add	r3, r9
 800b4b2:	106d      	asrs	r5, r5, #1
 800b4b4:	429d      	cmp	r5, r3
 800b4b6:	bf38      	it	cc
 800b4b8:	461d      	movcc	r5, r3
 800b4ba:	0553      	lsls	r3, r2, #21
 800b4bc:	d527      	bpl.n	800b50e <__ssputs_r+0x8e>
 800b4be:	4629      	mov	r1, r5
 800b4c0:	f000 f960 	bl	800b784 <_malloc_r>
 800b4c4:	4606      	mov	r6, r0
 800b4c6:	b360      	cbz	r0, 800b522 <__ssputs_r+0xa2>
 800b4c8:	6921      	ldr	r1, [r4, #16]
 800b4ca:	464a      	mov	r2, r9
 800b4cc:	f7ff f979 	bl	800a7c2 <memcpy>
 800b4d0:	89a3      	ldrh	r3, [r4, #12]
 800b4d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b4d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4da:	81a3      	strh	r3, [r4, #12]
 800b4dc:	6126      	str	r6, [r4, #16]
 800b4de:	6165      	str	r5, [r4, #20]
 800b4e0:	444e      	add	r6, r9
 800b4e2:	eba5 0509 	sub.w	r5, r5, r9
 800b4e6:	6026      	str	r6, [r4, #0]
 800b4e8:	60a5      	str	r5, [r4, #8]
 800b4ea:	463e      	mov	r6, r7
 800b4ec:	42be      	cmp	r6, r7
 800b4ee:	d900      	bls.n	800b4f2 <__ssputs_r+0x72>
 800b4f0:	463e      	mov	r6, r7
 800b4f2:	6820      	ldr	r0, [r4, #0]
 800b4f4:	4632      	mov	r2, r6
 800b4f6:	4641      	mov	r1, r8
 800b4f8:	f000 fe69 	bl	800c1ce <memmove>
 800b4fc:	68a3      	ldr	r3, [r4, #8]
 800b4fe:	1b9b      	subs	r3, r3, r6
 800b500:	60a3      	str	r3, [r4, #8]
 800b502:	6823      	ldr	r3, [r4, #0]
 800b504:	4433      	add	r3, r6
 800b506:	6023      	str	r3, [r4, #0]
 800b508:	2000      	movs	r0, #0
 800b50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b50e:	462a      	mov	r2, r5
 800b510:	f000 fe2f 	bl	800c172 <_realloc_r>
 800b514:	4606      	mov	r6, r0
 800b516:	2800      	cmp	r0, #0
 800b518:	d1e0      	bne.n	800b4dc <__ssputs_r+0x5c>
 800b51a:	6921      	ldr	r1, [r4, #16]
 800b51c:	4650      	mov	r0, sl
 800b51e:	f000 fef9 	bl	800c314 <_free_r>
 800b522:	230c      	movs	r3, #12
 800b524:	f8ca 3000 	str.w	r3, [sl]
 800b528:	89a3      	ldrh	r3, [r4, #12]
 800b52a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b52e:	81a3      	strh	r3, [r4, #12]
 800b530:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b534:	e7e9      	b.n	800b50a <__ssputs_r+0x8a>
	...

0800b538 <_svfiprintf_r>:
 800b538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b53c:	4698      	mov	r8, r3
 800b53e:	898b      	ldrh	r3, [r1, #12]
 800b540:	061b      	lsls	r3, r3, #24
 800b542:	b09d      	sub	sp, #116	@ 0x74
 800b544:	4607      	mov	r7, r0
 800b546:	460d      	mov	r5, r1
 800b548:	4614      	mov	r4, r2
 800b54a:	d510      	bpl.n	800b56e <_svfiprintf_r+0x36>
 800b54c:	690b      	ldr	r3, [r1, #16]
 800b54e:	b973      	cbnz	r3, 800b56e <_svfiprintf_r+0x36>
 800b550:	2140      	movs	r1, #64	@ 0x40
 800b552:	f000 f917 	bl	800b784 <_malloc_r>
 800b556:	6028      	str	r0, [r5, #0]
 800b558:	6128      	str	r0, [r5, #16]
 800b55a:	b930      	cbnz	r0, 800b56a <_svfiprintf_r+0x32>
 800b55c:	230c      	movs	r3, #12
 800b55e:	603b      	str	r3, [r7, #0]
 800b560:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b564:	b01d      	add	sp, #116	@ 0x74
 800b566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b56a:	2340      	movs	r3, #64	@ 0x40
 800b56c:	616b      	str	r3, [r5, #20]
 800b56e:	2300      	movs	r3, #0
 800b570:	9309      	str	r3, [sp, #36]	@ 0x24
 800b572:	2320      	movs	r3, #32
 800b574:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b578:	f8cd 800c 	str.w	r8, [sp, #12]
 800b57c:	2330      	movs	r3, #48	@ 0x30
 800b57e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b71c <_svfiprintf_r+0x1e4>
 800b582:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b586:	f04f 0901 	mov.w	r9, #1
 800b58a:	4623      	mov	r3, r4
 800b58c:	469a      	mov	sl, r3
 800b58e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b592:	b10a      	cbz	r2, 800b598 <_svfiprintf_r+0x60>
 800b594:	2a25      	cmp	r2, #37	@ 0x25
 800b596:	d1f9      	bne.n	800b58c <_svfiprintf_r+0x54>
 800b598:	ebba 0b04 	subs.w	fp, sl, r4
 800b59c:	d00b      	beq.n	800b5b6 <_svfiprintf_r+0x7e>
 800b59e:	465b      	mov	r3, fp
 800b5a0:	4622      	mov	r2, r4
 800b5a2:	4629      	mov	r1, r5
 800b5a4:	4638      	mov	r0, r7
 800b5a6:	f7ff ff6b 	bl	800b480 <__ssputs_r>
 800b5aa:	3001      	adds	r0, #1
 800b5ac:	f000 80a7 	beq.w	800b6fe <_svfiprintf_r+0x1c6>
 800b5b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5b2:	445a      	add	r2, fp
 800b5b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5b6:	f89a 3000 	ldrb.w	r3, [sl]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	f000 809f 	beq.w	800b6fe <_svfiprintf_r+0x1c6>
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b5c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5ca:	f10a 0a01 	add.w	sl, sl, #1
 800b5ce:	9304      	str	r3, [sp, #16]
 800b5d0:	9307      	str	r3, [sp, #28]
 800b5d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5d6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5d8:	4654      	mov	r4, sl
 800b5da:	2205      	movs	r2, #5
 800b5dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5e0:	484e      	ldr	r0, [pc, #312]	@ (800b71c <_svfiprintf_r+0x1e4>)
 800b5e2:	f7f4 fdcd 	bl	8000180 <memchr>
 800b5e6:	9a04      	ldr	r2, [sp, #16]
 800b5e8:	b9d8      	cbnz	r0, 800b622 <_svfiprintf_r+0xea>
 800b5ea:	06d0      	lsls	r0, r2, #27
 800b5ec:	bf44      	itt	mi
 800b5ee:	2320      	movmi	r3, #32
 800b5f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5f4:	0711      	lsls	r1, r2, #28
 800b5f6:	bf44      	itt	mi
 800b5f8:	232b      	movmi	r3, #43	@ 0x2b
 800b5fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5fe:	f89a 3000 	ldrb.w	r3, [sl]
 800b602:	2b2a      	cmp	r3, #42	@ 0x2a
 800b604:	d015      	beq.n	800b632 <_svfiprintf_r+0xfa>
 800b606:	9a07      	ldr	r2, [sp, #28]
 800b608:	4654      	mov	r4, sl
 800b60a:	2000      	movs	r0, #0
 800b60c:	f04f 0c0a 	mov.w	ip, #10
 800b610:	4621      	mov	r1, r4
 800b612:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b616:	3b30      	subs	r3, #48	@ 0x30
 800b618:	2b09      	cmp	r3, #9
 800b61a:	d94b      	bls.n	800b6b4 <_svfiprintf_r+0x17c>
 800b61c:	b1b0      	cbz	r0, 800b64c <_svfiprintf_r+0x114>
 800b61e:	9207      	str	r2, [sp, #28]
 800b620:	e014      	b.n	800b64c <_svfiprintf_r+0x114>
 800b622:	eba0 0308 	sub.w	r3, r0, r8
 800b626:	fa09 f303 	lsl.w	r3, r9, r3
 800b62a:	4313      	orrs	r3, r2
 800b62c:	9304      	str	r3, [sp, #16]
 800b62e:	46a2      	mov	sl, r4
 800b630:	e7d2      	b.n	800b5d8 <_svfiprintf_r+0xa0>
 800b632:	9b03      	ldr	r3, [sp, #12]
 800b634:	1d19      	adds	r1, r3, #4
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	9103      	str	r1, [sp, #12]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	bfbb      	ittet	lt
 800b63e:	425b      	neglt	r3, r3
 800b640:	f042 0202 	orrlt.w	r2, r2, #2
 800b644:	9307      	strge	r3, [sp, #28]
 800b646:	9307      	strlt	r3, [sp, #28]
 800b648:	bfb8      	it	lt
 800b64a:	9204      	strlt	r2, [sp, #16]
 800b64c:	7823      	ldrb	r3, [r4, #0]
 800b64e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b650:	d10a      	bne.n	800b668 <_svfiprintf_r+0x130>
 800b652:	7863      	ldrb	r3, [r4, #1]
 800b654:	2b2a      	cmp	r3, #42	@ 0x2a
 800b656:	d132      	bne.n	800b6be <_svfiprintf_r+0x186>
 800b658:	9b03      	ldr	r3, [sp, #12]
 800b65a:	1d1a      	adds	r2, r3, #4
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	9203      	str	r2, [sp, #12]
 800b660:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b664:	3402      	adds	r4, #2
 800b666:	9305      	str	r3, [sp, #20]
 800b668:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b720 <_svfiprintf_r+0x1e8>
 800b66c:	7821      	ldrb	r1, [r4, #0]
 800b66e:	2203      	movs	r2, #3
 800b670:	4650      	mov	r0, sl
 800b672:	f7f4 fd85 	bl	8000180 <memchr>
 800b676:	b138      	cbz	r0, 800b688 <_svfiprintf_r+0x150>
 800b678:	9b04      	ldr	r3, [sp, #16]
 800b67a:	eba0 000a 	sub.w	r0, r0, sl
 800b67e:	2240      	movs	r2, #64	@ 0x40
 800b680:	4082      	lsls	r2, r0
 800b682:	4313      	orrs	r3, r2
 800b684:	3401      	adds	r4, #1
 800b686:	9304      	str	r3, [sp, #16]
 800b688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b68c:	4825      	ldr	r0, [pc, #148]	@ (800b724 <_svfiprintf_r+0x1ec>)
 800b68e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b692:	2206      	movs	r2, #6
 800b694:	f7f4 fd74 	bl	8000180 <memchr>
 800b698:	2800      	cmp	r0, #0
 800b69a:	d036      	beq.n	800b70a <_svfiprintf_r+0x1d2>
 800b69c:	4b22      	ldr	r3, [pc, #136]	@ (800b728 <_svfiprintf_r+0x1f0>)
 800b69e:	bb1b      	cbnz	r3, 800b6e8 <_svfiprintf_r+0x1b0>
 800b6a0:	9b03      	ldr	r3, [sp, #12]
 800b6a2:	3307      	adds	r3, #7
 800b6a4:	f023 0307 	bic.w	r3, r3, #7
 800b6a8:	3308      	adds	r3, #8
 800b6aa:	9303      	str	r3, [sp, #12]
 800b6ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6ae:	4433      	add	r3, r6
 800b6b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6b2:	e76a      	b.n	800b58a <_svfiprintf_r+0x52>
 800b6b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6b8:	460c      	mov	r4, r1
 800b6ba:	2001      	movs	r0, #1
 800b6bc:	e7a8      	b.n	800b610 <_svfiprintf_r+0xd8>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	3401      	adds	r4, #1
 800b6c2:	9305      	str	r3, [sp, #20]
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	f04f 0c0a 	mov.w	ip, #10
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6d0:	3a30      	subs	r2, #48	@ 0x30
 800b6d2:	2a09      	cmp	r2, #9
 800b6d4:	d903      	bls.n	800b6de <_svfiprintf_r+0x1a6>
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d0c6      	beq.n	800b668 <_svfiprintf_r+0x130>
 800b6da:	9105      	str	r1, [sp, #20]
 800b6dc:	e7c4      	b.n	800b668 <_svfiprintf_r+0x130>
 800b6de:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6e2:	4604      	mov	r4, r0
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	e7f0      	b.n	800b6ca <_svfiprintf_r+0x192>
 800b6e8:	ab03      	add	r3, sp, #12
 800b6ea:	9300      	str	r3, [sp, #0]
 800b6ec:	462a      	mov	r2, r5
 800b6ee:	4b0f      	ldr	r3, [pc, #60]	@ (800b72c <_svfiprintf_r+0x1f4>)
 800b6f0:	a904      	add	r1, sp, #16
 800b6f2:	4638      	mov	r0, r7
 800b6f4:	f7fe fb42 	bl	8009d7c <_printf_float>
 800b6f8:	1c42      	adds	r2, r0, #1
 800b6fa:	4606      	mov	r6, r0
 800b6fc:	d1d6      	bne.n	800b6ac <_svfiprintf_r+0x174>
 800b6fe:	89ab      	ldrh	r3, [r5, #12]
 800b700:	065b      	lsls	r3, r3, #25
 800b702:	f53f af2d 	bmi.w	800b560 <_svfiprintf_r+0x28>
 800b706:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b708:	e72c      	b.n	800b564 <_svfiprintf_r+0x2c>
 800b70a:	ab03      	add	r3, sp, #12
 800b70c:	9300      	str	r3, [sp, #0]
 800b70e:	462a      	mov	r2, r5
 800b710:	4b06      	ldr	r3, [pc, #24]	@ (800b72c <_svfiprintf_r+0x1f4>)
 800b712:	a904      	add	r1, sp, #16
 800b714:	4638      	mov	r0, r7
 800b716:	f7fe fdcb 	bl	800a2b0 <_printf_i>
 800b71a:	e7ed      	b.n	800b6f8 <_svfiprintf_r+0x1c0>
 800b71c:	0800cd59 	.word	0x0800cd59
 800b720:	0800cd5f 	.word	0x0800cd5f
 800b724:	0800cd63 	.word	0x0800cd63
 800b728:	08009d7d 	.word	0x08009d7d
 800b72c:	0800b481 	.word	0x0800b481

0800b730 <malloc>:
 800b730:	4b02      	ldr	r3, [pc, #8]	@ (800b73c <malloc+0xc>)
 800b732:	4601      	mov	r1, r0
 800b734:	6818      	ldr	r0, [r3, #0]
 800b736:	f000 b825 	b.w	800b784 <_malloc_r>
 800b73a:	bf00      	nop
 800b73c:	20000030 	.word	0x20000030

0800b740 <sbrk_aligned>:
 800b740:	b570      	push	{r4, r5, r6, lr}
 800b742:	4e0f      	ldr	r6, [pc, #60]	@ (800b780 <sbrk_aligned+0x40>)
 800b744:	460c      	mov	r4, r1
 800b746:	6831      	ldr	r1, [r6, #0]
 800b748:	4605      	mov	r5, r0
 800b74a:	b911      	cbnz	r1, 800b752 <sbrk_aligned+0x12>
 800b74c:	f000 fd8e 	bl	800c26c <_sbrk_r>
 800b750:	6030      	str	r0, [r6, #0]
 800b752:	4621      	mov	r1, r4
 800b754:	4628      	mov	r0, r5
 800b756:	f000 fd89 	bl	800c26c <_sbrk_r>
 800b75a:	1c43      	adds	r3, r0, #1
 800b75c:	d103      	bne.n	800b766 <sbrk_aligned+0x26>
 800b75e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b762:	4620      	mov	r0, r4
 800b764:	bd70      	pop	{r4, r5, r6, pc}
 800b766:	1cc4      	adds	r4, r0, #3
 800b768:	f024 0403 	bic.w	r4, r4, #3
 800b76c:	42a0      	cmp	r0, r4
 800b76e:	d0f8      	beq.n	800b762 <sbrk_aligned+0x22>
 800b770:	1a21      	subs	r1, r4, r0
 800b772:	4628      	mov	r0, r5
 800b774:	f000 fd7a 	bl	800c26c <_sbrk_r>
 800b778:	3001      	adds	r0, #1
 800b77a:	d1f2      	bne.n	800b762 <sbrk_aligned+0x22>
 800b77c:	e7ef      	b.n	800b75e <sbrk_aligned+0x1e>
 800b77e:	bf00      	nop
 800b780:	20000b50 	.word	0x20000b50

0800b784 <_malloc_r>:
 800b784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b788:	1ccd      	adds	r5, r1, #3
 800b78a:	f025 0503 	bic.w	r5, r5, #3
 800b78e:	3508      	adds	r5, #8
 800b790:	2d0c      	cmp	r5, #12
 800b792:	bf38      	it	cc
 800b794:	250c      	movcc	r5, #12
 800b796:	2d00      	cmp	r5, #0
 800b798:	4606      	mov	r6, r0
 800b79a:	db01      	blt.n	800b7a0 <_malloc_r+0x1c>
 800b79c:	42a9      	cmp	r1, r5
 800b79e:	d904      	bls.n	800b7aa <_malloc_r+0x26>
 800b7a0:	230c      	movs	r3, #12
 800b7a2:	6033      	str	r3, [r6, #0]
 800b7a4:	2000      	movs	r0, #0
 800b7a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b880 <_malloc_r+0xfc>
 800b7ae:	f000 f911 	bl	800b9d4 <__malloc_lock>
 800b7b2:	f8d8 3000 	ldr.w	r3, [r8]
 800b7b6:	461c      	mov	r4, r3
 800b7b8:	bb44      	cbnz	r4, 800b80c <_malloc_r+0x88>
 800b7ba:	4629      	mov	r1, r5
 800b7bc:	4630      	mov	r0, r6
 800b7be:	f7ff ffbf 	bl	800b740 <sbrk_aligned>
 800b7c2:	1c43      	adds	r3, r0, #1
 800b7c4:	4604      	mov	r4, r0
 800b7c6:	d158      	bne.n	800b87a <_malloc_r+0xf6>
 800b7c8:	f8d8 4000 	ldr.w	r4, [r8]
 800b7cc:	4627      	mov	r7, r4
 800b7ce:	2f00      	cmp	r7, #0
 800b7d0:	d143      	bne.n	800b85a <_malloc_r+0xd6>
 800b7d2:	2c00      	cmp	r4, #0
 800b7d4:	d04b      	beq.n	800b86e <_malloc_r+0xea>
 800b7d6:	6823      	ldr	r3, [r4, #0]
 800b7d8:	4639      	mov	r1, r7
 800b7da:	4630      	mov	r0, r6
 800b7dc:	eb04 0903 	add.w	r9, r4, r3
 800b7e0:	f000 fd44 	bl	800c26c <_sbrk_r>
 800b7e4:	4581      	cmp	r9, r0
 800b7e6:	d142      	bne.n	800b86e <_malloc_r+0xea>
 800b7e8:	6821      	ldr	r1, [r4, #0]
 800b7ea:	1a6d      	subs	r5, r5, r1
 800b7ec:	4629      	mov	r1, r5
 800b7ee:	4630      	mov	r0, r6
 800b7f0:	f7ff ffa6 	bl	800b740 <sbrk_aligned>
 800b7f4:	3001      	adds	r0, #1
 800b7f6:	d03a      	beq.n	800b86e <_malloc_r+0xea>
 800b7f8:	6823      	ldr	r3, [r4, #0]
 800b7fa:	442b      	add	r3, r5
 800b7fc:	6023      	str	r3, [r4, #0]
 800b7fe:	f8d8 3000 	ldr.w	r3, [r8]
 800b802:	685a      	ldr	r2, [r3, #4]
 800b804:	bb62      	cbnz	r2, 800b860 <_malloc_r+0xdc>
 800b806:	f8c8 7000 	str.w	r7, [r8]
 800b80a:	e00f      	b.n	800b82c <_malloc_r+0xa8>
 800b80c:	6822      	ldr	r2, [r4, #0]
 800b80e:	1b52      	subs	r2, r2, r5
 800b810:	d420      	bmi.n	800b854 <_malloc_r+0xd0>
 800b812:	2a0b      	cmp	r2, #11
 800b814:	d917      	bls.n	800b846 <_malloc_r+0xc2>
 800b816:	1961      	adds	r1, r4, r5
 800b818:	42a3      	cmp	r3, r4
 800b81a:	6025      	str	r5, [r4, #0]
 800b81c:	bf18      	it	ne
 800b81e:	6059      	strne	r1, [r3, #4]
 800b820:	6863      	ldr	r3, [r4, #4]
 800b822:	bf08      	it	eq
 800b824:	f8c8 1000 	streq.w	r1, [r8]
 800b828:	5162      	str	r2, [r4, r5]
 800b82a:	604b      	str	r3, [r1, #4]
 800b82c:	4630      	mov	r0, r6
 800b82e:	f000 f8d7 	bl	800b9e0 <__malloc_unlock>
 800b832:	f104 000b 	add.w	r0, r4, #11
 800b836:	1d23      	adds	r3, r4, #4
 800b838:	f020 0007 	bic.w	r0, r0, #7
 800b83c:	1ac2      	subs	r2, r0, r3
 800b83e:	bf1c      	itt	ne
 800b840:	1a1b      	subne	r3, r3, r0
 800b842:	50a3      	strne	r3, [r4, r2]
 800b844:	e7af      	b.n	800b7a6 <_malloc_r+0x22>
 800b846:	6862      	ldr	r2, [r4, #4]
 800b848:	42a3      	cmp	r3, r4
 800b84a:	bf0c      	ite	eq
 800b84c:	f8c8 2000 	streq.w	r2, [r8]
 800b850:	605a      	strne	r2, [r3, #4]
 800b852:	e7eb      	b.n	800b82c <_malloc_r+0xa8>
 800b854:	4623      	mov	r3, r4
 800b856:	6864      	ldr	r4, [r4, #4]
 800b858:	e7ae      	b.n	800b7b8 <_malloc_r+0x34>
 800b85a:	463c      	mov	r4, r7
 800b85c:	687f      	ldr	r7, [r7, #4]
 800b85e:	e7b6      	b.n	800b7ce <_malloc_r+0x4a>
 800b860:	461a      	mov	r2, r3
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	42a3      	cmp	r3, r4
 800b866:	d1fb      	bne.n	800b860 <_malloc_r+0xdc>
 800b868:	2300      	movs	r3, #0
 800b86a:	6053      	str	r3, [r2, #4]
 800b86c:	e7de      	b.n	800b82c <_malloc_r+0xa8>
 800b86e:	230c      	movs	r3, #12
 800b870:	6033      	str	r3, [r6, #0]
 800b872:	4630      	mov	r0, r6
 800b874:	f000 f8b4 	bl	800b9e0 <__malloc_unlock>
 800b878:	e794      	b.n	800b7a4 <_malloc_r+0x20>
 800b87a:	6005      	str	r5, [r0, #0]
 800b87c:	e7d6      	b.n	800b82c <_malloc_r+0xa8>
 800b87e:	bf00      	nop
 800b880:	20000b54 	.word	0x20000b54

0800b884 <__sflush_r>:
 800b884:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b88a:	0716      	lsls	r6, r2, #28
 800b88c:	4605      	mov	r5, r0
 800b88e:	460c      	mov	r4, r1
 800b890:	d454      	bmi.n	800b93c <__sflush_r+0xb8>
 800b892:	684b      	ldr	r3, [r1, #4]
 800b894:	2b00      	cmp	r3, #0
 800b896:	dc02      	bgt.n	800b89e <__sflush_r+0x1a>
 800b898:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	dd48      	ble.n	800b930 <__sflush_r+0xac>
 800b89e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8a0:	2e00      	cmp	r6, #0
 800b8a2:	d045      	beq.n	800b930 <__sflush_r+0xac>
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b8aa:	682f      	ldr	r7, [r5, #0]
 800b8ac:	6a21      	ldr	r1, [r4, #32]
 800b8ae:	602b      	str	r3, [r5, #0]
 800b8b0:	d030      	beq.n	800b914 <__sflush_r+0x90>
 800b8b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b8b4:	89a3      	ldrh	r3, [r4, #12]
 800b8b6:	0759      	lsls	r1, r3, #29
 800b8b8:	d505      	bpl.n	800b8c6 <__sflush_r+0x42>
 800b8ba:	6863      	ldr	r3, [r4, #4]
 800b8bc:	1ad2      	subs	r2, r2, r3
 800b8be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b8c0:	b10b      	cbz	r3, 800b8c6 <__sflush_r+0x42>
 800b8c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b8c4:	1ad2      	subs	r2, r2, r3
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8ca:	6a21      	ldr	r1, [r4, #32]
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	47b0      	blx	r6
 800b8d0:	1c43      	adds	r3, r0, #1
 800b8d2:	89a3      	ldrh	r3, [r4, #12]
 800b8d4:	d106      	bne.n	800b8e4 <__sflush_r+0x60>
 800b8d6:	6829      	ldr	r1, [r5, #0]
 800b8d8:	291d      	cmp	r1, #29
 800b8da:	d82b      	bhi.n	800b934 <__sflush_r+0xb0>
 800b8dc:	4a28      	ldr	r2, [pc, #160]	@ (800b980 <__sflush_r+0xfc>)
 800b8de:	410a      	asrs	r2, r1
 800b8e0:	07d6      	lsls	r6, r2, #31
 800b8e2:	d427      	bmi.n	800b934 <__sflush_r+0xb0>
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	6062      	str	r2, [r4, #4]
 800b8e8:	04d9      	lsls	r1, r3, #19
 800b8ea:	6922      	ldr	r2, [r4, #16]
 800b8ec:	6022      	str	r2, [r4, #0]
 800b8ee:	d504      	bpl.n	800b8fa <__sflush_r+0x76>
 800b8f0:	1c42      	adds	r2, r0, #1
 800b8f2:	d101      	bne.n	800b8f8 <__sflush_r+0x74>
 800b8f4:	682b      	ldr	r3, [r5, #0]
 800b8f6:	b903      	cbnz	r3, 800b8fa <__sflush_r+0x76>
 800b8f8:	6560      	str	r0, [r4, #84]	@ 0x54
 800b8fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8fc:	602f      	str	r7, [r5, #0]
 800b8fe:	b1b9      	cbz	r1, 800b930 <__sflush_r+0xac>
 800b900:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b904:	4299      	cmp	r1, r3
 800b906:	d002      	beq.n	800b90e <__sflush_r+0x8a>
 800b908:	4628      	mov	r0, r5
 800b90a:	f000 fd03 	bl	800c314 <_free_r>
 800b90e:	2300      	movs	r3, #0
 800b910:	6363      	str	r3, [r4, #52]	@ 0x34
 800b912:	e00d      	b.n	800b930 <__sflush_r+0xac>
 800b914:	2301      	movs	r3, #1
 800b916:	4628      	mov	r0, r5
 800b918:	47b0      	blx	r6
 800b91a:	4602      	mov	r2, r0
 800b91c:	1c50      	adds	r0, r2, #1
 800b91e:	d1c9      	bne.n	800b8b4 <__sflush_r+0x30>
 800b920:	682b      	ldr	r3, [r5, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d0c6      	beq.n	800b8b4 <__sflush_r+0x30>
 800b926:	2b1d      	cmp	r3, #29
 800b928:	d001      	beq.n	800b92e <__sflush_r+0xaa>
 800b92a:	2b16      	cmp	r3, #22
 800b92c:	d11d      	bne.n	800b96a <__sflush_r+0xe6>
 800b92e:	602f      	str	r7, [r5, #0]
 800b930:	2000      	movs	r0, #0
 800b932:	e021      	b.n	800b978 <__sflush_r+0xf4>
 800b934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b938:	b21b      	sxth	r3, r3
 800b93a:	e01a      	b.n	800b972 <__sflush_r+0xee>
 800b93c:	690f      	ldr	r7, [r1, #16]
 800b93e:	2f00      	cmp	r7, #0
 800b940:	d0f6      	beq.n	800b930 <__sflush_r+0xac>
 800b942:	0793      	lsls	r3, r2, #30
 800b944:	680e      	ldr	r6, [r1, #0]
 800b946:	bf08      	it	eq
 800b948:	694b      	ldreq	r3, [r1, #20]
 800b94a:	600f      	str	r7, [r1, #0]
 800b94c:	bf18      	it	ne
 800b94e:	2300      	movne	r3, #0
 800b950:	1bf6      	subs	r6, r6, r7
 800b952:	608b      	str	r3, [r1, #8]
 800b954:	2e00      	cmp	r6, #0
 800b956:	ddeb      	ble.n	800b930 <__sflush_r+0xac>
 800b958:	6a21      	ldr	r1, [r4, #32]
 800b95a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b95e:	4633      	mov	r3, r6
 800b960:	463a      	mov	r2, r7
 800b962:	4628      	mov	r0, r5
 800b964:	47e0      	blx	ip
 800b966:	2800      	cmp	r0, #0
 800b968:	dc07      	bgt.n	800b97a <__sflush_r+0xf6>
 800b96a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b96e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b972:	81a3      	strh	r3, [r4, #12]
 800b974:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b97a:	4407      	add	r7, r0
 800b97c:	1a36      	subs	r6, r6, r0
 800b97e:	e7e9      	b.n	800b954 <__sflush_r+0xd0>
 800b980:	dfbffffe 	.word	0xdfbffffe

0800b984 <_fflush_r>:
 800b984:	b538      	push	{r3, r4, r5, lr}
 800b986:	690b      	ldr	r3, [r1, #16]
 800b988:	4605      	mov	r5, r0
 800b98a:	460c      	mov	r4, r1
 800b98c:	b913      	cbnz	r3, 800b994 <_fflush_r+0x10>
 800b98e:	2500      	movs	r5, #0
 800b990:	4628      	mov	r0, r5
 800b992:	bd38      	pop	{r3, r4, r5, pc}
 800b994:	b118      	cbz	r0, 800b99e <_fflush_r+0x1a>
 800b996:	6a03      	ldr	r3, [r0, #32]
 800b998:	b90b      	cbnz	r3, 800b99e <_fflush_r+0x1a>
 800b99a:	f7fe fe69 	bl	800a670 <__sinit>
 800b99e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d0f3      	beq.n	800b98e <_fflush_r+0xa>
 800b9a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b9a8:	07d0      	lsls	r0, r2, #31
 800b9aa:	d404      	bmi.n	800b9b6 <_fflush_r+0x32>
 800b9ac:	0599      	lsls	r1, r3, #22
 800b9ae:	d402      	bmi.n	800b9b6 <_fflush_r+0x32>
 800b9b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9b2:	f7fe ff04 	bl	800a7be <__retarget_lock_acquire_recursive>
 800b9b6:	4628      	mov	r0, r5
 800b9b8:	4621      	mov	r1, r4
 800b9ba:	f7ff ff63 	bl	800b884 <__sflush_r>
 800b9be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9c0:	07da      	lsls	r2, r3, #31
 800b9c2:	4605      	mov	r5, r0
 800b9c4:	d4e4      	bmi.n	800b990 <_fflush_r+0xc>
 800b9c6:	89a3      	ldrh	r3, [r4, #12]
 800b9c8:	059b      	lsls	r3, r3, #22
 800b9ca:	d4e1      	bmi.n	800b990 <_fflush_r+0xc>
 800b9cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9ce:	f7fe fef7 	bl	800a7c0 <__retarget_lock_release_recursive>
 800b9d2:	e7dd      	b.n	800b990 <_fflush_r+0xc>

0800b9d4 <__malloc_lock>:
 800b9d4:	4801      	ldr	r0, [pc, #4]	@ (800b9dc <__malloc_lock+0x8>)
 800b9d6:	f7fe bef2 	b.w	800a7be <__retarget_lock_acquire_recursive>
 800b9da:	bf00      	nop
 800b9dc:	20000b4c 	.word	0x20000b4c

0800b9e0 <__malloc_unlock>:
 800b9e0:	4801      	ldr	r0, [pc, #4]	@ (800b9e8 <__malloc_unlock+0x8>)
 800b9e2:	f7fe beed 	b.w	800a7c0 <__retarget_lock_release_recursive>
 800b9e6:	bf00      	nop
 800b9e8:	20000b4c 	.word	0x20000b4c

0800b9ec <_Balloc>:
 800b9ec:	b570      	push	{r4, r5, r6, lr}
 800b9ee:	69c6      	ldr	r6, [r0, #28]
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	460d      	mov	r5, r1
 800b9f4:	b976      	cbnz	r6, 800ba14 <_Balloc+0x28>
 800b9f6:	2010      	movs	r0, #16
 800b9f8:	f7ff fe9a 	bl	800b730 <malloc>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	61e0      	str	r0, [r4, #28]
 800ba00:	b920      	cbnz	r0, 800ba0c <_Balloc+0x20>
 800ba02:	4b18      	ldr	r3, [pc, #96]	@ (800ba64 <_Balloc+0x78>)
 800ba04:	4818      	ldr	r0, [pc, #96]	@ (800ba68 <_Balloc+0x7c>)
 800ba06:	216b      	movs	r1, #107	@ 0x6b
 800ba08:	f000 fc52 	bl	800c2b0 <__assert_func>
 800ba0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba10:	6006      	str	r6, [r0, #0]
 800ba12:	60c6      	str	r6, [r0, #12]
 800ba14:	69e6      	ldr	r6, [r4, #28]
 800ba16:	68f3      	ldr	r3, [r6, #12]
 800ba18:	b183      	cbz	r3, 800ba3c <_Balloc+0x50>
 800ba1a:	69e3      	ldr	r3, [r4, #28]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba22:	b9b8      	cbnz	r0, 800ba54 <_Balloc+0x68>
 800ba24:	2101      	movs	r1, #1
 800ba26:	fa01 f605 	lsl.w	r6, r1, r5
 800ba2a:	1d72      	adds	r2, r6, #5
 800ba2c:	0092      	lsls	r2, r2, #2
 800ba2e:	4620      	mov	r0, r4
 800ba30:	f000 fc5c 	bl	800c2ec <_calloc_r>
 800ba34:	b160      	cbz	r0, 800ba50 <_Balloc+0x64>
 800ba36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba3a:	e00e      	b.n	800ba5a <_Balloc+0x6e>
 800ba3c:	2221      	movs	r2, #33	@ 0x21
 800ba3e:	2104      	movs	r1, #4
 800ba40:	4620      	mov	r0, r4
 800ba42:	f000 fc53 	bl	800c2ec <_calloc_r>
 800ba46:	69e3      	ldr	r3, [r4, #28]
 800ba48:	60f0      	str	r0, [r6, #12]
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d1e4      	bne.n	800ba1a <_Balloc+0x2e>
 800ba50:	2000      	movs	r0, #0
 800ba52:	bd70      	pop	{r4, r5, r6, pc}
 800ba54:	6802      	ldr	r2, [r0, #0]
 800ba56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba60:	e7f7      	b.n	800ba52 <_Balloc+0x66>
 800ba62:	bf00      	nop
 800ba64:	0800ccd9 	.word	0x0800ccd9
 800ba68:	0800cd6a 	.word	0x0800cd6a

0800ba6c <_Bfree>:
 800ba6c:	b570      	push	{r4, r5, r6, lr}
 800ba6e:	69c6      	ldr	r6, [r0, #28]
 800ba70:	4605      	mov	r5, r0
 800ba72:	460c      	mov	r4, r1
 800ba74:	b976      	cbnz	r6, 800ba94 <_Bfree+0x28>
 800ba76:	2010      	movs	r0, #16
 800ba78:	f7ff fe5a 	bl	800b730 <malloc>
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	61e8      	str	r0, [r5, #28]
 800ba80:	b920      	cbnz	r0, 800ba8c <_Bfree+0x20>
 800ba82:	4b09      	ldr	r3, [pc, #36]	@ (800baa8 <_Bfree+0x3c>)
 800ba84:	4809      	ldr	r0, [pc, #36]	@ (800baac <_Bfree+0x40>)
 800ba86:	218f      	movs	r1, #143	@ 0x8f
 800ba88:	f000 fc12 	bl	800c2b0 <__assert_func>
 800ba8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba90:	6006      	str	r6, [r0, #0]
 800ba92:	60c6      	str	r6, [r0, #12]
 800ba94:	b13c      	cbz	r4, 800baa6 <_Bfree+0x3a>
 800ba96:	69eb      	ldr	r3, [r5, #28]
 800ba98:	6862      	ldr	r2, [r4, #4]
 800ba9a:	68db      	ldr	r3, [r3, #12]
 800ba9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800baa0:	6021      	str	r1, [r4, #0]
 800baa2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800baa6:	bd70      	pop	{r4, r5, r6, pc}
 800baa8:	0800ccd9 	.word	0x0800ccd9
 800baac:	0800cd6a 	.word	0x0800cd6a

0800bab0 <__multadd>:
 800bab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bab4:	690d      	ldr	r5, [r1, #16]
 800bab6:	4607      	mov	r7, r0
 800bab8:	460c      	mov	r4, r1
 800baba:	461e      	mov	r6, r3
 800babc:	f101 0c14 	add.w	ip, r1, #20
 800bac0:	2000      	movs	r0, #0
 800bac2:	f8dc 3000 	ldr.w	r3, [ip]
 800bac6:	b299      	uxth	r1, r3
 800bac8:	fb02 6101 	mla	r1, r2, r1, r6
 800bacc:	0c1e      	lsrs	r6, r3, #16
 800bace:	0c0b      	lsrs	r3, r1, #16
 800bad0:	fb02 3306 	mla	r3, r2, r6, r3
 800bad4:	b289      	uxth	r1, r1
 800bad6:	3001      	adds	r0, #1
 800bad8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800badc:	4285      	cmp	r5, r0
 800bade:	f84c 1b04 	str.w	r1, [ip], #4
 800bae2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bae6:	dcec      	bgt.n	800bac2 <__multadd+0x12>
 800bae8:	b30e      	cbz	r6, 800bb2e <__multadd+0x7e>
 800baea:	68a3      	ldr	r3, [r4, #8]
 800baec:	42ab      	cmp	r3, r5
 800baee:	dc19      	bgt.n	800bb24 <__multadd+0x74>
 800baf0:	6861      	ldr	r1, [r4, #4]
 800baf2:	4638      	mov	r0, r7
 800baf4:	3101      	adds	r1, #1
 800baf6:	f7ff ff79 	bl	800b9ec <_Balloc>
 800bafa:	4680      	mov	r8, r0
 800bafc:	b928      	cbnz	r0, 800bb0a <__multadd+0x5a>
 800bafe:	4602      	mov	r2, r0
 800bb00:	4b0c      	ldr	r3, [pc, #48]	@ (800bb34 <__multadd+0x84>)
 800bb02:	480d      	ldr	r0, [pc, #52]	@ (800bb38 <__multadd+0x88>)
 800bb04:	21ba      	movs	r1, #186	@ 0xba
 800bb06:	f000 fbd3 	bl	800c2b0 <__assert_func>
 800bb0a:	6922      	ldr	r2, [r4, #16]
 800bb0c:	3202      	adds	r2, #2
 800bb0e:	f104 010c 	add.w	r1, r4, #12
 800bb12:	0092      	lsls	r2, r2, #2
 800bb14:	300c      	adds	r0, #12
 800bb16:	f7fe fe54 	bl	800a7c2 <memcpy>
 800bb1a:	4621      	mov	r1, r4
 800bb1c:	4638      	mov	r0, r7
 800bb1e:	f7ff ffa5 	bl	800ba6c <_Bfree>
 800bb22:	4644      	mov	r4, r8
 800bb24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb28:	3501      	adds	r5, #1
 800bb2a:	615e      	str	r6, [r3, #20]
 800bb2c:	6125      	str	r5, [r4, #16]
 800bb2e:	4620      	mov	r0, r4
 800bb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb34:	0800cd48 	.word	0x0800cd48
 800bb38:	0800cd6a 	.word	0x0800cd6a

0800bb3c <__hi0bits>:
 800bb3c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bb40:	4603      	mov	r3, r0
 800bb42:	bf36      	itet	cc
 800bb44:	0403      	lslcc	r3, r0, #16
 800bb46:	2000      	movcs	r0, #0
 800bb48:	2010      	movcc	r0, #16
 800bb4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bb4e:	bf3c      	itt	cc
 800bb50:	021b      	lslcc	r3, r3, #8
 800bb52:	3008      	addcc	r0, #8
 800bb54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb58:	bf3c      	itt	cc
 800bb5a:	011b      	lslcc	r3, r3, #4
 800bb5c:	3004      	addcc	r0, #4
 800bb5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb62:	bf3c      	itt	cc
 800bb64:	009b      	lslcc	r3, r3, #2
 800bb66:	3002      	addcc	r0, #2
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	db05      	blt.n	800bb78 <__hi0bits+0x3c>
 800bb6c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bb70:	f100 0001 	add.w	r0, r0, #1
 800bb74:	bf08      	it	eq
 800bb76:	2020      	moveq	r0, #32
 800bb78:	4770      	bx	lr

0800bb7a <__lo0bits>:
 800bb7a:	6803      	ldr	r3, [r0, #0]
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	f013 0007 	ands.w	r0, r3, #7
 800bb82:	d00b      	beq.n	800bb9c <__lo0bits+0x22>
 800bb84:	07d9      	lsls	r1, r3, #31
 800bb86:	d421      	bmi.n	800bbcc <__lo0bits+0x52>
 800bb88:	0798      	lsls	r0, r3, #30
 800bb8a:	bf49      	itett	mi
 800bb8c:	085b      	lsrmi	r3, r3, #1
 800bb8e:	089b      	lsrpl	r3, r3, #2
 800bb90:	2001      	movmi	r0, #1
 800bb92:	6013      	strmi	r3, [r2, #0]
 800bb94:	bf5c      	itt	pl
 800bb96:	6013      	strpl	r3, [r2, #0]
 800bb98:	2002      	movpl	r0, #2
 800bb9a:	4770      	bx	lr
 800bb9c:	b299      	uxth	r1, r3
 800bb9e:	b909      	cbnz	r1, 800bba4 <__lo0bits+0x2a>
 800bba0:	0c1b      	lsrs	r3, r3, #16
 800bba2:	2010      	movs	r0, #16
 800bba4:	b2d9      	uxtb	r1, r3
 800bba6:	b909      	cbnz	r1, 800bbac <__lo0bits+0x32>
 800bba8:	3008      	adds	r0, #8
 800bbaa:	0a1b      	lsrs	r3, r3, #8
 800bbac:	0719      	lsls	r1, r3, #28
 800bbae:	bf04      	itt	eq
 800bbb0:	091b      	lsreq	r3, r3, #4
 800bbb2:	3004      	addeq	r0, #4
 800bbb4:	0799      	lsls	r1, r3, #30
 800bbb6:	bf04      	itt	eq
 800bbb8:	089b      	lsreq	r3, r3, #2
 800bbba:	3002      	addeq	r0, #2
 800bbbc:	07d9      	lsls	r1, r3, #31
 800bbbe:	d403      	bmi.n	800bbc8 <__lo0bits+0x4e>
 800bbc0:	085b      	lsrs	r3, r3, #1
 800bbc2:	f100 0001 	add.w	r0, r0, #1
 800bbc6:	d003      	beq.n	800bbd0 <__lo0bits+0x56>
 800bbc8:	6013      	str	r3, [r2, #0]
 800bbca:	4770      	bx	lr
 800bbcc:	2000      	movs	r0, #0
 800bbce:	4770      	bx	lr
 800bbd0:	2020      	movs	r0, #32
 800bbd2:	4770      	bx	lr

0800bbd4 <__i2b>:
 800bbd4:	b510      	push	{r4, lr}
 800bbd6:	460c      	mov	r4, r1
 800bbd8:	2101      	movs	r1, #1
 800bbda:	f7ff ff07 	bl	800b9ec <_Balloc>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	b928      	cbnz	r0, 800bbee <__i2b+0x1a>
 800bbe2:	4b05      	ldr	r3, [pc, #20]	@ (800bbf8 <__i2b+0x24>)
 800bbe4:	4805      	ldr	r0, [pc, #20]	@ (800bbfc <__i2b+0x28>)
 800bbe6:	f240 1145 	movw	r1, #325	@ 0x145
 800bbea:	f000 fb61 	bl	800c2b0 <__assert_func>
 800bbee:	2301      	movs	r3, #1
 800bbf0:	6144      	str	r4, [r0, #20]
 800bbf2:	6103      	str	r3, [r0, #16]
 800bbf4:	bd10      	pop	{r4, pc}
 800bbf6:	bf00      	nop
 800bbf8:	0800cd48 	.word	0x0800cd48
 800bbfc:	0800cd6a 	.word	0x0800cd6a

0800bc00 <__multiply>:
 800bc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc04:	4614      	mov	r4, r2
 800bc06:	690a      	ldr	r2, [r1, #16]
 800bc08:	6923      	ldr	r3, [r4, #16]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	bfa8      	it	ge
 800bc0e:	4623      	movge	r3, r4
 800bc10:	460f      	mov	r7, r1
 800bc12:	bfa4      	itt	ge
 800bc14:	460c      	movge	r4, r1
 800bc16:	461f      	movge	r7, r3
 800bc18:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bc1c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bc20:	68a3      	ldr	r3, [r4, #8]
 800bc22:	6861      	ldr	r1, [r4, #4]
 800bc24:	eb0a 0609 	add.w	r6, sl, r9
 800bc28:	42b3      	cmp	r3, r6
 800bc2a:	b085      	sub	sp, #20
 800bc2c:	bfb8      	it	lt
 800bc2e:	3101      	addlt	r1, #1
 800bc30:	f7ff fedc 	bl	800b9ec <_Balloc>
 800bc34:	b930      	cbnz	r0, 800bc44 <__multiply+0x44>
 800bc36:	4602      	mov	r2, r0
 800bc38:	4b44      	ldr	r3, [pc, #272]	@ (800bd4c <__multiply+0x14c>)
 800bc3a:	4845      	ldr	r0, [pc, #276]	@ (800bd50 <__multiply+0x150>)
 800bc3c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bc40:	f000 fb36 	bl	800c2b0 <__assert_func>
 800bc44:	f100 0514 	add.w	r5, r0, #20
 800bc48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bc4c:	462b      	mov	r3, r5
 800bc4e:	2200      	movs	r2, #0
 800bc50:	4543      	cmp	r3, r8
 800bc52:	d321      	bcc.n	800bc98 <__multiply+0x98>
 800bc54:	f107 0114 	add.w	r1, r7, #20
 800bc58:	f104 0214 	add.w	r2, r4, #20
 800bc5c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bc60:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bc64:	9302      	str	r3, [sp, #8]
 800bc66:	1b13      	subs	r3, r2, r4
 800bc68:	3b15      	subs	r3, #21
 800bc6a:	f023 0303 	bic.w	r3, r3, #3
 800bc6e:	3304      	adds	r3, #4
 800bc70:	f104 0715 	add.w	r7, r4, #21
 800bc74:	42ba      	cmp	r2, r7
 800bc76:	bf38      	it	cc
 800bc78:	2304      	movcc	r3, #4
 800bc7a:	9301      	str	r3, [sp, #4]
 800bc7c:	9b02      	ldr	r3, [sp, #8]
 800bc7e:	9103      	str	r1, [sp, #12]
 800bc80:	428b      	cmp	r3, r1
 800bc82:	d80c      	bhi.n	800bc9e <__multiply+0x9e>
 800bc84:	2e00      	cmp	r6, #0
 800bc86:	dd03      	ble.n	800bc90 <__multiply+0x90>
 800bc88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d05a      	beq.n	800bd46 <__multiply+0x146>
 800bc90:	6106      	str	r6, [r0, #16]
 800bc92:	b005      	add	sp, #20
 800bc94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc98:	f843 2b04 	str.w	r2, [r3], #4
 800bc9c:	e7d8      	b.n	800bc50 <__multiply+0x50>
 800bc9e:	f8b1 a000 	ldrh.w	sl, [r1]
 800bca2:	f1ba 0f00 	cmp.w	sl, #0
 800bca6:	d023      	beq.n	800bcf0 <__multiply+0xf0>
 800bca8:	f104 0e14 	add.w	lr, r4, #20
 800bcac:	46a9      	mov	r9, r5
 800bcae:	f04f 0c00 	mov.w	ip, #0
 800bcb2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bcb6:	f8d9 3000 	ldr.w	r3, [r9]
 800bcba:	fa1f fb87 	uxth.w	fp, r7
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	fb0a 330b 	mla	r3, sl, fp, r3
 800bcc4:	4463      	add	r3, ip
 800bcc6:	f8d9 c000 	ldr.w	ip, [r9]
 800bcca:	0c3f      	lsrs	r7, r7, #16
 800bccc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bcd0:	fb0a c707 	mla	r7, sl, r7, ip
 800bcd4:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bcde:	4572      	cmp	r2, lr
 800bce0:	f849 3b04 	str.w	r3, [r9], #4
 800bce4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bce8:	d8e3      	bhi.n	800bcb2 <__multiply+0xb2>
 800bcea:	9b01      	ldr	r3, [sp, #4]
 800bcec:	f845 c003 	str.w	ip, [r5, r3]
 800bcf0:	9b03      	ldr	r3, [sp, #12]
 800bcf2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bcf6:	3104      	adds	r1, #4
 800bcf8:	f1b9 0f00 	cmp.w	r9, #0
 800bcfc:	d021      	beq.n	800bd42 <__multiply+0x142>
 800bcfe:	682b      	ldr	r3, [r5, #0]
 800bd00:	f104 0c14 	add.w	ip, r4, #20
 800bd04:	46ae      	mov	lr, r5
 800bd06:	f04f 0a00 	mov.w	sl, #0
 800bd0a:	f8bc b000 	ldrh.w	fp, [ip]
 800bd0e:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bd12:	fb09 770b 	mla	r7, r9, fp, r7
 800bd16:	4457      	add	r7, sl
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bd1e:	f84e 3b04 	str.w	r3, [lr], #4
 800bd22:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bd26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd2a:	f8be 3000 	ldrh.w	r3, [lr]
 800bd2e:	fb09 330a 	mla	r3, r9, sl, r3
 800bd32:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bd36:	4562      	cmp	r2, ip
 800bd38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd3c:	d8e5      	bhi.n	800bd0a <__multiply+0x10a>
 800bd3e:	9f01      	ldr	r7, [sp, #4]
 800bd40:	51eb      	str	r3, [r5, r7]
 800bd42:	3504      	adds	r5, #4
 800bd44:	e79a      	b.n	800bc7c <__multiply+0x7c>
 800bd46:	3e01      	subs	r6, #1
 800bd48:	e79c      	b.n	800bc84 <__multiply+0x84>
 800bd4a:	bf00      	nop
 800bd4c:	0800cd48 	.word	0x0800cd48
 800bd50:	0800cd6a 	.word	0x0800cd6a

0800bd54 <__pow5mult>:
 800bd54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd58:	4615      	mov	r5, r2
 800bd5a:	f012 0203 	ands.w	r2, r2, #3
 800bd5e:	4607      	mov	r7, r0
 800bd60:	460e      	mov	r6, r1
 800bd62:	d007      	beq.n	800bd74 <__pow5mult+0x20>
 800bd64:	4c25      	ldr	r4, [pc, #148]	@ (800bdfc <__pow5mult+0xa8>)
 800bd66:	3a01      	subs	r2, #1
 800bd68:	2300      	movs	r3, #0
 800bd6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd6e:	f7ff fe9f 	bl	800bab0 <__multadd>
 800bd72:	4606      	mov	r6, r0
 800bd74:	10ad      	asrs	r5, r5, #2
 800bd76:	d03d      	beq.n	800bdf4 <__pow5mult+0xa0>
 800bd78:	69fc      	ldr	r4, [r7, #28]
 800bd7a:	b97c      	cbnz	r4, 800bd9c <__pow5mult+0x48>
 800bd7c:	2010      	movs	r0, #16
 800bd7e:	f7ff fcd7 	bl	800b730 <malloc>
 800bd82:	4602      	mov	r2, r0
 800bd84:	61f8      	str	r0, [r7, #28]
 800bd86:	b928      	cbnz	r0, 800bd94 <__pow5mult+0x40>
 800bd88:	4b1d      	ldr	r3, [pc, #116]	@ (800be00 <__pow5mult+0xac>)
 800bd8a:	481e      	ldr	r0, [pc, #120]	@ (800be04 <__pow5mult+0xb0>)
 800bd8c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bd90:	f000 fa8e 	bl	800c2b0 <__assert_func>
 800bd94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd98:	6004      	str	r4, [r0, #0]
 800bd9a:	60c4      	str	r4, [r0, #12]
 800bd9c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bda0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bda4:	b94c      	cbnz	r4, 800bdba <__pow5mult+0x66>
 800bda6:	f240 2171 	movw	r1, #625	@ 0x271
 800bdaa:	4638      	mov	r0, r7
 800bdac:	f7ff ff12 	bl	800bbd4 <__i2b>
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	f8c8 0008 	str.w	r0, [r8, #8]
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	6003      	str	r3, [r0, #0]
 800bdba:	f04f 0900 	mov.w	r9, #0
 800bdbe:	07eb      	lsls	r3, r5, #31
 800bdc0:	d50a      	bpl.n	800bdd8 <__pow5mult+0x84>
 800bdc2:	4631      	mov	r1, r6
 800bdc4:	4622      	mov	r2, r4
 800bdc6:	4638      	mov	r0, r7
 800bdc8:	f7ff ff1a 	bl	800bc00 <__multiply>
 800bdcc:	4631      	mov	r1, r6
 800bdce:	4680      	mov	r8, r0
 800bdd0:	4638      	mov	r0, r7
 800bdd2:	f7ff fe4b 	bl	800ba6c <_Bfree>
 800bdd6:	4646      	mov	r6, r8
 800bdd8:	106d      	asrs	r5, r5, #1
 800bdda:	d00b      	beq.n	800bdf4 <__pow5mult+0xa0>
 800bddc:	6820      	ldr	r0, [r4, #0]
 800bdde:	b938      	cbnz	r0, 800bdf0 <__pow5mult+0x9c>
 800bde0:	4622      	mov	r2, r4
 800bde2:	4621      	mov	r1, r4
 800bde4:	4638      	mov	r0, r7
 800bde6:	f7ff ff0b 	bl	800bc00 <__multiply>
 800bdea:	6020      	str	r0, [r4, #0]
 800bdec:	f8c0 9000 	str.w	r9, [r0]
 800bdf0:	4604      	mov	r4, r0
 800bdf2:	e7e4      	b.n	800bdbe <__pow5mult+0x6a>
 800bdf4:	4630      	mov	r0, r6
 800bdf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdfa:	bf00      	nop
 800bdfc:	0800cdc4 	.word	0x0800cdc4
 800be00:	0800ccd9 	.word	0x0800ccd9
 800be04:	0800cd6a 	.word	0x0800cd6a

0800be08 <__lshift>:
 800be08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be0c:	460c      	mov	r4, r1
 800be0e:	6849      	ldr	r1, [r1, #4]
 800be10:	6923      	ldr	r3, [r4, #16]
 800be12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be16:	68a3      	ldr	r3, [r4, #8]
 800be18:	4607      	mov	r7, r0
 800be1a:	4691      	mov	r9, r2
 800be1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be20:	f108 0601 	add.w	r6, r8, #1
 800be24:	42b3      	cmp	r3, r6
 800be26:	db0b      	blt.n	800be40 <__lshift+0x38>
 800be28:	4638      	mov	r0, r7
 800be2a:	f7ff fddf 	bl	800b9ec <_Balloc>
 800be2e:	4605      	mov	r5, r0
 800be30:	b948      	cbnz	r0, 800be46 <__lshift+0x3e>
 800be32:	4602      	mov	r2, r0
 800be34:	4b28      	ldr	r3, [pc, #160]	@ (800bed8 <__lshift+0xd0>)
 800be36:	4829      	ldr	r0, [pc, #164]	@ (800bedc <__lshift+0xd4>)
 800be38:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800be3c:	f000 fa38 	bl	800c2b0 <__assert_func>
 800be40:	3101      	adds	r1, #1
 800be42:	005b      	lsls	r3, r3, #1
 800be44:	e7ee      	b.n	800be24 <__lshift+0x1c>
 800be46:	2300      	movs	r3, #0
 800be48:	f100 0114 	add.w	r1, r0, #20
 800be4c:	f100 0210 	add.w	r2, r0, #16
 800be50:	4618      	mov	r0, r3
 800be52:	4553      	cmp	r3, sl
 800be54:	db33      	blt.n	800bebe <__lshift+0xb6>
 800be56:	6920      	ldr	r0, [r4, #16]
 800be58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be5c:	f104 0314 	add.w	r3, r4, #20
 800be60:	f019 091f 	ands.w	r9, r9, #31
 800be64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800be6c:	d02b      	beq.n	800bec6 <__lshift+0xbe>
 800be6e:	f1c9 0e20 	rsb	lr, r9, #32
 800be72:	468a      	mov	sl, r1
 800be74:	2200      	movs	r2, #0
 800be76:	6818      	ldr	r0, [r3, #0]
 800be78:	fa00 f009 	lsl.w	r0, r0, r9
 800be7c:	4310      	orrs	r0, r2
 800be7e:	f84a 0b04 	str.w	r0, [sl], #4
 800be82:	f853 2b04 	ldr.w	r2, [r3], #4
 800be86:	459c      	cmp	ip, r3
 800be88:	fa22 f20e 	lsr.w	r2, r2, lr
 800be8c:	d8f3      	bhi.n	800be76 <__lshift+0x6e>
 800be8e:	ebac 0304 	sub.w	r3, ip, r4
 800be92:	3b15      	subs	r3, #21
 800be94:	f023 0303 	bic.w	r3, r3, #3
 800be98:	3304      	adds	r3, #4
 800be9a:	f104 0015 	add.w	r0, r4, #21
 800be9e:	4584      	cmp	ip, r0
 800bea0:	bf38      	it	cc
 800bea2:	2304      	movcc	r3, #4
 800bea4:	50ca      	str	r2, [r1, r3]
 800bea6:	b10a      	cbz	r2, 800beac <__lshift+0xa4>
 800bea8:	f108 0602 	add.w	r6, r8, #2
 800beac:	3e01      	subs	r6, #1
 800beae:	4638      	mov	r0, r7
 800beb0:	612e      	str	r6, [r5, #16]
 800beb2:	4621      	mov	r1, r4
 800beb4:	f7ff fdda 	bl	800ba6c <_Bfree>
 800beb8:	4628      	mov	r0, r5
 800beba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bebe:	f842 0f04 	str.w	r0, [r2, #4]!
 800bec2:	3301      	adds	r3, #1
 800bec4:	e7c5      	b.n	800be52 <__lshift+0x4a>
 800bec6:	3904      	subs	r1, #4
 800bec8:	f853 2b04 	ldr.w	r2, [r3], #4
 800becc:	f841 2f04 	str.w	r2, [r1, #4]!
 800bed0:	459c      	cmp	ip, r3
 800bed2:	d8f9      	bhi.n	800bec8 <__lshift+0xc0>
 800bed4:	e7ea      	b.n	800beac <__lshift+0xa4>
 800bed6:	bf00      	nop
 800bed8:	0800cd48 	.word	0x0800cd48
 800bedc:	0800cd6a 	.word	0x0800cd6a

0800bee0 <__mcmp>:
 800bee0:	690a      	ldr	r2, [r1, #16]
 800bee2:	4603      	mov	r3, r0
 800bee4:	6900      	ldr	r0, [r0, #16]
 800bee6:	1a80      	subs	r0, r0, r2
 800bee8:	b530      	push	{r4, r5, lr}
 800beea:	d10e      	bne.n	800bf0a <__mcmp+0x2a>
 800beec:	3314      	adds	r3, #20
 800beee:	3114      	adds	r1, #20
 800bef0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bef4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bef8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800befc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bf00:	4295      	cmp	r5, r2
 800bf02:	d003      	beq.n	800bf0c <__mcmp+0x2c>
 800bf04:	d205      	bcs.n	800bf12 <__mcmp+0x32>
 800bf06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf0a:	bd30      	pop	{r4, r5, pc}
 800bf0c:	42a3      	cmp	r3, r4
 800bf0e:	d3f3      	bcc.n	800bef8 <__mcmp+0x18>
 800bf10:	e7fb      	b.n	800bf0a <__mcmp+0x2a>
 800bf12:	2001      	movs	r0, #1
 800bf14:	e7f9      	b.n	800bf0a <__mcmp+0x2a>
	...

0800bf18 <__mdiff>:
 800bf18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf1c:	4689      	mov	r9, r1
 800bf1e:	4606      	mov	r6, r0
 800bf20:	4611      	mov	r1, r2
 800bf22:	4648      	mov	r0, r9
 800bf24:	4614      	mov	r4, r2
 800bf26:	f7ff ffdb 	bl	800bee0 <__mcmp>
 800bf2a:	1e05      	subs	r5, r0, #0
 800bf2c:	d112      	bne.n	800bf54 <__mdiff+0x3c>
 800bf2e:	4629      	mov	r1, r5
 800bf30:	4630      	mov	r0, r6
 800bf32:	f7ff fd5b 	bl	800b9ec <_Balloc>
 800bf36:	4602      	mov	r2, r0
 800bf38:	b928      	cbnz	r0, 800bf46 <__mdiff+0x2e>
 800bf3a:	4b3e      	ldr	r3, [pc, #248]	@ (800c034 <__mdiff+0x11c>)
 800bf3c:	f240 2137 	movw	r1, #567	@ 0x237
 800bf40:	483d      	ldr	r0, [pc, #244]	@ (800c038 <__mdiff+0x120>)
 800bf42:	f000 f9b5 	bl	800c2b0 <__assert_func>
 800bf46:	2301      	movs	r3, #1
 800bf48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf4c:	4610      	mov	r0, r2
 800bf4e:	b003      	add	sp, #12
 800bf50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf54:	bfbc      	itt	lt
 800bf56:	464b      	movlt	r3, r9
 800bf58:	46a1      	movlt	r9, r4
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bf60:	bfba      	itte	lt
 800bf62:	461c      	movlt	r4, r3
 800bf64:	2501      	movlt	r5, #1
 800bf66:	2500      	movge	r5, #0
 800bf68:	f7ff fd40 	bl	800b9ec <_Balloc>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	b918      	cbnz	r0, 800bf78 <__mdiff+0x60>
 800bf70:	4b30      	ldr	r3, [pc, #192]	@ (800c034 <__mdiff+0x11c>)
 800bf72:	f240 2145 	movw	r1, #581	@ 0x245
 800bf76:	e7e3      	b.n	800bf40 <__mdiff+0x28>
 800bf78:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bf7c:	6926      	ldr	r6, [r4, #16]
 800bf7e:	60c5      	str	r5, [r0, #12]
 800bf80:	f109 0310 	add.w	r3, r9, #16
 800bf84:	f109 0514 	add.w	r5, r9, #20
 800bf88:	f104 0e14 	add.w	lr, r4, #20
 800bf8c:	f100 0b14 	add.w	fp, r0, #20
 800bf90:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bf94:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bf98:	9301      	str	r3, [sp, #4]
 800bf9a:	46d9      	mov	r9, fp
 800bf9c:	f04f 0c00 	mov.w	ip, #0
 800bfa0:	9b01      	ldr	r3, [sp, #4]
 800bfa2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bfa6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bfaa:	9301      	str	r3, [sp, #4]
 800bfac:	b281      	uxth	r1, r0
 800bfae:	fa1f f38a 	uxth.w	r3, sl
 800bfb2:	1a5b      	subs	r3, r3, r1
 800bfb4:	0c00      	lsrs	r0, r0, #16
 800bfb6:	4463      	add	r3, ip
 800bfb8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bfbc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bfc6:	4576      	cmp	r6, lr
 800bfc8:	f849 3b04 	str.w	r3, [r9], #4
 800bfcc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bfd0:	d8e6      	bhi.n	800bfa0 <__mdiff+0x88>
 800bfd2:	1b33      	subs	r3, r6, r4
 800bfd4:	3b15      	subs	r3, #21
 800bfd6:	f023 0303 	bic.w	r3, r3, #3
 800bfda:	3415      	adds	r4, #21
 800bfdc:	3304      	adds	r3, #4
 800bfde:	42a6      	cmp	r6, r4
 800bfe0:	bf38      	it	cc
 800bfe2:	2304      	movcc	r3, #4
 800bfe4:	441d      	add	r5, r3
 800bfe6:	445b      	add	r3, fp
 800bfe8:	461e      	mov	r6, r3
 800bfea:	462c      	mov	r4, r5
 800bfec:	4544      	cmp	r4, r8
 800bfee:	d30e      	bcc.n	800c00e <__mdiff+0xf6>
 800bff0:	f108 0103 	add.w	r1, r8, #3
 800bff4:	1b49      	subs	r1, r1, r5
 800bff6:	f021 0103 	bic.w	r1, r1, #3
 800bffa:	3d03      	subs	r5, #3
 800bffc:	45a8      	cmp	r8, r5
 800bffe:	bf38      	it	cc
 800c000:	2100      	movcc	r1, #0
 800c002:	440b      	add	r3, r1
 800c004:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c008:	b191      	cbz	r1, 800c030 <__mdiff+0x118>
 800c00a:	6117      	str	r7, [r2, #16]
 800c00c:	e79e      	b.n	800bf4c <__mdiff+0x34>
 800c00e:	f854 1b04 	ldr.w	r1, [r4], #4
 800c012:	46e6      	mov	lr, ip
 800c014:	0c08      	lsrs	r0, r1, #16
 800c016:	fa1c fc81 	uxtah	ip, ip, r1
 800c01a:	4471      	add	r1, lr
 800c01c:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c020:	b289      	uxth	r1, r1
 800c022:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c026:	f846 1b04 	str.w	r1, [r6], #4
 800c02a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c02e:	e7dd      	b.n	800bfec <__mdiff+0xd4>
 800c030:	3f01      	subs	r7, #1
 800c032:	e7e7      	b.n	800c004 <__mdiff+0xec>
 800c034:	0800cd48 	.word	0x0800cd48
 800c038:	0800cd6a 	.word	0x0800cd6a

0800c03c <__d2b>:
 800c03c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800c040:	2101      	movs	r1, #1
 800c042:	9e08      	ldr	r6, [sp, #32]
 800c044:	4690      	mov	r8, r2
 800c046:	4699      	mov	r9, r3
 800c048:	f7ff fcd0 	bl	800b9ec <_Balloc>
 800c04c:	4604      	mov	r4, r0
 800c04e:	b930      	cbnz	r0, 800c05e <__d2b+0x22>
 800c050:	4602      	mov	r2, r0
 800c052:	4b24      	ldr	r3, [pc, #144]	@ (800c0e4 <__d2b+0xa8>)
 800c054:	4824      	ldr	r0, [pc, #144]	@ (800c0e8 <__d2b+0xac>)
 800c056:	f240 310f 	movw	r1, #783	@ 0x30f
 800c05a:	f000 f929 	bl	800c2b0 <__assert_func>
 800c05e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c062:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c066:	b10d      	cbz	r5, 800c06c <__d2b+0x30>
 800c068:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c06c:	9301      	str	r3, [sp, #4]
 800c06e:	f1b8 0300 	subs.w	r3, r8, #0
 800c072:	d024      	beq.n	800c0be <__d2b+0x82>
 800c074:	4668      	mov	r0, sp
 800c076:	9300      	str	r3, [sp, #0]
 800c078:	f7ff fd7f 	bl	800bb7a <__lo0bits>
 800c07c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c080:	b1d8      	cbz	r0, 800c0ba <__d2b+0x7e>
 800c082:	f1c0 0320 	rsb	r3, r0, #32
 800c086:	fa02 f303 	lsl.w	r3, r2, r3
 800c08a:	430b      	orrs	r3, r1
 800c08c:	40c2      	lsrs	r2, r0
 800c08e:	6163      	str	r3, [r4, #20]
 800c090:	9201      	str	r2, [sp, #4]
 800c092:	9b01      	ldr	r3, [sp, #4]
 800c094:	61a3      	str	r3, [r4, #24]
 800c096:	2b00      	cmp	r3, #0
 800c098:	bf0c      	ite	eq
 800c09a:	2201      	moveq	r2, #1
 800c09c:	2202      	movne	r2, #2
 800c09e:	6122      	str	r2, [r4, #16]
 800c0a0:	b1ad      	cbz	r5, 800c0ce <__d2b+0x92>
 800c0a2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c0a6:	4405      	add	r5, r0
 800c0a8:	6035      	str	r5, [r6, #0]
 800c0aa:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c0ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0b0:	6018      	str	r0, [r3, #0]
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	b002      	add	sp, #8
 800c0b6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c0ba:	6161      	str	r1, [r4, #20]
 800c0bc:	e7e9      	b.n	800c092 <__d2b+0x56>
 800c0be:	a801      	add	r0, sp, #4
 800c0c0:	f7ff fd5b 	bl	800bb7a <__lo0bits>
 800c0c4:	9b01      	ldr	r3, [sp, #4]
 800c0c6:	6163      	str	r3, [r4, #20]
 800c0c8:	3020      	adds	r0, #32
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	e7e7      	b.n	800c09e <__d2b+0x62>
 800c0ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c0d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c0d6:	6030      	str	r0, [r6, #0]
 800c0d8:	6918      	ldr	r0, [r3, #16]
 800c0da:	f7ff fd2f 	bl	800bb3c <__hi0bits>
 800c0de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c0e2:	e7e4      	b.n	800c0ae <__d2b+0x72>
 800c0e4:	0800cd48 	.word	0x0800cd48
 800c0e8:	0800cd6a 	.word	0x0800cd6a

0800c0ec <__sread>:
 800c0ec:	b510      	push	{r4, lr}
 800c0ee:	460c      	mov	r4, r1
 800c0f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0f4:	f000 f8a8 	bl	800c248 <_read_r>
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	bfab      	itete	ge
 800c0fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c0fe:	89a3      	ldrhlt	r3, [r4, #12]
 800c100:	181b      	addge	r3, r3, r0
 800c102:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c106:	bfac      	ite	ge
 800c108:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c10a:	81a3      	strhlt	r3, [r4, #12]
 800c10c:	bd10      	pop	{r4, pc}

0800c10e <__swrite>:
 800c10e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c112:	461f      	mov	r7, r3
 800c114:	898b      	ldrh	r3, [r1, #12]
 800c116:	05db      	lsls	r3, r3, #23
 800c118:	4605      	mov	r5, r0
 800c11a:	460c      	mov	r4, r1
 800c11c:	4616      	mov	r6, r2
 800c11e:	d505      	bpl.n	800c12c <__swrite+0x1e>
 800c120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c124:	2302      	movs	r3, #2
 800c126:	2200      	movs	r2, #0
 800c128:	f000 f87c 	bl	800c224 <_lseek_r>
 800c12c:	89a3      	ldrh	r3, [r4, #12]
 800c12e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c132:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c136:	81a3      	strh	r3, [r4, #12]
 800c138:	4632      	mov	r2, r6
 800c13a:	463b      	mov	r3, r7
 800c13c:	4628      	mov	r0, r5
 800c13e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c142:	f000 b8a3 	b.w	800c28c <_write_r>

0800c146 <__sseek>:
 800c146:	b510      	push	{r4, lr}
 800c148:	460c      	mov	r4, r1
 800c14a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c14e:	f000 f869 	bl	800c224 <_lseek_r>
 800c152:	1c43      	adds	r3, r0, #1
 800c154:	89a3      	ldrh	r3, [r4, #12]
 800c156:	bf15      	itete	ne
 800c158:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c15a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c15e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c162:	81a3      	strheq	r3, [r4, #12]
 800c164:	bf18      	it	ne
 800c166:	81a3      	strhne	r3, [r4, #12]
 800c168:	bd10      	pop	{r4, pc}

0800c16a <__sclose>:
 800c16a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c16e:	f000 b849 	b.w	800c204 <_close_r>

0800c172 <_realloc_r>:
 800c172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c176:	4680      	mov	r8, r0
 800c178:	4615      	mov	r5, r2
 800c17a:	460c      	mov	r4, r1
 800c17c:	b921      	cbnz	r1, 800c188 <_realloc_r+0x16>
 800c17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c182:	4611      	mov	r1, r2
 800c184:	f7ff bafe 	b.w	800b784 <_malloc_r>
 800c188:	b92a      	cbnz	r2, 800c196 <_realloc_r+0x24>
 800c18a:	f000 f8c3 	bl	800c314 <_free_r>
 800c18e:	2400      	movs	r4, #0
 800c190:	4620      	mov	r0, r4
 800c192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c196:	f000 f919 	bl	800c3cc <_malloc_usable_size_r>
 800c19a:	4285      	cmp	r5, r0
 800c19c:	4606      	mov	r6, r0
 800c19e:	d802      	bhi.n	800c1a6 <_realloc_r+0x34>
 800c1a0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c1a4:	d8f4      	bhi.n	800c190 <_realloc_r+0x1e>
 800c1a6:	4629      	mov	r1, r5
 800c1a8:	4640      	mov	r0, r8
 800c1aa:	f7ff faeb 	bl	800b784 <_malloc_r>
 800c1ae:	4607      	mov	r7, r0
 800c1b0:	2800      	cmp	r0, #0
 800c1b2:	d0ec      	beq.n	800c18e <_realloc_r+0x1c>
 800c1b4:	42b5      	cmp	r5, r6
 800c1b6:	462a      	mov	r2, r5
 800c1b8:	4621      	mov	r1, r4
 800c1ba:	bf28      	it	cs
 800c1bc:	4632      	movcs	r2, r6
 800c1be:	f7fe fb00 	bl	800a7c2 <memcpy>
 800c1c2:	4621      	mov	r1, r4
 800c1c4:	4640      	mov	r0, r8
 800c1c6:	f000 f8a5 	bl	800c314 <_free_r>
 800c1ca:	463c      	mov	r4, r7
 800c1cc:	e7e0      	b.n	800c190 <_realloc_r+0x1e>

0800c1ce <memmove>:
 800c1ce:	4288      	cmp	r0, r1
 800c1d0:	b510      	push	{r4, lr}
 800c1d2:	eb01 0402 	add.w	r4, r1, r2
 800c1d6:	d902      	bls.n	800c1de <memmove+0x10>
 800c1d8:	4284      	cmp	r4, r0
 800c1da:	4623      	mov	r3, r4
 800c1dc:	d807      	bhi.n	800c1ee <memmove+0x20>
 800c1de:	1e43      	subs	r3, r0, #1
 800c1e0:	42a1      	cmp	r1, r4
 800c1e2:	d008      	beq.n	800c1f6 <memmove+0x28>
 800c1e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c1ec:	e7f8      	b.n	800c1e0 <memmove+0x12>
 800c1ee:	4402      	add	r2, r0
 800c1f0:	4601      	mov	r1, r0
 800c1f2:	428a      	cmp	r2, r1
 800c1f4:	d100      	bne.n	800c1f8 <memmove+0x2a>
 800c1f6:	bd10      	pop	{r4, pc}
 800c1f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c200:	e7f7      	b.n	800c1f2 <memmove+0x24>
	...

0800c204 <_close_r>:
 800c204:	b538      	push	{r3, r4, r5, lr}
 800c206:	4d06      	ldr	r5, [pc, #24]	@ (800c220 <_close_r+0x1c>)
 800c208:	2300      	movs	r3, #0
 800c20a:	4604      	mov	r4, r0
 800c20c:	4608      	mov	r0, r1
 800c20e:	602b      	str	r3, [r5, #0]
 800c210:	f7f6 fac7 	bl	80027a2 <_close>
 800c214:	1c43      	adds	r3, r0, #1
 800c216:	d102      	bne.n	800c21e <_close_r+0x1a>
 800c218:	682b      	ldr	r3, [r5, #0]
 800c21a:	b103      	cbz	r3, 800c21e <_close_r+0x1a>
 800c21c:	6023      	str	r3, [r4, #0]
 800c21e:	bd38      	pop	{r3, r4, r5, pc}
 800c220:	20000b58 	.word	0x20000b58

0800c224 <_lseek_r>:
 800c224:	b538      	push	{r3, r4, r5, lr}
 800c226:	4d07      	ldr	r5, [pc, #28]	@ (800c244 <_lseek_r+0x20>)
 800c228:	4604      	mov	r4, r0
 800c22a:	4608      	mov	r0, r1
 800c22c:	4611      	mov	r1, r2
 800c22e:	2200      	movs	r2, #0
 800c230:	602a      	str	r2, [r5, #0]
 800c232:	461a      	mov	r2, r3
 800c234:	f7f6 fad9 	bl	80027ea <_lseek>
 800c238:	1c43      	adds	r3, r0, #1
 800c23a:	d102      	bne.n	800c242 <_lseek_r+0x1e>
 800c23c:	682b      	ldr	r3, [r5, #0]
 800c23e:	b103      	cbz	r3, 800c242 <_lseek_r+0x1e>
 800c240:	6023      	str	r3, [r4, #0]
 800c242:	bd38      	pop	{r3, r4, r5, pc}
 800c244:	20000b58 	.word	0x20000b58

0800c248 <_read_r>:
 800c248:	b538      	push	{r3, r4, r5, lr}
 800c24a:	4d07      	ldr	r5, [pc, #28]	@ (800c268 <_read_r+0x20>)
 800c24c:	4604      	mov	r4, r0
 800c24e:	4608      	mov	r0, r1
 800c250:	4611      	mov	r1, r2
 800c252:	2200      	movs	r2, #0
 800c254:	602a      	str	r2, [r5, #0]
 800c256:	461a      	mov	r2, r3
 800c258:	f7f6 fa6a 	bl	8002730 <_read>
 800c25c:	1c43      	adds	r3, r0, #1
 800c25e:	d102      	bne.n	800c266 <_read_r+0x1e>
 800c260:	682b      	ldr	r3, [r5, #0]
 800c262:	b103      	cbz	r3, 800c266 <_read_r+0x1e>
 800c264:	6023      	str	r3, [r4, #0]
 800c266:	bd38      	pop	{r3, r4, r5, pc}
 800c268:	20000b58 	.word	0x20000b58

0800c26c <_sbrk_r>:
 800c26c:	b538      	push	{r3, r4, r5, lr}
 800c26e:	4d06      	ldr	r5, [pc, #24]	@ (800c288 <_sbrk_r+0x1c>)
 800c270:	2300      	movs	r3, #0
 800c272:	4604      	mov	r4, r0
 800c274:	4608      	mov	r0, r1
 800c276:	602b      	str	r3, [r5, #0]
 800c278:	f7f6 fac4 	bl	8002804 <_sbrk>
 800c27c:	1c43      	adds	r3, r0, #1
 800c27e:	d102      	bne.n	800c286 <_sbrk_r+0x1a>
 800c280:	682b      	ldr	r3, [r5, #0]
 800c282:	b103      	cbz	r3, 800c286 <_sbrk_r+0x1a>
 800c284:	6023      	str	r3, [r4, #0]
 800c286:	bd38      	pop	{r3, r4, r5, pc}
 800c288:	20000b58 	.word	0x20000b58

0800c28c <_write_r>:
 800c28c:	b538      	push	{r3, r4, r5, lr}
 800c28e:	4d07      	ldr	r5, [pc, #28]	@ (800c2ac <_write_r+0x20>)
 800c290:	4604      	mov	r4, r0
 800c292:	4608      	mov	r0, r1
 800c294:	4611      	mov	r1, r2
 800c296:	2200      	movs	r2, #0
 800c298:	602a      	str	r2, [r5, #0]
 800c29a:	461a      	mov	r2, r3
 800c29c:	f7f6 fa65 	bl	800276a <_write>
 800c2a0:	1c43      	adds	r3, r0, #1
 800c2a2:	d102      	bne.n	800c2aa <_write_r+0x1e>
 800c2a4:	682b      	ldr	r3, [r5, #0]
 800c2a6:	b103      	cbz	r3, 800c2aa <_write_r+0x1e>
 800c2a8:	6023      	str	r3, [r4, #0]
 800c2aa:	bd38      	pop	{r3, r4, r5, pc}
 800c2ac:	20000b58 	.word	0x20000b58

0800c2b0 <__assert_func>:
 800c2b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2b2:	4614      	mov	r4, r2
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	4b09      	ldr	r3, [pc, #36]	@ (800c2dc <__assert_func+0x2c>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4605      	mov	r5, r0
 800c2bc:	68d8      	ldr	r0, [r3, #12]
 800c2be:	b954      	cbnz	r4, 800c2d6 <__assert_func+0x26>
 800c2c0:	4b07      	ldr	r3, [pc, #28]	@ (800c2e0 <__assert_func+0x30>)
 800c2c2:	461c      	mov	r4, r3
 800c2c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2c8:	9100      	str	r1, [sp, #0]
 800c2ca:	462b      	mov	r3, r5
 800c2cc:	4905      	ldr	r1, [pc, #20]	@ (800c2e4 <__assert_func+0x34>)
 800c2ce:	f000 f885 	bl	800c3dc <fiprintf>
 800c2d2:	f000 f8a2 	bl	800c41a <abort>
 800c2d6:	4b04      	ldr	r3, [pc, #16]	@ (800c2e8 <__assert_func+0x38>)
 800c2d8:	e7f4      	b.n	800c2c4 <__assert_func+0x14>
 800c2da:	bf00      	nop
 800c2dc:	20000030 	.word	0x20000030
 800c2e0:	0800d006 	.word	0x0800d006
 800c2e4:	0800cfd8 	.word	0x0800cfd8
 800c2e8:	0800cfcb 	.word	0x0800cfcb

0800c2ec <_calloc_r>:
 800c2ec:	b570      	push	{r4, r5, r6, lr}
 800c2ee:	fba1 5402 	umull	r5, r4, r1, r2
 800c2f2:	b93c      	cbnz	r4, 800c304 <_calloc_r+0x18>
 800c2f4:	4629      	mov	r1, r5
 800c2f6:	f7ff fa45 	bl	800b784 <_malloc_r>
 800c2fa:	4606      	mov	r6, r0
 800c2fc:	b928      	cbnz	r0, 800c30a <_calloc_r+0x1e>
 800c2fe:	2600      	movs	r6, #0
 800c300:	4630      	mov	r0, r6
 800c302:	bd70      	pop	{r4, r5, r6, pc}
 800c304:	220c      	movs	r2, #12
 800c306:	6002      	str	r2, [r0, #0]
 800c308:	e7f9      	b.n	800c2fe <_calloc_r+0x12>
 800c30a:	462a      	mov	r2, r5
 800c30c:	4621      	mov	r1, r4
 800c30e:	f7fe fa1f 	bl	800a750 <memset>
 800c312:	e7f5      	b.n	800c300 <_calloc_r+0x14>

0800c314 <_free_r>:
 800c314:	b538      	push	{r3, r4, r5, lr}
 800c316:	4605      	mov	r5, r0
 800c318:	2900      	cmp	r1, #0
 800c31a:	d041      	beq.n	800c3a0 <_free_r+0x8c>
 800c31c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c320:	1f0c      	subs	r4, r1, #4
 800c322:	2b00      	cmp	r3, #0
 800c324:	bfb8      	it	lt
 800c326:	18e4      	addlt	r4, r4, r3
 800c328:	f7ff fb54 	bl	800b9d4 <__malloc_lock>
 800c32c:	4a1d      	ldr	r2, [pc, #116]	@ (800c3a4 <_free_r+0x90>)
 800c32e:	6813      	ldr	r3, [r2, #0]
 800c330:	b933      	cbnz	r3, 800c340 <_free_r+0x2c>
 800c332:	6063      	str	r3, [r4, #4]
 800c334:	6014      	str	r4, [r2, #0]
 800c336:	4628      	mov	r0, r5
 800c338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c33c:	f7ff bb50 	b.w	800b9e0 <__malloc_unlock>
 800c340:	42a3      	cmp	r3, r4
 800c342:	d908      	bls.n	800c356 <_free_r+0x42>
 800c344:	6820      	ldr	r0, [r4, #0]
 800c346:	1821      	adds	r1, r4, r0
 800c348:	428b      	cmp	r3, r1
 800c34a:	bf01      	itttt	eq
 800c34c:	6819      	ldreq	r1, [r3, #0]
 800c34e:	685b      	ldreq	r3, [r3, #4]
 800c350:	1809      	addeq	r1, r1, r0
 800c352:	6021      	streq	r1, [r4, #0]
 800c354:	e7ed      	b.n	800c332 <_free_r+0x1e>
 800c356:	461a      	mov	r2, r3
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	b10b      	cbz	r3, 800c360 <_free_r+0x4c>
 800c35c:	42a3      	cmp	r3, r4
 800c35e:	d9fa      	bls.n	800c356 <_free_r+0x42>
 800c360:	6811      	ldr	r1, [r2, #0]
 800c362:	1850      	adds	r0, r2, r1
 800c364:	42a0      	cmp	r0, r4
 800c366:	d10b      	bne.n	800c380 <_free_r+0x6c>
 800c368:	6820      	ldr	r0, [r4, #0]
 800c36a:	4401      	add	r1, r0
 800c36c:	1850      	adds	r0, r2, r1
 800c36e:	4283      	cmp	r3, r0
 800c370:	6011      	str	r1, [r2, #0]
 800c372:	d1e0      	bne.n	800c336 <_free_r+0x22>
 800c374:	6818      	ldr	r0, [r3, #0]
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	6053      	str	r3, [r2, #4]
 800c37a:	4408      	add	r0, r1
 800c37c:	6010      	str	r0, [r2, #0]
 800c37e:	e7da      	b.n	800c336 <_free_r+0x22>
 800c380:	d902      	bls.n	800c388 <_free_r+0x74>
 800c382:	230c      	movs	r3, #12
 800c384:	602b      	str	r3, [r5, #0]
 800c386:	e7d6      	b.n	800c336 <_free_r+0x22>
 800c388:	6820      	ldr	r0, [r4, #0]
 800c38a:	1821      	adds	r1, r4, r0
 800c38c:	428b      	cmp	r3, r1
 800c38e:	bf04      	itt	eq
 800c390:	6819      	ldreq	r1, [r3, #0]
 800c392:	685b      	ldreq	r3, [r3, #4]
 800c394:	6063      	str	r3, [r4, #4]
 800c396:	bf04      	itt	eq
 800c398:	1809      	addeq	r1, r1, r0
 800c39a:	6021      	streq	r1, [r4, #0]
 800c39c:	6054      	str	r4, [r2, #4]
 800c39e:	e7ca      	b.n	800c336 <_free_r+0x22>
 800c3a0:	bd38      	pop	{r3, r4, r5, pc}
 800c3a2:	bf00      	nop
 800c3a4:	20000b54 	.word	0x20000b54

0800c3a8 <__ascii_mbtowc>:
 800c3a8:	b082      	sub	sp, #8
 800c3aa:	b901      	cbnz	r1, 800c3ae <__ascii_mbtowc+0x6>
 800c3ac:	a901      	add	r1, sp, #4
 800c3ae:	b142      	cbz	r2, 800c3c2 <__ascii_mbtowc+0x1a>
 800c3b0:	b14b      	cbz	r3, 800c3c6 <__ascii_mbtowc+0x1e>
 800c3b2:	7813      	ldrb	r3, [r2, #0]
 800c3b4:	600b      	str	r3, [r1, #0]
 800c3b6:	7812      	ldrb	r2, [r2, #0]
 800c3b8:	1e10      	subs	r0, r2, #0
 800c3ba:	bf18      	it	ne
 800c3bc:	2001      	movne	r0, #1
 800c3be:	b002      	add	sp, #8
 800c3c0:	4770      	bx	lr
 800c3c2:	4610      	mov	r0, r2
 800c3c4:	e7fb      	b.n	800c3be <__ascii_mbtowc+0x16>
 800c3c6:	f06f 0001 	mvn.w	r0, #1
 800c3ca:	e7f8      	b.n	800c3be <__ascii_mbtowc+0x16>

0800c3cc <_malloc_usable_size_r>:
 800c3cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3d0:	1f18      	subs	r0, r3, #4
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	bfbc      	itt	lt
 800c3d6:	580b      	ldrlt	r3, [r1, r0]
 800c3d8:	18c0      	addlt	r0, r0, r3
 800c3da:	4770      	bx	lr

0800c3dc <fiprintf>:
 800c3dc:	b40e      	push	{r1, r2, r3}
 800c3de:	b503      	push	{r0, r1, lr}
 800c3e0:	4601      	mov	r1, r0
 800c3e2:	ab03      	add	r3, sp, #12
 800c3e4:	4805      	ldr	r0, [pc, #20]	@ (800c3fc <fiprintf+0x20>)
 800c3e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3ea:	6800      	ldr	r0, [r0, #0]
 800c3ec:	9301      	str	r3, [sp, #4]
 800c3ee:	f000 f843 	bl	800c478 <_vfiprintf_r>
 800c3f2:	b002      	add	sp, #8
 800c3f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3f8:	b003      	add	sp, #12
 800c3fa:	4770      	bx	lr
 800c3fc:	20000030 	.word	0x20000030

0800c400 <__ascii_wctomb>:
 800c400:	4603      	mov	r3, r0
 800c402:	4608      	mov	r0, r1
 800c404:	b141      	cbz	r1, 800c418 <__ascii_wctomb+0x18>
 800c406:	2aff      	cmp	r2, #255	@ 0xff
 800c408:	d904      	bls.n	800c414 <__ascii_wctomb+0x14>
 800c40a:	228a      	movs	r2, #138	@ 0x8a
 800c40c:	601a      	str	r2, [r3, #0]
 800c40e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c412:	4770      	bx	lr
 800c414:	700a      	strb	r2, [r1, #0]
 800c416:	2001      	movs	r0, #1
 800c418:	4770      	bx	lr

0800c41a <abort>:
 800c41a:	b508      	push	{r3, lr}
 800c41c:	2006      	movs	r0, #6
 800c41e:	f000 fa83 	bl	800c928 <raise>
 800c422:	2001      	movs	r0, #1
 800c424:	f7f6 f979 	bl	800271a <_exit>

0800c428 <__sfputc_r>:
 800c428:	6893      	ldr	r3, [r2, #8]
 800c42a:	3b01      	subs	r3, #1
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	b410      	push	{r4}
 800c430:	6093      	str	r3, [r2, #8]
 800c432:	da07      	bge.n	800c444 <__sfputc_r+0x1c>
 800c434:	6994      	ldr	r4, [r2, #24]
 800c436:	42a3      	cmp	r3, r4
 800c438:	db01      	blt.n	800c43e <__sfputc_r+0x16>
 800c43a:	290a      	cmp	r1, #10
 800c43c:	d102      	bne.n	800c444 <__sfputc_r+0x1c>
 800c43e:	bc10      	pop	{r4}
 800c440:	f000 b932 	b.w	800c6a8 <__swbuf_r>
 800c444:	6813      	ldr	r3, [r2, #0]
 800c446:	1c58      	adds	r0, r3, #1
 800c448:	6010      	str	r0, [r2, #0]
 800c44a:	7019      	strb	r1, [r3, #0]
 800c44c:	4608      	mov	r0, r1
 800c44e:	bc10      	pop	{r4}
 800c450:	4770      	bx	lr

0800c452 <__sfputs_r>:
 800c452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c454:	4606      	mov	r6, r0
 800c456:	460f      	mov	r7, r1
 800c458:	4614      	mov	r4, r2
 800c45a:	18d5      	adds	r5, r2, r3
 800c45c:	42ac      	cmp	r4, r5
 800c45e:	d101      	bne.n	800c464 <__sfputs_r+0x12>
 800c460:	2000      	movs	r0, #0
 800c462:	e007      	b.n	800c474 <__sfputs_r+0x22>
 800c464:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c468:	463a      	mov	r2, r7
 800c46a:	4630      	mov	r0, r6
 800c46c:	f7ff ffdc 	bl	800c428 <__sfputc_r>
 800c470:	1c43      	adds	r3, r0, #1
 800c472:	d1f3      	bne.n	800c45c <__sfputs_r+0xa>
 800c474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c478 <_vfiprintf_r>:
 800c478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c47c:	460d      	mov	r5, r1
 800c47e:	b09d      	sub	sp, #116	@ 0x74
 800c480:	4614      	mov	r4, r2
 800c482:	4698      	mov	r8, r3
 800c484:	4606      	mov	r6, r0
 800c486:	b118      	cbz	r0, 800c490 <_vfiprintf_r+0x18>
 800c488:	6a03      	ldr	r3, [r0, #32]
 800c48a:	b90b      	cbnz	r3, 800c490 <_vfiprintf_r+0x18>
 800c48c:	f7fe f8f0 	bl	800a670 <__sinit>
 800c490:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c492:	07d9      	lsls	r1, r3, #31
 800c494:	d405      	bmi.n	800c4a2 <_vfiprintf_r+0x2a>
 800c496:	89ab      	ldrh	r3, [r5, #12]
 800c498:	059a      	lsls	r2, r3, #22
 800c49a:	d402      	bmi.n	800c4a2 <_vfiprintf_r+0x2a>
 800c49c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c49e:	f7fe f98e 	bl	800a7be <__retarget_lock_acquire_recursive>
 800c4a2:	89ab      	ldrh	r3, [r5, #12]
 800c4a4:	071b      	lsls	r3, r3, #28
 800c4a6:	d501      	bpl.n	800c4ac <_vfiprintf_r+0x34>
 800c4a8:	692b      	ldr	r3, [r5, #16]
 800c4aa:	b99b      	cbnz	r3, 800c4d4 <_vfiprintf_r+0x5c>
 800c4ac:	4629      	mov	r1, r5
 800c4ae:	4630      	mov	r0, r6
 800c4b0:	f000 f938 	bl	800c724 <__swsetup_r>
 800c4b4:	b170      	cbz	r0, 800c4d4 <_vfiprintf_r+0x5c>
 800c4b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4b8:	07dc      	lsls	r4, r3, #31
 800c4ba:	d504      	bpl.n	800c4c6 <_vfiprintf_r+0x4e>
 800c4bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c4c0:	b01d      	add	sp, #116	@ 0x74
 800c4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4c6:	89ab      	ldrh	r3, [r5, #12]
 800c4c8:	0598      	lsls	r0, r3, #22
 800c4ca:	d4f7      	bmi.n	800c4bc <_vfiprintf_r+0x44>
 800c4cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4ce:	f7fe f977 	bl	800a7c0 <__retarget_lock_release_recursive>
 800c4d2:	e7f3      	b.n	800c4bc <_vfiprintf_r+0x44>
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4d8:	2320      	movs	r3, #32
 800c4da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c4de:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4e2:	2330      	movs	r3, #48	@ 0x30
 800c4e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c694 <_vfiprintf_r+0x21c>
 800c4e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c4ec:	f04f 0901 	mov.w	r9, #1
 800c4f0:	4623      	mov	r3, r4
 800c4f2:	469a      	mov	sl, r3
 800c4f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4f8:	b10a      	cbz	r2, 800c4fe <_vfiprintf_r+0x86>
 800c4fa:	2a25      	cmp	r2, #37	@ 0x25
 800c4fc:	d1f9      	bne.n	800c4f2 <_vfiprintf_r+0x7a>
 800c4fe:	ebba 0b04 	subs.w	fp, sl, r4
 800c502:	d00b      	beq.n	800c51c <_vfiprintf_r+0xa4>
 800c504:	465b      	mov	r3, fp
 800c506:	4622      	mov	r2, r4
 800c508:	4629      	mov	r1, r5
 800c50a:	4630      	mov	r0, r6
 800c50c:	f7ff ffa1 	bl	800c452 <__sfputs_r>
 800c510:	3001      	adds	r0, #1
 800c512:	f000 80a7 	beq.w	800c664 <_vfiprintf_r+0x1ec>
 800c516:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c518:	445a      	add	r2, fp
 800c51a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c51c:	f89a 3000 	ldrb.w	r3, [sl]
 800c520:	2b00      	cmp	r3, #0
 800c522:	f000 809f 	beq.w	800c664 <_vfiprintf_r+0x1ec>
 800c526:	2300      	movs	r3, #0
 800c528:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c52c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c530:	f10a 0a01 	add.w	sl, sl, #1
 800c534:	9304      	str	r3, [sp, #16]
 800c536:	9307      	str	r3, [sp, #28]
 800c538:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c53c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c53e:	4654      	mov	r4, sl
 800c540:	2205      	movs	r2, #5
 800c542:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c546:	4853      	ldr	r0, [pc, #332]	@ (800c694 <_vfiprintf_r+0x21c>)
 800c548:	f7f3 fe1a 	bl	8000180 <memchr>
 800c54c:	9a04      	ldr	r2, [sp, #16]
 800c54e:	b9d8      	cbnz	r0, 800c588 <_vfiprintf_r+0x110>
 800c550:	06d1      	lsls	r1, r2, #27
 800c552:	bf44      	itt	mi
 800c554:	2320      	movmi	r3, #32
 800c556:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c55a:	0713      	lsls	r3, r2, #28
 800c55c:	bf44      	itt	mi
 800c55e:	232b      	movmi	r3, #43	@ 0x2b
 800c560:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c564:	f89a 3000 	ldrb.w	r3, [sl]
 800c568:	2b2a      	cmp	r3, #42	@ 0x2a
 800c56a:	d015      	beq.n	800c598 <_vfiprintf_r+0x120>
 800c56c:	9a07      	ldr	r2, [sp, #28]
 800c56e:	4654      	mov	r4, sl
 800c570:	2000      	movs	r0, #0
 800c572:	f04f 0c0a 	mov.w	ip, #10
 800c576:	4621      	mov	r1, r4
 800c578:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c57c:	3b30      	subs	r3, #48	@ 0x30
 800c57e:	2b09      	cmp	r3, #9
 800c580:	d94b      	bls.n	800c61a <_vfiprintf_r+0x1a2>
 800c582:	b1b0      	cbz	r0, 800c5b2 <_vfiprintf_r+0x13a>
 800c584:	9207      	str	r2, [sp, #28]
 800c586:	e014      	b.n	800c5b2 <_vfiprintf_r+0x13a>
 800c588:	eba0 0308 	sub.w	r3, r0, r8
 800c58c:	fa09 f303 	lsl.w	r3, r9, r3
 800c590:	4313      	orrs	r3, r2
 800c592:	9304      	str	r3, [sp, #16]
 800c594:	46a2      	mov	sl, r4
 800c596:	e7d2      	b.n	800c53e <_vfiprintf_r+0xc6>
 800c598:	9b03      	ldr	r3, [sp, #12]
 800c59a:	1d19      	adds	r1, r3, #4
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	9103      	str	r1, [sp, #12]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	bfbb      	ittet	lt
 800c5a4:	425b      	neglt	r3, r3
 800c5a6:	f042 0202 	orrlt.w	r2, r2, #2
 800c5aa:	9307      	strge	r3, [sp, #28]
 800c5ac:	9307      	strlt	r3, [sp, #28]
 800c5ae:	bfb8      	it	lt
 800c5b0:	9204      	strlt	r2, [sp, #16]
 800c5b2:	7823      	ldrb	r3, [r4, #0]
 800c5b4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c5b6:	d10a      	bne.n	800c5ce <_vfiprintf_r+0x156>
 800c5b8:	7863      	ldrb	r3, [r4, #1]
 800c5ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5bc:	d132      	bne.n	800c624 <_vfiprintf_r+0x1ac>
 800c5be:	9b03      	ldr	r3, [sp, #12]
 800c5c0:	1d1a      	adds	r2, r3, #4
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	9203      	str	r2, [sp, #12]
 800c5c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c5ca:	3402      	adds	r4, #2
 800c5cc:	9305      	str	r3, [sp, #20]
 800c5ce:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c698 <_vfiprintf_r+0x220>
 800c5d2:	7821      	ldrb	r1, [r4, #0]
 800c5d4:	2203      	movs	r2, #3
 800c5d6:	4650      	mov	r0, sl
 800c5d8:	f7f3 fdd2 	bl	8000180 <memchr>
 800c5dc:	b138      	cbz	r0, 800c5ee <_vfiprintf_r+0x176>
 800c5de:	9b04      	ldr	r3, [sp, #16]
 800c5e0:	eba0 000a 	sub.w	r0, r0, sl
 800c5e4:	2240      	movs	r2, #64	@ 0x40
 800c5e6:	4082      	lsls	r2, r0
 800c5e8:	4313      	orrs	r3, r2
 800c5ea:	3401      	adds	r4, #1
 800c5ec:	9304      	str	r3, [sp, #16]
 800c5ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5f2:	482a      	ldr	r0, [pc, #168]	@ (800c69c <_vfiprintf_r+0x224>)
 800c5f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c5f8:	2206      	movs	r2, #6
 800c5fa:	f7f3 fdc1 	bl	8000180 <memchr>
 800c5fe:	2800      	cmp	r0, #0
 800c600:	d03f      	beq.n	800c682 <_vfiprintf_r+0x20a>
 800c602:	4b27      	ldr	r3, [pc, #156]	@ (800c6a0 <_vfiprintf_r+0x228>)
 800c604:	bb1b      	cbnz	r3, 800c64e <_vfiprintf_r+0x1d6>
 800c606:	9b03      	ldr	r3, [sp, #12]
 800c608:	3307      	adds	r3, #7
 800c60a:	f023 0307 	bic.w	r3, r3, #7
 800c60e:	3308      	adds	r3, #8
 800c610:	9303      	str	r3, [sp, #12]
 800c612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c614:	443b      	add	r3, r7
 800c616:	9309      	str	r3, [sp, #36]	@ 0x24
 800c618:	e76a      	b.n	800c4f0 <_vfiprintf_r+0x78>
 800c61a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c61e:	460c      	mov	r4, r1
 800c620:	2001      	movs	r0, #1
 800c622:	e7a8      	b.n	800c576 <_vfiprintf_r+0xfe>
 800c624:	2300      	movs	r3, #0
 800c626:	3401      	adds	r4, #1
 800c628:	9305      	str	r3, [sp, #20]
 800c62a:	4619      	mov	r1, r3
 800c62c:	f04f 0c0a 	mov.w	ip, #10
 800c630:	4620      	mov	r0, r4
 800c632:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c636:	3a30      	subs	r2, #48	@ 0x30
 800c638:	2a09      	cmp	r2, #9
 800c63a:	d903      	bls.n	800c644 <_vfiprintf_r+0x1cc>
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d0c6      	beq.n	800c5ce <_vfiprintf_r+0x156>
 800c640:	9105      	str	r1, [sp, #20]
 800c642:	e7c4      	b.n	800c5ce <_vfiprintf_r+0x156>
 800c644:	fb0c 2101 	mla	r1, ip, r1, r2
 800c648:	4604      	mov	r4, r0
 800c64a:	2301      	movs	r3, #1
 800c64c:	e7f0      	b.n	800c630 <_vfiprintf_r+0x1b8>
 800c64e:	ab03      	add	r3, sp, #12
 800c650:	9300      	str	r3, [sp, #0]
 800c652:	462a      	mov	r2, r5
 800c654:	4b13      	ldr	r3, [pc, #76]	@ (800c6a4 <_vfiprintf_r+0x22c>)
 800c656:	a904      	add	r1, sp, #16
 800c658:	4630      	mov	r0, r6
 800c65a:	f7fd fb8f 	bl	8009d7c <_printf_float>
 800c65e:	4607      	mov	r7, r0
 800c660:	1c78      	adds	r0, r7, #1
 800c662:	d1d6      	bne.n	800c612 <_vfiprintf_r+0x19a>
 800c664:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c666:	07d9      	lsls	r1, r3, #31
 800c668:	d405      	bmi.n	800c676 <_vfiprintf_r+0x1fe>
 800c66a:	89ab      	ldrh	r3, [r5, #12]
 800c66c:	059a      	lsls	r2, r3, #22
 800c66e:	d402      	bmi.n	800c676 <_vfiprintf_r+0x1fe>
 800c670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c672:	f7fe f8a5 	bl	800a7c0 <__retarget_lock_release_recursive>
 800c676:	89ab      	ldrh	r3, [r5, #12]
 800c678:	065b      	lsls	r3, r3, #25
 800c67a:	f53f af1f 	bmi.w	800c4bc <_vfiprintf_r+0x44>
 800c67e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c680:	e71e      	b.n	800c4c0 <_vfiprintf_r+0x48>
 800c682:	ab03      	add	r3, sp, #12
 800c684:	9300      	str	r3, [sp, #0]
 800c686:	462a      	mov	r2, r5
 800c688:	4b06      	ldr	r3, [pc, #24]	@ (800c6a4 <_vfiprintf_r+0x22c>)
 800c68a:	a904      	add	r1, sp, #16
 800c68c:	4630      	mov	r0, r6
 800c68e:	f7fd fe0f 	bl	800a2b0 <_printf_i>
 800c692:	e7e4      	b.n	800c65e <_vfiprintf_r+0x1e6>
 800c694:	0800cd59 	.word	0x0800cd59
 800c698:	0800cd5f 	.word	0x0800cd5f
 800c69c:	0800cd63 	.word	0x0800cd63
 800c6a0:	08009d7d 	.word	0x08009d7d
 800c6a4:	0800c453 	.word	0x0800c453

0800c6a8 <__swbuf_r>:
 800c6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6aa:	460e      	mov	r6, r1
 800c6ac:	4614      	mov	r4, r2
 800c6ae:	4605      	mov	r5, r0
 800c6b0:	b118      	cbz	r0, 800c6ba <__swbuf_r+0x12>
 800c6b2:	6a03      	ldr	r3, [r0, #32]
 800c6b4:	b90b      	cbnz	r3, 800c6ba <__swbuf_r+0x12>
 800c6b6:	f7fd ffdb 	bl	800a670 <__sinit>
 800c6ba:	69a3      	ldr	r3, [r4, #24]
 800c6bc:	60a3      	str	r3, [r4, #8]
 800c6be:	89a3      	ldrh	r3, [r4, #12]
 800c6c0:	071a      	lsls	r2, r3, #28
 800c6c2:	d501      	bpl.n	800c6c8 <__swbuf_r+0x20>
 800c6c4:	6923      	ldr	r3, [r4, #16]
 800c6c6:	b943      	cbnz	r3, 800c6da <__swbuf_r+0x32>
 800c6c8:	4621      	mov	r1, r4
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	f000 f82a 	bl	800c724 <__swsetup_r>
 800c6d0:	b118      	cbz	r0, 800c6da <__swbuf_r+0x32>
 800c6d2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c6d6:	4638      	mov	r0, r7
 800c6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6da:	6823      	ldr	r3, [r4, #0]
 800c6dc:	6922      	ldr	r2, [r4, #16]
 800c6de:	1a98      	subs	r0, r3, r2
 800c6e0:	6963      	ldr	r3, [r4, #20]
 800c6e2:	b2f6      	uxtb	r6, r6
 800c6e4:	4283      	cmp	r3, r0
 800c6e6:	4637      	mov	r7, r6
 800c6e8:	dc05      	bgt.n	800c6f6 <__swbuf_r+0x4e>
 800c6ea:	4621      	mov	r1, r4
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	f7ff f949 	bl	800b984 <_fflush_r>
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	d1ed      	bne.n	800c6d2 <__swbuf_r+0x2a>
 800c6f6:	68a3      	ldr	r3, [r4, #8]
 800c6f8:	3b01      	subs	r3, #1
 800c6fa:	60a3      	str	r3, [r4, #8]
 800c6fc:	6823      	ldr	r3, [r4, #0]
 800c6fe:	1c5a      	adds	r2, r3, #1
 800c700:	6022      	str	r2, [r4, #0]
 800c702:	701e      	strb	r6, [r3, #0]
 800c704:	6962      	ldr	r2, [r4, #20]
 800c706:	1c43      	adds	r3, r0, #1
 800c708:	429a      	cmp	r2, r3
 800c70a:	d004      	beq.n	800c716 <__swbuf_r+0x6e>
 800c70c:	89a3      	ldrh	r3, [r4, #12]
 800c70e:	07db      	lsls	r3, r3, #31
 800c710:	d5e1      	bpl.n	800c6d6 <__swbuf_r+0x2e>
 800c712:	2e0a      	cmp	r6, #10
 800c714:	d1df      	bne.n	800c6d6 <__swbuf_r+0x2e>
 800c716:	4621      	mov	r1, r4
 800c718:	4628      	mov	r0, r5
 800c71a:	f7ff f933 	bl	800b984 <_fflush_r>
 800c71e:	2800      	cmp	r0, #0
 800c720:	d0d9      	beq.n	800c6d6 <__swbuf_r+0x2e>
 800c722:	e7d6      	b.n	800c6d2 <__swbuf_r+0x2a>

0800c724 <__swsetup_r>:
 800c724:	b538      	push	{r3, r4, r5, lr}
 800c726:	4b29      	ldr	r3, [pc, #164]	@ (800c7cc <__swsetup_r+0xa8>)
 800c728:	4605      	mov	r5, r0
 800c72a:	6818      	ldr	r0, [r3, #0]
 800c72c:	460c      	mov	r4, r1
 800c72e:	b118      	cbz	r0, 800c738 <__swsetup_r+0x14>
 800c730:	6a03      	ldr	r3, [r0, #32]
 800c732:	b90b      	cbnz	r3, 800c738 <__swsetup_r+0x14>
 800c734:	f7fd ff9c 	bl	800a670 <__sinit>
 800c738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c73c:	0719      	lsls	r1, r3, #28
 800c73e:	d422      	bmi.n	800c786 <__swsetup_r+0x62>
 800c740:	06da      	lsls	r2, r3, #27
 800c742:	d407      	bmi.n	800c754 <__swsetup_r+0x30>
 800c744:	2209      	movs	r2, #9
 800c746:	602a      	str	r2, [r5, #0]
 800c748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c74c:	81a3      	strh	r3, [r4, #12]
 800c74e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c752:	e033      	b.n	800c7bc <__swsetup_r+0x98>
 800c754:	0758      	lsls	r0, r3, #29
 800c756:	d512      	bpl.n	800c77e <__swsetup_r+0x5a>
 800c758:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c75a:	b141      	cbz	r1, 800c76e <__swsetup_r+0x4a>
 800c75c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c760:	4299      	cmp	r1, r3
 800c762:	d002      	beq.n	800c76a <__swsetup_r+0x46>
 800c764:	4628      	mov	r0, r5
 800c766:	f7ff fdd5 	bl	800c314 <_free_r>
 800c76a:	2300      	movs	r3, #0
 800c76c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c76e:	89a3      	ldrh	r3, [r4, #12]
 800c770:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c774:	81a3      	strh	r3, [r4, #12]
 800c776:	2300      	movs	r3, #0
 800c778:	6063      	str	r3, [r4, #4]
 800c77a:	6923      	ldr	r3, [r4, #16]
 800c77c:	6023      	str	r3, [r4, #0]
 800c77e:	89a3      	ldrh	r3, [r4, #12]
 800c780:	f043 0308 	orr.w	r3, r3, #8
 800c784:	81a3      	strh	r3, [r4, #12]
 800c786:	6923      	ldr	r3, [r4, #16]
 800c788:	b94b      	cbnz	r3, 800c79e <__swsetup_r+0x7a>
 800c78a:	89a3      	ldrh	r3, [r4, #12]
 800c78c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c794:	d003      	beq.n	800c79e <__swsetup_r+0x7a>
 800c796:	4621      	mov	r1, r4
 800c798:	4628      	mov	r0, r5
 800c79a:	f000 f83f 	bl	800c81c <__smakebuf_r>
 800c79e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7a2:	f013 0201 	ands.w	r2, r3, #1
 800c7a6:	d00a      	beq.n	800c7be <__swsetup_r+0x9a>
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	60a2      	str	r2, [r4, #8]
 800c7ac:	6962      	ldr	r2, [r4, #20]
 800c7ae:	4252      	negs	r2, r2
 800c7b0:	61a2      	str	r2, [r4, #24]
 800c7b2:	6922      	ldr	r2, [r4, #16]
 800c7b4:	b942      	cbnz	r2, 800c7c8 <__swsetup_r+0xa4>
 800c7b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c7ba:	d1c5      	bne.n	800c748 <__swsetup_r+0x24>
 800c7bc:	bd38      	pop	{r3, r4, r5, pc}
 800c7be:	0799      	lsls	r1, r3, #30
 800c7c0:	bf58      	it	pl
 800c7c2:	6962      	ldrpl	r2, [r4, #20]
 800c7c4:	60a2      	str	r2, [r4, #8]
 800c7c6:	e7f4      	b.n	800c7b2 <__swsetup_r+0x8e>
 800c7c8:	2000      	movs	r0, #0
 800c7ca:	e7f7      	b.n	800c7bc <__swsetup_r+0x98>
 800c7cc:	20000030 	.word	0x20000030

0800c7d0 <__swhatbuf_r>:
 800c7d0:	b570      	push	{r4, r5, r6, lr}
 800c7d2:	460c      	mov	r4, r1
 800c7d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7d8:	2900      	cmp	r1, #0
 800c7da:	b096      	sub	sp, #88	@ 0x58
 800c7dc:	4615      	mov	r5, r2
 800c7de:	461e      	mov	r6, r3
 800c7e0:	da0d      	bge.n	800c7fe <__swhatbuf_r+0x2e>
 800c7e2:	89a3      	ldrh	r3, [r4, #12]
 800c7e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c7e8:	f04f 0100 	mov.w	r1, #0
 800c7ec:	bf14      	ite	ne
 800c7ee:	2340      	movne	r3, #64	@ 0x40
 800c7f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	6031      	str	r1, [r6, #0]
 800c7f8:	602b      	str	r3, [r5, #0]
 800c7fa:	b016      	add	sp, #88	@ 0x58
 800c7fc:	bd70      	pop	{r4, r5, r6, pc}
 800c7fe:	466a      	mov	r2, sp
 800c800:	f000 f848 	bl	800c894 <_fstat_r>
 800c804:	2800      	cmp	r0, #0
 800c806:	dbec      	blt.n	800c7e2 <__swhatbuf_r+0x12>
 800c808:	9901      	ldr	r1, [sp, #4]
 800c80a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c80e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c812:	4259      	negs	r1, r3
 800c814:	4159      	adcs	r1, r3
 800c816:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c81a:	e7eb      	b.n	800c7f4 <__swhatbuf_r+0x24>

0800c81c <__smakebuf_r>:
 800c81c:	898b      	ldrh	r3, [r1, #12]
 800c81e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c820:	079d      	lsls	r5, r3, #30
 800c822:	4606      	mov	r6, r0
 800c824:	460c      	mov	r4, r1
 800c826:	d507      	bpl.n	800c838 <__smakebuf_r+0x1c>
 800c828:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c82c:	6023      	str	r3, [r4, #0]
 800c82e:	6123      	str	r3, [r4, #16]
 800c830:	2301      	movs	r3, #1
 800c832:	6163      	str	r3, [r4, #20]
 800c834:	b003      	add	sp, #12
 800c836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c838:	ab01      	add	r3, sp, #4
 800c83a:	466a      	mov	r2, sp
 800c83c:	f7ff ffc8 	bl	800c7d0 <__swhatbuf_r>
 800c840:	9f00      	ldr	r7, [sp, #0]
 800c842:	4605      	mov	r5, r0
 800c844:	4639      	mov	r1, r7
 800c846:	4630      	mov	r0, r6
 800c848:	f7fe ff9c 	bl	800b784 <_malloc_r>
 800c84c:	b948      	cbnz	r0, 800c862 <__smakebuf_r+0x46>
 800c84e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c852:	059a      	lsls	r2, r3, #22
 800c854:	d4ee      	bmi.n	800c834 <__smakebuf_r+0x18>
 800c856:	f023 0303 	bic.w	r3, r3, #3
 800c85a:	f043 0302 	orr.w	r3, r3, #2
 800c85e:	81a3      	strh	r3, [r4, #12]
 800c860:	e7e2      	b.n	800c828 <__smakebuf_r+0xc>
 800c862:	89a3      	ldrh	r3, [r4, #12]
 800c864:	6020      	str	r0, [r4, #0]
 800c866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c86a:	81a3      	strh	r3, [r4, #12]
 800c86c:	9b01      	ldr	r3, [sp, #4]
 800c86e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c872:	b15b      	cbz	r3, 800c88c <__smakebuf_r+0x70>
 800c874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c878:	4630      	mov	r0, r6
 800c87a:	f000 f81d 	bl	800c8b8 <_isatty_r>
 800c87e:	b128      	cbz	r0, 800c88c <__smakebuf_r+0x70>
 800c880:	89a3      	ldrh	r3, [r4, #12]
 800c882:	f023 0303 	bic.w	r3, r3, #3
 800c886:	f043 0301 	orr.w	r3, r3, #1
 800c88a:	81a3      	strh	r3, [r4, #12]
 800c88c:	89a3      	ldrh	r3, [r4, #12]
 800c88e:	431d      	orrs	r5, r3
 800c890:	81a5      	strh	r5, [r4, #12]
 800c892:	e7cf      	b.n	800c834 <__smakebuf_r+0x18>

0800c894 <_fstat_r>:
 800c894:	b538      	push	{r3, r4, r5, lr}
 800c896:	4d07      	ldr	r5, [pc, #28]	@ (800c8b4 <_fstat_r+0x20>)
 800c898:	2300      	movs	r3, #0
 800c89a:	4604      	mov	r4, r0
 800c89c:	4608      	mov	r0, r1
 800c89e:	4611      	mov	r1, r2
 800c8a0:	602b      	str	r3, [r5, #0]
 800c8a2:	f7f5 ff89 	bl	80027b8 <_fstat>
 800c8a6:	1c43      	adds	r3, r0, #1
 800c8a8:	d102      	bne.n	800c8b0 <_fstat_r+0x1c>
 800c8aa:	682b      	ldr	r3, [r5, #0]
 800c8ac:	b103      	cbz	r3, 800c8b0 <_fstat_r+0x1c>
 800c8ae:	6023      	str	r3, [r4, #0]
 800c8b0:	bd38      	pop	{r3, r4, r5, pc}
 800c8b2:	bf00      	nop
 800c8b4:	20000b58 	.word	0x20000b58

0800c8b8 <_isatty_r>:
 800c8b8:	b538      	push	{r3, r4, r5, lr}
 800c8ba:	4d06      	ldr	r5, [pc, #24]	@ (800c8d4 <_isatty_r+0x1c>)
 800c8bc:	2300      	movs	r3, #0
 800c8be:	4604      	mov	r4, r0
 800c8c0:	4608      	mov	r0, r1
 800c8c2:	602b      	str	r3, [r5, #0]
 800c8c4:	f7f5 ff87 	bl	80027d6 <_isatty>
 800c8c8:	1c43      	adds	r3, r0, #1
 800c8ca:	d102      	bne.n	800c8d2 <_isatty_r+0x1a>
 800c8cc:	682b      	ldr	r3, [r5, #0]
 800c8ce:	b103      	cbz	r3, 800c8d2 <_isatty_r+0x1a>
 800c8d0:	6023      	str	r3, [r4, #0]
 800c8d2:	bd38      	pop	{r3, r4, r5, pc}
 800c8d4:	20000b58 	.word	0x20000b58

0800c8d8 <_raise_r>:
 800c8d8:	291f      	cmp	r1, #31
 800c8da:	b538      	push	{r3, r4, r5, lr}
 800c8dc:	4605      	mov	r5, r0
 800c8de:	460c      	mov	r4, r1
 800c8e0:	d904      	bls.n	800c8ec <_raise_r+0x14>
 800c8e2:	2316      	movs	r3, #22
 800c8e4:	6003      	str	r3, [r0, #0]
 800c8e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c8ea:	bd38      	pop	{r3, r4, r5, pc}
 800c8ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c8ee:	b112      	cbz	r2, 800c8f6 <_raise_r+0x1e>
 800c8f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c8f4:	b94b      	cbnz	r3, 800c90a <_raise_r+0x32>
 800c8f6:	4628      	mov	r0, r5
 800c8f8:	f000 f830 	bl	800c95c <_getpid_r>
 800c8fc:	4622      	mov	r2, r4
 800c8fe:	4601      	mov	r1, r0
 800c900:	4628      	mov	r0, r5
 800c902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c906:	f000 b817 	b.w	800c938 <_kill_r>
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d00a      	beq.n	800c924 <_raise_r+0x4c>
 800c90e:	1c59      	adds	r1, r3, #1
 800c910:	d103      	bne.n	800c91a <_raise_r+0x42>
 800c912:	2316      	movs	r3, #22
 800c914:	6003      	str	r3, [r0, #0]
 800c916:	2001      	movs	r0, #1
 800c918:	e7e7      	b.n	800c8ea <_raise_r+0x12>
 800c91a:	2100      	movs	r1, #0
 800c91c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c920:	4620      	mov	r0, r4
 800c922:	4798      	blx	r3
 800c924:	2000      	movs	r0, #0
 800c926:	e7e0      	b.n	800c8ea <_raise_r+0x12>

0800c928 <raise>:
 800c928:	4b02      	ldr	r3, [pc, #8]	@ (800c934 <raise+0xc>)
 800c92a:	4601      	mov	r1, r0
 800c92c:	6818      	ldr	r0, [r3, #0]
 800c92e:	f7ff bfd3 	b.w	800c8d8 <_raise_r>
 800c932:	bf00      	nop
 800c934:	20000030 	.word	0x20000030

0800c938 <_kill_r>:
 800c938:	b538      	push	{r3, r4, r5, lr}
 800c93a:	4d07      	ldr	r5, [pc, #28]	@ (800c958 <_kill_r+0x20>)
 800c93c:	2300      	movs	r3, #0
 800c93e:	4604      	mov	r4, r0
 800c940:	4608      	mov	r0, r1
 800c942:	4611      	mov	r1, r2
 800c944:	602b      	str	r3, [r5, #0]
 800c946:	f7f5 fed8 	bl	80026fa <_kill>
 800c94a:	1c43      	adds	r3, r0, #1
 800c94c:	d102      	bne.n	800c954 <_kill_r+0x1c>
 800c94e:	682b      	ldr	r3, [r5, #0]
 800c950:	b103      	cbz	r3, 800c954 <_kill_r+0x1c>
 800c952:	6023      	str	r3, [r4, #0]
 800c954:	bd38      	pop	{r3, r4, r5, pc}
 800c956:	bf00      	nop
 800c958:	20000b58 	.word	0x20000b58

0800c95c <_getpid_r>:
 800c95c:	f7f5 bec6 	b.w	80026ec <_getpid>

0800c960 <_init>:
 800c960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c962:	bf00      	nop
 800c964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c966:	bc08      	pop	{r3}
 800c968:	469e      	mov	lr, r3
 800c96a:	4770      	bx	lr

0800c96c <_fini>:
 800c96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c96e:	bf00      	nop
 800c970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c972:	bc08      	pop	{r3}
 800c974:	469e      	mov	lr, r3
 800c976:	4770      	bx	lr
