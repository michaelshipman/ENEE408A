
bno085-log-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009918  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  08009a58  08009a58  0000aa58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d74  08009d74  0000b074  2**0
                  CONTENTS
  4 .ARM          00000008  08009d74  08009d74  0000ad74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d7c  08009d7c  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d7c  08009d7c  0000ad7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d80  08009d80  0000ad80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08009d84  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  20000074  08009df8  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08009df8  0000b448  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001794c  00000000  00000000  0000b09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037b6  00000000  00000000  000229ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  000261a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010fb  00000000  00000000  000277f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005d55  00000000  00000000  000288eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000198f0  00000000  00000000  0002e640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7ab4  00000000  00000000  00047f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef9e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063ec  00000000  00000000  000efa28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000f5e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	08009a40 	.word	0x08009a40

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	08009a40 	.word	0x08009a40

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_fmul>:
 8000230:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000234:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000238:	bf1e      	ittt	ne
 800023a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800023e:	ea92 0f0c 	teqne	r2, ip
 8000242:	ea93 0f0c 	teqne	r3, ip
 8000246:	d06f      	beq.n	8000328 <__aeabi_fmul+0xf8>
 8000248:	441a      	add	r2, r3
 800024a:	ea80 0c01 	eor.w	ip, r0, r1
 800024e:	0240      	lsls	r0, r0, #9
 8000250:	bf18      	it	ne
 8000252:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000256:	d01e      	beq.n	8000296 <__aeabi_fmul+0x66>
 8000258:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800025c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000260:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000264:	fba0 3101 	umull	r3, r1, r0, r1
 8000268:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800026c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000270:	bf3e      	ittt	cc
 8000272:	0049      	lslcc	r1, r1, #1
 8000274:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000278:	005b      	lslcc	r3, r3, #1
 800027a:	ea40 0001 	orr.w	r0, r0, r1
 800027e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000282:	2afd      	cmp	r2, #253	@ 0xfd
 8000284:	d81d      	bhi.n	80002c2 <__aeabi_fmul+0x92>
 8000286:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800028a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800028e:	bf08      	it	eq
 8000290:	f020 0001 	biceq.w	r0, r0, #1
 8000294:	4770      	bx	lr
 8000296:	f090 0f00 	teq	r0, #0
 800029a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800029e:	bf08      	it	eq
 80002a0:	0249      	lsleq	r1, r1, #9
 80002a2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002a6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002aa:	3a7f      	subs	r2, #127	@ 0x7f
 80002ac:	bfc2      	ittt	gt
 80002ae:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80002b2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002b6:	4770      	bxgt	lr
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	3a01      	subs	r2, #1
 80002c2:	dc5d      	bgt.n	8000380 <__aeabi_fmul+0x150>
 80002c4:	f112 0f19 	cmn.w	r2, #25
 80002c8:	bfdc      	itt	le
 80002ca:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80002ce:	4770      	bxle	lr
 80002d0:	f1c2 0200 	rsb	r2, r2, #0
 80002d4:	0041      	lsls	r1, r0, #1
 80002d6:	fa21 f102 	lsr.w	r1, r1, r2
 80002da:	f1c2 0220 	rsb	r2, r2, #32
 80002de:	fa00 fc02 	lsl.w	ip, r0, r2
 80002e2:	ea5f 0031 	movs.w	r0, r1, rrx
 80002e6:	f140 0000 	adc.w	r0, r0, #0
 80002ea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002ee:	bf08      	it	eq
 80002f0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002f4:	4770      	bx	lr
 80002f6:	f092 0f00 	teq	r2, #0
 80002fa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80002fe:	bf02      	ittt	eq
 8000300:	0040      	lsleq	r0, r0, #1
 8000302:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000306:	3a01      	subeq	r2, #1
 8000308:	d0f9      	beq.n	80002fe <__aeabi_fmul+0xce>
 800030a:	ea40 000c 	orr.w	r0, r0, ip
 800030e:	f093 0f00 	teq	r3, #0
 8000312:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000316:	bf02      	ittt	eq
 8000318:	0049      	lsleq	r1, r1, #1
 800031a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800031e:	3b01      	subeq	r3, #1
 8000320:	d0f9      	beq.n	8000316 <__aeabi_fmul+0xe6>
 8000322:	ea41 010c 	orr.w	r1, r1, ip
 8000326:	e78f      	b.n	8000248 <__aeabi_fmul+0x18>
 8000328:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800032c:	ea92 0f0c 	teq	r2, ip
 8000330:	bf18      	it	ne
 8000332:	ea93 0f0c 	teqne	r3, ip
 8000336:	d00a      	beq.n	800034e <__aeabi_fmul+0x11e>
 8000338:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800033c:	bf18      	it	ne
 800033e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000342:	d1d8      	bne.n	80002f6 <__aeabi_fmul+0xc6>
 8000344:	ea80 0001 	eor.w	r0, r0, r1
 8000348:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800034c:	4770      	bx	lr
 800034e:	f090 0f00 	teq	r0, #0
 8000352:	bf17      	itett	ne
 8000354:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000358:	4608      	moveq	r0, r1
 800035a:	f091 0f00 	teqne	r1, #0
 800035e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000362:	d014      	beq.n	800038e <__aeabi_fmul+0x15e>
 8000364:	ea92 0f0c 	teq	r2, ip
 8000368:	d101      	bne.n	800036e <__aeabi_fmul+0x13e>
 800036a:	0242      	lsls	r2, r0, #9
 800036c:	d10f      	bne.n	800038e <__aeabi_fmul+0x15e>
 800036e:	ea93 0f0c 	teq	r3, ip
 8000372:	d103      	bne.n	800037c <__aeabi_fmul+0x14c>
 8000374:	024b      	lsls	r3, r1, #9
 8000376:	bf18      	it	ne
 8000378:	4608      	movne	r0, r1
 800037a:	d108      	bne.n	800038e <__aeabi_fmul+0x15e>
 800037c:	ea80 0001 	eor.w	r0, r0, r1
 8000380:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000384:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000388:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800038c:	4770      	bx	lr
 800038e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000392:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000396:	4770      	bx	lr

08000398 <__aeabi_drsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	e002      	b.n	80003a4 <__adddf3>
 800039e:	bf00      	nop

080003a0 <__aeabi_dsub>:
 80003a0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003a4 <__adddf3>:
 80003a4:	b530      	push	{r4, r5, lr}
 80003a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ae:	ea94 0f05 	teq	r4, r5
 80003b2:	bf08      	it	eq
 80003b4:	ea90 0f02 	teqeq	r0, r2
 80003b8:	bf1f      	itttt	ne
 80003ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003be:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ca:	f000 80e2 	beq.w	8000592 <__adddf3+0x1ee>
 80003ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003d6:	bfb8      	it	lt
 80003d8:	426d      	neglt	r5, r5
 80003da:	dd0c      	ble.n	80003f6 <__adddf3+0x52>
 80003dc:	442c      	add	r4, r5
 80003de:	ea80 0202 	eor.w	r2, r0, r2
 80003e2:	ea81 0303 	eor.w	r3, r1, r3
 80003e6:	ea82 0000 	eor.w	r0, r2, r0
 80003ea:	ea83 0101 	eor.w	r1, r3, r1
 80003ee:	ea80 0202 	eor.w	r2, r0, r2
 80003f2:	ea81 0303 	eor.w	r3, r1, r3
 80003f6:	2d36      	cmp	r5, #54	@ 0x36
 80003f8:	bf88      	it	hi
 80003fa:	bd30      	pophi	{r4, r5, pc}
 80003fc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000400:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000404:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000408:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800040c:	d002      	beq.n	8000414 <__adddf3+0x70>
 800040e:	4240      	negs	r0, r0
 8000410:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000414:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000418:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800041c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000420:	d002      	beq.n	8000428 <__adddf3+0x84>
 8000422:	4252      	negs	r2, r2
 8000424:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000428:	ea94 0f05 	teq	r4, r5
 800042c:	f000 80a7 	beq.w	800057e <__adddf3+0x1da>
 8000430:	f1a4 0401 	sub.w	r4, r4, #1
 8000434:	f1d5 0e20 	rsbs	lr, r5, #32
 8000438:	db0d      	blt.n	8000456 <__adddf3+0xb2>
 800043a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800043e:	fa22 f205 	lsr.w	r2, r2, r5
 8000442:	1880      	adds	r0, r0, r2
 8000444:	f141 0100 	adc.w	r1, r1, #0
 8000448:	fa03 f20e 	lsl.w	r2, r3, lr
 800044c:	1880      	adds	r0, r0, r2
 800044e:	fa43 f305 	asr.w	r3, r3, r5
 8000452:	4159      	adcs	r1, r3
 8000454:	e00e      	b.n	8000474 <__adddf3+0xd0>
 8000456:	f1a5 0520 	sub.w	r5, r5, #32
 800045a:	f10e 0e20 	add.w	lr, lr, #32
 800045e:	2a01      	cmp	r2, #1
 8000460:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000464:	bf28      	it	cs
 8000466:	f04c 0c02 	orrcs.w	ip, ip, #2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	18c0      	adds	r0, r0, r3
 8000470:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	d507      	bpl.n	800048a <__adddf3+0xe6>
 800047a:	f04f 0e00 	mov.w	lr, #0
 800047e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000482:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000486:	eb6e 0101 	sbc.w	r1, lr, r1
 800048a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800048e:	d31b      	bcc.n	80004c8 <__adddf3+0x124>
 8000490:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000494:	d30c      	bcc.n	80004b0 <__adddf3+0x10c>
 8000496:	0849      	lsrs	r1, r1, #1
 8000498:	ea5f 0030 	movs.w	r0, r0, rrx
 800049c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a0:	f104 0401 	add.w	r4, r4, #1
 80004a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004ac:	f080 809a 	bcs.w	80005e4 <__adddf3+0x240>
 80004b0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004b4:	bf08      	it	eq
 80004b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004ba:	f150 0000 	adcs.w	r0, r0, #0
 80004be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004c2:	ea41 0105 	orr.w	r1, r1, r5
 80004c6:	bd30      	pop	{r4, r5, pc}
 80004c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004cc:	4140      	adcs	r0, r0
 80004ce:	eb41 0101 	adc.w	r1, r1, r1
 80004d2:	3c01      	subs	r4, #1
 80004d4:	bf28      	it	cs
 80004d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004da:	d2e9      	bcs.n	80004b0 <__adddf3+0x10c>
 80004dc:	f091 0f00 	teq	r1, #0
 80004e0:	bf04      	itt	eq
 80004e2:	4601      	moveq	r1, r0
 80004e4:	2000      	moveq	r0, #0
 80004e6:	fab1 f381 	clz	r3, r1
 80004ea:	bf08      	it	eq
 80004ec:	3320      	addeq	r3, #32
 80004ee:	f1a3 030b 	sub.w	r3, r3, #11
 80004f2:	f1b3 0220 	subs.w	r2, r3, #32
 80004f6:	da0c      	bge.n	8000512 <__adddf3+0x16e>
 80004f8:	320c      	adds	r2, #12
 80004fa:	dd08      	ble.n	800050e <__adddf3+0x16a>
 80004fc:	f102 0c14 	add.w	ip, r2, #20
 8000500:	f1c2 020c 	rsb	r2, r2, #12
 8000504:	fa01 f00c 	lsl.w	r0, r1, ip
 8000508:	fa21 f102 	lsr.w	r1, r1, r2
 800050c:	e00c      	b.n	8000528 <__adddf3+0x184>
 800050e:	f102 0214 	add.w	r2, r2, #20
 8000512:	bfd8      	it	le
 8000514:	f1c2 0c20 	rsble	ip, r2, #32
 8000518:	fa01 f102 	lsl.w	r1, r1, r2
 800051c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000520:	bfdc      	itt	le
 8000522:	ea41 010c 	orrle.w	r1, r1, ip
 8000526:	4090      	lslle	r0, r2
 8000528:	1ae4      	subs	r4, r4, r3
 800052a:	bfa2      	ittt	ge
 800052c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000530:	4329      	orrge	r1, r5
 8000532:	bd30      	popge	{r4, r5, pc}
 8000534:	ea6f 0404 	mvn.w	r4, r4
 8000538:	3c1f      	subs	r4, #31
 800053a:	da1c      	bge.n	8000576 <__adddf3+0x1d2>
 800053c:	340c      	adds	r4, #12
 800053e:	dc0e      	bgt.n	800055e <__adddf3+0x1ba>
 8000540:	f104 0414 	add.w	r4, r4, #20
 8000544:	f1c4 0220 	rsb	r2, r4, #32
 8000548:	fa20 f004 	lsr.w	r0, r0, r4
 800054c:	fa01 f302 	lsl.w	r3, r1, r2
 8000550:	ea40 0003 	orr.w	r0, r0, r3
 8000554:	fa21 f304 	lsr.w	r3, r1, r4
 8000558:	ea45 0103 	orr.w	r1, r5, r3
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	f1c4 040c 	rsb	r4, r4, #12
 8000562:	f1c4 0220 	rsb	r2, r4, #32
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 f304 	lsl.w	r3, r1, r4
 800056e:	ea40 0003 	orr.w	r0, r0, r3
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	fa21 f004 	lsr.w	r0, r1, r4
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	f094 0f00 	teq	r4, #0
 8000582:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000586:	bf06      	itte	eq
 8000588:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800058c:	3401      	addeq	r4, #1
 800058e:	3d01      	subne	r5, #1
 8000590:	e74e      	b.n	8000430 <__adddf3+0x8c>
 8000592:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000596:	bf18      	it	ne
 8000598:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800059c:	d029      	beq.n	80005f2 <__adddf3+0x24e>
 800059e:	ea94 0f05 	teq	r4, r5
 80005a2:	bf08      	it	eq
 80005a4:	ea90 0f02 	teqeq	r0, r2
 80005a8:	d005      	beq.n	80005b6 <__adddf3+0x212>
 80005aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ae:	bf04      	itt	eq
 80005b0:	4619      	moveq	r1, r3
 80005b2:	4610      	moveq	r0, r2
 80005b4:	bd30      	pop	{r4, r5, pc}
 80005b6:	ea91 0f03 	teq	r1, r3
 80005ba:	bf1e      	ittt	ne
 80005bc:	2100      	movne	r1, #0
 80005be:	2000      	movne	r0, #0
 80005c0:	bd30      	popne	{r4, r5, pc}
 80005c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005c6:	d105      	bne.n	80005d4 <__adddf3+0x230>
 80005c8:	0040      	lsls	r0, r0, #1
 80005ca:	4149      	adcs	r1, r1
 80005cc:	bf28      	it	cs
 80005ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005d2:	bd30      	pop	{r4, r5, pc}
 80005d4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d8:	bf3c      	itt	cc
 80005da:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005de:	bd30      	popcc	{r4, r5, pc}
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005ec:	f04f 0000 	mov.w	r0, #0
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005f6:	bf1a      	itte	ne
 80005f8:	4619      	movne	r1, r3
 80005fa:	4610      	movne	r0, r2
 80005fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000600:	bf1c      	itt	ne
 8000602:	460b      	movne	r3, r1
 8000604:	4602      	movne	r2, r0
 8000606:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800060a:	bf06      	itte	eq
 800060c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000610:	ea91 0f03 	teqeq	r1, r3
 8000614:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	bf00      	nop

0800061c <__aeabi_ui2d>:
 800061c:	f090 0f00 	teq	r0, #0
 8000620:	bf04      	itt	eq
 8000622:	2100      	moveq	r1, #0
 8000624:	4770      	bxeq	lr
 8000626:	b530      	push	{r4, r5, lr}
 8000628:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800062c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000630:	f04f 0500 	mov.w	r5, #0
 8000634:	f04f 0100 	mov.w	r1, #0
 8000638:	e750      	b.n	80004dc <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_i2d>:
 800063c:	f090 0f00 	teq	r0, #0
 8000640:	bf04      	itt	eq
 8000642:	2100      	moveq	r1, #0
 8000644:	4770      	bxeq	lr
 8000646:	b530      	push	{r4, r5, lr}
 8000648:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800064c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000650:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000654:	bf48      	it	mi
 8000656:	4240      	negmi	r0, r0
 8000658:	f04f 0100 	mov.w	r1, #0
 800065c:	e73e      	b.n	80004dc <__adddf3+0x138>
 800065e:	bf00      	nop

08000660 <__aeabi_f2d>:
 8000660:	0042      	lsls	r2, r0, #1
 8000662:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000666:	ea4f 0131 	mov.w	r1, r1, rrx
 800066a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800066e:	bf1f      	itttt	ne
 8000670:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000674:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000678:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800067c:	4770      	bxne	lr
 800067e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000682:	bf08      	it	eq
 8000684:	4770      	bxeq	lr
 8000686:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800068a:	bf04      	itt	eq
 800068c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000690:	4770      	bxeq	lr
 8000692:	b530      	push	{r4, r5, lr}
 8000694:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000698:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800069c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	e71c      	b.n	80004dc <__adddf3+0x138>
 80006a2:	bf00      	nop

080006a4 <__aeabi_ul2d>:
 80006a4:	ea50 0201 	orrs.w	r2, r0, r1
 80006a8:	bf08      	it	eq
 80006aa:	4770      	bxeq	lr
 80006ac:	b530      	push	{r4, r5, lr}
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	e00a      	b.n	80006ca <__aeabi_l2d+0x16>

080006b4 <__aeabi_l2d>:
 80006b4:	ea50 0201 	orrs.w	r2, r0, r1
 80006b8:	bf08      	it	eq
 80006ba:	4770      	bxeq	lr
 80006bc:	b530      	push	{r4, r5, lr}
 80006be:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006c2:	d502      	bpl.n	80006ca <__aeabi_l2d+0x16>
 80006c4:	4240      	negs	r0, r0
 80006c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ca:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006ce:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006d6:	f43f aed8 	beq.w	800048a <__adddf3+0xe6>
 80006da:	f04f 0203 	mov.w	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006f2:	f1c2 0320 	rsb	r3, r2, #32
 80006f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80006fa:	fa20 f002 	lsr.w	r0, r0, r2
 80006fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000702:	ea40 000e 	orr.w	r0, r0, lr
 8000706:	fa21 f102 	lsr.w	r1, r1, r2
 800070a:	4414      	add	r4, r2
 800070c:	e6bd      	b.n	800048a <__adddf3+0xe6>
 800070e:	bf00      	nop

08000710 <__aeabi_dmul>:
 8000710:	b570      	push	{r4, r5, r6, lr}
 8000712:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000716:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800071a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800071e:	bf1d      	ittte	ne
 8000720:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000724:	ea94 0f0c 	teqne	r4, ip
 8000728:	ea95 0f0c 	teqne	r5, ip
 800072c:	f000 f8de 	bleq	80008ec <__aeabi_dmul+0x1dc>
 8000730:	442c      	add	r4, r5
 8000732:	ea81 0603 	eor.w	r6, r1, r3
 8000736:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800073a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800073e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000742:	bf18      	it	ne
 8000744:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000748:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800074c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000750:	d038      	beq.n	80007c4 <__aeabi_dmul+0xb4>
 8000752:	fba0 ce02 	umull	ip, lr, r0, r2
 8000756:	f04f 0500 	mov.w	r5, #0
 800075a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800075e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000762:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000766:	f04f 0600 	mov.w	r6, #0
 800076a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800076e:	f09c 0f00 	teq	ip, #0
 8000772:	bf18      	it	ne
 8000774:	f04e 0e01 	orrne.w	lr, lr, #1
 8000778:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800077c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000780:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000784:	d204      	bcs.n	8000790 <__aeabi_dmul+0x80>
 8000786:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800078a:	416d      	adcs	r5, r5
 800078c:	eb46 0606 	adc.w	r6, r6, r6
 8000790:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000794:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000798:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800079c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007a4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80007a8:	bf88      	it	hi
 80007aa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80007ae:	d81e      	bhi.n	80007ee <__aeabi_dmul+0xde>
 80007b0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80007b4:	bf08      	it	eq
 80007b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007ba:	f150 0000 	adcs.w	r0, r0, #0
 80007be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007c8:	ea46 0101 	orr.w	r1, r6, r1
 80007cc:	ea40 0002 	orr.w	r0, r0, r2
 80007d0:	ea81 0103 	eor.w	r1, r1, r3
 80007d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007d8:	bfc2      	ittt	gt
 80007da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007e2:	bd70      	popgt	{r4, r5, r6, pc}
 80007e4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007e8:	f04f 0e00 	mov.w	lr, #0
 80007ec:	3c01      	subs	r4, #1
 80007ee:	f300 80ab 	bgt.w	8000948 <__aeabi_dmul+0x238>
 80007f2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007f6:	bfde      	ittt	le
 80007f8:	2000      	movle	r0, #0
 80007fa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007fe:	bd70      	pople	{r4, r5, r6, pc}
 8000800:	f1c4 0400 	rsb	r4, r4, #0
 8000804:	3c20      	subs	r4, #32
 8000806:	da35      	bge.n	8000874 <__aeabi_dmul+0x164>
 8000808:	340c      	adds	r4, #12
 800080a:	dc1b      	bgt.n	8000844 <__aeabi_dmul+0x134>
 800080c:	f104 0414 	add.w	r4, r4, #20
 8000810:	f1c4 0520 	rsb	r5, r4, #32
 8000814:	fa00 f305 	lsl.w	r3, r0, r5
 8000818:	fa20 f004 	lsr.w	r0, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea40 0002 	orr.w	r0, r0, r2
 8000824:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000828:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000830:	fa21 f604 	lsr.w	r6, r1, r4
 8000834:	eb42 0106 	adc.w	r1, r2, r6
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f1c4 040c 	rsb	r4, r4, #12
 8000848:	f1c4 0520 	rsb	r5, r4, #32
 800084c:	fa00 f304 	lsl.w	r3, r0, r4
 8000850:	fa20 f005 	lsr.w	r0, r0, r5
 8000854:	fa01 f204 	lsl.w	r2, r1, r4
 8000858:	ea40 0002 	orr.w	r0, r0, r2
 800085c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000860:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000864:	f141 0100 	adc.w	r1, r1, #0
 8000868:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800086c:	bf08      	it	eq
 800086e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f1c4 0520 	rsb	r5, r4, #32
 8000878:	fa00 f205 	lsl.w	r2, r0, r5
 800087c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000880:	fa20 f304 	lsr.w	r3, r0, r4
 8000884:	fa01 f205 	lsl.w	r2, r1, r5
 8000888:	ea43 0302 	orr.w	r3, r3, r2
 800088c:	fa21 f004 	lsr.w	r0, r1, r4
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	fa21 f204 	lsr.w	r2, r1, r4
 8000898:	ea20 0002 	bic.w	r0, r0, r2
 800089c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008a4:	bf08      	it	eq
 80008a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008aa:	bd70      	pop	{r4, r5, r6, pc}
 80008ac:	f094 0f00 	teq	r4, #0
 80008b0:	d10f      	bne.n	80008d2 <__aeabi_dmul+0x1c2>
 80008b2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80008b6:	0040      	lsls	r0, r0, #1
 80008b8:	eb41 0101 	adc.w	r1, r1, r1
 80008bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c0:	bf08      	it	eq
 80008c2:	3c01      	subeq	r4, #1
 80008c4:	d0f7      	beq.n	80008b6 <__aeabi_dmul+0x1a6>
 80008c6:	ea41 0106 	orr.w	r1, r1, r6
 80008ca:	f095 0f00 	teq	r5, #0
 80008ce:	bf18      	it	ne
 80008d0:	4770      	bxne	lr
 80008d2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008d6:	0052      	lsls	r2, r2, #1
 80008d8:	eb43 0303 	adc.w	r3, r3, r3
 80008dc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008e0:	bf08      	it	eq
 80008e2:	3d01      	subeq	r5, #1
 80008e4:	d0f7      	beq.n	80008d6 <__aeabi_dmul+0x1c6>
 80008e6:	ea43 0306 	orr.w	r3, r3, r6
 80008ea:	4770      	bx	lr
 80008ec:	ea94 0f0c 	teq	r4, ip
 80008f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008f4:	bf18      	it	ne
 80008f6:	ea95 0f0c 	teqne	r5, ip
 80008fa:	d00c      	beq.n	8000916 <__aeabi_dmul+0x206>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	d1d1      	bne.n	80008ac <__aeabi_dmul+0x19c>
 8000908:	ea81 0103 	eor.w	r1, r1, r3
 800090c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	bd70      	pop	{r4, r5, r6, pc}
 8000916:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800091a:	bf06      	itte	eq
 800091c:	4610      	moveq	r0, r2
 800091e:	4619      	moveq	r1, r3
 8000920:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000924:	d019      	beq.n	800095a <__aeabi_dmul+0x24a>
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	d102      	bne.n	8000932 <__aeabi_dmul+0x222>
 800092c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000930:	d113      	bne.n	800095a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	d105      	bne.n	8000944 <__aeabi_dmul+0x234>
 8000938:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800093c:	bf1c      	itt	ne
 800093e:	4610      	movne	r0, r2
 8000940:	4619      	movne	r1, r3
 8000942:	d10a      	bne.n	800095a <__aeabi_dmul+0x24a>
 8000944:	ea81 0103 	eor.w	r1, r1, r3
 8000948:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800094c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000950:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000954:	f04f 0000 	mov.w	r0, #0
 8000958:	bd70      	pop	{r4, r5, r6, pc}
 800095a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800095e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000962:	bd70      	pop	{r4, r5, r6, pc}

08000964 <__aeabi_ddiv>:
 8000964:	b570      	push	{r4, r5, r6, lr}
 8000966:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800096a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800096e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000972:	bf1d      	ittte	ne
 8000974:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000978:	ea94 0f0c 	teqne	r4, ip
 800097c:	ea95 0f0c 	teqne	r5, ip
 8000980:	f000 f8a7 	bleq	8000ad2 <__aeabi_ddiv+0x16e>
 8000984:	eba4 0405 	sub.w	r4, r4, r5
 8000988:	ea81 0e03 	eor.w	lr, r1, r3
 800098c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000990:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000994:	f000 8088 	beq.w	8000aa8 <__aeabi_ddiv+0x144>
 8000998:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800099c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80009a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009b8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009bc:	429d      	cmp	r5, r3
 80009be:	bf08      	it	eq
 80009c0:	4296      	cmpeq	r6, r2
 80009c2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009c6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009ca:	d202      	bcs.n	80009d2 <__aeabi_ddiv+0x6e>
 80009cc:	085b      	lsrs	r3, r3, #1
 80009ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d2:	1ab6      	subs	r6, r6, r2
 80009d4:	eb65 0503 	sbc.w	r5, r5, r3
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	ea4f 0232 	mov.w	r2, r2, rrx
 80009de:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009e2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a28:	085b      	lsrs	r3, r3, #1
 8000a2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a36:	bf22      	ittt	cs
 8000a38:	1ab6      	subcs	r6, r6, r2
 8000a3a:	4675      	movcs	r5, lr
 8000a3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a40:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a44:	d018      	beq.n	8000a78 <__aeabi_ddiv+0x114>
 8000a46:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a62:	d1c0      	bne.n	80009e6 <__aeabi_ddiv+0x82>
 8000a64:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a68:	d10b      	bne.n	8000a82 <__aeabi_ddiv+0x11e>
 8000a6a:	ea41 0100 	orr.w	r1, r1, r0
 8000a6e:	f04f 0000 	mov.w	r0, #0
 8000a72:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a76:	e7b6      	b.n	80009e6 <__aeabi_ddiv+0x82>
 8000a78:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a7c:	bf04      	itt	eq
 8000a7e:	4301      	orreq	r1, r0
 8000a80:	2000      	moveq	r0, #0
 8000a82:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a86:	bf88      	it	hi
 8000a88:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a8c:	f63f aeaf 	bhi.w	80007ee <__aeabi_dmul+0xde>
 8000a90:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a94:	bf04      	itt	eq
 8000a96:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a9e:	f150 0000 	adcs.w	r0, r0, #0
 8000aa2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	pop	{r4, r5, r6, pc}
 8000aa8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000aac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000ab4:	bfc2      	ittt	gt
 8000ab6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000abe:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ac4:	f04f 0e00 	mov.w	lr, #0
 8000ac8:	3c01      	subs	r4, #1
 8000aca:	e690      	b.n	80007ee <__aeabi_dmul+0xde>
 8000acc:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad0:	e68d      	b.n	80007ee <__aeabi_dmul+0xde>
 8000ad2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ad6:	ea94 0f0c 	teq	r4, ip
 8000ada:	bf08      	it	eq
 8000adc:	ea95 0f0c 	teqeq	r5, ip
 8000ae0:	f43f af3b 	beq.w	800095a <__aeabi_dmul+0x24a>
 8000ae4:	ea94 0f0c 	teq	r4, ip
 8000ae8:	d10a      	bne.n	8000b00 <__aeabi_ddiv+0x19c>
 8000aea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000aee:	f47f af34 	bne.w	800095a <__aeabi_dmul+0x24a>
 8000af2:	ea95 0f0c 	teq	r5, ip
 8000af6:	f47f af25 	bne.w	8000944 <__aeabi_dmul+0x234>
 8000afa:	4610      	mov	r0, r2
 8000afc:	4619      	mov	r1, r3
 8000afe:	e72c      	b.n	800095a <__aeabi_dmul+0x24a>
 8000b00:	ea95 0f0c 	teq	r5, ip
 8000b04:	d106      	bne.n	8000b14 <__aeabi_ddiv+0x1b0>
 8000b06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b0a:	f43f aefd 	beq.w	8000908 <__aeabi_dmul+0x1f8>
 8000b0e:	4610      	mov	r0, r2
 8000b10:	4619      	mov	r1, r3
 8000b12:	e722      	b.n	800095a <__aeabi_dmul+0x24a>
 8000b14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b18:	bf18      	it	ne
 8000b1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b1e:	f47f aec5 	bne.w	80008ac <__aeabi_dmul+0x19c>
 8000b22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b26:	f47f af0d 	bne.w	8000944 <__aeabi_dmul+0x234>
 8000b2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b2e:	f47f aeeb 	bne.w	8000908 <__aeabi_dmul+0x1f8>
 8000b32:	e712      	b.n	800095a <__aeabi_dmul+0x24a>

08000b34 <__aeabi_d2f>:
 8000b34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b38:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b3c:	bf24      	itt	cs
 8000b3e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b42:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b46:	d90d      	bls.n	8000b64 <__aeabi_d2f+0x30>
 8000b48:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b4c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b50:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b54:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b58:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b5c:	bf08      	it	eq
 8000b5e:	f020 0001 	biceq.w	r0, r0, #1
 8000b62:	4770      	bx	lr
 8000b64:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b68:	d121      	bne.n	8000bae <__aeabi_d2f+0x7a>
 8000b6a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6e:	bfbc      	itt	lt
 8000b70:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b74:	4770      	bxlt	lr
 8000b76:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b7a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7e:	f1c2 0218 	rsb	r2, r2, #24
 8000b82:	f1c2 0c20 	rsb	ip, r2, #32
 8000b86:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8e:	bf18      	it	ne
 8000b90:	f040 0001 	orrne.w	r0, r0, #1
 8000b94:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b98:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b9c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba0:	ea40 000c 	orr.w	r0, r0, ip
 8000ba4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bac:	e7cc      	b.n	8000b48 <__aeabi_d2f+0x14>
 8000bae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb2:	d107      	bne.n	8000bc4 <__aeabi_d2f+0x90>
 8000bb4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb8:	bf1e      	ittt	ne
 8000bba:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bbe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bc2:	4770      	bxne	lr
 8000bc4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_frsub>:
 8000bd4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd8:	e002      	b.n	8000be0 <__addsf3>
 8000bda:	bf00      	nop

08000bdc <__aeabi_fsub>:
 8000bdc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000be0 <__addsf3>:
 8000be0:	0042      	lsls	r2, r0, #1
 8000be2:	bf1f      	itttt	ne
 8000be4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be8:	ea92 0f03 	teqne	r2, r3
 8000bec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bf0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf4:	d06a      	beq.n	8000ccc <__addsf3+0xec>
 8000bf6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bfa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfe:	bfc1      	itttt	gt
 8000c00:	18d2      	addgt	r2, r2, r3
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	4048      	eorgt	r0, r1
 8000c06:	4041      	eorgt	r1, r0
 8000c08:	bfb8      	it	lt
 8000c0a:	425b      	neglt	r3, r3
 8000c0c:	2b19      	cmp	r3, #25
 8000c0e:	bf88      	it	hi
 8000c10:	4770      	bxhi	lr
 8000c12:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1e:	bf18      	it	ne
 8000c20:	4240      	negne	r0, r0
 8000c22:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c26:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c2a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2e:	bf18      	it	ne
 8000c30:	4249      	negne	r1, r1
 8000c32:	ea92 0f03 	teq	r2, r3
 8000c36:	d03f      	beq.n	8000cb8 <__addsf3+0xd8>
 8000c38:	f1a2 0201 	sub.w	r2, r2, #1
 8000c3c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c40:	eb10 000c 	adds.w	r0, r0, ip
 8000c44:	f1c3 0320 	rsb	r3, r3, #32
 8000c48:	fa01 f103 	lsl.w	r1, r1, r3
 8000c4c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c50:	d502      	bpl.n	8000c58 <__addsf3+0x78>
 8000c52:	4249      	negs	r1, r1
 8000c54:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c58:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c5c:	d313      	bcc.n	8000c86 <__addsf3+0xa6>
 8000c5e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c62:	d306      	bcc.n	8000c72 <__addsf3+0x92>
 8000c64:	0840      	lsrs	r0, r0, #1
 8000c66:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c6a:	f102 0201 	add.w	r2, r2, #1
 8000c6e:	2afe      	cmp	r2, #254	@ 0xfe
 8000c70:	d251      	bcs.n	8000d16 <__addsf3+0x136>
 8000c72:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c7a:	bf08      	it	eq
 8000c7c:	f020 0001 	biceq.w	r0, r0, #1
 8000c80:	ea40 0003 	orr.w	r0, r0, r3
 8000c84:	4770      	bx	lr
 8000c86:	0049      	lsls	r1, r1, #1
 8000c88:	eb40 0000 	adc.w	r0, r0, r0
 8000c8c:	3a01      	subs	r2, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c94:	d2ed      	bcs.n	8000c72 <__addsf3+0x92>
 8000c96:	fab0 fc80 	clz	ip, r0
 8000c9a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9e:	ebb2 020c 	subs.w	r2, r2, ip
 8000ca2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca6:	bfaa      	itet	ge
 8000ca8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cac:	4252      	neglt	r2, r2
 8000cae:	4318      	orrge	r0, r3
 8000cb0:	bfbc      	itt	lt
 8000cb2:	40d0      	lsrlt	r0, r2
 8000cb4:	4318      	orrlt	r0, r3
 8000cb6:	4770      	bx	lr
 8000cb8:	f092 0f00 	teq	r2, #0
 8000cbc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cc0:	bf06      	itte	eq
 8000cc2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc6:	3201      	addeq	r2, #1
 8000cc8:	3b01      	subne	r3, #1
 8000cca:	e7b5      	b.n	8000c38 <__addsf3+0x58>
 8000ccc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd4:	bf18      	it	ne
 8000cd6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cda:	d021      	beq.n	8000d20 <__addsf3+0x140>
 8000cdc:	ea92 0f03 	teq	r2, r3
 8000ce0:	d004      	beq.n	8000cec <__addsf3+0x10c>
 8000ce2:	f092 0f00 	teq	r2, #0
 8000ce6:	bf08      	it	eq
 8000ce8:	4608      	moveq	r0, r1
 8000cea:	4770      	bx	lr
 8000cec:	ea90 0f01 	teq	r0, r1
 8000cf0:	bf1c      	itt	ne
 8000cf2:	2000      	movne	r0, #0
 8000cf4:	4770      	bxne	lr
 8000cf6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cfa:	d104      	bne.n	8000d06 <__addsf3+0x126>
 8000cfc:	0040      	lsls	r0, r0, #1
 8000cfe:	bf28      	it	cs
 8000d00:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d0a:	bf3c      	itt	cc
 8000d0c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d10:	4770      	bxcc	lr
 8000d12:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d16:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d1a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1e:	4770      	bx	lr
 8000d20:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d24:	bf16      	itet	ne
 8000d26:	4608      	movne	r0, r1
 8000d28:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d2c:	4601      	movne	r1, r0
 8000d2e:	0242      	lsls	r2, r0, #9
 8000d30:	bf06      	itte	eq
 8000d32:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d36:	ea90 0f01 	teqeq	r0, r1
 8000d3a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_ui2f>:
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e004      	b.n	8000d50 <__aeabi_i2f+0x8>
 8000d46:	bf00      	nop

08000d48 <__aeabi_i2f>:
 8000d48:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d4c:	bf48      	it	mi
 8000d4e:	4240      	negmi	r0, r0
 8000d50:	ea5f 0c00 	movs.w	ip, r0
 8000d54:	bf08      	it	eq
 8000d56:	4770      	bxeq	lr
 8000d58:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d5c:	4601      	mov	r1, r0
 8000d5e:	f04f 0000 	mov.w	r0, #0
 8000d62:	e01c      	b.n	8000d9e <__aeabi_l2f+0x2a>

08000d64 <__aeabi_ul2f>:
 8000d64:	ea50 0201 	orrs.w	r2, r0, r1
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	e00a      	b.n	8000d88 <__aeabi_l2f+0x14>
 8000d72:	bf00      	nop

08000d74 <__aeabi_l2f>:
 8000d74:	ea50 0201 	orrs.w	r2, r0, r1
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d80:	d502      	bpl.n	8000d88 <__aeabi_l2f+0x14>
 8000d82:	4240      	negs	r0, r0
 8000d84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d88:	ea5f 0c01 	movs.w	ip, r1
 8000d8c:	bf02      	ittt	eq
 8000d8e:	4684      	moveq	ip, r0
 8000d90:	4601      	moveq	r1, r0
 8000d92:	2000      	moveq	r0, #0
 8000d94:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d98:	bf08      	it	eq
 8000d9a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000da2:	fabc f28c 	clz	r2, ip
 8000da6:	3a08      	subs	r2, #8
 8000da8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dac:	db10      	blt.n	8000dd0 <__aeabi_l2f+0x5c>
 8000dae:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db2:	4463      	add	r3, ip
 8000db4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db8:	f1c2 0220 	rsb	r2, r2, #32
 8000dbc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dc0:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc4:	eb43 0002 	adc.w	r0, r3, r2
 8000dc8:	bf08      	it	eq
 8000dca:	f020 0001 	biceq.w	r0, r0, #1
 8000dce:	4770      	bx	lr
 8000dd0:	f102 0220 	add.w	r2, r2, #32
 8000dd4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd8:	f1c2 0220 	rsb	r2, r2, #32
 8000ddc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000de0:	fa21 f202 	lsr.w	r2, r1, r2
 8000de4:	eb43 0002 	adc.w	r0, r3, r2
 8000de8:	bf08      	it	eq
 8000dea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dee:	4770      	bx	lr

08000df0 <__aeabi_uldivmod>:
 8000df0:	b953      	cbnz	r3, 8000e08 <__aeabi_uldivmod+0x18>
 8000df2:	b94a      	cbnz	r2, 8000e08 <__aeabi_uldivmod+0x18>
 8000df4:	2900      	cmp	r1, #0
 8000df6:	bf08      	it	eq
 8000df8:	2800      	cmpeq	r0, #0
 8000dfa:	bf1c      	itt	ne
 8000dfc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000e00:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000e04:	f000 b96a 	b.w	80010dc <__aeabi_idiv0>
 8000e08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e10:	f000 f806 	bl	8000e20 <__udivmoddi4>
 8000e14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e1c:	b004      	add	sp, #16
 8000e1e:	4770      	bx	lr

08000e20 <__udivmoddi4>:
 8000e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e24:	9d08      	ldr	r5, [sp, #32]
 8000e26:	460c      	mov	r4, r1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d14e      	bne.n	8000eca <__udivmoddi4+0xaa>
 8000e2c:	4694      	mov	ip, r2
 8000e2e:	458c      	cmp	ip, r1
 8000e30:	4686      	mov	lr, r0
 8000e32:	fab2 f282 	clz	r2, r2
 8000e36:	d962      	bls.n	8000efe <__udivmoddi4+0xde>
 8000e38:	b14a      	cbz	r2, 8000e4e <__udivmoddi4+0x2e>
 8000e3a:	f1c2 0320 	rsb	r3, r2, #32
 8000e3e:	4091      	lsls	r1, r2
 8000e40:	fa20 f303 	lsr.w	r3, r0, r3
 8000e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e48:	4319      	orrs	r1, r3
 8000e4a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f f68c 	uxth.w	r6, ip
 8000e56:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb07 1114 	mls	r1, r7, r4, r1
 8000e62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e66:	fb04 f106 	mul.w	r1, r4, r6
 8000e6a:	4299      	cmp	r1, r3
 8000e6c:	d90a      	bls.n	8000e84 <__udivmoddi4+0x64>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000e76:	f080 8112 	bcs.w	800109e <__udivmoddi4+0x27e>
 8000e7a:	4299      	cmp	r1, r3
 8000e7c:	f240 810f 	bls.w	800109e <__udivmoddi4+0x27e>
 8000e80:	3c02      	subs	r4, #2
 8000e82:	4463      	add	r3, ip
 8000e84:	1a59      	subs	r1, r3, r1
 8000e86:	fa1f f38e 	uxth.w	r3, lr
 8000e8a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e8e:	fb07 1110 	mls	r1, r7, r0, r1
 8000e92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e96:	fb00 f606 	mul.w	r6, r0, r6
 8000e9a:	429e      	cmp	r6, r3
 8000e9c:	d90a      	bls.n	8000eb4 <__udivmoddi4+0x94>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000ea6:	f080 80fc 	bcs.w	80010a2 <__udivmoddi4+0x282>
 8000eaa:	429e      	cmp	r6, r3
 8000eac:	f240 80f9 	bls.w	80010a2 <__udivmoddi4+0x282>
 8000eb0:	4463      	add	r3, ip
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	1b9b      	subs	r3, r3, r6
 8000eb6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eba:	2100      	movs	r1, #0
 8000ebc:	b11d      	cbz	r5, 8000ec6 <__udivmoddi4+0xa6>
 8000ebe:	40d3      	lsrs	r3, r2
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d905      	bls.n	8000eda <__udivmoddi4+0xba>
 8000ece:	b10d      	cbz	r5, 8000ed4 <__udivmoddi4+0xb4>
 8000ed0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e7f5      	b.n	8000ec6 <__udivmoddi4+0xa6>
 8000eda:	fab3 f183 	clz	r1, r3
 8000ede:	2900      	cmp	r1, #0
 8000ee0:	d146      	bne.n	8000f70 <__udivmoddi4+0x150>
 8000ee2:	42a3      	cmp	r3, r4
 8000ee4:	d302      	bcc.n	8000eec <__udivmoddi4+0xcc>
 8000ee6:	4290      	cmp	r0, r2
 8000ee8:	f0c0 80f0 	bcc.w	80010cc <__udivmoddi4+0x2ac>
 8000eec:	1a86      	subs	r6, r0, r2
 8000eee:	eb64 0303 	sbc.w	r3, r4, r3
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	2d00      	cmp	r5, #0
 8000ef6:	d0e6      	beq.n	8000ec6 <__udivmoddi4+0xa6>
 8000ef8:	e9c5 6300 	strd	r6, r3, [r5]
 8000efc:	e7e3      	b.n	8000ec6 <__udivmoddi4+0xa6>
 8000efe:	2a00      	cmp	r2, #0
 8000f00:	f040 8090 	bne.w	8001024 <__udivmoddi4+0x204>
 8000f04:	eba1 040c 	sub.w	r4, r1, ip
 8000f08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f0c:	fa1f f78c 	uxth.w	r7, ip
 8000f10:	2101      	movs	r1, #1
 8000f12:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f1a:	fb08 4416 	mls	r4, r8, r6, r4
 8000f1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f22:	fb07 f006 	mul.w	r0, r7, r6
 8000f26:	4298      	cmp	r0, r3
 8000f28:	d908      	bls.n	8000f3c <__udivmoddi4+0x11c>
 8000f2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000f32:	d202      	bcs.n	8000f3a <__udivmoddi4+0x11a>
 8000f34:	4298      	cmp	r0, r3
 8000f36:	f200 80cd 	bhi.w	80010d4 <__udivmoddi4+0x2b4>
 8000f3a:	4626      	mov	r6, r4
 8000f3c:	1a1c      	subs	r4, r3, r0
 8000f3e:	fa1f f38e 	uxth.w	r3, lr
 8000f42:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f46:	fb08 4410 	mls	r4, r8, r0, r4
 8000f4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f4e:	fb00 f707 	mul.w	r7, r0, r7
 8000f52:	429f      	cmp	r7, r3
 8000f54:	d908      	bls.n	8000f68 <__udivmoddi4+0x148>
 8000f56:	eb1c 0303 	adds.w	r3, ip, r3
 8000f5a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000f5e:	d202      	bcs.n	8000f66 <__udivmoddi4+0x146>
 8000f60:	429f      	cmp	r7, r3
 8000f62:	f200 80b0 	bhi.w	80010c6 <__udivmoddi4+0x2a6>
 8000f66:	4620      	mov	r0, r4
 8000f68:	1bdb      	subs	r3, r3, r7
 8000f6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f6e:	e7a5      	b.n	8000ebc <__udivmoddi4+0x9c>
 8000f70:	f1c1 0620 	rsb	r6, r1, #32
 8000f74:	408b      	lsls	r3, r1
 8000f76:	fa22 f706 	lsr.w	r7, r2, r6
 8000f7a:	431f      	orrs	r7, r3
 8000f7c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f80:	fa04 f301 	lsl.w	r3, r4, r1
 8000f84:	ea43 030c 	orr.w	r3, r3, ip
 8000f88:	40f4      	lsrs	r4, r6
 8000f8a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f8e:	0c38      	lsrs	r0, r7, #16
 8000f90:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f94:	fbb4 fef0 	udiv	lr, r4, r0
 8000f98:	fa1f fc87 	uxth.w	ip, r7
 8000f9c:	fb00 441e 	mls	r4, r0, lr, r4
 8000fa0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fa4:	fb0e f90c 	mul.w	r9, lr, ip
 8000fa8:	45a1      	cmp	r9, r4
 8000faa:	fa02 f201 	lsl.w	r2, r2, r1
 8000fae:	d90a      	bls.n	8000fc6 <__udivmoddi4+0x1a6>
 8000fb0:	193c      	adds	r4, r7, r4
 8000fb2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000fb6:	f080 8084 	bcs.w	80010c2 <__udivmoddi4+0x2a2>
 8000fba:	45a1      	cmp	r9, r4
 8000fbc:	f240 8081 	bls.w	80010c2 <__udivmoddi4+0x2a2>
 8000fc0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fc4:	443c      	add	r4, r7
 8000fc6:	eba4 0409 	sub.w	r4, r4, r9
 8000fca:	fa1f f983 	uxth.w	r9, r3
 8000fce:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fd2:	fb00 4413 	mls	r4, r0, r3, r4
 8000fd6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fda:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fde:	45a4      	cmp	ip, r4
 8000fe0:	d907      	bls.n	8000ff2 <__udivmoddi4+0x1d2>
 8000fe2:	193c      	adds	r4, r7, r4
 8000fe4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000fe8:	d267      	bcs.n	80010ba <__udivmoddi4+0x29a>
 8000fea:	45a4      	cmp	ip, r4
 8000fec:	d965      	bls.n	80010ba <__udivmoddi4+0x29a>
 8000fee:	3b02      	subs	r3, #2
 8000ff0:	443c      	add	r4, r7
 8000ff2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ff6:	fba0 9302 	umull	r9, r3, r0, r2
 8000ffa:	eba4 040c 	sub.w	r4, r4, ip
 8000ffe:	429c      	cmp	r4, r3
 8001000:	46ce      	mov	lr, r9
 8001002:	469c      	mov	ip, r3
 8001004:	d351      	bcc.n	80010aa <__udivmoddi4+0x28a>
 8001006:	d04e      	beq.n	80010a6 <__udivmoddi4+0x286>
 8001008:	b155      	cbz	r5, 8001020 <__udivmoddi4+0x200>
 800100a:	ebb8 030e 	subs.w	r3, r8, lr
 800100e:	eb64 040c 	sbc.w	r4, r4, ip
 8001012:	fa04 f606 	lsl.w	r6, r4, r6
 8001016:	40cb      	lsrs	r3, r1
 8001018:	431e      	orrs	r6, r3
 800101a:	40cc      	lsrs	r4, r1
 800101c:	e9c5 6400 	strd	r6, r4, [r5]
 8001020:	2100      	movs	r1, #0
 8001022:	e750      	b.n	8000ec6 <__udivmoddi4+0xa6>
 8001024:	f1c2 0320 	rsb	r3, r2, #32
 8001028:	fa20 f103 	lsr.w	r1, r0, r3
 800102c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001030:	fa24 f303 	lsr.w	r3, r4, r3
 8001034:	4094      	lsls	r4, r2
 8001036:	430c      	orrs	r4, r1
 8001038:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800103c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001040:	fa1f f78c 	uxth.w	r7, ip
 8001044:	fbb3 f0f8 	udiv	r0, r3, r8
 8001048:	fb08 3110 	mls	r1, r8, r0, r3
 800104c:	0c23      	lsrs	r3, r4, #16
 800104e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001052:	fb00 f107 	mul.w	r1, r0, r7
 8001056:	4299      	cmp	r1, r3
 8001058:	d908      	bls.n	800106c <__udivmoddi4+0x24c>
 800105a:	eb1c 0303 	adds.w	r3, ip, r3
 800105e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001062:	d22c      	bcs.n	80010be <__udivmoddi4+0x29e>
 8001064:	4299      	cmp	r1, r3
 8001066:	d92a      	bls.n	80010be <__udivmoddi4+0x29e>
 8001068:	3802      	subs	r0, #2
 800106a:	4463      	add	r3, ip
 800106c:	1a5b      	subs	r3, r3, r1
 800106e:	b2a4      	uxth	r4, r4
 8001070:	fbb3 f1f8 	udiv	r1, r3, r8
 8001074:	fb08 3311 	mls	r3, r8, r1, r3
 8001078:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800107c:	fb01 f307 	mul.w	r3, r1, r7
 8001080:	42a3      	cmp	r3, r4
 8001082:	d908      	bls.n	8001096 <__udivmoddi4+0x276>
 8001084:	eb1c 0404 	adds.w	r4, ip, r4
 8001088:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800108c:	d213      	bcs.n	80010b6 <__udivmoddi4+0x296>
 800108e:	42a3      	cmp	r3, r4
 8001090:	d911      	bls.n	80010b6 <__udivmoddi4+0x296>
 8001092:	3902      	subs	r1, #2
 8001094:	4464      	add	r4, ip
 8001096:	1ae4      	subs	r4, r4, r3
 8001098:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800109c:	e739      	b.n	8000f12 <__udivmoddi4+0xf2>
 800109e:	4604      	mov	r4, r0
 80010a0:	e6f0      	b.n	8000e84 <__udivmoddi4+0x64>
 80010a2:	4608      	mov	r0, r1
 80010a4:	e706      	b.n	8000eb4 <__udivmoddi4+0x94>
 80010a6:	45c8      	cmp	r8, r9
 80010a8:	d2ae      	bcs.n	8001008 <__udivmoddi4+0x1e8>
 80010aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80010ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80010b2:	3801      	subs	r0, #1
 80010b4:	e7a8      	b.n	8001008 <__udivmoddi4+0x1e8>
 80010b6:	4631      	mov	r1, r6
 80010b8:	e7ed      	b.n	8001096 <__udivmoddi4+0x276>
 80010ba:	4603      	mov	r3, r0
 80010bc:	e799      	b.n	8000ff2 <__udivmoddi4+0x1d2>
 80010be:	4630      	mov	r0, r6
 80010c0:	e7d4      	b.n	800106c <__udivmoddi4+0x24c>
 80010c2:	46d6      	mov	lr, sl
 80010c4:	e77f      	b.n	8000fc6 <__udivmoddi4+0x1a6>
 80010c6:	4463      	add	r3, ip
 80010c8:	3802      	subs	r0, #2
 80010ca:	e74d      	b.n	8000f68 <__udivmoddi4+0x148>
 80010cc:	4606      	mov	r6, r0
 80010ce:	4623      	mov	r3, r4
 80010d0:	4608      	mov	r0, r1
 80010d2:	e70f      	b.n	8000ef4 <__udivmoddi4+0xd4>
 80010d4:	3e02      	subs	r6, #2
 80010d6:	4463      	add	r3, ip
 80010d8:	e730      	b.n	8000f3c <__udivmoddi4+0x11c>
 80010da:	bf00      	nop

080010dc <__aeabi_idiv0>:
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80010ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4013      	ands	r3, r2
 8001102:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001104:	68fb      	ldr	r3, [r7, #12]
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800111c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800111e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4313      	orrs	r3, r2
 8001126:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800112c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4013      	ands	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001134:	68fb      	ldr	r3, [r7, #12]
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	601a      	str	r2, [r3, #0]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr

0800115e <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	601a      	str	r2, [r3, #0]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001190:	f023 0306 	bic.w	r3, r3, #6
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	430a      	orrs	r2, r1
 800119a:	431a      	orrs	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	60da      	str	r2, [r3, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr

080011aa <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	60da      	str	r2, [r3, #12]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	605a      	str	r2, [r3, #4]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
	...

080011e8 <format_csv_line>:
    float humidity;         // percent
} SensorData;



static inline void format_csv_line(char *buffer, size_t size, const SensorData *data) {
 80011e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011ec:	b08b      	sub	sp, #44	@ 0x2c
 80011ee:	af06      	add	r7, sp, #24
 80011f0:	60f8      	str	r0, [r7, #12]
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
    snprintf(buffer, size, "%lu,%.2f,%.2f,%.2f\r\n",
             data->timestamp,
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681e      	ldr	r6, [r3, #0]
             data->temperature,
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
    snprintf(buffer, size, "%lu,%.2f,%.2f,%.2f\r\n",
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fa2e 	bl	8000660 <__aeabi_f2d>
 8001204:	4604      	mov	r4, r0
 8001206:	460d      	mov	r5, r1
             data->pressure,
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
    snprintf(buffer, size, "%lu,%.2f,%.2f,%.2f\r\n",
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fa27 	bl	8000660 <__aeabi_f2d>
 8001212:	4680      	mov	r8, r0
 8001214:	4689      	mov	r9, r1
             data->humidity);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
    snprintf(buffer, size, "%lu,%.2f,%.2f,%.2f\r\n",
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fa20 	bl	8000660 <__aeabi_f2d>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001228:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800122c:	e9cd 4500 	strd	r4, r5, [sp]
 8001230:	4633      	mov	r3, r6
 8001232:	4a05      	ldr	r2, [pc, #20]	@ (8001248 <format_csv_line+0x60>)
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f007 ff14 	bl	8009064 <sniprintf>
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001246:	bf00      	nop
 8001248:	08009a58 	.word	0x08009a58

0800124c <myprintf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void myprintf(const char *fmt, ...) {
 800124c:	b40f      	push	{r0, r1, r2, r3}
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	607b      	str	r3, [r7, #4]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001262:	4805      	ldr	r0, [pc, #20]	@ (8001278 <myprintf+0x2c>)
 8001264:	f007 ff5e 	bl	8009124 <vsniprintf>
	va_end(args);
	//HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001272:	b004      	add	sp, #16
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	200001b4 	.word	0x200001b4
 800127c:	00000000 	.word	0x00000000

08001280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	f5ad 6de9 	sub.w	sp, sp, #1864	@ 0x748
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	int status = SH2_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 373c 	str.w	r3, [r7, #1852]	@ 0x73c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800128e:	f000 fd33 	bl	8001cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001292:	f000 fa4d 	bl	8001730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001296:	f000 fb9d 	bl	80019d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800129a:	f000 fa9b 	bl	80017d4 <MX_I2C1_Init>
  MX_SPI1_Init();
 800129e:	f000 fb5b 	bl	8001958 <MX_SPI1_Init>
  MX_LPUART1_UART_Init();
 80012a2:	f000 fb09 	bl	80018b8 <MX_LPUART1_UART_Init>
  MX_FATFS_Init();
 80012a6:	f004 ffe9 	bl	800627c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

	// Link the FatFS driver to SD logical drive
	FATFS_LinkDriver(&USER_Driver, "/SD");
 80012aa:	499c      	ldr	r1, [pc, #624]	@ (800151c <main+0x29c>)
 80012ac:	489c      	ldr	r0, [pc, #624]	@ (8001520 <main+0x2a0>)
 80012ae:	f007 fec9 	bl	8009044 <FATFS_LinkDriver>
	FATFS fs;
	FIL file;
	FRESULT res;

	//--Mount the filesystem--
	res = f_mount(&fs, "/SD", 1);
 80012b2:	f207 5304 	addw	r3, r7, #1284	@ 0x504
 80012b6:	2201      	movs	r2, #1
 80012b8:	4998      	ldr	r1, [pc, #608]	@ (800151c <main+0x29c>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f007 fa5a 	bl	8008774 <f_mount>
 80012c0:	4603      	mov	r3, r0
 80012c2:	f887 373b 	strb.w	r3, [r7, #1851]	@ 0x73b
	if (res != FR_OK) {
 80012c6:	f897 373b 	ldrb.w	r3, [r7, #1851]	@ 0x73b
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d008      	beq.n	80012e0 <main+0x60>
		// If mounting fails print error and halt
		myprintf("f_mount failed (%d)\r\n", res);
 80012ce:	f897 373b 	ldrb.w	r3, [r7, #1851]	@ 0x73b
 80012d2:	4619      	mov	r1, r3
 80012d4:	4893      	ldr	r0, [pc, #588]	@ (8001524 <main+0x2a4>)
 80012d6:	f7ff ffb9 	bl	800124c <myprintf>
		Error_Handler();
 80012da:	f000 fba0 	bl	8001a1e <Error_Handler>
 80012de:	e002      	b.n	80012e6 <main+0x66>
	} else {
		// Print if mounting succeeds
		myprintf("SD mounted.\r\n");
 80012e0:	4891      	ldr	r0, [pc, #580]	@ (8001528 <main+0x2a8>)
 80012e2:	f7ff ffb3 	bl	800124c <myprintf>
	 * Object for number of bytes written */
	FIL csvFile;
	UINT bytes_written;

	// Open/create CSV file for writing
	res = f_open(&csvFile, "data.csv", FA_WRITE | FA_CREATE_ALWAYS);
 80012e6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012ea:	220a      	movs	r2, #10
 80012ec:	498f      	ldr	r1, [pc, #572]	@ (800152c <main+0x2ac>)
 80012ee:	4618      	mov	r0, r3
 80012f0:	f007 fa86 	bl	8008800 <f_open>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f887 373b 	strb.w	r3, [r7, #1851]	@ 0x73b
	if (res == FR_OK) {
 80012fa:	f897 373b 	ldrb.w	r3, [r7, #1851]	@ 0x73b
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f040 80bc 	bne.w	800147c <main+0x1fc>
		// CSV column headers
		const char *header = "timestamp,temperature,pressure,humidity\r\n";
 8001304:	4b8a      	ldr	r3, [pc, #552]	@ (8001530 <main+0x2b0>)
 8001306:	f8c7 3734 	str.w	r3, [r7, #1844]	@ 0x734
		res = f_write(&csvFile, header, strlen(header), &bytes_written);
 800130a:	f8d7 0734 	ldr.w	r0, [r7, #1844]	@ 0x734
 800130e:	f7fe ff37 	bl	8000180 <strlen>
 8001312:	4602      	mov	r2, r0
 8001314:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001318:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800131c:	f8d7 1734 	ldr.w	r1, [r7, #1844]	@ 0x734
 8001320:	f007 fc28 	bl	8008b74 <f_write>
 8001324:	4603      	mov	r3, r0
 8001326:	f887 373b 	strb.w	r3, [r7, #1851]	@ 0x73b
		if (res == FR_OK) {
 800132a:	f897 373b 	ldrb.w	r3, [r7, #1851]	@ 0x73b
 800132e:	2b00      	cmp	r3, #0
 8001330:	d103      	bne.n	800133a <main+0xba>
			myprintf("CSV header written.\r\n");
 8001332:	4880      	ldr	r0, [pc, #512]	@ (8001534 <main+0x2b4>)
 8001334:	f7ff ff8a 	bl	800124c <myprintf>
 8001338:	e005      	b.n	8001346 <main+0xc6>
		} else {
			myprintf("CSV header write failed (%d).\r\n", res);
 800133a:	f897 373b 	ldrb.w	r3, [r7, #1851]	@ 0x73b
 800133e:	4619      	mov	r1, r3
 8001340:	487d      	ldr	r0, [pc, #500]	@ (8001538 <main+0x2b8>)
 8001342:	f7ff ff83 	bl	800124c <myprintf>
		}
		// Close file after writing
		f_close(&csvFile);
 8001346:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800134a:	4618      	mov	r0, r3
 800134c:	f007 fe05 	bl	8008f5a <f_close>

		//--Dummy sensor logging test, comment out for flight--
		SensorData test_data; // Struct for fake data
		char csv_line[128];   // Buffer for formatted CSV row

		for (int i = 0; i < 5; i++) {
 8001350:	2300      	movs	r3, #0
 8001352:	f8c7 3744 	str.w	r3, [r7, #1860]	@ 0x744
 8001356:	e08b      	b.n	8001470 <main+0x1f0>
			// Fake sensor values
			test_data.timestamp = HAL_GetTick();
 8001358:	f000 fd3a 	bl	8001dd0 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8001362:	f5a3 63d7 	sub.w	r3, r3, #1720	@ 0x6b8
 8001366:	601a      	str	r2, [r3, #0]
			test_data.temperature = 20.0f + i; // e.g. 20.0, 21.0, ...
 8001368:	f8d7 0744 	ldr.w	r0, [r7, #1860]	@ 0x744
 800136c:	f7ff fcec 	bl	8000d48 <__aeabi_i2f>
 8001370:	4603      	mov	r3, r0
 8001372:	4972      	ldr	r1, [pc, #456]	@ (800153c <main+0x2bc>)
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fc33 	bl	8000be0 <__addsf3>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8001382:	f5a3 63d7 	sub.w	r3, r3, #1720	@ 0x6b8
 8001386:	605a      	str	r2, [r3, #4]
			test_data.pressure = 1000.0f + i * 2;
 8001388:	f8d7 3744 	ldr.w	r3, [r7, #1860]	@ 0x744
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fcda 	bl	8000d48 <__aeabi_i2f>
 8001394:	4603      	mov	r3, r0
 8001396:	496a      	ldr	r1, [pc, #424]	@ (8001540 <main+0x2c0>)
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fc21 	bl	8000be0 <__addsf3>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80013a6:	f5a3 63d7 	sub.w	r3, r3, #1720	@ 0x6b8
 80013aa:	609a      	str	r2, [r3, #8]
			test_data.humidity = 50.0f + i * 1.5f;
 80013ac:	f8d7 0744 	ldr.w	r0, [r7, #1860]	@ 0x744
 80013b0:	f7ff fcca 	bl	8000d48 <__aeabi_i2f>
 80013b4:	4603      	mov	r3, r0
 80013b6:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7fe ff38 	bl	8000230 <__aeabi_fmul>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4960      	ldr	r1, [pc, #384]	@ (8001544 <main+0x2c4>)
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fc0b 	bl	8000be0 <__addsf3>
 80013ca:	4603      	mov	r3, r0
 80013cc:	461a      	mov	r2, r3
 80013ce:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80013d2:	f5a3 63d7 	sub.w	r3, r3, #1720	@ 0x6b8
 80013d6:	60da      	str	r2, [r3, #12]

			// Format CSV line
			format_csv_line(csv_line, sizeof(csv_line), &test_data);
 80013d8:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80013dc:	463b      	mov	r3, r7
 80013de:	2180      	movs	r1, #128	@ 0x80
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff01 	bl	80011e8 <format_csv_line>

			// Open file in append mode
			res = f_open(&csvFile, "data.csv", FA_OPEN_APPEND | FA_WRITE);
 80013e6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013ea:	2232      	movs	r2, #50	@ 0x32
 80013ec:	494f      	ldr	r1, [pc, #316]	@ (800152c <main+0x2ac>)
 80013ee:	4618      	mov	r0, r3
 80013f0:	f007 fa06 	bl	8008800 <f_open>
 80013f4:	4603      	mov	r3, r0
 80013f6:	f887 373b 	strb.w	r3, [r7, #1851]	@ 0x73b
			if (res == FR_OK) {
 80013fa:	f897 373b 	ldrb.w	r3, [r7, #1851]	@ 0x73b
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d127      	bne.n	8001452 <main+0x1d2>
				UINT bytes_written;
				res = f_write(&csvFile, csv_line, strlen(csv_line),
 8001402:	463b      	mov	r3, r7
 8001404:	4618      	mov	r0, r3
 8001406:	f7fe febb 	bl	8000180 <strlen>
 800140a:	4602      	mov	r2, r0
 800140c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001410:	4639      	mov	r1, r7
 8001412:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 8001416:	f007 fbad 	bl	8008b74 <f_write>
 800141a:	4603      	mov	r3, r0
 800141c:	f887 373b 	strb.w	r3, [r7, #1851]	@ 0x73b
						&bytes_written);
				f_close(&csvFile);
 8001420:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001424:	4618      	mov	r0, r3
 8001426:	f007 fd98 	bl	8008f5a <f_close>

				// Report success or failure over UART
				if (res == FR_OK) {
 800142a:	f897 373b 	ldrb.w	r3, [r7, #1851]	@ 0x73b
 800142e:	2b00      	cmp	r3, #0
 8001430:	d108      	bne.n	8001444 <main+0x1c4>
					myprintf("Row %d written: %s", i + 1, csv_line);
 8001432:	f8d7 3744 	ldr.w	r3, [r7, #1860]	@ 0x744
 8001436:	3301      	adds	r3, #1
 8001438:	463a      	mov	r2, r7
 800143a:	4619      	mov	r1, r3
 800143c:	4842      	ldr	r0, [pc, #264]	@ (8001548 <main+0x2c8>)
 800143e:	f7ff ff05 	bl	800124c <myprintf>
 8001442:	e00c      	b.n	800145e <main+0x1de>
				} else {
					myprintf("Write failed (%d)\r\n", res);
 8001444:	f897 373b 	ldrb.w	r3, [r7, #1851]	@ 0x73b
 8001448:	4619      	mov	r1, r3
 800144a:	4840      	ldr	r0, [pc, #256]	@ (800154c <main+0x2cc>)
 800144c:	f7ff fefe 	bl	800124c <myprintf>
 8001450:	e005      	b.n	800145e <main+0x1de>
				}
			} else {
				myprintf("Append open failed (%d)\r\n", res);
 8001452:	f897 373b 	ldrb.w	r3, [r7, #1851]	@ 0x73b
 8001456:	4619      	mov	r1, r3
 8001458:	483d      	ldr	r0, [pc, #244]	@ (8001550 <main+0x2d0>)
 800145a:	f7ff fef7 	bl	800124c <myprintf>
			}

			HAL_Delay(1000); // 1 second between entries
 800145e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001462:	f000 fcbf 	bl	8001de4 <HAL_Delay>
		for (int i = 0; i < 5; i++) {
 8001466:	f8d7 3744 	ldr.w	r3, [r7, #1860]	@ 0x744
 800146a:	3301      	adds	r3, #1
 800146c:	f8c7 3744 	str.w	r3, [r7, #1860]	@ 0x744
 8001470:	f8d7 3744 	ldr.w	r3, [r7, #1860]	@ 0x744
 8001474:	2b04      	cmp	r3, #4
 8001476:	f77f af6f 	ble.w	8001358 <main+0xd8>
 800147a:	e005      	b.n	8001488 <main+0x208>
		}

	} else {
		// If opening CSV file failed print
		myprintf("Failed to open data.csv (%d).\r\n", res);
 800147c:	f897 373b 	ldrb.w	r3, [r7, #1851]	@ 0x73b
 8001480:	4619      	mov	r1, r3
 8001482:	4834      	ldr	r0, [pc, #208]	@ (8001554 <main+0x2d4>)
 8001484:	f7ff fee2 	bl	800124c <myprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {

		bno_buffer[0] = 0;
 8001488:	4b33      	ldr	r3, [pc, #204]	@ (8001558 <main+0x2d8>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
		bno_buffer[1] = 0;
 800148e:	4b32      	ldr	r3, [pc, #200]	@ (8001558 <main+0x2d8>)
 8001490:	2200      	movs	r2, #0
 8001492:	705a      	strb	r2, [r3, #1]

		while (bno_buffer[0] != 0xAA)
 8001494:	e006      	b.n	80014a4 <main+0x224>
			HAL_UART_Receive(&hlpuart1, bno_buffer, 1, 1000);
 8001496:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800149a:	2201      	movs	r2, #1
 800149c:	492e      	ldr	r1, [pc, #184]	@ (8001558 <main+0x2d8>)
 800149e:	482f      	ldr	r0, [pc, #188]	@ (800155c <main+0x2dc>)
 80014a0:	f003 fa6b 	bl	800497a <HAL_UART_Receive>
		while (bno_buffer[0] != 0xAA)
 80014a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001558 <main+0x2d8>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2baa      	cmp	r3, #170	@ 0xaa
 80014aa:	d1f4      	bne.n	8001496 <main+0x216>

		while (bno_buffer[1] != 0xAA)
 80014ac:	e006      	b.n	80014bc <main+0x23c>
			HAL_UART_Receive(&hlpuart1, bno_buffer + 1, 1, 1000);
 80014ae:	492c      	ldr	r1, [pc, #176]	@ (8001560 <main+0x2e0>)
 80014b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014b4:	2201      	movs	r2, #1
 80014b6:	4829      	ldr	r0, [pc, #164]	@ (800155c <main+0x2dc>)
 80014b8:	f003 fa5f 	bl	800497a <HAL_UART_Receive>
		while (bno_buffer[1] != 0xAA)
 80014bc:	4b26      	ldr	r3, [pc, #152]	@ (8001558 <main+0x2d8>)
 80014be:	785b      	ldrb	r3, [r3, #1]
 80014c0:	2baa      	cmp	r3, #170	@ 0xaa
 80014c2:	d1f4      	bne.n	80014ae <main+0x22e>

		HAL_UART_Receive(&hlpuart1, bno_buffer + 2, 17, 1000);
 80014c4:	4927      	ldr	r1, [pc, #156]	@ (8001564 <main+0x2e4>)
 80014c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ca:	2211      	movs	r2, #17
 80014cc:	4823      	ldr	r0, [pc, #140]	@ (800155c <main+0x2dc>)
 80014ce:	f003 fa54 	bl	800497a <HAL_UART_Receive>

		if (bno_buffer[0] == 0xAA && bno_buffer[1] == 0xAA) {
 80014d2:	4b21      	ldr	r3, [pc, #132]	@ (8001558 <main+0x2d8>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2baa      	cmp	r3, #170	@ 0xaa
 80014d8:	d1d6      	bne.n	8001488 <main+0x208>
 80014da:	4b1f      	ldr	r3, [pc, #124]	@ (8001558 <main+0x2d8>)
 80014dc:	785b      	ldrb	r3, [r3, #1]
 80014de:	2baa      	cmp	r3, #170	@ 0xaa
 80014e0:	d1d2      	bne.n	8001488 <main+0x208>
			//got data!!!

			uint8_t sum = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f887 3743 	strb.w	r3, [r7, #1859]	@ 0x743
			// get checksum ready
			for (uint8_t i = 2; i < 17; i++) {
 80014e8:	2302      	movs	r3, #2
 80014ea:	f887 3742 	strb.w	r3, [r7, #1858]	@ 0x742
 80014ee:	e00d      	b.n	800150c <main+0x28c>
				sum += bno_buffer[i];
 80014f0:	f897 3742 	ldrb.w	r3, [r7, #1858]	@ 0x742
 80014f4:	4a18      	ldr	r2, [pc, #96]	@ (8001558 <main+0x2d8>)
 80014f6:	5cd2      	ldrb	r2, [r2, r3]
 80014f8:	f897 3743 	ldrb.w	r3, [r7, #1859]	@ 0x743
 80014fc:	4413      	add	r3, r2
 80014fe:	f887 3743 	strb.w	r3, [r7, #1859]	@ 0x743
			for (uint8_t i = 2; i < 17; i++) {
 8001502:	f897 3742 	ldrb.w	r3, [r7, #1858]	@ 0x742
 8001506:	3301      	adds	r3, #1
 8001508:	f887 3742 	strb.w	r3, [r7, #1858]	@ 0x742
 800150c:	f897 3742 	ldrb.w	r3, [r7, #1858]	@ 0x742
 8001510:	2b10      	cmp	r3, #16
 8001512:	d9ed      	bls.n	80014f0 <main+0x270>
			}

			// The data comes in endian'd, this solves it so it works on all platforms
			int16_t buffer_16[6];

			for (uint8_t i = 0; i < 6; i++) {
 8001514:	2300      	movs	r3, #0
 8001516:	f887 3741 	strb.w	r3, [r7, #1857]	@ 0x741
 800151a:	e055      	b.n	80015c8 <main+0x348>
 800151c:	08009a70 	.word	0x08009a70
 8001520:	2000000c 	.word	0x2000000c
 8001524:	08009a74 	.word	0x08009a74
 8001528:	08009a8c 	.word	0x08009a8c
 800152c:	08009a9c 	.word	0x08009a9c
 8001530:	08009aa8 	.word	0x08009aa8
 8001534:	08009ad4 	.word	0x08009ad4
 8001538:	08009aec 	.word	0x08009aec
 800153c:	41a00000 	.word	0x41a00000
 8001540:	447a0000 	.word	0x447a0000
 8001544:	42480000 	.word	0x42480000
 8001548:	08009b0c 	.word	0x08009b0c
 800154c:	08009b20 	.word	0x08009b20
 8001550:	08009b34 	.word	0x08009b34
 8001554:	08009b50 	.word	0x08009b50
 8001558:	20000188 	.word	0x20000188
 800155c:	20000090 	.word	0x20000090
 8001560:	20000189 	.word	0x20000189
 8001564:	2000018a 	.word	0x2000018a

				buffer_16[i] = (bno_buffer[1 + (i * 2)]);
 8001568:	f897 3741 	ldrb.w	r3, [r7, #1857]	@ 0x741
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	3301      	adds	r3, #1
 8001570:	4a6d      	ldr	r2, [pc, #436]	@ (8001728 <main+0x4a8>)
 8001572:	5cd3      	ldrb	r3, [r2, r3]
 8001574:	f897 2741 	ldrb.w	r2, [r7, #1857]	@ 0x741
 8001578:	b219      	sxth	r1, r3
 800157a:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 800157e:	f5a3 63d9 	sub.w	r3, r3, #1736	@ 0x6c8
 8001582:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				buffer_16[i] += (bno_buffer[1 + (i * 2) + 1] << 8);
 8001586:	f897 2741 	ldrb.w	r2, [r7, #1857]	@ 0x741
 800158a:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 800158e:	f5a3 63d9 	sub.w	r3, r3, #1736	@ 0x6c8
 8001592:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001596:	b29a      	uxth	r2, r3
 8001598:	f897 3741 	ldrb.w	r3, [r7, #1857]	@ 0x741
 800159c:	3301      	adds	r3, #1
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4961      	ldr	r1, [pc, #388]	@ (8001728 <main+0x4a8>)
 80015a2:	5ccb      	ldrb	r3, [r1, r3]
 80015a4:	021b      	lsls	r3, r3, #8
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	4413      	add	r3, r2
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	f897 2741 	ldrb.w	r2, [r7, #1857]	@ 0x741
 80015b0:	b219      	sxth	r1, r3
 80015b2:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80015b6:	f5a3 63d9 	sub.w	r3, r3, #1736	@ 0x6c8
 80015ba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (uint8_t i = 0; i < 6; i++) {
 80015be:	f897 3741 	ldrb.w	r3, [r7, #1857]	@ 0x741
 80015c2:	3301      	adds	r3, #1
 80015c4:	f887 3741 	strb.w	r3, [r7, #1857]	@ 0x741
 80015c8:	f897 3741 	ldrb.w	r3, [r7, #1857]	@ 0x741
 80015cc:	2b05      	cmp	r3, #5
 80015ce:	d9cb      	bls.n	8001568 <main+0x2e8>
			}
			data.yaw = (float) buffer_16[0] * DEGREE_SCALE;
 80015d0:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80015d4:	f5a3 63d9 	sub.w	r3, r3, #1736	@ 0x6c8
 80015d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fbb3 	bl	8000d48 <__aeabi_i2f>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff f83b 	bl	8000660 <__aeabi_f2d>
 80015ea:	a34b      	add	r3, pc, #300	@ (adr r3, 8001718 <main+0x498>)
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	f7ff f88e 	bl	8000710 <__aeabi_dmul>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff fa9a 	bl	8000b34 <__aeabi_d2f>
 8001600:	4603      	mov	r3, r0
 8001602:	4a4a      	ldr	r2, [pc, #296]	@ (800172c <main+0x4ac>)
 8001604:	6013      	str	r3, [r2, #0]
			data.pitch = (float) buffer_16[1] * DEGREE_SCALE;
 8001606:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 800160a:	f5a3 63d9 	sub.w	r3, r3, #1736	@ 0x6c8
 800160e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fb98 	bl	8000d48 <__aeabi_i2f>
 8001618:	4603      	mov	r3, r0
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff f820 	bl	8000660 <__aeabi_f2d>
 8001620:	a33d      	add	r3, pc, #244	@ (adr r3, 8001718 <main+0x498>)
 8001622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001626:	f7ff f873 	bl	8000710 <__aeabi_dmul>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	f7ff fa7f 	bl	8000b34 <__aeabi_d2f>
 8001636:	4603      	mov	r3, r0
 8001638:	4a3c      	ldr	r2, [pc, #240]	@ (800172c <main+0x4ac>)
 800163a:	6053      	str	r3, [r2, #4]
			data.roll = (float) buffer_16[2] * DEGREE_SCALE;
 800163c:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8001640:	f5a3 63d9 	sub.w	r3, r3, #1736	@ 0x6c8
 8001644:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fb7d 	bl	8000d48 <__aeabi_i2f>
 800164e:	4603      	mov	r3, r0
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff f805 	bl	8000660 <__aeabi_f2d>
 8001656:	a330      	add	r3, pc, #192	@ (adr r3, 8001718 <main+0x498>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f7ff f858 	bl	8000710 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	f7ff fa64 	bl	8000b34 <__aeabi_d2f>
 800166c:	4603      	mov	r3, r0
 800166e:	4a2f      	ldr	r2, [pc, #188]	@ (800172c <main+0x4ac>)
 8001670:	6093      	str	r3, [r2, #8]

			data.x_accel = (float) buffer_16[3] * MILLI_G_TO_MS2;
 8001672:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8001676:	f5a3 63d9 	sub.w	r3, r3, #1736	@ 0x6c8
 800167a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fb62 	bl	8000d48 <__aeabi_i2f>
 8001684:	4603      	mov	r3, r0
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe ffea 	bl	8000660 <__aeabi_f2d>
 800168c:	a324      	add	r3, pc, #144	@ (adr r3, 8001720 <main+0x4a0>)
 800168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001692:	f7ff f83d 	bl	8000710 <__aeabi_dmul>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	f7ff fa49 	bl	8000b34 <__aeabi_d2f>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4a21      	ldr	r2, [pc, #132]	@ (800172c <main+0x4ac>)
 80016a6:	60d3      	str	r3, [r2, #12]
			data.y_accel = (float) buffer_16[4] * MILLI_G_TO_MS2;
 80016a8:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80016ac:	f5a3 63d9 	sub.w	r3, r3, #1736	@ 0x6c8
 80016b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fb47 	bl	8000d48 <__aeabi_i2f>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe ffcf 	bl	8000660 <__aeabi_f2d>
 80016c2:	a317      	add	r3, pc, #92	@ (adr r3, 8001720 <main+0x4a0>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	f7ff f822 	bl	8000710 <__aeabi_dmul>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	f7ff fa2e 	bl	8000b34 <__aeabi_d2f>
 80016d8:	4603      	mov	r3, r0
 80016da:	4a14      	ldr	r2, [pc, #80]	@ (800172c <main+0x4ac>)
 80016dc:	6113      	str	r3, [r2, #16]
			data.z_accel = (float) buffer_16[5] * MILLI_G_TO_MS2;
 80016de:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80016e2:	f5a3 63d9 	sub.w	r3, r3, #1736	@ 0x6c8
 80016e6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fb2c 	bl	8000d48 <__aeabi_i2f>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe ffb4 	bl	8000660 <__aeabi_f2d>
 80016f8:	a309      	add	r3, pc, #36	@ (adr r3, 8001720 <main+0x4a0>)
 80016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fe:	f7ff f807 	bl	8000710 <__aeabi_dmul>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	f7ff fa13 	bl	8000b34 <__aeabi_d2f>
 800170e:	4603      	mov	r3, r0
 8001710:	4a06      	ldr	r2, [pc, #24]	@ (800172c <main+0x4ac>)
 8001712:	6153      	str	r3, [r2, #20]
		bno_buffer[0] = 0;
 8001714:	e6b8      	b.n	8001488 <main+0x208>
 8001716:	bf00      	nop
 8001718:	47ae147b 	.word	0x47ae147b
 800171c:	3f847ae1 	.word	0x3f847ae1
 8001720:	fe40e31f 	.word	0xfe40e31f
 8001724:	3f841588 	.word	0x3f841588
 8001728:	20000188 	.word	0x20000188
 800172c:	2000019c 	.word	0x2000019c

08001730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b09a      	sub	sp, #104	@ 0x68
 8001734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001736:	f107 0320 	add.w	r3, r7, #32
 800173a:	2248      	movs	r2, #72	@ 0x48
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f007 fcfe 	bl	8009140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
 8001754:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001756:	4b1e      	ldr	r3, [pc, #120]	@ (80017d0 <SystemClock_Config+0xa0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800175e:	4a1c      	ldr	r2, [pc, #112]	@ (80017d0 <SystemClock_Config+0xa0>)
 8001760:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	4b1a      	ldr	r3, [pc, #104]	@ (80017d0 <SystemClock_Config+0xa0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001772:	2320      	movs	r3, #32
 8001774:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001776:	2301      	movs	r3, #1
 8001778:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800177a:	2300      	movs	r3, #0
 800177c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800177e:	23b0      	movs	r3, #176	@ 0xb0
 8001780:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001782:	2300      	movs	r3, #0
 8001784:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001786:	f107 0320 	add.w	r3, r7, #32
 800178a:	4618      	mov	r0, r3
 800178c:	f001 f938 	bl	8002a00 <HAL_RCC_OscConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001796:	f000 f942 	bl	8001a1e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800179a:	234f      	movs	r3, #79	@ 0x4f
 800179c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	2102      	movs	r1, #2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f001 fca3 	bl	8003104 <HAL_RCC_ClockConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017c4:	f000 f92b 	bl	8001a1e <Error_Handler>
  }
}
 80017c8:	bf00      	nop
 80017ca:	3768      	adds	r7, #104	@ 0x68
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	58000400 	.word	0x58000400

080017d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b09c      	sub	sp, #112	@ 0x70
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80017da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]
 80017ea:	615a      	str	r2, [r3, #20]
 80017ec:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]
 80017fe:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	2238      	movs	r2, #56	@ 0x38
 8001804:	2100      	movs	r1, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f007 fc9a 	bl	8009140 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800180c:	2340      	movs	r3, #64	@ 0x40
 800180e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001810:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001814:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	4618      	mov	r0, r3
 800181a:	f002 f815 	bl	8003848 <HAL_RCCEx_PeriphCLKConfig>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_I2C1_Init+0x54>
  {
    Error_Handler();
 8001824:	f000 f8fb 	bl	8001a1e <Error_Handler>
  }

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001828:	2001      	movs	r0, #1
 800182a:	f7ff fc59 	bl	80010e0 <LL_AHB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PA9   ------> I2C1_SCL
  PA10   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 800182e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001832:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001834:	2302      	movs	r3, #2
 8001836:	643b      	str	r3, [r7, #64]	@ 0x40
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800183c:	2301      	movs	r3, #1
 800183e:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001840:	2300      	movs	r3, #0
 8001842:	64fb      	str	r3, [r7, #76]	@ 0x4c
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001844:	2304      	movs	r3, #4
 8001846:	653b      	str	r3, [r7, #80]	@ 0x50
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800184c:	4619      	mov	r1, r3
 800184e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001852:	f004 fbd0 	bl	8005ff6 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001856:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800185a:	f7ff fc59 	bl	8001110 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 800185e:	4814      	ldr	r0, [pc, #80]	@ (80018b0 <MX_I2C1_Init+0xdc>)
 8001860:	f7ff fcb2 	bl	80011c8 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001864:	4812      	ldr	r0, [pc, #72]	@ (80018b0 <MX_I2C1_Init+0xdc>)
 8001866:	f7ff fca0 	bl	80011aa <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800186a:	4811      	ldr	r0, [pc, #68]	@ (80018b0 <MX_I2C1_Init+0xdc>)
 800186c:	f7ff fc77 	bl	800115e <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001870:	480f      	ldr	r0, [pc, #60]	@ (80018b0 <MX_I2C1_Init+0xdc>)
 8001872:	f7ff fc65 	bl	8001140 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001876:	2300      	movs	r3, #0
 8001878:	657b      	str	r3, [r7, #84]	@ 0x54
  I2C_InitStruct.Timing = 0x10805D88;
 800187a:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <MX_I2C1_Init+0xe0>)
 800187c:	65bb      	str	r3, [r7, #88]	@ 0x58
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	65fb      	str	r3, [r7, #92]	@ 0x5c
  I2C_InitStruct.DigitalFilter = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	663b      	str	r3, [r7, #96]	@ 0x60
  I2C_InitStruct.OwnAddress1 = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	667b      	str	r3, [r7, #100]	@ 0x64
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800188a:	2300      	movs	r3, #0
 800188c:	66bb      	str	r3, [r7, #104]	@ 0x68
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800188e:	2300      	movs	r3, #0
 8001890:	66fb      	str	r3, [r7, #108]	@ 0x6c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001892:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001896:	4619      	mov	r1, r3
 8001898:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <MX_I2C1_Init+0xdc>)
 800189a:	f004 fcb3 	bl	8006204 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	4803      	ldr	r0, [pc, #12]	@ (80018b0 <MX_I2C1_Init+0xdc>)
 80018a4:	f7ff fc6a 	bl	800117c <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	3770      	adds	r7, #112	@ 0x70
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40005400 	.word	0x40005400
 80018b4:	10805d88 	.word	0x10805d88

080018b8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80018bc:	4b24      	ldr	r3, [pc, #144]	@ (8001950 <MX_LPUART1_UART_Init+0x98>)
 80018be:	4a25      	ldr	r2, [pc, #148]	@ (8001954 <MX_LPUART1_UART_Init+0x9c>)
 80018c0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80018c2:	4b23      	ldr	r3, [pc, #140]	@ (8001950 <MX_LPUART1_UART_Init+0x98>)
 80018c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018c8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ca:	4b21      	ldr	r3, [pc, #132]	@ (8001950 <MX_LPUART1_UART_Init+0x98>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80018d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001950 <MX_LPUART1_UART_Init+0x98>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80018d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001950 <MX_LPUART1_UART_Init+0x98>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_RX;
 80018dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001950 <MX_LPUART1_UART_Init+0x98>)
 80018de:	2204      	movs	r2, #4
 80018e0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <MX_LPUART1_UART_Init+0x98>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018e8:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <MX_LPUART1_UART_Init+0x98>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018ee:	4b18      	ldr	r3, [pc, #96]	@ (8001950 <MX_LPUART1_UART_Init+0x98>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80018f4:	4b16      	ldr	r3, [pc, #88]	@ (8001950 <MX_LPUART1_UART_Init+0x98>)
 80018f6:	2210      	movs	r2, #16
 80018f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80018fa:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <MX_LPUART1_UART_Init+0x98>)
 80018fc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001900:	63da      	str	r2, [r3, #60]	@ 0x3c
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001902:	4b13      	ldr	r3, [pc, #76]	@ (8001950 <MX_LPUART1_UART_Init+0x98>)
 8001904:	2200      	movs	r2, #0
 8001906:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001908:	4811      	ldr	r0, [pc, #68]	@ (8001950 <MX_LPUART1_UART_Init+0x98>)
 800190a:	f002 ffe6 	bl	80048da <HAL_UART_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_LPUART1_UART_Init+0x60>
  {
    Error_Handler();
 8001914:	f000 f883 	bl	8001a1e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001918:	2100      	movs	r1, #0
 800191a:	480d      	ldr	r0, [pc, #52]	@ (8001950 <MX_LPUART1_UART_Init+0x98>)
 800191c:	f004 f95e 	bl	8005bdc <HAL_UARTEx_SetTxFifoThreshold>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_LPUART1_UART_Init+0x72>
  {
    Error_Handler();
 8001926:	f000 f87a 	bl	8001a1e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800192a:	2100      	movs	r1, #0
 800192c:	4808      	ldr	r0, [pc, #32]	@ (8001950 <MX_LPUART1_UART_Init+0x98>)
 800192e:	f004 f993 	bl	8005c58 <HAL_UARTEx_SetRxFifoThreshold>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001938:	f000 f871 	bl	8001a1e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800193c:	4804      	ldr	r0, [pc, #16]	@ (8001950 <MX_LPUART1_UART_Init+0x98>)
 800193e:	f004 f915 	bl	8005b6c <HAL_UARTEx_DisableFifoMode>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_LPUART1_UART_Init+0x94>
  {
    Error_Handler();
 8001948:	f000 f869 	bl	8001a1e <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000090 	.word	0x20000090
 8001954:	40008000 	.word	0x40008000

08001958 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800195c:	4b1b      	ldr	r3, [pc, #108]	@ (80019cc <MX_SPI1_Init+0x74>)
 800195e:	4a1c      	ldr	r2, [pc, #112]	@ (80019d0 <MX_SPI1_Init+0x78>)
 8001960:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001962:	4b1a      	ldr	r3, [pc, #104]	@ (80019cc <MX_SPI1_Init+0x74>)
 8001964:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001968:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800196a:	4b18      	ldr	r3, [pc, #96]	@ (80019cc <MX_SPI1_Init+0x74>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001970:	4b16      	ldr	r3, [pc, #88]	@ (80019cc <MX_SPI1_Init+0x74>)
 8001972:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001976:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001978:	4b14      	ldr	r3, [pc, #80]	@ (80019cc <MX_SPI1_Init+0x74>)
 800197a:	2200      	movs	r2, #0
 800197c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800197e:	4b13      	ldr	r3, [pc, #76]	@ (80019cc <MX_SPI1_Init+0x74>)
 8001980:	2200      	movs	r2, #0
 8001982:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001984:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <MX_SPI1_Init+0x74>)
 8001986:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800198a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800198c:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <MX_SPI1_Init+0x74>)
 800198e:	2238      	movs	r2, #56	@ 0x38
 8001990:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001992:	4b0e      	ldr	r3, [pc, #56]	@ (80019cc <MX_SPI1_Init+0x74>)
 8001994:	2200      	movs	r2, #0
 8001996:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001998:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <MX_SPI1_Init+0x74>)
 800199a:	2200      	movs	r2, #0
 800199c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800199e:	4b0b      	ldr	r3, [pc, #44]	@ (80019cc <MX_SPI1_Init+0x74>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80019a4:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <MX_SPI1_Init+0x74>)
 80019a6:	2207      	movs	r2, #7
 80019a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019aa:	4b08      	ldr	r3, [pc, #32]	@ (80019cc <MX_SPI1_Init+0x74>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <MX_SPI1_Init+0x74>)
 80019b2:	2208      	movs	r2, #8
 80019b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019b6:	4805      	ldr	r0, [pc, #20]	@ (80019cc <MX_SPI1_Init+0x74>)
 80019b8:	f002 f860 	bl	8003a7c <HAL_SPI_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80019c2:	f000 f82c 	bl	8001a1e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000124 	.word	0x20000124
 80019d0:	40013000 	.word	0x40013000

080019d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e8:	2001      	movs	r0, #1
 80019ea:	f7ff fb79 	bl	80010e0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2110      	movs	r1, #16
 80019f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019f6:	f000 fd41 	bl	800247c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019fa:	2310      	movs	r3, #16
 80019fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a12:	f000 fbd3 	bl	80021bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a16:	bf00      	nop
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a22:	b672      	cpsid	i
}
 8001a24:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a26:	bf00      	nop
 8001a28:	e7fd      	b.n	8001a26 <Error_Handler+0x8>

08001a2a <LL_AHB2_GRP1_EnableClock>:
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b085      	sub	sp, #20
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr

08001a5a <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b085      	sub	sp, #20
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a66:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001a72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr

08001a8a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b085      	sub	sp, #20
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a96:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001aa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aa6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aae:	68fb      	ldr	r3, [r7, #12]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr

08001aba <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
	...

08001ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b096      	sub	sp, #88	@ 0x58
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	2238      	movs	r2, #56	@ 0x38
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f007 fb29 	bl	8009140 <memset>
  if(huart->Instance==LPUART1)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a1a      	ldr	r2, [pc, #104]	@ (8001b5c <HAL_UART_MspInit+0x94>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d12c      	bne.n	8001b52 <HAL_UART_MspInit+0x8a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001af8:	2320      	movs	r3, #32
 8001afa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	4618      	mov	r0, r3
 8001b06:	f001 fe9f 	bl	8003848 <HAL_RCCEx_PeriphCLKConfig>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b10:	f7ff ff85 	bl	8001a1e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001b14:	2001      	movs	r0, #1
 8001b16:	f7ff ffa0 	bl	8001a5a <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f7ff ff85 	bl	8001a2a <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b20:	230c      	movs	r3, #12
 8001b22:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b24:	2302      	movs	r3, #2
 8001b26:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001b30:	2308      	movs	r3, #8
 8001b32:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b34:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b3e:	f000 fb3d 	bl	80021bc <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	2026      	movs	r0, #38	@ 0x26
 8001b48:	f000 fa47 	bl	8001fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001b4c:	2026      	movs	r0, #38	@ 0x26
 8001b4e:	f000 fa5e 	bl	800200e <HAL_NVIC_EnableIRQ>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001b52:	bf00      	nop
 8001b54:	3758      	adds	r7, #88	@ 0x58
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40008000 	.word	0x40008000

08001b60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 030c 	add.w	r3, r7, #12
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0f      	ldr	r2, [pc, #60]	@ (8001bbc <HAL_SPI_MspInit+0x5c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d118      	bne.n	8001bb4 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b82:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001b86:	f7ff ff80 	bl	8001a8a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f7ff ff4d 	bl	8001a2a <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA11     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_11;
 8001b90:	f44f 630a 	mov.w	r3, #2208	@ 0x8a0
 8001b94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ba2:	2305      	movs	r3, #5
 8001ba4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	f107 030c 	add.w	r3, r7, #12
 8001baa:	4619      	mov	r1, r3
 8001bac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bb0:	f000 fb04 	bl	80021bc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001bb4:	bf00      	nop
 8001bb6:	3720      	adds	r7, #32
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40013000 	.word	0x40013000

08001bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <NMI_Handler+0x4>

08001bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <HardFault_Handler+0x4>

08001bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <MemManage_Handler+0x4>

08001bd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <BusFault_Handler+0x4>

08001be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <UsageFault_Handler+0x4>

08001be8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c10:	f000 f8cc 	bl	8001dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001c1c:	4802      	ldr	r0, [pc, #8]	@ (8001c28 <LPUART1_IRQHandler+0x10>)
 8001c1e:	f002 ff71 	bl	8004b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000090 	.word	0x20000090

08001c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c34:	4a14      	ldr	r2, [pc, #80]	@ (8001c88 <_sbrk+0x5c>)
 8001c36:	4b15      	ldr	r3, [pc, #84]	@ (8001c8c <_sbrk+0x60>)
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c40:	4b13      	ldr	r3, [pc, #76]	@ (8001c90 <_sbrk+0x64>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c48:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <_sbrk+0x64>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	@ (8001c94 <_sbrk+0x68>)
 8001c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4e:	4b10      	ldr	r3, [pc, #64]	@ (8001c90 <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d207      	bcs.n	8001c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c5c:	f007 fa78 	bl	8009150 <__errno>
 8001c60:	4603      	mov	r3, r0
 8001c62:	220c      	movs	r2, #12
 8001c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c6a:	e009      	b.n	8001c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c6c:	4b08      	ldr	r3, [pc, #32]	@ (8001c90 <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c72:	4b07      	ldr	r3, [pc, #28]	@ (8001c90 <_sbrk+0x64>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	4a05      	ldr	r2, [pc, #20]	@ (8001c90 <_sbrk+0x64>)
 8001c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20010000 	.word	0x20010000
 8001c8c:	00000400 	.word	0x00000400
 8001c90:	200002b4 	.word	0x200002b4
 8001c94:	20000448 	.word	0x20000448

08001c98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ca4:	480d      	ldr	r0, [pc, #52]	@ (8001cdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ca6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ca8:	f7ff fff6 	bl	8001c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cac:	480c      	ldr	r0, [pc, #48]	@ (8001ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cae:	490d      	ldr	r1, [pc, #52]	@ (8001ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce8 <LoopForever+0xe>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb4:	e002      	b.n	8001cbc <LoopCopyDataInit>

08001cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cba:	3304      	adds	r3, #4

08001cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc0:	d3f9      	bcc.n	8001cb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cc4:	4c0a      	ldr	r4, [pc, #40]	@ (8001cf0 <LoopForever+0x16>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc8:	e001      	b.n	8001cce <LoopFillZerobss>

08001cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ccc:	3204      	adds	r2, #4

08001cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd0:	d3fb      	bcc.n	8001cca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001cd2:	f007 fa43 	bl	800915c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cd6:	f7ff fad3 	bl	8001280 <main>

08001cda <LoopForever>:

LoopForever:
    b LoopForever
 8001cda:	e7fe      	b.n	8001cda <LoopForever>
  ldr   r0, =_estack
 8001cdc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001ce8:	08009d84 	.word	0x08009d84
  ldr r2, =_sbss
 8001cec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001cf0:	20000448 	.word	0x20000448

08001cf4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cf4:	e7fe      	b.n	8001cf4 <ADC_IRQHandler>
	...

08001cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d02:	2003      	movs	r0, #3
 8001d04:	f000 f95e 	bl	8001fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001d08:	f001 fbc0 	bl	800348c <HAL_RCC_GetHCLKFreq>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	4a09      	ldr	r2, [pc, #36]	@ (8001d34 <HAL_Init+0x3c>)
 8001d10:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d12:	200f      	movs	r0, #15
 8001d14:	f000 f810 	bl	8001d38 <HAL_InitTick>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	71fb      	strb	r3, [r7, #7]
 8001d22:	e001      	b.n	8001d28 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d24:	f7ff fec9 	bl	8001aba <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d28:	79fb      	ldrb	r3, [r7, #7]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000000 	.word	0x20000000

08001d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d44:	4b17      	ldr	r3, [pc, #92]	@ (8001da4 <HAL_InitTick+0x6c>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d024      	beq.n	8001d96 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d4c:	f001 fb9e 	bl	800348c <HAL_RCC_GetHCLKFreq>
 8001d50:	4602      	mov	r2, r0
 8001d52:	4b14      	ldr	r3, [pc, #80]	@ (8001da4 <HAL_InitTick+0x6c>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	4619      	mov	r1, r3
 8001d58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d64:	4618      	mov	r0, r3
 8001d66:	f000 f960 	bl	800202a <HAL_SYSTICK_Config>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10f      	bne.n	8001d90 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b0f      	cmp	r3, #15
 8001d74:	d809      	bhi.n	8001d8a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d76:	2200      	movs	r2, #0
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d7e:	f000 f92c 	bl	8001fda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d82:	4a09      	ldr	r2, [pc, #36]	@ (8001da8 <HAL_InitTick+0x70>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	e007      	b.n	8001d9a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
 8001d8e:	e004      	b.n	8001d9a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
 8001d94:	e001      	b.n	8001d9a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000008 	.word	0x20000008
 8001da8:	20000004 	.word	0x20000004

08001dac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <HAL_IncTick+0x1c>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <HAL_IncTick+0x20>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	4a03      	ldr	r2, [pc, #12]	@ (8001dcc <HAL_IncTick+0x20>)
 8001dbe:	6013      	str	r3, [r2, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	20000008 	.word	0x20000008
 8001dcc:	200002b8 	.word	0x200002b8

08001dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd4:	4b02      	ldr	r3, [pc, #8]	@ (8001de0 <HAL_GetTick+0x10>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	200002b8 	.word	0x200002b8

08001de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dec:	f7ff fff0 	bl	8001dd0 <HAL_GetTick>
 8001df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001dfc:	d005      	beq.n	8001e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001e28 <HAL_Delay+0x44>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4413      	add	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e0a:	bf00      	nop
 8001e0c:	f7ff ffe0 	bl	8001dd0 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d8f7      	bhi.n	8001e0c <HAL_Delay+0x28>
  {
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000008 	.word	0x20000008

08001e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e70 <__NVIC_SetPriorityGrouping+0x44>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5e:	4a04      	ldr	r2, [pc, #16]	@ (8001e70 <__NVIC_SetPriorityGrouping+0x44>)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	60d3      	str	r3, [r2, #12]
}
 8001e64:	bf00      	nop
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e78:	4b04      	ldr	r3, [pc, #16]	@ (8001e8c <__NVIC_GetPriorityGrouping+0x18>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	0a1b      	lsrs	r3, r3, #8
 8001e7e:	f003 0307 	and.w	r3, r3, #7
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	db0b      	blt.n	8001eba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	f003 021f 	and.w	r2, r3, #31
 8001ea8:	4906      	ldr	r1, [pc, #24]	@ (8001ec4 <__NVIC_EnableIRQ+0x34>)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	095b      	lsrs	r3, r3, #5
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	e000e100 	.word	0xe000e100

08001ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	db0a      	blt.n	8001ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	490c      	ldr	r1, [pc, #48]	@ (8001f14 <__NVIC_SetPriority+0x4c>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	0112      	lsls	r2, r2, #4
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	440b      	add	r3, r1
 8001eec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef0:	e00a      	b.n	8001f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4908      	ldr	r1, [pc, #32]	@ (8001f18 <__NVIC_SetPriority+0x50>)
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	3b04      	subs	r3, #4
 8001f00:	0112      	lsls	r2, r2, #4
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	440b      	add	r3, r1
 8001f06:	761a      	strb	r2, [r3, #24]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000e100 	.word	0xe000e100
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b089      	sub	sp, #36	@ 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f1c3 0307 	rsb	r3, r3, #7
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	bf28      	it	cs
 8001f3a:	2304      	movcs	r3, #4
 8001f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3304      	adds	r3, #4
 8001f42:	2b06      	cmp	r3, #6
 8001f44:	d902      	bls.n	8001f4c <NVIC_EncodePriority+0x30>
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3b03      	subs	r3, #3
 8001f4a:	e000      	b.n	8001f4e <NVIC_EncodePriority+0x32>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	401a      	ands	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6e:	43d9      	mvns	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	4313      	orrs	r3, r2
         );
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3724      	adds	r7, #36	@ 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f90:	d301      	bcc.n	8001f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00f      	b.n	8001fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f96:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc0 <SysTick_Config+0x40>)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9e:	210f      	movs	r1, #15
 8001fa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fa4:	f7ff ff90 	bl	8001ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa8:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <SysTick_Config+0x40>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fae:	4b04      	ldr	r3, [pc, #16]	@ (8001fc0 <SysTick_Config+0x40>)
 8001fb0:	2207      	movs	r2, #7
 8001fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	e000e010 	.word	0xe000e010

08001fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff ff2d 	bl	8001e2c <__NVIC_SetPriorityGrouping>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b086      	sub	sp, #24
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe8:	f7ff ff44 	bl	8001e74 <__NVIC_GetPriorityGrouping>
 8001fec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	6978      	ldr	r0, [r7, #20]
 8001ff4:	f7ff ff92 	bl	8001f1c <NVIC_EncodePriority>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff61 	bl	8001ec8 <__NVIC_SetPriority>
}
 8002006:	bf00      	nop
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff37 	bl	8001e90 <__NVIC_EnableIRQ>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ffa4 	bl	8001f80 <SysTick_Config>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e04f      	b.n	80020f4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d008      	beq.n	8002072 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2204      	movs	r2, #4
 8002064:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e040      	b.n	80020f4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 020e 	bic.w	r2, r2, #14
 8002080:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800208c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002090:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0201 	bic.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a6:	f003 021c 	and.w	r2, r3, #28
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	2101      	movs	r1, #1
 80020b0:	fa01 f202 	lsl.w	r2, r1, r2
 80020b4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80020be:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00c      	beq.n	80020e2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80020e0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr

080020fe <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d005      	beq.n	8002122 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2204      	movs	r2, #4
 800211a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
 8002120:	e047      	b.n	80021b2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 020e 	bic.w	r2, r2, #14
 8002130:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0201 	bic.w	r2, r2, #1
 8002140:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800214c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002150:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002156:	f003 021c 	and.w	r2, r3, #28
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	2101      	movs	r1, #1
 8002160:	fa01 f202 	lsl.w	r2, r1, r2
 8002164:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800216e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00c      	beq.n	8002192 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002182:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002186:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002190:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	4798      	blx	r3
    }
  }
  return status;
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ca:	e140      	b.n	800244e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	2101      	movs	r1, #1
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	fa01 f303 	lsl.w	r3, r1, r3
 80021d8:	4013      	ands	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8132 	beq.w	8002448 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d005      	beq.n	80021fc <HAL_GPIO_Init+0x40>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d130      	bne.n	800225e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2203      	movs	r2, #3
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4013      	ands	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002232:	2201      	movs	r2, #1
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4013      	ands	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	091b      	lsrs	r3, r3, #4
 8002248:	f003 0201 	and.w	r2, r3, #1
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	2b03      	cmp	r3, #3
 8002268:	d017      	beq.n	800229a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	2203      	movs	r2, #3
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4013      	ands	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d123      	bne.n	80022ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	08da      	lsrs	r2, r3, #3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3208      	adds	r2, #8
 80022ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	220f      	movs	r2, #15
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4013      	ands	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	691a      	ldr	r2, [r3, #16]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	08da      	lsrs	r2, r3, #3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3208      	adds	r2, #8
 80022e8:	6939      	ldr	r1, [r7, #16]
 80022ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	2203      	movs	r2, #3
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 0203 	and.w	r2, r3, #3
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 808c 	beq.w	8002448 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002330:	4a4e      	ldr	r2, [pc, #312]	@ (800246c <HAL_GPIO_Init+0x2b0>)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	089b      	lsrs	r3, r3, #2
 8002336:	3302      	adds	r3, #2
 8002338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	2207      	movs	r2, #7
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800235a:	d00d      	beq.n	8002378 <HAL_GPIO_Init+0x1bc>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a44      	ldr	r2, [pc, #272]	@ (8002470 <HAL_GPIO_Init+0x2b4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d007      	beq.n	8002374 <HAL_GPIO_Init+0x1b8>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a43      	ldr	r2, [pc, #268]	@ (8002474 <HAL_GPIO_Init+0x2b8>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d101      	bne.n	8002370 <HAL_GPIO_Init+0x1b4>
 800236c:	2302      	movs	r3, #2
 800236e:	e004      	b.n	800237a <HAL_GPIO_Init+0x1be>
 8002370:	2307      	movs	r3, #7
 8002372:	e002      	b.n	800237a <HAL_GPIO_Init+0x1be>
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <HAL_GPIO_Init+0x1be>
 8002378:	2300      	movs	r3, #0
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	f002 0203 	and.w	r2, r2, #3
 8002380:	0092      	lsls	r2, r2, #2
 8002382:	4093      	lsls	r3, r2
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800238a:	4938      	ldr	r1, [pc, #224]	@ (800246c <HAL_GPIO_Init+0x2b0>)
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	3302      	adds	r3, #2
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002398:	4b37      	ldr	r3, [pc, #220]	@ (8002478 <HAL_GPIO_Init+0x2bc>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002478 <HAL_GPIO_Init+0x2bc>)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002478 <HAL_GPIO_Init+0x2bc>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	43db      	mvns	r3, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023e6:	4a24      	ldr	r2, [pc, #144]	@ (8002478 <HAL_GPIO_Init+0x2bc>)
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80023ec:	4b22      	ldr	r3, [pc, #136]	@ (8002478 <HAL_GPIO_Init+0x2bc>)
 80023ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023f2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002412:	4a19      	ldr	r2, [pc, #100]	@ (8002478 <HAL_GPIO_Init+0x2bc>)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800241a:	4b17      	ldr	r3, [pc, #92]	@ (8002478 <HAL_GPIO_Init+0x2bc>)
 800241c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002420:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	43db      	mvns	r3, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002440:	4a0d      	ldr	r2, [pc, #52]	@ (8002478 <HAL_GPIO_Init+0x2bc>)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	3301      	adds	r3, #1
 800244c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	f47f aeb7 	bne.w	80021cc <HAL_GPIO_Init+0x10>
  }
}
 800245e:	bf00      	nop
 8002460:	bf00      	nop
 8002462:	371c      	adds	r7, #28
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40010000 	.word	0x40010000
 8002470:	48000400 	.word	0x48000400
 8002474:	48000800 	.word	0x48000800
 8002478:	58000800 	.word	0x58000800

0800247c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	807b      	strh	r3, [r7, #2]
 8002488:	4613      	mov	r3, r2
 800248a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800248c:	787b      	ldrb	r3, [r7, #1]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002492:	887a      	ldrh	r2, [r7, #2]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002498:	e002      	b.n	80024a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800249a:	887a      	ldrh	r2, [r7, #2]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr
	...

080024ac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024b0:	4b04      	ldr	r3, [pc, #16]	@ (80024c4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a03      	ldr	r2, [pc, #12]	@ (80024c4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80024b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ba:	6013      	str	r3, [r2, #0]
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	58000400 	.word	0x58000400

080024c8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80024cc:	4b03      	ldr	r3, [pc, #12]	@ (80024dc <HAL_PWREx_GetVoltageRange+0x14>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	58000400 	.word	0x58000400

080024e0 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80024e4:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024f0:	d101      	bne.n	80024f6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr
 8002500:	58000400 	.word	0x58000400

08002504 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002508:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002512:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002516:	6013      	str	r3, [r2, #0]
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002524:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800252e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002532:	6013      	str	r3, [r2, #0]
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002540:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800254a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800254e:	d101      	bne.n	8002554 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800256c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002570:	6013      	str	r3, [r2, #0]
}
 8002572:	bf00      	nop
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr

0800257a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800257e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002588:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800258c:	6013      	str	r3, [r2, #0]
}
 800258e:	bf00      	nop
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr

08002596 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800259a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80025a8:	d101      	bne.n	80025ae <LL_RCC_HSE_IsReady+0x18>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <LL_RCC_HSE_IsReady+0x1a>
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80025bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ca:	6013      	str	r3, [r2, #0]
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80025d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025e6:	6013      	str	r3, [r2, #0]
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80025f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002602:	d101      	bne.n	8002608 <LL_RCC_HSI_IsReady+0x18>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <LL_RCC_HSI_IsReady+0x1a>
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800261a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	061b      	lsls	r3, r3, #24
 8002628:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr

0800263a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800263a:	b480      	push	{r7}
 800263c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800263e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b02      	cmp	r3, #2
 800264c:	d101      	bne.n	8002652 <LL_RCC_LSE_IsReady+0x18>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <LL_RCC_LSE_IsReady+0x1a>
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr

0800265c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002664:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002668:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002680:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002684:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002688:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800268c:	f023 0301 	bic.w	r3, r3, #1
 8002690:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80026a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d101      	bne.n	80026b4 <LL_RCC_LSI_IsReady+0x18>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <LL_RCC_LSI_IsReady+0x1a>
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr

080026be <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80026c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6013      	str	r3, [r2, #0]
}
 80026d2:	bf00      	nop
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80026de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	6013      	str	r3, [r2, #0]
}
 80026ee:	bf00      	nop
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr

080026f6 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80026f6:	b480      	push	{r7}
 80026f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80026fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b02      	cmp	r3, #2
 8002706:	d101      	bne.n	800270c <LL_RCC_MSI_IsReady+0x16>
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <LL_RCC_MSI_IsReady+0x18>
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr

08002716 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800271a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b08      	cmp	r3, #8
 8002726:	d101      	bne.n	800272c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002728:	2301      	movs	r3, #1
 800272a:	e000      	b.n	800272e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr

08002736 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800273a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002754:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002758:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800276c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	021b      	lsls	r3, r3, #8
 800277a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800277e:	4313      	orrs	r3, r2
 8002780:	604b      	str	r3, [r1, #4]
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002794:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f023 0203 	bic.w	r2, r3, #3
 800279e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	608b      	str	r3, [r1, #8]
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80027b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 030c 	and.w	r3, r3, #12
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80027d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	608b      	str	r3, [r1, #8]
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80027f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80027fe:	f023 020f 	bic.w	r2, r3, #15
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002822:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800282c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4313      	orrs	r3, r2
 8002834:	608b      	str	r3, [r1, #8]
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002848:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002852:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4313      	orrs	r3, r2
 800285a:	608b      	str	r3, [r1, #8]
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800286a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002874:	4618      	mov	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002880:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002884:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800288e:	4618      	mov	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002896:	b480      	push	{r7}
 8002898:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800289a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80028b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr

080028c2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80028c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028d4:	6013      	str	r3, [r2, #0]
}
 80028d6:	bf00      	nop
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80028e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028f0:	6013      	str	r3, [r2, #0]
}
 80028f2:	bf00      	nop
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr

080028fa <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80028fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002908:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800290c:	d101      	bne.n	8002912 <LL_RCC_PLL_IsReady+0x18>
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <LL_RCC_PLL_IsReady+0x1a>
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002938:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002942:	4618      	mov	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800294e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f003 0303 	and.w	r3, r3, #3
}
 800296e:	4618      	mov	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800297a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002988:	d101      	bne.n	800298e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800299c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80029a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029ac:	d101      	bne.n	80029b2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr

080029bc <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80029c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029ce:	d101      	bne.n	80029d4 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80029e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029f0:	d101      	bne.n	80029f6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e36f      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a12:	f7ff fece 	bl	80027b2 <LL_RCC_GetSysClkSource>
 8002a16:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a18:	f7ff ffa2 	bl	8002960 <LL_RCC_PLL_GetMainSource>
 8002a1c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 80c4 	beq.w	8002bb4 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <HAL_RCC_OscConfig+0x3e>
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	2b0c      	cmp	r3, #12
 8002a36:	d176      	bne.n	8002b26 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d173      	bne.n	8002b26 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e353      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_RCC_OscConfig+0x68>
 8002a5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a66:	e006      	b.n	8002a76 <HAL_RCC_OscConfig+0x76>
 8002a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a70:	091b      	lsrs	r3, r3, #4
 8002a72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d222      	bcs.n	8002ac0 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fd3c 	bl	80034fc <RCC_SetFlashLatencyFromMSIRange>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e331      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a98:	f043 0308 	orr.w	r3, r3, #8
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fe53 	bl	8002764 <LL_RCC_MSI_SetCalibTrimming>
 8002abe:	e021      	b.n	8002b04 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ac0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002aca:	f043 0308 	orr.w	r3, r3, #8
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ade:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fe3a 	bl	8002764 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 fd01 	bl	80034fc <RCC_SetFlashLatencyFromMSIRange>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e2f6      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b04:	f000 fcc2 	bl	800348c <HAL_RCC_GetHCLKFreq>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	4aa7      	ldr	r2, [pc, #668]	@ (8002da8 <HAL_RCC_OscConfig+0x3a8>)
 8002b0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002b0e:	4ba7      	ldr	r3, [pc, #668]	@ (8002dac <HAL_RCC_OscConfig+0x3ac>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff f910 	bl	8001d38 <HAL_InitTick>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002b1c:	7cfb      	ldrb	r3, [r7, #19]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d047      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002b22:	7cfb      	ldrb	r3, [r7, #19]
 8002b24:	e2e5      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d02c      	beq.n	8002b88 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b2e:	f7ff fdc6 	bl	80026be <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b32:	f7ff f94d 	bl	8001dd0 <HAL_GetTick>
 8002b36:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b3a:	f7ff f949 	bl	8001dd0 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e2d2      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002b4c:	f7ff fdd3 	bl	80026f6 <LL_RCC_MSI_IsReady>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f1      	beq.n	8002b3a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b60:	f043 0308 	orr.w	r3, r3, #8
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fdef 	bl	8002764 <LL_RCC_MSI_SetCalibTrimming>
 8002b86:	e015      	b.n	8002bb4 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b88:	f7ff fda7 	bl	80026da <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b8c:	f7ff f920 	bl	8001dd0 <HAL_GetTick>
 8002b90:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b94:	f7ff f91c 	bl	8001dd0 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e2a5      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002ba6:	f7ff fda6 	bl	80026f6 <LL_RCC_MSI_IsReady>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1f1      	bne.n	8002b94 <HAL_RCC_OscConfig+0x194>
 8002bb0:	e000      	b.n	8002bb4 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002bb2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d058      	beq.n	8002c72 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d005      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x1d2>
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	2b0c      	cmp	r3, #12
 8002bca:	d108      	bne.n	8002bde <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d105      	bne.n	8002bde <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d14b      	bne.n	8002c72 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e289      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002bde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bfc:	d102      	bne.n	8002c04 <HAL_RCC_OscConfig+0x204>
 8002bfe:	f7ff fcae 	bl	800255e <LL_RCC_HSE_Enable>
 8002c02:	e00d      	b.n	8002c20 <HAL_RCC_OscConfig+0x220>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002c0c:	d104      	bne.n	8002c18 <HAL_RCC_OscConfig+0x218>
 8002c0e:	f7ff fc79 	bl	8002504 <LL_RCC_HSE_EnableTcxo>
 8002c12:	f7ff fca4 	bl	800255e <LL_RCC_HSE_Enable>
 8002c16:	e003      	b.n	8002c20 <HAL_RCC_OscConfig+0x220>
 8002c18:	f7ff fcaf 	bl	800257a <LL_RCC_HSE_Disable>
 8002c1c:	f7ff fc80 	bl	8002520 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d012      	beq.n	8002c4e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c28:	f7ff f8d2 	bl	8001dd0 <HAL_GetTick>
 8002c2c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c30:	f7ff f8ce 	bl	8001dd0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b64      	cmp	r3, #100	@ 0x64
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e257      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002c42:	f7ff fca8 	bl	8002596 <LL_RCC_HSE_IsReady>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f1      	beq.n	8002c30 <HAL_RCC_OscConfig+0x230>
 8002c4c:	e011      	b.n	8002c72 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4e:	f7ff f8bf 	bl	8001dd0 <HAL_GetTick>
 8002c52:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c56:	f7ff f8bb 	bl	8001dd0 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b64      	cmp	r3, #100	@ 0x64
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e244      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002c68:	f7ff fc95 	bl	8002596 <LL_RCC_HSE_IsReady>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f1      	bne.n	8002c56 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d046      	beq.n	8002d0c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_OscConfig+0x290>
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	2b0c      	cmp	r3, #12
 8002c88:	d10e      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d10b      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e22a      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fcb6 	bl	8002612 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002ca6:	e031      	b.n	8002d0c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d019      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb0:	f7ff fc82 	bl	80025b8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7ff f88c 	bl	8001dd0 <HAL_GetTick>
 8002cb8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cbc:	f7ff f888 	bl	8001dd0 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e211      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002cce:	f7ff fc8f 	bl	80025f0 <LL_RCC_HSI_IsReady>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f1      	beq.n	8002cbc <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fc98 	bl	8002612 <LL_RCC_HSI_SetCalibTrimming>
 8002ce2:	e013      	b.n	8002d0c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce4:	f7ff fc76 	bl	80025d4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7ff f872 	bl	8001dd0 <HAL_GetTick>
 8002cec:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf0:	f7ff f86e 	bl	8001dd0 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e1f7      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002d02:	f7ff fc75 	bl	80025f0 <LL_RCC_HSI_IsReady>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f1      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d06e      	beq.n	8002df6 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d056      	beq.n	8002dce <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002d20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d28:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d031      	beq.n	8002d9c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d006      	beq.n	8002d50 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e1d0      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d013      	beq.n	8002d82 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002d5a:	f7ff fc8f 	bl	800267c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d5e:	f7ff f837 	bl	8001dd0 <HAL_GetTick>
 8002d62:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d66:	f7ff f833 	bl	8001dd0 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b11      	cmp	r3, #17
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e1bc      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002d78:	f7ff fc90 	bl	800269c <LL_RCC_LSI_IsReady>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f1      	bne.n	8002d66 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002d82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d8a:	f023 0210 	bic.w	r2, r3, #16
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9c:	f7ff fc5e 	bl	800265c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da0:	f7ff f816 	bl	8001dd0 <HAL_GetTick>
 8002da4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002da6:	e00c      	b.n	8002dc2 <HAL_RCC_OscConfig+0x3c2>
 8002da8:	20000000 	.word	0x20000000
 8002dac:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db0:	f7ff f80e 	bl	8001dd0 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b11      	cmp	r3, #17
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e197      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002dc2:	f7ff fc6b 	bl	800269c <LL_RCC_LSI_IsReady>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f1      	beq.n	8002db0 <HAL_RCC_OscConfig+0x3b0>
 8002dcc:	e013      	b.n	8002df6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dce:	f7ff fc55 	bl	800267c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd2:	f7fe fffd 	bl	8001dd0 <HAL_GetTick>
 8002dd6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dda:	f7fe fff9 	bl	8001dd0 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b11      	cmp	r3, #17
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e182      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002dec:	f7ff fc56 	bl	800269c <LL_RCC_LSI_IsReady>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f1      	bne.n	8002dda <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 80d8 	beq.w	8002fb4 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002e04:	f7ff fb6c 	bl	80024e0 <LL_PWR_IsEnabledBkUpAccess>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d113      	bne.n	8002e36 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002e0e:	f7ff fb4d 	bl	80024ac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e12:	f7fe ffdd 	bl	8001dd0 <HAL_GetTick>
 8002e16:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1a:	f7fe ffd9 	bl	8001dd0 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e162      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002e2c:	f7ff fb58 	bl	80024e0 <LL_PWR_IsEnabledBkUpAccess>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f1      	beq.n	8002e1a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d07b      	beq.n	8002f36 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	2b85      	cmp	r3, #133	@ 0x85
 8002e44:	d003      	beq.n	8002e4e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	2b05      	cmp	r3, #5
 8002e4c:	d109      	bne.n	8002e62 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e5a:	f043 0304 	orr.w	r3, r3, #4
 8002e5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e62:	f7fe ffb5 	bl	8001dd0 <HAL_GetTick>
 8002e66:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002e7c:	e00a      	b.n	8002e94 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7e:	f7fe ffa7 	bl	8001dd0 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e12e      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002e94:	f7ff fbd1 	bl	800263a <LL_RCC_LSE_IsReady>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0ef      	beq.n	8002e7e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2b81      	cmp	r3, #129	@ 0x81
 8002ea4:	d003      	beq.n	8002eae <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b85      	cmp	r3, #133	@ 0x85
 8002eac:	d121      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eae:	f7fe ff8f 	bl	8001dd0 <HAL_GetTick>
 8002eb2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002eb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ebc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ec8:	e00a      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eca:	f7fe ff81 	bl	8001dd0 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e108      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ee0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ee8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0ec      	beq.n	8002eca <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002ef0:	e060      	b.n	8002fb4 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef2:	f7fe ff6d 	bl	8001dd0 <HAL_GetTick>
 8002ef6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ef8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f0c:	e00a      	b.n	8002f24 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0e:	f7fe ff5f 	bl	8001dd0 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e0e6      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1ec      	bne.n	8002f0e <HAL_RCC_OscConfig+0x50e>
 8002f34:	e03e      	b.n	8002fb4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f36:	f7fe ff4b 	bl	8001dd0 <HAL_GetTick>
 8002f3a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f52:	f7fe ff3d 	bl	8001dd0 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e0c4      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1ec      	bne.n	8002f52 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f78:	f7fe ff2a 	bl	8001dd0 <HAL_GetTick>
 8002f7c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f8a:	f023 0301 	bic.w	r3, r3, #1
 8002f8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f94:	f7fe ff1c 	bl	8001dd0 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e0a3      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002faa:	f7ff fb46 	bl	800263a <LL_RCC_LSE_IsReady>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1ef      	bne.n	8002f94 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 8099 	beq.w	80030f0 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	2b0c      	cmp	r3, #12
 8002fc2:	d06c      	beq.n	800309e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d14b      	bne.n	8003064 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fcc:	f7ff fc87 	bl	80028de <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fe fefe 	bl	8001dd0 <HAL_GetTick>
 8002fd4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd8:	f7fe fefa 	bl	8001dd0 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b0a      	cmp	r3, #10
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e083      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002fea:	f7ff fc86 	bl	80028fa <LL_RCC_PLL_IsReady>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f1      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ff4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	4b40      	ldr	r3, [pc, #256]	@ (80030fc <HAL_RCC_OscConfig+0x6fc>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003006:	4311      	orrs	r1, r2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800300c:	0212      	lsls	r2, r2, #8
 800300e:	4311      	orrs	r1, r2
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003014:	4311      	orrs	r1, r2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800301a:	4311      	orrs	r1, r2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003020:	430a      	orrs	r2, r1
 8003022:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003026:	4313      	orrs	r3, r2
 8003028:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800302a:	f7ff fc4a 	bl	80028c2 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800302e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800303c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303e:	f7fe fec7 	bl	8001dd0 <HAL_GetTick>
 8003042:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003046:	f7fe fec3 	bl	8001dd0 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b0a      	cmp	r3, #10
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e04c      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003058:	f7ff fc4f 	bl	80028fa <LL_RCC_PLL_IsReady>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f1      	beq.n	8003046 <HAL_RCC_OscConfig+0x646>
 8003062:	e045      	b.n	80030f0 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003064:	f7ff fc3b 	bl	80028de <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003068:	f7fe feb2 	bl	8001dd0 <HAL_GetTick>
 800306c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003070:	f7fe feae 	bl	8001dd0 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b0a      	cmp	r3, #10
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e037      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003082:	f7ff fc3a 	bl	80028fa <LL_RCC_PLL_IsReady>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1f1      	bne.n	8003070 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800308c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003096:	4b1a      	ldr	r3, [pc, #104]	@ (8003100 <HAL_RCC_OscConfig+0x700>)
 8003098:	4013      	ands	r3, r2
 800309a:	60cb      	str	r3, [r1, #12]
 800309c:	e028      	b.n	80030f0 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e023      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	f003 0203 	and.w	r2, r3, #3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030bc:	429a      	cmp	r2, r3
 80030be:	d115      	bne.n	80030ec <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d10e      	bne.n	80030ec <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	429a      	cmp	r2, r3
 80030dc:	d106      	bne.n	80030ec <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3720      	adds	r7, #32
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	11c1808c 	.word	0x11c1808c
 8003100:	eefefffc 	.word	0xeefefffc

08003104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e10f      	b.n	8003338 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003118:	4b89      	ldr	r3, [pc, #548]	@ (8003340 <HAL_RCC_ClockConfig+0x23c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d91b      	bls.n	800315e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b86      	ldr	r3, [pc, #536]	@ (8003340 <HAL_RCC_ClockConfig+0x23c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 0207 	bic.w	r2, r3, #7
 800312e:	4984      	ldr	r1, [pc, #528]	@ (8003340 <HAL_RCC_ClockConfig+0x23c>)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003136:	f7fe fe4b 	bl	8001dd0 <HAL_GetTick>
 800313a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313c:	e008      	b.n	8003150 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800313e:	f7fe fe47 	bl	8001dd0 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e0f3      	b.n	8003338 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003150:	4b7b      	ldr	r3, [pc, #492]	@ (8003340 <HAL_RCC_ClockConfig+0x23c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d1ef      	bne.n	800313e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d016      	beq.n	8003198 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fb2a 	bl	80027c8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003174:	f7fe fe2c 	bl	8001dd0 <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800317c:	f7fe fe28 	bl	8001dd0 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e0d4      	b.n	8003338 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800318e:	f7ff fbf2 	bl	8002976 <LL_RCC_IsActiveFlag_HPRE>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0f1      	beq.n	800317c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d016      	beq.n	80031d2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fb20 	bl	80027ee <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031ae:	f7fe fe0f 	bl	8001dd0 <HAL_GetTick>
 80031b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031b6:	f7fe fe0b 	bl	8001dd0 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e0b7      	b.n	8003338 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80031c8:	f7ff fbe6 	bl	8002998 <LL_RCC_IsActiveFlag_SHDHPRE>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f1      	beq.n	80031b6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d016      	beq.n	800320c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff fb19 	bl	800281a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031e8:	f7fe fdf2 	bl	8001dd0 <HAL_GetTick>
 80031ec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031f0:	f7fe fdee 	bl	8001dd0 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e09a      	b.n	8003338 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003202:	f7ff fbdb 	bl	80029bc <LL_RCC_IsActiveFlag_PPRE1>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f1      	beq.n	80031f0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d017      	beq.n	8003248 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fb0e 	bl	8002840 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003224:	f7fe fdd4 	bl	8001dd0 <HAL_GetTick>
 8003228:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800322a:	e008      	b.n	800323e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800322c:	f7fe fdd0 	bl	8001dd0 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e07c      	b.n	8003338 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800323e:	f7ff fbce 	bl	80029de <LL_RCC_IsActiveFlag_PPRE2>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0f1      	beq.n	800322c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	d043      	beq.n	80032dc <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b02      	cmp	r3, #2
 800325a:	d106      	bne.n	800326a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800325c:	f7ff f99b 	bl	8002596 <LL_RCC_HSE_IsReady>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d11e      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e066      	b.n	8003338 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b03      	cmp	r3, #3
 8003270:	d106      	bne.n	8003280 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003272:	f7ff fb42 	bl	80028fa <LL_RCC_PLL_IsReady>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d113      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e05b      	b.n	8003338 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d106      	bne.n	8003296 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003288:	f7ff fa35 	bl	80026f6 <LL_RCC_MSI_IsReady>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d108      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e050      	b.n	8003338 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003296:	f7ff f9ab 	bl	80025f0 <LL_RCC_HSI_IsReady>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e049      	b.n	8003338 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fa6f 	bl	800278c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032ae:	f7fe fd8f 	bl	8001dd0 <HAL_GetTick>
 80032b2:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b4:	e00a      	b.n	80032cc <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b6:	f7fe fd8b 	bl	8001dd0 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e035      	b.n	8003338 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032cc:	f7ff fa71 	bl	80027b2 <LL_RCC_GetSysClkSource>
 80032d0:	4602      	mov	r2, r0
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	429a      	cmp	r2, r3
 80032da:	d1ec      	bne.n	80032b6 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032dc:	4b18      	ldr	r3, [pc, #96]	@ (8003340 <HAL_RCC_ClockConfig+0x23c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d21b      	bcs.n	8003322 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4b15      	ldr	r3, [pc, #84]	@ (8003340 <HAL_RCC_ClockConfig+0x23c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f023 0207 	bic.w	r2, r3, #7
 80032f2:	4913      	ldr	r1, [pc, #76]	@ (8003340 <HAL_RCC_ClockConfig+0x23c>)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032fa:	f7fe fd69 	bl	8001dd0 <HAL_GetTick>
 80032fe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003300:	e008      	b.n	8003314 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003302:	f7fe fd65 	bl	8001dd0 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e011      	b.n	8003338 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003314:	4b0a      	ldr	r3, [pc, #40]	@ (8003340 <HAL_RCC_ClockConfig+0x23c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d1ef      	bne.n	8003302 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003322:	f000 f8b3 	bl	800348c <HAL_RCC_GetHCLKFreq>
 8003326:	4603      	mov	r3, r0
 8003328:	4a06      	ldr	r2, [pc, #24]	@ (8003344 <HAL_RCC_ClockConfig+0x240>)
 800332a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <HAL_RCC_ClockConfig+0x244>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7fe fd01 	bl	8001d38 <HAL_InitTick>
 8003336:	4603      	mov	r3, r0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	58004000 	.word	0x58004000
 8003344:	20000000 	.word	0x20000000
 8003348:	20000004 	.word	0x20000004

0800334c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800334c:	b590      	push	{r4, r7, lr}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800335a:	f7ff fa2a 	bl	80027b2 <LL_RCC_GetSysClkSource>
 800335e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003360:	f7ff fafe 	bl	8002960 <LL_RCC_PLL_GetMainSource>
 8003364:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0x2c>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b0c      	cmp	r3, #12
 8003370:	d139      	bne.n	80033e6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d136      	bne.n	80033e6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003378:	f7ff f9cd 	bl	8002716 <LL_RCC_MSI_IsEnabledRangeSelect>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d115      	bne.n	80033ae <HAL_RCC_GetSysClockFreq+0x62>
 8003382:	f7ff f9c8 	bl	8002716 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003386:	4603      	mov	r3, r0
 8003388:	2b01      	cmp	r3, #1
 800338a:	d106      	bne.n	800339a <HAL_RCC_GetSysClockFreq+0x4e>
 800338c:	f7ff f9d3 	bl	8002736 <LL_RCC_MSI_GetRange>
 8003390:	4603      	mov	r3, r0
 8003392:	0a1b      	lsrs	r3, r3, #8
 8003394:	f003 030f 	and.w	r3, r3, #15
 8003398:	e005      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0x5a>
 800339a:	f7ff f9d7 	bl	800274c <LL_RCC_MSI_GetRangeAfterStandby>
 800339e:	4603      	mov	r3, r0
 80033a0:	0a1b      	lsrs	r3, r3, #8
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	4a36      	ldr	r2, [pc, #216]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x134>)
 80033a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ac:	e014      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x8c>
 80033ae:	f7ff f9b2 	bl	8002716 <LL_RCC_MSI_IsEnabledRangeSelect>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d106      	bne.n	80033c6 <HAL_RCC_GetSysClockFreq+0x7a>
 80033b8:	f7ff f9bd 	bl	8002736 <LL_RCC_MSI_GetRange>
 80033bc:	4603      	mov	r3, r0
 80033be:	091b      	lsrs	r3, r3, #4
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	e005      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x86>
 80033c6:	f7ff f9c1 	bl	800274c <LL_RCC_MSI_GetRangeAfterStandby>
 80033ca:	4603      	mov	r3, r0
 80033cc:	091b      	lsrs	r3, r3, #4
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	4a2b      	ldr	r2, [pc, #172]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x134>)
 80033d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d115      	bne.n	800340c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80033e4:	e012      	b.n	800340c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d102      	bne.n	80033f2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033ec:	4b25      	ldr	r3, [pc, #148]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x138>)
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	e00c      	b.n	800340c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d109      	bne.n	800340c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80033f8:	f7ff f8a0 	bl	800253c <LL_RCC_HSE_IsEnabledDiv2>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d102      	bne.n	8003408 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003402:	4b20      	ldr	r3, [pc, #128]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x138>)
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	e001      	b.n	800340c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003408:	4b1f      	ldr	r3, [pc, #124]	@ (8003488 <HAL_RCC_GetSysClockFreq+0x13c>)
 800340a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800340c:	f7ff f9d1 	bl	80027b2 <LL_RCC_GetSysClkSource>
 8003410:	4603      	mov	r3, r0
 8003412:	2b0c      	cmp	r3, #12
 8003414:	d12f      	bne.n	8003476 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003416:	f7ff faa3 	bl	8002960 <LL_RCC_PLL_GetMainSource>
 800341a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d003      	beq.n	800342a <HAL_RCC_GetSysClockFreq+0xde>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d003      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0xe4>
 8003428:	e00d      	b.n	8003446 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800342a:	4b16      	ldr	r3, [pc, #88]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x138>)
 800342c:	60fb      	str	r3, [r7, #12]
        break;
 800342e:	e00d      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003430:	f7ff f884 	bl	800253c <LL_RCC_HSE_IsEnabledDiv2>
 8003434:	4603      	mov	r3, r0
 8003436:	2b01      	cmp	r3, #1
 8003438:	d102      	bne.n	8003440 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800343a:	4b12      	ldr	r3, [pc, #72]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x138>)
 800343c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800343e:	e005      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003440:	4b11      	ldr	r3, [pc, #68]	@ (8003488 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003442:	60fb      	str	r3, [r7, #12]
        break;
 8003444:	e002      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	60fb      	str	r3, [r7, #12]
        break;
 800344a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800344c:	f7ff fa66 	bl	800291c <LL_RCC_PLL_GetN>
 8003450:	4602      	mov	r2, r0
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	fb03 f402 	mul.w	r4, r3, r2
 8003458:	f7ff fa77 	bl	800294a <LL_RCC_PLL_GetDivider>
 800345c:	4603      	mov	r3, r0
 800345e:	091b      	lsrs	r3, r3, #4
 8003460:	3301      	adds	r3, #1
 8003462:	fbb4 f4f3 	udiv	r4, r4, r3
 8003466:	f7ff fa65 	bl	8002934 <LL_RCC_PLL_GetR>
 800346a:	4603      	mov	r3, r0
 800346c:	0f5b      	lsrs	r3, r3, #29
 800346e:	3301      	adds	r3, #1
 8003470:	fbb4 f3f3 	udiv	r3, r4, r3
 8003474:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003476:	697b      	ldr	r3, [r7, #20]
}
 8003478:	4618      	mov	r0, r3
 800347a:	371c      	adds	r7, #28
 800347c:	46bd      	mov	sp, r7
 800347e:	bd90      	pop	{r4, r7, pc}
 8003480:	08009c58 	.word	0x08009c58
 8003484:	00f42400 	.word	0x00f42400
 8003488:	01e84800 	.word	0x01e84800

0800348c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800348c:	b598      	push	{r3, r4, r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003490:	f7ff ff5c 	bl	800334c <HAL_RCC_GetSysClockFreq>
 8003494:	4604      	mov	r4, r0
 8003496:	f7ff f9e6 	bl	8002866 <LL_RCC_GetAHBPrescaler>
 800349a:	4603      	mov	r3, r0
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	4a03      	ldr	r2, [pc, #12]	@ (80034b0 <HAL_RCC_GetHCLKFreq+0x24>)
 80034a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	bd98      	pop	{r3, r4, r7, pc}
 80034b0:	08009bf8 	.word	0x08009bf8

080034b4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b4:	b598      	push	{r3, r4, r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80034b8:	f7ff ffe8 	bl	800348c <HAL_RCC_GetHCLKFreq>
 80034bc:	4604      	mov	r4, r0
 80034be:	f7ff f9ea 	bl	8002896 <LL_RCC_GetAPB1Prescaler>
 80034c2:	4603      	mov	r3, r0
 80034c4:	0a1b      	lsrs	r3, r3, #8
 80034c6:	4a03      	ldr	r2, [pc, #12]	@ (80034d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	bd98      	pop	{r3, r4, r7, pc}
 80034d4:	08009c38 	.word	0x08009c38

080034d8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d8:	b598      	push	{r3, r4, r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80034dc:	f7ff ffd6 	bl	800348c <HAL_RCC_GetHCLKFreq>
 80034e0:	4604      	mov	r4, r0
 80034e2:	f7ff f9e3 	bl	80028ac <LL_RCC_GetAPB2Prescaler>
 80034e6:	4603      	mov	r3, r0
 80034e8:	0adb      	lsrs	r3, r3, #11
 80034ea:	4a03      	ldr	r2, [pc, #12]	@ (80034f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd98      	pop	{r3, r4, r7, pc}
 80034f8:	08009c38 	.word	0x08009c38

080034fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80034fc:	b590      	push	{r4, r7, lr}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	4a10      	ldr	r2, [pc, #64]	@ (8003550 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800350e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003512:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003514:	f7ff f9b2 	bl	800287c <LL_RCC_GetAHB3Prescaler>
 8003518:	4603      	mov	r3, r0
 800351a:	091b      	lsrs	r3, r3, #4
 800351c:	f003 030f 	and.w	r3, r3, #15
 8003520:	4a0c      	ldr	r2, [pc, #48]	@ (8003554 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	fbb2 f3f3 	udiv	r3, r2, r3
 800352c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	4a09      	ldr	r2, [pc, #36]	@ (8003558 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003532:	fba2 2303 	umull	r2, r3, r2, r3
 8003536:	0c9c      	lsrs	r4, r3, #18
 8003538:	f7fe ffc6 	bl	80024c8 <HAL_PWREx_GetVoltageRange>
 800353c:	4603      	mov	r3, r0
 800353e:	4619      	mov	r1, r3
 8003540:	4620      	mov	r0, r4
 8003542:	f000 f80b 	bl	800355c <RCC_SetFlashLatency>
 8003546:	4603      	mov	r3, r0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	bd90      	pop	{r4, r7, pc}
 8003550:	08009c58 	.word	0x08009c58
 8003554:	08009bf8 	.word	0x08009bf8
 8003558:	431bde83 	.word	0x431bde83

0800355c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08e      	sub	sp, #56	@ 0x38
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003566:	4a3a      	ldr	r2, [pc, #232]	@ (8003650 <RCC_SetFlashLatency+0xf4>)
 8003568:	f107 0320 	add.w	r3, r7, #32
 800356c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003570:	6018      	str	r0, [r3, #0]
 8003572:	3304      	adds	r3, #4
 8003574:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003576:	4a37      	ldr	r2, [pc, #220]	@ (8003654 <RCC_SetFlashLatency+0xf8>)
 8003578:	f107 0318 	add.w	r3, r7, #24
 800357c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003580:	6018      	str	r0, [r3, #0]
 8003582:	3304      	adds	r3, #4
 8003584:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003586:	4a34      	ldr	r2, [pc, #208]	@ (8003658 <RCC_SetFlashLatency+0xfc>)
 8003588:	f107 030c 	add.w	r3, r7, #12
 800358c:	ca07      	ldmia	r2, {r0, r1, r2}
 800358e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003592:	2300      	movs	r3, #0
 8003594:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800359c:	d11b      	bne.n	80035d6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800359e:	2300      	movs	r3, #0
 80035a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80035a2:	e014      	b.n	80035ce <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80035a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	3338      	adds	r3, #56	@ 0x38
 80035aa:	443b      	add	r3, r7
 80035ac:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80035b0:	461a      	mov	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d807      	bhi.n	80035c8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80035b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	3338      	adds	r3, #56	@ 0x38
 80035be:	443b      	add	r3, r7
 80035c0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80035c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80035c6:	e021      	b.n	800360c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80035c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ca:	3301      	adds	r3, #1
 80035cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80035ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d9e7      	bls.n	80035a4 <RCC_SetFlashLatency+0x48>
 80035d4:	e01a      	b.n	800360c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80035d6:	2300      	movs	r3, #0
 80035d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035da:	e014      	b.n	8003606 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80035dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	3338      	adds	r3, #56	@ 0x38
 80035e2:	443b      	add	r3, r7
 80035e4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80035e8:	461a      	mov	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d807      	bhi.n	8003600 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80035f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	3338      	adds	r3, #56	@ 0x38
 80035f6:	443b      	add	r3, r7
 80035f8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80035fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80035fe:	e005      	b.n	800360c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003602:	3301      	adds	r3, #1
 8003604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003608:	2b02      	cmp	r3, #2
 800360a:	d9e7      	bls.n	80035dc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800360c:	4b13      	ldr	r3, [pc, #76]	@ (800365c <RCC_SetFlashLatency+0x100>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f023 0207 	bic.w	r2, r3, #7
 8003614:	4911      	ldr	r1, [pc, #68]	@ (800365c <RCC_SetFlashLatency+0x100>)
 8003616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003618:	4313      	orrs	r3, r2
 800361a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800361c:	f7fe fbd8 	bl	8001dd0 <HAL_GetTick>
 8003620:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003622:	e008      	b.n	8003636 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003624:	f7fe fbd4 	bl	8001dd0 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e007      	b.n	8003646 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003636:	4b09      	ldr	r3, [pc, #36]	@ (800365c <RCC_SetFlashLatency+0x100>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003640:	429a      	cmp	r2, r3
 8003642:	d1ef      	bne.n	8003624 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3738      	adds	r7, #56	@ 0x38
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	08009b78 	.word	0x08009b78
 8003654:	08009b80 	.word	0x08009b80
 8003658:	08009b88 	.word	0x08009b88
 800365c:	58004000 	.word	0x58004000

08003660 <LL_RCC_LSE_IsReady>:
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003664:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b02      	cmp	r3, #2
 8003672:	d101      	bne.n	8003678 <LL_RCC_LSE_IsReady+0x18>
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <LL_RCC_LSE_IsReady+0x1a>
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	46bd      	mov	sp, r7
 800367e:	bc80      	pop	{r7}
 8003680:	4770      	bx	lr

08003682 <LL_RCC_SetUSARTClockSource>:
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800368a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800368e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	0c1b      	lsrs	r3, r3, #16
 8003696:	43db      	mvns	r3, r3
 8003698:	401a      	ands	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	b29b      	uxth	r3, r3
 800369e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr

080036b2 <LL_RCC_SetI2SClockSource>:
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80036ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr

080036dc <LL_RCC_SetLPUARTClockSource>:
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80036e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr

08003706 <LL_RCC_SetI2CClockSource>:
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800370e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003712:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800371e:	43db      	mvns	r3, r3
 8003720:	401a      	ands	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800372a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr

0800373e <LL_RCC_SetLPTIMClockSource>:
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003746:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800374a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	0c1b      	lsrs	r3, r3, #16
 8003752:	041b      	lsls	r3, r3, #16
 8003754:	43db      	mvns	r3, r3
 8003756:	401a      	ands	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	041b      	lsls	r3, r3, #16
 800375c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr

08003770 <LL_RCC_SetRNGClockSource>:
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800377c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003780:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003784:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr

0800379a <LL_RCC_SetADCClockSource>:
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80037a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80037ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr

080037c4 <LL_RCC_SetRTCClockSource>:
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80037cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr

080037ee <LL_RCC_GetRTCClockSource>:
{
 80037ee:	b480      	push	{r7}
 80037f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80037f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80037fe:	4618      	mov	r0, r3
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr

08003806 <LL_RCC_ForceBackupDomainReset>:
{
 8003806:	b480      	push	{r7}
 8003808:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800380a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003812:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003816:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800381a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800381e:	bf00      	nop
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr

08003826 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003826:	b480      	push	{r7}
 8003828:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800382a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003832:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003836:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800383a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800383e:	bf00      	nop
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr
	...

08003848 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003854:	2300      	movs	r3, #0
 8003856:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003858:	2300      	movs	r3, #0
 800385a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d058      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003868:	f7fe fe20 	bl	80024ac <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800386c:	f7fe fab0 	bl	8001dd0 <HAL_GetTick>
 8003870:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003872:	e009      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003874:	f7fe faac 	bl	8001dd0 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d902      	bls.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	74fb      	strb	r3, [r7, #19]
        break;
 8003886:	e006      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003888:	4b7b      	ldr	r3, [pc, #492]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003890:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003894:	d1ee      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003896:	7cfb      	ldrb	r3, [r7, #19]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d13c      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800389c:	f7ff ffa7 	bl	80037ee <LL_RCC_GetRTCClockSource>
 80038a0:	4602      	mov	r2, r0
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d00f      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038b6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038b8:	f7ff ffa5 	bl	8003806 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038bc:	f7ff ffb3 	bl	8003826 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d014      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d4:	f7fe fa7c 	bl	8001dd0 <HAL_GetTick>
 80038d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80038da:	e00b      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038dc:	f7fe fa78 	bl	8001dd0 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d902      	bls.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	74fb      	strb	r3, [r7, #19]
            break;
 80038f2:	e004      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80038f4:	f7ff feb4 	bl	8003660 <LL_RCC_LSE_IsReady>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d1ee      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80038fe:	7cfb      	ldrb	r3, [r7, #19]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d105      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff ff5b 	bl	80037c4 <LL_RCC_SetRTCClockSource>
 800390e:	e004      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003910:	7cfb      	ldrb	r3, [r7, #19]
 8003912:	74bb      	strb	r3, [r7, #18]
 8003914:	e001      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003916:	7cfb      	ldrb	r3, [r7, #19]
 8003918:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d004      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff fea9 	bl	8003682 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d004      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff fe9e 	bl	8003682 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b00      	cmp	r3, #0
 8003950:	d004      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff fec0 	bl	80036dc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003964:	2b00      	cmp	r3, #0
 8003966:	d004      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff fee6 	bl	800373e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800397a:	2b00      	cmp	r3, #0
 800397c:	d004      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff fedb 	bl	800373e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003990:	2b00      	cmp	r3, #0
 8003992:	d004      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fed0 	bl	800373e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d004      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff fea9 	bl	8003706 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d004      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff fe9e 	bl	8003706 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d004      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff fe93 	bl	8003706 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d011      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff fe5e 	bl	80036b2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039fe:	d107      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003a00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a0e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d010      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fea5 	bl	8003770 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d107      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a3c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d011      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff fea3 	bl	800379a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a5c:	d107      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a6c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003a6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	58000400 	.word	0x58000400

08003a7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e0c6      	b.n	8003c1c <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d108      	bne.n	8003aa8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a9e:	d009      	beq.n	8003ab4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	61da      	str	r2, [r3, #28]
 8003aa6:	e005      	b.n	8003ab4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d106      	bne.n	8003ace <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7fe f849 	bl	8001b60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ae4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003aee:	d902      	bls.n	8003af6 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	e002      	b.n	8003afc <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003af6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003afa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003b04:	d007      	beq.n	8003b16 <HAL_SPI_Init+0x9a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b0e:	d002      	beq.n	8003b16 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b58:	ea42 0103 	orr.w	r1, r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b60:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b74:	d11b      	bne.n	8003bae <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10b      	bne.n	8003b96 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b86:	d903      	bls.n	8003b90 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b8e:	e002      	b.n	8003b96 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d107      	bne.n	8003bae <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	0c1b      	lsrs	r3, r3, #16
 8003bb4:	f003 0204 	and.w	r2, r3, #4
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003bd4:	ea42 0103 	orr.w	r1, r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bee:	d105      	bne.n	8003bfc <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	b292      	uxth	r2, r2
 8003bfa:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	69da      	ldr	r2, [r3, #28]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	4613      	mov	r3, r2
 8003c32:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_SPI_Transmit+0x22>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e181      	b.n	8003f4a <HAL_SPI_Transmit+0x326>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c4e:	f7fe f8bf 	bl	8001dd0 <HAL_GetTick>
 8003c52:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c54:	88fb      	ldrh	r3, [r7, #6]
 8003c56:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d002      	beq.n	8003c6a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c64:	2302      	movs	r3, #2
 8003c66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c68:	e16a      	b.n	8003f40 <HAL_SPI_Transmit+0x31c>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <HAL_SPI_Transmit+0x52>
 8003c70:	88fb      	ldrh	r3, [r7, #6]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d102      	bne.n	8003c7c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c7a:	e161      	b.n	8003f40 <HAL_SPI_Transmit+0x31c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2203      	movs	r2, #3
 8003c80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	88fa      	ldrh	r2, [r7, #6]
 8003c94:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	88fa      	ldrh	r2, [r7, #6]
 8003c9a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cc6:	d10f      	bne.n	8003ce8 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cd6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ce6:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cf0:	d10f      	bne.n	8003d12 <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d10:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d1c:	2b40      	cmp	r3, #64	@ 0x40
 8003d1e:	d007      	beq.n	8003d30 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d38:	d94f      	bls.n	8003dda <HAL_SPI_Transmit+0x1b6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <HAL_SPI_Transmit+0x124>
 8003d42:	8afb      	ldrh	r3, [r7, #22]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d142      	bne.n	8003dce <HAL_SPI_Transmit+0x1aa>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d4c:	881a      	ldrh	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d58:	1c9a      	adds	r2, r3, #2
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d6c:	e02f      	b.n	8003dce <HAL_SPI_Transmit+0x1aa>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d112      	bne.n	8003da2 <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d80:	881a      	ldrh	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8c:	1c9a      	adds	r2, r3, #2
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003da0:	e015      	b.n	8003dce <HAL_SPI_Transmit+0x1aa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003da2:	f7fe f815 	bl	8001dd0 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d803      	bhi.n	8003dba <HAL_SPI_Transmit+0x196>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003db8:	d102      	bne.n	8003dc0 <HAL_SPI_Transmit+0x19c>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d106      	bne.n	8003dce <HAL_SPI_Transmit+0x1aa>
        {
          errorcode = HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003dcc:	e0b8      	b.n	8003f40 <HAL_SPI_Transmit+0x31c>
    while (hspi->TxXferCount > 0U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1ca      	bne.n	8003d6e <HAL_SPI_Transmit+0x14a>
 8003dd8:	e080      	b.n	8003edc <HAL_SPI_Transmit+0x2b8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <HAL_SPI_Transmit+0x1c4>
 8003de2:	8afb      	ldrh	r3, [r7, #22]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d174      	bne.n	8003ed2 <HAL_SPI_Transmit+0x2ae>
    {
      if (hspi->TxXferCount > 1U)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d912      	bls.n	8003e18 <HAL_SPI_Transmit+0x1f4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df6:	881a      	ldrh	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e02:	1c9a      	adds	r2, r3, #2
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3b02      	subs	r3, #2
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e16:	e05c      	b.n	8003ed2 <HAL_SPI_Transmit+0x2ae>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	330c      	adds	r3, #12
 8003e22:	7812      	ldrb	r2, [r2, #0]
 8003e24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	3b01      	subs	r3, #1
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003e3e:	e048      	b.n	8003ed2 <HAL_SPI_Transmit+0x2ae>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d12b      	bne.n	8003ea6 <HAL_SPI_Transmit+0x282>
      {
        if (hspi->TxXferCount > 1U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d912      	bls.n	8003e7e <HAL_SPI_Transmit+0x25a>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5c:	881a      	ldrh	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e68:	1c9a      	adds	r2, r3, #2
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b02      	subs	r3, #2
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e7c:	e029      	b.n	8003ed2 <HAL_SPI_Transmit+0x2ae>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	330c      	adds	r3, #12
 8003e88:	7812      	ldrb	r2, [r2, #0]
 8003e8a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ea4:	e015      	b.n	8003ed2 <HAL_SPI_Transmit+0x2ae>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ea6:	f7fd ff93 	bl	8001dd0 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d803      	bhi.n	8003ebe <HAL_SPI_Transmit+0x29a>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ebc:	d102      	bne.n	8003ec4 <HAL_SPI_Transmit+0x2a0>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d106      	bne.n	8003ed2 <HAL_SPI_Transmit+0x2ae>
        {
          errorcode = HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003ed0:	e036      	b.n	8003f40 <HAL_SPI_Transmit+0x31c>
    while (hspi->TxXferCount > 0U)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1b1      	bne.n	8003e40 <HAL_SPI_Transmit+0x21c>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ee4:	d107      	bne.n	8003ef6 <HAL_SPI_Transmit+0x2d2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ef4:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	6839      	ldr	r1, [r7, #0]
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 fc86 	bl	800480c <SPI_EndRxTxTransaction>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <HAL_SPI_Transmit+0x2e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10a      	bne.n	8003f2a <HAL_SPI_Transmit+0x306>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f14:	2300      	movs	r3, #0
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	613b      	str	r3, [r7, #16]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <HAL_SPI_Transmit+0x314>
  {
    errorcode = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	77fb      	strb	r3, [r7, #31]
 8003f36:	e003      	b.n	8003f40 <HAL_SPI_Transmit+0x31c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003f48:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3720      	adds	r7, #32
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b092      	sub	sp, #72	@ 0x48
 8003f56:	af02      	add	r7, sp, #8
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	607a      	str	r2, [r7, #4]
 8003f5e:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003f64:	2300      	movs	r3, #0
 8003f66:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_SPI_TransmitReceive+0x2e>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e322      	b.n	80045c6 <HAL_SPI_TransmitReceive+0x674>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f88:	f7fd ff22 	bl	8001dd0 <HAL_GetTick>
 8003f8c:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  tmp_mode            = hspi->Init.Mode;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  initial_TxXferCount = Size;
 8003f9e:	887b      	ldrh	r3, [r7, #2]
 8003fa0:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8003fa2:	887b      	ldrh	r3, [r7, #2]
 8003fa4:	853b      	strh	r3, [r7, #40]	@ 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	627b      	str	r3, [r7, #36]	@ 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fb6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d00f      	beq.n	8003fde <HAL_SPI_TransmitReceive+0x8c>
 8003fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fc4:	d107      	bne.n	8003fd6 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d103      	bne.n	8003fd6 <HAL_SPI_TransmitReceive+0x84>
 8003fce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d003      	beq.n	8003fde <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    goto error;
 8003fdc:	e2ed      	b.n	80045ba <HAL_SPI_TransmitReceive+0x668>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_SPI_TransmitReceive+0x9e>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <HAL_SPI_TransmitReceive+0x9e>
 8003fea:	887b      	ldrh	r3, [r7, #2]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d103      	bne.n	8003ff8 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    goto error;
 8003ff6:	e2e0      	b.n	80045ba <HAL_SPI_TransmitReceive+0x668>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b04      	cmp	r3, #4
 8004002:	d003      	beq.n	800400c <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2205      	movs	r2, #5
 8004008:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	887a      	ldrh	r2, [r7, #2]
 800401c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	887a      	ldrh	r2, [r7, #2]
 8004024:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	887a      	ldrh	r2, [r7, #2]
 8004032:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	887a      	ldrh	r2, [r7, #2]
 8004038:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800404e:	d10f      	bne.n	8004070 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800406e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004078:	d802      	bhi.n	8004080 <HAL_SPI_TransmitReceive+0x12e>
 800407a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800407c:	2b01      	cmp	r3, #1
 800407e:	d908      	bls.n	8004092 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800408e:	605a      	str	r2, [r3, #4]
 8004090:	e007      	b.n	80040a2 <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80040a0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ac:	2b40      	cmp	r3, #64	@ 0x40
 80040ae:	d007      	beq.n	80040c0 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80040c8:	f240 80ce 	bls.w	8004268 <HAL_SPI_TransmitReceive+0x316>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_SPI_TransmitReceive+0x18a>
 80040d4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	f040 80b8 	bne.w	800424c <HAL_SPI_TransmitReceive+0x2fa>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e0:	881a      	ldrh	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ec:	1c9a      	adds	r2, r3, #2
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	f040 80a0 	bne.w	800424c <HAL_SPI_TransmitReceive+0x2fa>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004110:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004114:	f040 809a 	bne.w	800424c <HAL_SPI_TransmitReceive+0x2fa>
      {
        /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
        if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8004118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10c      	bne.n	800413c <HAL_SPI_TransmitReceive+0x1ea>
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b00      	cmp	r3, #0
 800412a:	d007      	beq.n	800413c <HAL_SPI_TransmitReceive+0x1ea>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800413a:	601a      	str	r2, [r3, #0]
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800414a:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800414c:	e07e      	b.n	800424c <HAL_SPI_TransmitReceive+0x2fa>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b02      	cmp	r3, #2
 800415a:	d13f      	bne.n	80041dc <HAL_SPI_TransmitReceive+0x28a>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d03a      	beq.n	80041dc <HAL_SPI_TransmitReceive+0x28a>
 8004166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004168:	2b01      	cmp	r3, #1
 800416a:	d137      	bne.n	80041dc <HAL_SPI_TransmitReceive+0x28a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004170:	881a      	ldrh	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417c:	1c9a      	adds	r2, r3, #2
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	63fb      	str	r3, [r7, #60]	@ 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d11e      	bne.n	80041dc <HAL_SPI_TransmitReceive+0x28a>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041a6:	d119      	bne.n	80041dc <HAL_SPI_TransmitReceive+0x28a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80041a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10c      	bne.n	80041cc <HAL_SPI_TransmitReceive+0x27a>
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d007      	beq.n	80041cc <HAL_SPI_TransmitReceive+0x27a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ca:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80041da:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d11c      	bne.n	8004224 <HAL_SPI_TransmitReceive+0x2d2>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d016      	beq.n	8004224 <HAL_SPI_TransmitReceive+0x2d2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004200:	b292      	uxth	r2, r2
 8004202:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004208:	1c9a      	adds	r2, r3, #2
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004220:	2301      	movs	r3, #1
 8004222:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004224:	f7fd fdd4 	bl	8001dd0 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004230:	429a      	cmp	r2, r3
 8004232:	d80b      	bhi.n	800424c <HAL_SPI_TransmitReceive+0x2fa>
 8004234:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004236:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800423a:	d007      	beq.n	800424c <HAL_SPI_TransmitReceive+0x2fa>
      {
        errorcode = HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800424a:	e1b6      	b.n	80045ba <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	f47f af7b 	bne.w	800414e <HAL_SPI_TransmitReceive+0x1fc>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800425e:	b29b      	uxth	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	f47f af74 	bne.w	800414e <HAL_SPI_TransmitReceive+0x1fc>
 8004266:	e12d      	b.n	80044c4 <HAL_SPI_TransmitReceive+0x572>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_SPI_TransmitReceive+0x326>
 8004270:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004272:	2b01      	cmp	r3, #1
 8004274:	f040 8119 	bne.w	80044aa <HAL_SPI_TransmitReceive+0x558>
    {
      if (hspi->TxXferCount > 1U)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b01      	cmp	r3, #1
 8004280:	d912      	bls.n	80042a8 <HAL_SPI_TransmitReceive+0x356>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004286:	881a      	ldrh	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004292:	1c9a      	adds	r2, r3, #2
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800429c:	b29b      	uxth	r3, r3
 800429e:	3b02      	subs	r3, #2
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80042a6:	e100      	b.n	80044aa <HAL_SPI_TransmitReceive+0x558>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	330c      	adds	r3, #12
 80042b2:	7812      	ldrb	r2, [r2, #0]
 80042b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f040 80e8 	bne.w	80044aa <HAL_SPI_TransmitReceive+0x558>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042e2:	f040 80e2 	bne.w	80044aa <HAL_SPI_TransmitReceive+0x558>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80042e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10c      	bne.n	800430a <HAL_SPI_TransmitReceive+0x3b8>
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d007      	beq.n	800430a <HAL_SPI_TransmitReceive+0x3b8>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004308:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004318:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800431a:	e0c6      	b.n	80044aa <HAL_SPI_TransmitReceive+0x558>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b02      	cmp	r3, #2
 8004328:	d158      	bne.n	80043dc <HAL_SPI_TransmitReceive+0x48a>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d053      	beq.n	80043dc <HAL_SPI_TransmitReceive+0x48a>
 8004334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004336:	2b01      	cmp	r3, #1
 8004338:	d150      	bne.n	80043dc <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->TxXferCount > 1U)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b01      	cmp	r3, #1
 8004342:	d912      	bls.n	800436a <HAL_SPI_TransmitReceive+0x418>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004348:	881a      	ldrh	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004354:	1c9a      	adds	r2, r3, #2
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b02      	subs	r3, #2
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004368:	e012      	b.n	8004390 <HAL_SPI_TransmitReceive+0x43e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	330c      	adds	r3, #12
 8004374:	7812      	ldrb	r2, [r2, #0]
 8004376:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	63fb      	str	r3, [r7, #60]	@ 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d11e      	bne.n	80043dc <HAL_SPI_TransmitReceive+0x48a>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043a6:	d119      	bne.n	80043dc <HAL_SPI_TransmitReceive+0x48a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80043a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10c      	bne.n	80043cc <HAL_SPI_TransmitReceive+0x47a>
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	f003 0308 	and.w	r3, r3, #8
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d007      	beq.n	80043cc <HAL_SPI_TransmitReceive+0x47a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ca:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80043da:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d148      	bne.n	800447c <HAL_SPI_TransmitReceive+0x52a>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d042      	beq.n	800447c <HAL_SPI_TransmitReceive+0x52a>
      {
        if (hspi->RxXferCount > 1U)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d923      	bls.n	800444a <HAL_SPI_TransmitReceive+0x4f8>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440c:	b292      	uxth	r2, r2
 800440e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004414:	1c9a      	adds	r2, r3, #2
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b02      	subs	r3, #2
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004432:	b29b      	uxth	r3, r3
 8004434:	2b01      	cmp	r3, #1
 8004436:	d81f      	bhi.n	8004478 <HAL_SPI_TransmitReceive+0x526>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004446:	605a      	str	r2, [r3, #4]
 8004448:	e016      	b.n	8004478 <HAL_SPI_TransmitReceive+0x526>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f103 020c 	add.w	r2, r3, #12
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	7812      	ldrb	r2, [r2, #0]
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800446c:	b29b      	uxth	r3, r3
 800446e:	3b01      	subs	r3, #1
 8004470:	b29a      	uxth	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004478:	2301      	movs	r3, #1
 800447a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800447c:	f7fd fca8 	bl	8001dd0 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004488:	429a      	cmp	r2, r3
 800448a:	d803      	bhi.n	8004494 <HAL_SPI_TransmitReceive+0x542>
 800448c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800448e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004492:	d102      	bne.n	800449a <HAL_SPI_TransmitReceive+0x548>
 8004494:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004496:	2b00      	cmp	r3, #0
 8004498:	d107      	bne.n	80044aa <HAL_SPI_TransmitReceive+0x558>
      {
        errorcode = HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80044a8:	e087      	b.n	80045ba <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f47f af33 	bne.w	800431c <HAL_SPI_TransmitReceive+0x3ca>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044bc:	b29b      	uxth	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f47f af2c 	bne.w	800431c <HAL_SPI_TransmitReceive+0x3ca>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044cc:	d146      	bne.n	800455c <HAL_SPI_TransmitReceive+0x60a>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80044ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044d4:	2201      	movs	r2, #1
 80044d6:	2101      	movs	r1, #1
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 f879 	bl	80045d0 <SPI_WaitFlagStateUntilTimeout>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d009      	beq.n	80044f8 <HAL_SPI_TransmitReceive+0x5a6>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e8:	f043 0202 	orr.w	r2, r3, #2
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      goto error;
 80044f6:	e060      	b.n	80045ba <HAL_SPI_TransmitReceive+0x668>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004500:	d105      	bne.n	800450e <HAL_SPI_TransmitReceive+0x5bc>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	e026      	b.n	800455c <HAL_SPI_TransmitReceive+0x60a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	330c      	adds	r3, #12
 8004514:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800451e:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004524:	2b02      	cmp	r3, #2
 8004526:	d119      	bne.n	800455c <HAL_SPI_TransmitReceive+0x60a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800452e:	2201      	movs	r2, #1
 8004530:	2101      	movs	r1, #1
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 f84c 	bl	80045d0 <SPI_WaitFlagStateUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d009      	beq.n	8004552 <HAL_SPI_TransmitReceive+0x600>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004542:	f043 0202 	orr.w	r2, r3, #2
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	661a      	str	r2, [r3, #96]	@ 0x60
          errorcode = HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
          goto error;
 8004550:	e033      	b.n	80045ba <HAL_SPI_TransmitReceive+0x668>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	b2db      	uxtb	r3, r3
 8004558:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 800455a:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 0310 	and.w	r3, r3, #16
 8004566:	2b10      	cmp	r3, #16
 8004568:	d10d      	bne.n	8004586 <HAL_SPI_TransmitReceive+0x634>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800456e:	f043 0202 	orr.w	r2, r3, #2
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800457e:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004586:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004588:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 f93e 	bl	800480c <SPI_EndRxTxTransaction>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d005      	beq.n	80045a2 <HAL_SPI_TransmitReceive+0x650>
  {
    errorcode = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2220      	movs	r2, #32
 80045a0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_SPI_TransmitReceive+0x660>
  {
    errorcode = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80045b0:	e003      	b.n	80045ba <HAL_SPI_TransmitReceive+0x668>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80045c2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3740      	adds	r7, #64	@ 0x40
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	4613      	mov	r3, r2
 80045de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045e0:	f7fd fbf6 	bl	8001dd0 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e8:	1a9b      	subs	r3, r3, r2
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	4413      	add	r3, r2
 80045ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045f0:	f7fd fbee 	bl	8001dd0 <HAL_GetTick>
 80045f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045f6:	4b39      	ldr	r3, [pc, #228]	@ (80046dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	015b      	lsls	r3, r3, #5
 80045fc:	0d1b      	lsrs	r3, r3, #20
 80045fe:	69fa      	ldr	r2, [r7, #28]
 8004600:	fb02 f303 	mul.w	r3, r2, r3
 8004604:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004606:	e054      	b.n	80046b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800460e:	d050      	beq.n	80046b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004610:	f7fd fbde 	bl	8001dd0 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	429a      	cmp	r2, r3
 800461e:	d902      	bls.n	8004626 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d13d      	bne.n	80046a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004634:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800463e:	d111      	bne.n	8004664 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004648:	d004      	beq.n	8004654 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004652:	d107      	bne.n	8004664 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004662:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004668:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800466c:	d10f      	bne.n	800468e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800468c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e017      	b.n	80046d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4013      	ands	r3, r2
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	429a      	cmp	r2, r3
 80046c0:	bf0c      	ite	eq
 80046c2:	2301      	moveq	r3, #1
 80046c4:	2300      	movne	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d19b      	bne.n	8004608 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3720      	adds	r7, #32
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20000000 	.word	0x20000000

080046e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	@ 0x28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80046ee:	2300      	movs	r3, #0
 80046f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80046f2:	f7fd fb6d 	bl	8001dd0 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fa:	1a9b      	subs	r3, r3, r2
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	4413      	add	r3, r2
 8004700:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004702:	f7fd fb65 	bl	8001dd0 <HAL_GetTick>
 8004706:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	330c      	adds	r3, #12
 800470e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004710:	4b3d      	ldr	r3, [pc, #244]	@ (8004808 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4613      	mov	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	00da      	lsls	r2, r3, #3
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	0d1b      	lsrs	r3, r3, #20
 8004720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004722:	fb02 f303 	mul.w	r3, r2, r3
 8004726:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004728:	e060      	b.n	80047ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004730:	d107      	bne.n	8004742 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d104      	bne.n	8004742 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	b2db      	uxtb	r3, r3
 800473e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004740:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004748:	d050      	beq.n	80047ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800474a:	f7fd fb41 	bl	8001dd0 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004756:	429a      	cmp	r2, r3
 8004758:	d902      	bls.n	8004760 <SPI_WaitFifoStateUntilTimeout+0x80>
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475c:	2b00      	cmp	r3, #0
 800475e:	d13d      	bne.n	80047dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800476e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004778:	d111      	bne.n	800479e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004782:	d004      	beq.n	800478e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800478c:	d107      	bne.n	800479e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800479c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047a6:	d10f      	bne.n	80047c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e010      	b.n	80047fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	3b01      	subs	r3, #1
 80047ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	4013      	ands	r3, r2
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d196      	bne.n	800472a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3728      	adds	r7, #40	@ 0x28
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20000000 	.word	0x20000000

0800480c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af02      	add	r7, sp, #8
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2200      	movs	r2, #0
 8004820:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f7ff ff5b 	bl	80046e0 <SPI_WaitFifoStateUntilTimeout>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d007      	beq.n	8004840 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004834:	f043 0220 	orr.w	r2, r3, #32
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e027      	b.n	8004890 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2200      	movs	r2, #0
 8004848:	2180      	movs	r1, #128	@ 0x80
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f7ff fec0 	bl	80045d0 <SPI_WaitFlagStateUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800485a:	f043 0220 	orr.w	r2, r3, #32
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e014      	b.n	8004890 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2200      	movs	r2, #0
 800486e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f7ff ff34 	bl	80046e0 <SPI_WaitFifoStateUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d007      	beq.n	800488e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004882:	f043 0220 	orr.w	r2, r3, #32
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e000      	b.n	8004890 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <LL_RCC_GetUSARTClockSource>:
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80048a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	401a      	ands	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	041b      	lsls	r3, r3, #16
 80048b0:	4313      	orrs	r3, r2
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr

080048bc <LL_RCC_GetLPUARTClockSource>:
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80048c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4013      	ands	r3, r2
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bc80      	pop	{r7}
 80048d8:	4770      	bx	lr

080048da <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b082      	sub	sp, #8
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e042      	b.n	8004972 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d106      	bne.n	8004904 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7fd f8e2 	bl	8001ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2224      	movs	r2, #36	@ 0x24
 8004908:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0201 	bic.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fea3 	bl	8005670 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fc2c 	bl	8005188 <UART_SetConfig>
 8004930:	4603      	mov	r3, r0
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e01b      	b.n	8004972 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004948:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004958:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0201 	orr.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 ff21 	bl	80057b2 <UART_CheckIdleState>
 8004970:	4603      	mov	r3, r0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b08a      	sub	sp, #40	@ 0x28
 800497e:	af02      	add	r7, sp, #8
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	603b      	str	r3, [r7, #0]
 8004986:	4613      	mov	r3, r2
 8004988:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004990:	2b20      	cmp	r3, #32
 8004992:	f040 80b1 	bne.w	8004af8 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <HAL_UART_Receive+0x28>
 800499c:	88fb      	ldrh	r3, [r7, #6]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e0a9      	b.n	8004afa <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2222      	movs	r2, #34	@ 0x22
 80049b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049bc:	f7fd fa08 	bl	8001dd0 <HAL_GetTick>
 80049c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	88fa      	ldrh	r2, [r7, #6]
 80049c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	88fa      	ldrh	r2, [r7, #6]
 80049ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049da:	d10e      	bne.n	80049fa <HAL_UART_Receive+0x80>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d105      	bne.n	80049f0 <HAL_UART_Receive+0x76>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80049ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80049ee:	e02d      	b.n	8004a4c <HAL_UART_Receive+0xd2>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	22ff      	movs	r2, #255	@ 0xff
 80049f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80049f8:	e028      	b.n	8004a4c <HAL_UART_Receive+0xd2>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10d      	bne.n	8004a1e <HAL_UART_Receive+0xa4>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d104      	bne.n	8004a14 <HAL_UART_Receive+0x9a>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	22ff      	movs	r2, #255	@ 0xff
 8004a0e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004a12:	e01b      	b.n	8004a4c <HAL_UART_Receive+0xd2>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	227f      	movs	r2, #127	@ 0x7f
 8004a18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004a1c:	e016      	b.n	8004a4c <HAL_UART_Receive+0xd2>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a26:	d10d      	bne.n	8004a44 <HAL_UART_Receive+0xca>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d104      	bne.n	8004a3a <HAL_UART_Receive+0xc0>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	227f      	movs	r2, #127	@ 0x7f
 8004a34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004a38:	e008      	b.n	8004a4c <HAL_UART_Receive+0xd2>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	223f      	movs	r2, #63	@ 0x3f
 8004a3e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004a42:	e003      	b.n	8004a4c <HAL_UART_Receive+0xd2>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004a52:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a5c:	d108      	bne.n	8004a70 <HAL_UART_Receive+0xf6>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d104      	bne.n	8004a70 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	e003      	b.n	8004a78 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004a78:	e032      	b.n	8004ae0 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2200      	movs	r2, #0
 8004a82:	2120      	movs	r1, #32
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 fee2 	bl	800584e <UART_WaitOnFlagUntilTimeout>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e032      	b.n	8004afa <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10c      	bne.n	8004ab4 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	8a7b      	ldrh	r3, [r7, #18]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	3302      	adds	r3, #2
 8004ab0:	61bb      	str	r3, [r7, #24]
 8004ab2:	e00c      	b.n	8004ace <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	8a7b      	ldrh	r3, [r7, #18]
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	3301      	adds	r3, #1
 8004acc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1c6      	bne.n	8004a7a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	e000      	b.n	8004afa <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004af8:	2302      	movs	r3, #2
  }
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3720      	adds	r7, #32
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b0ba      	sub	sp, #232	@ 0xe8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004b2e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004b32:	4013      	ands	r3, r2
 8004b34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004b38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d11b      	bne.n	8004b78 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d015      	beq.n	8004b78 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b50:	f003 0320 	and.w	r3, r3, #32
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d105      	bne.n	8004b64 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d009      	beq.n	8004b78 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 82e3 	beq.w	8005134 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	4798      	blx	r3
      }
      return;
 8004b76:	e2dd      	b.n	8005134 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004b78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 8123 	beq.w	8004dc8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004b82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004b86:	4b8d      	ldr	r3, [pc, #564]	@ (8004dbc <HAL_UART_IRQHandler+0x2b8>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d106      	bne.n	8004b9c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004b8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004b92:	4b8b      	ldr	r3, [pc, #556]	@ (8004dc0 <HAL_UART_IRQHandler+0x2bc>)
 8004b94:	4013      	ands	r3, r2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 8116 	beq.w	8004dc8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d011      	beq.n	8004bcc <HAL_UART_IRQHandler+0xc8>
 8004ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00b      	beq.n	8004bcc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bc2:	f043 0201 	orr.w	r2, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d011      	beq.n	8004bfc <HAL_UART_IRQHandler+0xf8>
 8004bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00b      	beq.n	8004bfc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2202      	movs	r2, #2
 8004bea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bf2:	f043 0204 	orr.w	r2, r3, #4
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d011      	beq.n	8004c2c <HAL_UART_IRQHandler+0x128>
 8004c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00b      	beq.n	8004c2c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2204      	movs	r2, #4
 8004c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c22:	f043 0202 	orr.w	r2, r3, #2
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d017      	beq.n	8004c68 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c3c:	f003 0320 	and.w	r3, r3, #32
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d105      	bne.n	8004c50 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004c44:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004c48:	4b5c      	ldr	r3, [pc, #368]	@ (8004dbc <HAL_UART_IRQHandler+0x2b8>)
 8004c4a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00b      	beq.n	8004c68 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2208      	movs	r2, #8
 8004c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c5e:	f043 0208 	orr.w	r2, r3, #8
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d012      	beq.n	8004c9a <HAL_UART_IRQHandler+0x196>
 8004c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00c      	beq.n	8004c9a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c90:	f043 0220 	orr.w	r2, r3, #32
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 8249 	beq.w	8005138 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004caa:	f003 0320 	and.w	r3, r3, #32
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d013      	beq.n	8004cda <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cb6:	f003 0320 	and.w	r3, r3, #32
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d105      	bne.n	8004cca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d007      	beq.n	8004cda <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cee:	2b40      	cmp	r3, #64	@ 0x40
 8004cf0:	d005      	beq.n	8004cfe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004cf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cf6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d054      	beq.n	8004da8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 fe73 	bl	80059ea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d0e:	2b40      	cmp	r3, #64	@ 0x40
 8004d10:	d146      	bne.n	8004da0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3308      	adds	r3, #8
 8004d18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d20:	e853 3f00 	ldrex	r3, [r3]
 8004d24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3308      	adds	r3, #8
 8004d3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004d3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004d42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004d4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004d4e:	e841 2300 	strex	r3, r2, [r1]
 8004d52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004d56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1d9      	bne.n	8004d12 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d017      	beq.n	8004d98 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d6e:	4a15      	ldr	r2, [pc, #84]	@ (8004dc4 <HAL_UART_IRQHandler+0x2c0>)
 8004d70:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fd f9c0 	bl	80020fe <HAL_DMA_Abort_IT>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d019      	beq.n	8004db8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004d92:	4610      	mov	r0, r2
 8004d94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d96:	e00f      	b.n	8004db8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f9e0 	bl	800515e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d9e:	e00b      	b.n	8004db8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f9dc 	bl	800515e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da6:	e007      	b.n	8004db8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f9d8 	bl	800515e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004db6:	e1bf      	b.n	8005138 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db8:	bf00      	nop
    return;
 8004dba:	e1bd      	b.n	8005138 <HAL_UART_IRQHandler+0x634>
 8004dbc:	10000001 	.word	0x10000001
 8004dc0:	04000120 	.word	0x04000120
 8004dc4:	08005ab5 	.word	0x08005ab5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	f040 8153 	bne.w	8005078 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dd6:	f003 0310 	and.w	r3, r3, #16
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 814c 	beq.w	8005078 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004de4:	f003 0310 	and.w	r3, r3, #16
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 8145 	beq.w	8005078 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2210      	movs	r2, #16
 8004df4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e00:	2b40      	cmp	r3, #64	@ 0x40
 8004e02:	f040 80bb 	bne.w	8004f7c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 818f 	beq.w	800513c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004e24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	f080 8187 	bcs.w	800513c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0320 	and.w	r3, r3, #32
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f040 8087 	bne.w	8004f5a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	461a      	mov	r2, r3
 8004e72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004e76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e7a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004e82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004e86:	e841 2300 	strex	r3, r2, [r1]
 8004e8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1da      	bne.n	8004e4c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ea0:	e853 3f00 	ldrex	r3, [r3]
 8004ea4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004ea6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ea8:	f023 0301 	bic.w	r3, r3, #1
 8004eac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3308      	adds	r3, #8
 8004eb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004eba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004ebe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004ec2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004ec6:	e841 2300 	strex	r3, r2, [r1]
 8004eca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004ecc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e1      	bne.n	8004e96 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3308      	adds	r3, #8
 8004ed8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004ee2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ee4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3308      	adds	r3, #8
 8004ef2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ef6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ef8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004efc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004f04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e3      	bne.n	8004ed2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f20:	e853 3f00 	ldrex	r3, [r3]
 8004f24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004f26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f28:	f023 0310 	bic.w	r3, r3, #16
 8004f2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f3c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f42:	e841 2300 	strex	r3, r2, [r1]
 8004f46:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1e4      	bne.n	8004f18 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fd f874 	bl	8002042 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	4619      	mov	r1, r3
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f8fb 	bl	8005170 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f7a:	e0df      	b.n	800513c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 80d1 	beq.w	8005140 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004f9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 80cc 	beq.w	8005140 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb0:	e853 3f00 	ldrex	r3, [r3]
 8004fb4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fbc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004fca:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fcc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fd2:	e841 2300 	strex	r3, r2, [r1]
 8004fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e4      	bne.n	8004fa8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3308      	adds	r3, #8
 8004fe4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe8:	e853 3f00 	ldrex	r3, [r3]
 8004fec:	623b      	str	r3, [r7, #32]
   return(result);
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ff4:	f023 0301 	bic.w	r3, r3, #1
 8004ff8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3308      	adds	r3, #8
 8005002:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005006:	633a      	str	r2, [r7, #48]	@ 0x30
 8005008:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800500c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800500e:	e841 2300 	strex	r3, r2, [r1]
 8005012:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1e1      	bne.n	8004fde <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2220      	movs	r2, #32
 800501e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	e853 3f00 	ldrex	r3, [r3]
 800503a:	60fb      	str	r3, [r7, #12]
   return(result);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f023 0310 	bic.w	r3, r3, #16
 8005042:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	461a      	mov	r2, r3
 800504c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005050:	61fb      	str	r3, [r7, #28]
 8005052:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005054:	69b9      	ldr	r1, [r7, #24]
 8005056:	69fa      	ldr	r2, [r7, #28]
 8005058:	e841 2300 	strex	r3, r2, [r1]
 800505c:	617b      	str	r3, [r7, #20]
   return(result);
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1e4      	bne.n	800502e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800506a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800506e:	4619      	mov	r1, r3
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f87d 	bl	8005170 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005076:	e063      	b.n	8005140 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800507c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00e      	beq.n	80050a2 <HAL_UART_IRQHandler+0x59e>
 8005084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005088:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d008      	beq.n	80050a2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005098:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fd4b 	bl	8005b36 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050a0:	e051      	b.n	8005146 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80050a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d014      	beq.n	80050d8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80050ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d105      	bne.n	80050c6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80050ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d008      	beq.n	80050d8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d03a      	beq.n	8005144 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	4798      	blx	r3
    }
    return;
 80050d6:	e035      	b.n	8005144 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d009      	beq.n	80050f8 <HAL_UART_IRQHandler+0x5f4>
 80050e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 fcf5 	bl	8005ae0 <UART_EndTransmit_IT>
    return;
 80050f6:	e026      	b.n	8005146 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80050f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d009      	beq.n	8005118 <HAL_UART_IRQHandler+0x614>
 8005104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005108:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fd22 	bl	8005b5a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005116:	e016      	b.n	8005146 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800511c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d010      	beq.n	8005146 <HAL_UART_IRQHandler+0x642>
 8005124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005128:	2b00      	cmp	r3, #0
 800512a:	da0c      	bge.n	8005146 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 fd0b 	bl	8005b48 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005132:	e008      	b.n	8005146 <HAL_UART_IRQHandler+0x642>
      return;
 8005134:	bf00      	nop
 8005136:	e006      	b.n	8005146 <HAL_UART_IRQHandler+0x642>
    return;
 8005138:	bf00      	nop
 800513a:	e004      	b.n	8005146 <HAL_UART_IRQHandler+0x642>
      return;
 800513c:	bf00      	nop
 800513e:	e002      	b.n	8005146 <HAL_UART_IRQHandler+0x642>
      return;
 8005140:	bf00      	nop
 8005142:	e000      	b.n	8005146 <HAL_UART_IRQHandler+0x642>
    return;
 8005144:	bf00      	nop
  }
}
 8005146:	37e8      	adds	r7, #232	@ 0xe8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	bc80      	pop	{r7}
 800515c:	4770      	bx	lr

0800515e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	bc80      	pop	{r7}
 800516e:	4770      	bx	lr

08005170 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr
	...

08005188 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800518c:	b08c      	sub	sp, #48	@ 0x30
 800518e:	af00      	add	r7, sp, #0
 8005190:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	431a      	orrs	r2, r3
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	431a      	orrs	r2, r3
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	4b94      	ldr	r3, [pc, #592]	@ (8005408 <UART_SetConfig+0x280>)
 80051b8:	4013      	ands	r3, r2
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	6812      	ldr	r2, [r2, #0]
 80051be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051c0:	430b      	orrs	r3, r1
 80051c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a89      	ldr	r2, [pc, #548]	@ (800540c <UART_SetConfig+0x284>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d004      	beq.n	80051f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051f0:	4313      	orrs	r3, r2
 80051f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80051fe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	6812      	ldr	r2, [r2, #0]
 8005206:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005208:	430b      	orrs	r3, r1
 800520a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005212:	f023 010f 	bic.w	r1, r3, #15
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a7a      	ldr	r2, [pc, #488]	@ (8005410 <UART_SetConfig+0x288>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d127      	bne.n	800527c <UART_SetConfig+0xf4>
 800522c:	2003      	movs	r0, #3
 800522e:	f7ff fb33 	bl	8004898 <LL_RCC_GetUSARTClockSource>
 8005232:	4603      	mov	r3, r0
 8005234:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8005238:	2b03      	cmp	r3, #3
 800523a:	d81b      	bhi.n	8005274 <UART_SetConfig+0xec>
 800523c:	a201      	add	r2, pc, #4	@ (adr r2, 8005244 <UART_SetConfig+0xbc>)
 800523e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005242:	bf00      	nop
 8005244:	08005255 	.word	0x08005255
 8005248:	08005265 	.word	0x08005265
 800524c:	0800525d 	.word	0x0800525d
 8005250:	0800526d 	.word	0x0800526d
 8005254:	2301      	movs	r3, #1
 8005256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800525a:	e080      	b.n	800535e <UART_SetConfig+0x1d6>
 800525c:	2302      	movs	r3, #2
 800525e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005262:	e07c      	b.n	800535e <UART_SetConfig+0x1d6>
 8005264:	2304      	movs	r3, #4
 8005266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800526a:	e078      	b.n	800535e <UART_SetConfig+0x1d6>
 800526c:	2308      	movs	r3, #8
 800526e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005272:	e074      	b.n	800535e <UART_SetConfig+0x1d6>
 8005274:	2310      	movs	r3, #16
 8005276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800527a:	e070      	b.n	800535e <UART_SetConfig+0x1d6>
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a64      	ldr	r2, [pc, #400]	@ (8005414 <UART_SetConfig+0x28c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d138      	bne.n	80052f8 <UART_SetConfig+0x170>
 8005286:	200c      	movs	r0, #12
 8005288:	f7ff fb06 	bl	8004898 <LL_RCC_GetUSARTClockSource>
 800528c:	4603      	mov	r3, r0
 800528e:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8005292:	2b0c      	cmp	r3, #12
 8005294:	d82c      	bhi.n	80052f0 <UART_SetConfig+0x168>
 8005296:	a201      	add	r2, pc, #4	@ (adr r2, 800529c <UART_SetConfig+0x114>)
 8005298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529c:	080052d1 	.word	0x080052d1
 80052a0:	080052f1 	.word	0x080052f1
 80052a4:	080052f1 	.word	0x080052f1
 80052a8:	080052f1 	.word	0x080052f1
 80052ac:	080052e1 	.word	0x080052e1
 80052b0:	080052f1 	.word	0x080052f1
 80052b4:	080052f1 	.word	0x080052f1
 80052b8:	080052f1 	.word	0x080052f1
 80052bc:	080052d9 	.word	0x080052d9
 80052c0:	080052f1 	.word	0x080052f1
 80052c4:	080052f1 	.word	0x080052f1
 80052c8:	080052f1 	.word	0x080052f1
 80052cc:	080052e9 	.word	0x080052e9
 80052d0:	2300      	movs	r3, #0
 80052d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052d6:	e042      	b.n	800535e <UART_SetConfig+0x1d6>
 80052d8:	2302      	movs	r3, #2
 80052da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052de:	e03e      	b.n	800535e <UART_SetConfig+0x1d6>
 80052e0:	2304      	movs	r3, #4
 80052e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052e6:	e03a      	b.n	800535e <UART_SetConfig+0x1d6>
 80052e8:	2308      	movs	r3, #8
 80052ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ee:	e036      	b.n	800535e <UART_SetConfig+0x1d6>
 80052f0:	2310      	movs	r3, #16
 80052f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052f6:	e032      	b.n	800535e <UART_SetConfig+0x1d6>
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a43      	ldr	r2, [pc, #268]	@ (800540c <UART_SetConfig+0x284>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d12a      	bne.n	8005358 <UART_SetConfig+0x1d0>
 8005302:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8005306:	f7ff fad9 	bl	80048bc <LL_RCC_GetLPUARTClockSource>
 800530a:	4603      	mov	r3, r0
 800530c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005310:	d01a      	beq.n	8005348 <UART_SetConfig+0x1c0>
 8005312:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005316:	d81b      	bhi.n	8005350 <UART_SetConfig+0x1c8>
 8005318:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800531c:	d00c      	beq.n	8005338 <UART_SetConfig+0x1b0>
 800531e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005322:	d815      	bhi.n	8005350 <UART_SetConfig+0x1c8>
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <UART_SetConfig+0x1a8>
 8005328:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800532c:	d008      	beq.n	8005340 <UART_SetConfig+0x1b8>
 800532e:	e00f      	b.n	8005350 <UART_SetConfig+0x1c8>
 8005330:	2300      	movs	r3, #0
 8005332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005336:	e012      	b.n	800535e <UART_SetConfig+0x1d6>
 8005338:	2302      	movs	r3, #2
 800533a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800533e:	e00e      	b.n	800535e <UART_SetConfig+0x1d6>
 8005340:	2304      	movs	r3, #4
 8005342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005346:	e00a      	b.n	800535e <UART_SetConfig+0x1d6>
 8005348:	2308      	movs	r3, #8
 800534a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800534e:	e006      	b.n	800535e <UART_SetConfig+0x1d6>
 8005350:	2310      	movs	r3, #16
 8005352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005356:	e002      	b.n	800535e <UART_SetConfig+0x1d6>
 8005358:	2310      	movs	r3, #16
 800535a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a2a      	ldr	r2, [pc, #168]	@ (800540c <UART_SetConfig+0x284>)
 8005364:	4293      	cmp	r3, r2
 8005366:	f040 80a4 	bne.w	80054b2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800536a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800536e:	2b08      	cmp	r3, #8
 8005370:	d823      	bhi.n	80053ba <UART_SetConfig+0x232>
 8005372:	a201      	add	r2, pc, #4	@ (adr r2, 8005378 <UART_SetConfig+0x1f0>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	0800539d 	.word	0x0800539d
 800537c:	080053bb 	.word	0x080053bb
 8005380:	080053a5 	.word	0x080053a5
 8005384:	080053bb 	.word	0x080053bb
 8005388:	080053ab 	.word	0x080053ab
 800538c:	080053bb 	.word	0x080053bb
 8005390:	080053bb 	.word	0x080053bb
 8005394:	080053bb 	.word	0x080053bb
 8005398:	080053b3 	.word	0x080053b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800539c:	f7fe f88a 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 80053a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053a2:	e010      	b.n	80053c6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005418 <UART_SetConfig+0x290>)
 80053a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053a8:	e00d      	b.n	80053c6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053aa:	f7fd ffcf 	bl	800334c <HAL_RCC_GetSysClockFreq>
 80053ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053b0:	e009      	b.n	80053c6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053b8:	e005      	b.n	80053c6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80053c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 8137 	beq.w	800563c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d2:	4a12      	ldr	r2, [pc, #72]	@ (800541c <UART_SetConfig+0x294>)
 80053d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053d8:	461a      	mov	r2, r3
 80053da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80053e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	4613      	mov	r3, r2
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	4413      	add	r3, r2
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d305      	bcc.n	80053fe <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d910      	bls.n	8005420 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005404:	e11a      	b.n	800563c <UART_SetConfig+0x4b4>
 8005406:	bf00      	nop
 8005408:	cfff69f3 	.word	0xcfff69f3
 800540c:	40008000 	.word	0x40008000
 8005410:	40013800 	.word	0x40013800
 8005414:	40004400 	.word	0x40004400
 8005418:	00f42400 	.word	0x00f42400
 800541c:	08009c98 	.word	0x08009c98
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005422:	2200      	movs	r2, #0
 8005424:	60bb      	str	r3, [r7, #8]
 8005426:	60fa      	str	r2, [r7, #12]
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542c:	4a8e      	ldr	r2, [pc, #568]	@ (8005668 <UART_SetConfig+0x4e0>)
 800542e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005432:	b29b      	uxth	r3, r3
 8005434:	2200      	movs	r2, #0
 8005436:	603b      	str	r3, [r7, #0]
 8005438:	607a      	str	r2, [r7, #4]
 800543a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800543e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005442:	f7fb fcd5 	bl	8000df0 <__aeabi_uldivmod>
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	4610      	mov	r0, r2
 800544c:	4619      	mov	r1, r3
 800544e:	f04f 0200 	mov.w	r2, #0
 8005452:	f04f 0300 	mov.w	r3, #0
 8005456:	020b      	lsls	r3, r1, #8
 8005458:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800545c:	0202      	lsls	r2, r0, #8
 800545e:	6979      	ldr	r1, [r7, #20]
 8005460:	6849      	ldr	r1, [r1, #4]
 8005462:	0849      	lsrs	r1, r1, #1
 8005464:	2000      	movs	r0, #0
 8005466:	460c      	mov	r4, r1
 8005468:	4605      	mov	r5, r0
 800546a:	eb12 0804 	adds.w	r8, r2, r4
 800546e:	eb43 0905 	adc.w	r9, r3, r5
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	469a      	mov	sl, r3
 800547a:	4693      	mov	fp, r2
 800547c:	4652      	mov	r2, sl
 800547e:	465b      	mov	r3, fp
 8005480:	4640      	mov	r0, r8
 8005482:	4649      	mov	r1, r9
 8005484:	f7fb fcb4 	bl	8000df0 <__aeabi_uldivmod>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4613      	mov	r3, r2
 800548e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005496:	d308      	bcc.n	80054aa <UART_SetConfig+0x322>
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800549e:	d204      	bcs.n	80054aa <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6a3a      	ldr	r2, [r7, #32]
 80054a6:	60da      	str	r2, [r3, #12]
 80054a8:	e0c8      	b.n	800563c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80054b0:	e0c4      	b.n	800563c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054ba:	d167      	bne.n	800558c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80054bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d828      	bhi.n	8005516 <UART_SetConfig+0x38e>
 80054c4:	a201      	add	r2, pc, #4	@ (adr r2, 80054cc <UART_SetConfig+0x344>)
 80054c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ca:	bf00      	nop
 80054cc:	080054f1 	.word	0x080054f1
 80054d0:	080054f9 	.word	0x080054f9
 80054d4:	08005501 	.word	0x08005501
 80054d8:	08005517 	.word	0x08005517
 80054dc:	08005507 	.word	0x08005507
 80054e0:	08005517 	.word	0x08005517
 80054e4:	08005517 	.word	0x08005517
 80054e8:	08005517 	.word	0x08005517
 80054ec:	0800550f 	.word	0x0800550f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054f0:	f7fd ffe0 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 80054f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054f6:	e014      	b.n	8005522 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054f8:	f7fd ffee 	bl	80034d8 <HAL_RCC_GetPCLK2Freq>
 80054fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054fe:	e010      	b.n	8005522 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005500:	4b5a      	ldr	r3, [pc, #360]	@ (800566c <UART_SetConfig+0x4e4>)
 8005502:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005504:	e00d      	b.n	8005522 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005506:	f7fd ff21 	bl	800334c <HAL_RCC_GetSysClockFreq>
 800550a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800550c:	e009      	b.n	8005522 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800550e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005512:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005514:	e005      	b.n	8005522 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005516:	2300      	movs	r3, #0
 8005518:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005520:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 8089 	beq.w	800563c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552e:	4a4e      	ldr	r2, [pc, #312]	@ (8005668 <UART_SetConfig+0x4e0>)
 8005530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005534:	461a      	mov	r2, r3
 8005536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005538:	fbb3 f3f2 	udiv	r3, r3, r2
 800553c:	005a      	lsls	r2, r3, #1
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	085b      	lsrs	r3, r3, #1
 8005544:	441a      	add	r2, r3
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	fbb2 f3f3 	udiv	r3, r2, r3
 800554e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	2b0f      	cmp	r3, #15
 8005554:	d916      	bls.n	8005584 <UART_SetConfig+0x3fc>
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800555c:	d212      	bcs.n	8005584 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	b29b      	uxth	r3, r3
 8005562:	f023 030f 	bic.w	r3, r3, #15
 8005566:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	085b      	lsrs	r3, r3, #1
 800556c:	b29b      	uxth	r3, r3
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	b29a      	uxth	r2, r3
 8005574:	8bfb      	ldrh	r3, [r7, #30]
 8005576:	4313      	orrs	r3, r2
 8005578:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	8bfa      	ldrh	r2, [r7, #30]
 8005580:	60da      	str	r2, [r3, #12]
 8005582:	e05b      	b.n	800563c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800558a:	e057      	b.n	800563c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800558c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005590:	2b08      	cmp	r3, #8
 8005592:	d828      	bhi.n	80055e6 <UART_SetConfig+0x45e>
 8005594:	a201      	add	r2, pc, #4	@ (adr r2, 800559c <UART_SetConfig+0x414>)
 8005596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559a:	bf00      	nop
 800559c:	080055c1 	.word	0x080055c1
 80055a0:	080055c9 	.word	0x080055c9
 80055a4:	080055d1 	.word	0x080055d1
 80055a8:	080055e7 	.word	0x080055e7
 80055ac:	080055d7 	.word	0x080055d7
 80055b0:	080055e7 	.word	0x080055e7
 80055b4:	080055e7 	.word	0x080055e7
 80055b8:	080055e7 	.word	0x080055e7
 80055bc:	080055df 	.word	0x080055df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055c0:	f7fd ff78 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 80055c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055c6:	e014      	b.n	80055f2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055c8:	f7fd ff86 	bl	80034d8 <HAL_RCC_GetPCLK2Freq>
 80055cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055ce:	e010      	b.n	80055f2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055d0:	4b26      	ldr	r3, [pc, #152]	@ (800566c <UART_SetConfig+0x4e4>)
 80055d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055d4:	e00d      	b.n	80055f2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055d6:	f7fd feb9 	bl	800334c <HAL_RCC_GetSysClockFreq>
 80055da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055dc:	e009      	b.n	80055f2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055e4:	e005      	b.n	80055f2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80055f0:	bf00      	nop
    }

    if (pclk != 0U)
 80055f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d021      	beq.n	800563c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fc:	4a1a      	ldr	r2, [pc, #104]	@ (8005668 <UART_SetConfig+0x4e0>)
 80055fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005602:	461a      	mov	r2, r3
 8005604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005606:	fbb3 f2f2 	udiv	r2, r3, r2
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	085b      	lsrs	r3, r3, #1
 8005610:	441a      	add	r2, r3
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	fbb2 f3f3 	udiv	r3, r2, r3
 800561a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	2b0f      	cmp	r3, #15
 8005620:	d909      	bls.n	8005636 <UART_SetConfig+0x4ae>
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005628:	d205      	bcs.n	8005636 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	b29a      	uxth	r2, r3
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60da      	str	r2, [r3, #12]
 8005634:	e002      	b.n	800563c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	2201      	movs	r2, #1
 8005640:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2201      	movs	r2, #1
 8005648:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	2200      	movs	r2, #0
 8005650:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2200      	movs	r2, #0
 8005656:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005658:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800565c:	4618      	mov	r0, r3
 800565e:	3730      	adds	r7, #48	@ 0x30
 8005660:	46bd      	mov	sp, r7
 8005662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005666:	bf00      	nop
 8005668:	08009c98 	.word	0x08009c98
 800566c:	00f42400 	.word	0x00f42400

08005670 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567c:	f003 0308 	and.w	r3, r3, #8
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00a      	beq.n	800569a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00a      	beq.n	80056bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00a      	beq.n	80056de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e2:	f003 0304 	and.w	r3, r3, #4
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00a      	beq.n	8005700 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005704:	f003 0310 	and.w	r3, r3, #16
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00a      	beq.n	8005722 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005726:	f003 0320 	and.w	r3, r3, #32
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800574c:	2b00      	cmp	r3, #0
 800574e:	d01a      	beq.n	8005786 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800576a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800576e:	d10a      	bne.n	8005786 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800578a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00a      	beq.n	80057a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	605a      	str	r2, [r3, #4]
  }
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bc80      	pop	{r7}
 80057b0:	4770      	bx	lr

080057b2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b086      	sub	sp, #24
 80057b6:	af02      	add	r7, sp, #8
 80057b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057c2:	f7fc fb05 	bl	8001dd0 <HAL_GetTick>
 80057c6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0308 	and.w	r3, r3, #8
 80057d2:	2b08      	cmp	r3, #8
 80057d4:	d10e      	bne.n	80057f4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f832 	bl	800584e <UART_WaitOnFlagUntilTimeout>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e028      	b.n	8005846 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d10e      	bne.n	8005820 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005802:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f81c 	bl	800584e <UART_WaitOnFlagUntilTimeout>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d001      	beq.n	8005820 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e012      	b.n	8005846 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2220      	movs	r2, #32
 8005824:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2220      	movs	r2, #32
 800582c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b09c      	sub	sp, #112	@ 0x70
 8005852:	af00      	add	r7, sp, #0
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	603b      	str	r3, [r7, #0]
 800585a:	4613      	mov	r3, r2
 800585c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800585e:	e0af      	b.n	80059c0 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005860:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005862:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005866:	f000 80ab 	beq.w	80059c0 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800586a:	f7fc fab1 	bl	8001dd0 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005876:	429a      	cmp	r2, r3
 8005878:	d302      	bcc.n	8005880 <UART_WaitOnFlagUntilTimeout+0x32>
 800587a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800587c:	2b00      	cmp	r3, #0
 800587e:	d140      	bne.n	8005902 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005886:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005888:	e853 3f00 	ldrex	r3, [r3]
 800588c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800588e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005890:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005894:	667b      	str	r3, [r7, #100]	@ 0x64
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800589e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058a0:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80058a4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80058ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e6      	bne.n	8005880 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3308      	adds	r3, #8
 80058b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058bc:	e853 3f00 	ldrex	r3, [r3]
 80058c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c4:	f023 0301 	bic.w	r3, r3, #1
 80058c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3308      	adds	r3, #8
 80058d0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80058d2:	64ba      	str	r2, [r7, #72]	@ 0x48
 80058d4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80058d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058da:	e841 2300 	strex	r3, r2, [r1]
 80058de:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80058e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1e5      	bne.n	80058b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2220      	movs	r2, #32
 80058ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e06f      	b.n	80059e2 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	d057      	beq.n	80059c0 <UART_WaitOnFlagUntilTimeout+0x172>
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b80      	cmp	r3, #128	@ 0x80
 8005914:	d054      	beq.n	80059c0 <UART_WaitOnFlagUntilTimeout+0x172>
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	2b40      	cmp	r3, #64	@ 0x40
 800591a:	d051      	beq.n	80059c0 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005926:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800592a:	d149      	bne.n	80059c0 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005934:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593e:	e853 3f00 	ldrex	r3, [r3]
 8005942:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005946:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800594a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	461a      	mov	r2, r3
 8005952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005954:	637b      	str	r3, [r7, #52]	@ 0x34
 8005956:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005958:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800595a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800595c:	e841 2300 	strex	r3, r2, [r1]
 8005960:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1e6      	bne.n	8005936 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3308      	adds	r3, #8
 800596e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	e853 3f00 	ldrex	r3, [r3]
 8005976:	613b      	str	r3, [r7, #16]
   return(result);
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f023 0301 	bic.w	r3, r3, #1
 800597e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3308      	adds	r3, #8
 8005986:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005988:	623a      	str	r2, [r7, #32]
 800598a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598c:	69f9      	ldr	r1, [r7, #28]
 800598e:	6a3a      	ldr	r2, [r7, #32]
 8005990:	e841 2300 	strex	r3, r2, [r1]
 8005994:	61bb      	str	r3, [r7, #24]
   return(result);
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1e5      	bne.n	8005968 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2220      	movs	r2, #32
 80059a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2220      	movs	r2, #32
 80059b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e010      	b.n	80059e2 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	69da      	ldr	r2, [r3, #28]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	4013      	ands	r3, r2
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	bf0c      	ite	eq
 80059d0:	2301      	moveq	r3, #1
 80059d2:	2300      	movne	r3, #0
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	461a      	mov	r2, r3
 80059d8:	79fb      	ldrb	r3, [r7, #7]
 80059da:	429a      	cmp	r2, r3
 80059dc:	f43f af40 	beq.w	8005860 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3770      	adds	r7, #112	@ 0x70
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b095      	sub	sp, #84	@ 0x54
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059fa:	e853 3f00 	ldrex	r3, [r3]
 80059fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a10:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a18:	e841 2300 	strex	r3, r2, [r1]
 8005a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1e6      	bne.n	80059f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3308      	adds	r3, #8
 8005a2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	e853 3f00 	ldrex	r3, [r3]
 8005a32:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a3a:	f023 0301 	bic.w	r3, r3, #1
 8005a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3308      	adds	r3, #8
 8005a46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a50:	e841 2300 	strex	r3, r2, [r1]
 8005a54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1e3      	bne.n	8005a24 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d118      	bne.n	8005a96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	e853 3f00 	ldrex	r3, [r3]
 8005a70:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	f023 0310 	bic.w	r3, r3, #16
 8005a78:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a82:	61bb      	str	r3, [r7, #24]
 8005a84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a86:	6979      	ldr	r1, [r7, #20]
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	e841 2300 	strex	r3, r2, [r1]
 8005a8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1e6      	bne.n	8005a64 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005aaa:	bf00      	nop
 8005aac:	3754      	adds	r7, #84	@ 0x54
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bc80      	pop	{r7}
 8005ab2:	4770      	bx	lr

08005ab4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f7ff fb43 	bl	800515e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ad8:	bf00      	nop
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b088      	sub	sp, #32
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	e853 3f00 	ldrex	r3, [r3]
 8005af4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005afc:	61fb      	str	r3, [r7, #28]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	461a      	mov	r2, r3
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	61bb      	str	r3, [r7, #24]
 8005b08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0a:	6979      	ldr	r1, [r7, #20]
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	e841 2300 	strex	r3, r2, [r1]
 8005b12:	613b      	str	r3, [r7, #16]
   return(result);
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1e6      	bne.n	8005ae8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7ff fb0f 	bl	800514c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b2e:	bf00      	nop
 8005b30:	3720      	adds	r7, #32
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b083      	sub	sp, #12
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b3e:	bf00      	nop
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bc80      	pop	{r7}
 8005b46:	4770      	bx	lr

08005b48 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bc80      	pop	{r7}
 8005b58:	4770      	bx	lr

08005b5a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bc80      	pop	{r7}
 8005b6a:	4770      	bx	lr

08005b6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d101      	bne.n	8005b82 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b7e:	2302      	movs	r3, #2
 8005b80:	e027      	b.n	8005bd2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2224      	movs	r2, #36	@ 0x24
 8005b8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 0201 	bic.w	r2, r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005bb0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bc80      	pop	{r7}
 8005bda:	4770      	bx	lr

08005bdc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e02d      	b.n	8005c50 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2224      	movs	r2, #36	@ 0x24
 8005c00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f022 0201 	bic.w	r2, r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f84f 	bl	8005cd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2220      	movs	r2, #32
 8005c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d101      	bne.n	8005c70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	e02d      	b.n	8005ccc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2224      	movs	r2, #36	@ 0x24
 8005c7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0201 	bic.w	r2, r2, #1
 8005c96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f811 	bl	8005cd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d108      	bne.n	8005cf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005cf4:	e031      	b.n	8005d5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005cf6:	2308      	movs	r3, #8
 8005cf8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005cfa:	2308      	movs	r3, #8
 8005cfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	0e5b      	lsrs	r3, r3, #25
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	0f5b      	lsrs	r3, r3, #29
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	f003 0307 	and.w	r3, r3, #7
 8005d1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d1e:	7bbb      	ldrb	r3, [r7, #14]
 8005d20:	7b3a      	ldrb	r2, [r7, #12]
 8005d22:	4910      	ldr	r1, [pc, #64]	@ (8005d64 <UARTEx_SetNbDataToProcess+0x90>)
 8005d24:	5c8a      	ldrb	r2, [r1, r2]
 8005d26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d2a:	7b3a      	ldrb	r2, [r7, #12]
 8005d2c:	490e      	ldr	r1, [pc, #56]	@ (8005d68 <UARTEx_SetNbDataToProcess+0x94>)
 8005d2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d30:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
 8005d3e:	7b7a      	ldrb	r2, [r7, #13]
 8005d40:	4908      	ldr	r1, [pc, #32]	@ (8005d64 <UARTEx_SetNbDataToProcess+0x90>)
 8005d42:	5c8a      	ldrb	r2, [r1, r2]
 8005d44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d48:	7b7a      	ldrb	r2, [r7, #13]
 8005d4a:	4907      	ldr	r1, [pc, #28]	@ (8005d68 <UARTEx_SetNbDataToProcess+0x94>)
 8005d4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005d5a:	bf00      	nop
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bc80      	pop	{r7}
 8005d62:	4770      	bx	lr
 8005d64:	08009cb0 	.word	0x08009cb0
 8005d68:	08009cb8 	.word	0x08009cb8

08005d6c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b08b      	sub	sp, #44	@ 0x2c
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
#else
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	fa93 f3a3 	rbit	r3, r3
 8005d86:	613b      	str	r3, [r7, #16]
  return result;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8005d92:	2320      	movs	r3, #32
 8005d94:	e003      	b.n	8005d9e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	fab3 f383 	clz	r3, r3
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	2103      	movs	r1, #3
 8005da2:	fa01 f303 	lsl.w	r3, r1, r3
 8005da6:	43db      	mvns	r3, r3
 8005da8:	401a      	ands	r2, r3
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	fa93 f3a3 	rbit	r3, r3
 8005db4:	61fb      	str	r3, [r7, #28]
  return result;
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005dc0:	2320      	movs	r3, #32
 8005dc2:	e003      	b.n	8005dcc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	fab3 f383 	clz	r3, r3
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	005b      	lsls	r3, r3, #1
 8005dce:	6879      	ldr	r1, [r7, #4]
 8005dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	601a      	str	r2, [r3, #0]
#endif /* CORE_CM0PLUS */
}
 8005dda:	bf00      	nop
 8005ddc:	372c      	adds	r7, #44	@ 0x2c
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bc80      	pop	{r7}
 8005de2:	4770      	bx	lr

08005de4 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	43db      	mvns	r3, r3
 8005df8:	401a      	ands	r2, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	6879      	ldr	r1, [r7, #4]
 8005dfe:	fb01 f303 	mul.w	r3, r1, r3
 8005e02:	431a      	orrs	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	605a      	str	r2, [r3, #4]
}
 8005e08:	bf00      	nop
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bc80      	pop	{r7}
 8005e10:	4770      	bx	lr

08005e12 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b08b      	sub	sp, #44	@ 0x2c
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	60f8      	str	r0, [r7, #12]
 8005e1a:	60b9      	str	r1, [r7, #8]
 8005e1c:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
#else
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	689a      	ldr	r2, [r3, #8]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	fa93 f3a3 	rbit	r3, r3
 8005e2c:	613b      	str	r3, [r7, #16]
  return result;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005e38:	2320      	movs	r3, #32
 8005e3a:	e003      	b.n	8005e44 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	fab3 f383 	clz	r3, r3
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	2103      	movs	r1, #3
 8005e48:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4c:	43db      	mvns	r3, r3
 8005e4e:	401a      	ands	r2, r3
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	fa93 f3a3 	rbit	r3, r3
 8005e5a:	61fb      	str	r3, [r7, #28]
  return result;
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005e66:	2320      	movs	r3, #32
 8005e68:	e003      	b.n	8005e72 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6c:	fab3 f383 	clz	r3, r3
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	fa01 f303 	lsl.w	r3, r1, r3
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
#endif /* CORE_CM0PLUS */
}
 8005e80:	bf00      	nop
 8005e82:	372c      	adds	r7, #44	@ 0x2c
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bc80      	pop	{r7}
 8005e88:	4770      	bx	lr

08005e8a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b08b      	sub	sp, #44	@ 0x2c
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
#else
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	fa93 f3a3 	rbit	r3, r3
 8005ea4:	613b      	str	r3, [r7, #16]
  return result;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005eb0:	2320      	movs	r3, #32
 8005eb2:	e003      	b.n	8005ebc <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	fab3 f383 	clz	r3, r3
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	2103      	movs	r1, #3
 8005ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec4:	43db      	mvns	r3, r3
 8005ec6:	401a      	ands	r2, r3
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	fa93 f3a3 	rbit	r3, r3
 8005ed2:	61fb      	str	r3, [r7, #28]
  return result;
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005ede:	2320      	movs	r3, #32
 8005ee0:	e003      	b.n	8005eea <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee4:	fab3 f383 	clz	r3, r3
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	60da      	str	r2, [r3, #12]
#endif /* CORE_CM0PLUS */
}
 8005ef8:	bf00      	nop
 8005efa:	372c      	adds	r7, #44	@ 0x2c
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bc80      	pop	{r7}
 8005f00:	4770      	bx	lr

08005f02 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b08b      	sub	sp, #44	@ 0x2c
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	60f8      	str	r0, [r7, #12]
 8005f0a:	60b9      	str	r1, [r7, #8]
 8005f0c:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
#else
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a1a      	ldr	r2, [r3, #32]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	fa93 f3a3 	rbit	r3, r3
 8005f1c:	613b      	str	r3, [r7, #16]
  return result;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005f28:	2320      	movs	r3, #32
 8005f2a:	e003      	b.n	8005f34 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	fab3 f383 	clz	r3, r3
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	210f      	movs	r1, #15
 8005f38:	fa01 f303 	lsl.w	r3, r1, r3
 8005f3c:	43db      	mvns	r3, r3
 8005f3e:	401a      	ands	r2, r3
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	fa93 f3a3 	rbit	r3, r3
 8005f4a:	61fb      	str	r3, [r7, #28]
  return result;
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005f56:	2320      	movs	r3, #32
 8005f58:	e003      	b.n	8005f62 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5c:	fab3 f383 	clz	r3, r3
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	6879      	ldr	r1, [r7, #4]
 8005f66:	fa01 f303 	lsl.w	r3, r1, r3
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
#endif /* CORE_CM0PLUS */
}
 8005f70:	bf00      	nop
 8005f72:	372c      	adds	r7, #44	@ 0x2c
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bc80      	pop	{r7}
 8005f78:	4770      	bx	lr

08005f7a <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b08b      	sub	sp, #44	@ 0x2c
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	60f8      	str	r0, [r7, #12]
 8005f82:	60b9      	str	r1, [r7, #8]
 8005f84:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
#else
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	0a1b      	lsrs	r3, r3, #8
 8005f8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	fa93 f3a3 	rbit	r3, r3
 8005f96:	613b      	str	r3, [r7, #16]
  return result;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005fa2:	2320      	movs	r3, #32
 8005fa4:	e003      	b.n	8005fae <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	fab3 f383 	clz	r3, r3
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	210f      	movs	r1, #15
 8005fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb6:	43db      	mvns	r3, r3
 8005fb8:	401a      	ands	r2, r3
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	0a1b      	lsrs	r3, r3, #8
 8005fbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	fa93 f3a3 	rbit	r3, r3
 8005fc6:	61fb      	str	r3, [r7, #28]
  return result;
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005fd2:	2320      	movs	r3, #32
 8005fd4:	e003      	b.n	8005fde <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd8:	fab3 f383 	clz	r3, r3
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
#endif /* CORE_CM0PLUS */
}
 8005fec:	bf00      	nop
 8005fee:	372c      	adds	r7, #44	@ 0x2c
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bc80      	pop	{r7}
 8005ff4:	4770      	bx	lr

08005ff6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b088      	sub	sp, #32
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	6039      	str	r1, [r7, #0]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
#if defined(CORE_CM0PLUS)
  pinpos = 0;
#else
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	fa93 f3a3 	rbit	r3, r3
 800600c:	60fb      	str	r3, [r7, #12]
  return result;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <LL_GPIO_Init+0x26>
    return 32U;
 8006018:	2320      	movs	r3, #32
 800601a:	e003      	b.n	8006024 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	fab3 f383 	clz	r3, r3
 8006022:	b2db      	uxtb	r3, r3
 8006024:	61fb      	str	r3, [r7, #28]
#endif /* CORE_CM0PLUS */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006026:	e047      	b.n	80060b8 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	2101      	movs	r1, #1
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	fa01 f303 	lsl.w	r3, r1, r3
 8006034:	4013      	ands	r3, r2
 8006036:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d039      	beq.n	80060b2 <LL_GPIO_Init+0xbc>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d003      	beq.n	800604e <LL_GPIO_Init+0x58>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b02      	cmp	r3, #2
 800604c:	d10d      	bne.n	800606a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	461a      	mov	r2, r3
 8006054:	69b9      	ldr	r1, [r7, #24]
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff fedb 	bl	8005e12 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	461a      	mov	r2, r3
 8006062:	69b9      	ldr	r1, [r7, #24]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff febd 	bl	8005de4 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	461a      	mov	r2, r3
 8006070:	69b9      	ldr	r1, [r7, #24]
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7ff ff09 	bl	8005e8a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d111      	bne.n	80060a4 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	2bff      	cmp	r3, #255	@ 0xff
 8006084:	d807      	bhi.n	8006096 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	461a      	mov	r2, r3
 800608c:	69b9      	ldr	r1, [r7, #24]
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff ff37 	bl	8005f02 <LL_GPIO_SetAFPin_0_7>
 8006094:	e006      	b.n	80060a4 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	461a      	mov	r2, r3
 800609c:	69b9      	ldr	r1, [r7, #24]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7ff ff6b 	bl	8005f7a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	461a      	mov	r2, r3
 80060aa:	69b9      	ldr	r1, [r7, #24]
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7ff fe5d 	bl	8005d6c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	3301      	adds	r3, #1
 80060b6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	fa22 f303 	lsr.w	r3, r2, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1b0      	bne.n	8006028 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80060c6:	2301      	movs	r3, #1
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3720      	adds	r7, #32
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <LL_I2C_Enable>:
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f043 0201 	orr.w	r2, r3, #1
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	601a      	str	r2, [r3, #0]
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bc80      	pop	{r7}
 80060ec:	4770      	bx	lr

080060ee <LL_I2C_Disable>:
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f023 0201 	bic.w	r2, r3, #1
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	601a      	str	r2, [r3, #0]
}
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	bc80      	pop	{r7}
 800610a:	4770      	bx	lr

0800610c <LL_I2C_ConfigFilters>:
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	0219      	lsls	r1, r3, #8
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	430b      	orrs	r3, r1
 8006128:	431a      	orrs	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	601a      	str	r2, [r3, #0]
}
 800612e:	bf00      	nop
 8006130:	3714      	adds	r7, #20
 8006132:	46bd      	mov	sp, r7
 8006134:	bc80      	pop	{r7}
 8006136:	4770      	bx	lr

08006138 <LL_I2C_SetOwnAddress1>:
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800614c:	f023 0307 	bic.w	r3, r3, #7
 8006150:	68b9      	ldr	r1, [r7, #8]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	430a      	orrs	r2, r1
 8006156:	431a      	orrs	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	609a      	str	r2, [r3, #8]
}
 800615c:	bf00      	nop
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	bc80      	pop	{r7}
 8006164:	4770      	bx	lr

08006166 <LL_I2C_EnableOwnAddress1>:
{
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	609a      	str	r2, [r3, #8]
}
 800617a:	bf00      	nop
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	bc80      	pop	{r7}
 8006182:	4770      	bx	lr

08006184 <LL_I2C_DisableOwnAddress1>:
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	609a      	str	r2, [r3, #8]
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	bc80      	pop	{r7}
 80061a0:	4770      	bx	lr

080061a2 <LL_I2C_SetTiming>:
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	611a      	str	r2, [r3, #16]
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bc80      	pop	{r7}
 80061ba:	4770      	bx	lr

080061bc <LL_I2C_SetMode>:
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	431a      	orrs	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	601a      	str	r2, [r3, #0]
}
 80061d6:	bf00      	nop
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc80      	pop	{r7}
 80061de:	4770      	bx	lr

080061e0 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	431a      	orrs	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	605a      	str	r2, [r3, #4]
}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	bc80      	pop	{r7}
 8006202:	4770      	bx	lr

08006204 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7ff ff6d 	bl	80060ee <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	6899      	ldr	r1, [r3, #8]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	461a      	mov	r2, r3
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff ff74 	bl	800610c <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	4619      	mov	r1, r3
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7ff ffb9 	bl	80061a2 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7ff ff4d 	bl	80060d0 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7ff ffa4 	bl	8006184 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	6919      	ldr	r1, [r3, #16]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	461a      	mov	r2, r3
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7ff ff76 	bl	8006138 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d002      	beq.n	800625a <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7ff ff86 	bl	8006166 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7ff ffab 	bl	80061bc <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	4619      	mov	r1, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff ffb7 	bl	80061e0 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8006272:	2301      	movs	r3, #1
}
 8006274:	4618      	mov	r0, r3
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8006280:	4907      	ldr	r1, [pc, #28]	@ (80062a0 <MX_FATFS_Init+0x24>)
 8006282:	4808      	ldr	r0, [pc, #32]	@ (80062a4 <MX_FATFS_Init+0x28>)
 8006284:	f002 fede 	bl	8009044 <FATFS_LinkDriver>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d002      	beq.n	8006294 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800628e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006292:	e003      	b.n	800629c <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8006294:	4b04      	ldr	r3, [pc, #16]	@ (80062a8 <MX_FATFS_Init+0x2c>)
 8006296:	2201      	movs	r2, #1
 8006298:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800629a:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800629c:	4618      	mov	r0, r3
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	200002bc 	.word	0x200002bc
 80062a4:	2000000c 	.word	0x2000000c
 80062a8:	200002c0 	.word	0x200002c0

080062ac <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80062ac:	b480      	push	{r7}
 80062ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80062b0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bc80      	pop	{r7}
 80062b8:	4770      	bx	lr

080062ba <USER_initialize>:
 * @brief  Initializes a Drive
 * @param  pdrv: Physical drive number (0..)
 * @retval DSTATUS: Operation status
 */
DSTATUS USER_initialize(BYTE pdrv /* Physical drive nmuber to identify the drive */
) {
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b082      	sub	sp, #8
 80062be:	af00      	add	r7, sp, #0
 80062c0:	4603      	mov	r3, r0
 80062c2:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80062c4:	79fb      	ldrb	r3, [r7, #7]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 f9d0 	bl	800666c <USER_SPI_initialize>
 80062cc:	4603      	mov	r3, r0
	/* USER CODE END INIT */
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <USER_status>:
 * @brief  Gets Disk Status
 * @param  pdrv: Physical drive number (0..)
 * @retval DSTATUS: Operation status
 */
DSTATUS USER_status(BYTE pdrv /* Physical drive number to identify the drive */
) {
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b082      	sub	sp, #8
 80062da:	af00      	add	r7, sp, #0
 80062dc:	4603      	mov	r3, r0
 80062de:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80062e0:	79fb      	ldrb	r3, [r7, #7]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 fab8 	bl	8006858 <USER_SPI_status>
 80062e8:	4603      	mov	r3, r0
	/* USER CODE END STATUS */
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <USER_read>:
 */
DRESULT USER_read(BYTE pdrv, /* Physical drive nmuber to identify the drive */
BYTE *buff, /* Data buffer to store read data */
DWORD sector, /* Sector address in LBA */
UINT count /* Number of sectors to read */
) {
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b084      	sub	sp, #16
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	603b      	str	r3, [r7, #0]
 80062fe:	4603      	mov	r3, r0
 8006300:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8006302:	7bf8      	ldrb	r0, [r7, #15]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	68b9      	ldr	r1, [r7, #8]
 800630a:	f000 fab9 	bl	8006880 <USER_SPI_read>
 800630e:	4603      	mov	r3, r0
	/* USER CODE END READ */
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <USER_write>:
#if _USE_WRITE == 1
DRESULT USER_write(BYTE pdrv, /* Physical drive nmuber to identify the drive */
const BYTE *buff, /* Data to be written */
DWORD sector, /* Sector address in LBA */
UINT count /* Number of sectors to write */
) {
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	607a      	str	r2, [r7, #4]
 8006322:	603b      	str	r3, [r7, #0]
 8006324:	4603      	mov	r3, r0
 8006326:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8006328:	7bf8      	ldrb	r0, [r7, #15]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	68b9      	ldr	r1, [r7, #8]
 8006330:	f000 fb0c 	bl	800694c <USER_SPI_write>
 8006334:	4603      	mov	r3, r0
	/* USER CODE END WRITE */
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <USER_ioctl>:
 */
#if _USE_IOCTL == 1
DRESULT USER_ioctl(BYTE pdrv, /* Physical drive nmuber (0..) */
BYTE cmd, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 800633e:	b580      	push	{r7, lr}
 8006340:	b082      	sub	sp, #8
 8006342:	af00      	add	r7, sp, #0
 8006344:	4603      	mov	r3, r0
 8006346:	603a      	str	r2, [r7, #0]
 8006348:	71fb      	strb	r3, [r7, #7]
 800634a:	460b      	mov	r3, r1
 800634c:	71bb      	strb	r3, [r7, #6]
	/* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800634e:	79b9      	ldrb	r1, [r7, #6]
 8006350:	79fb      	ldrb	r3, [r7, #7]
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	4618      	mov	r0, r3
 8006356:	f000 fb75 	bl	8006a44 <USER_SPI_ioctl>
 800635a:	4603      	mov	r3, r0
	/* USER CODE END IOCTL */
}
 800635c:	4618      	mov	r0, r3
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <SPI_Timer_On>:
static BYTE CardType; /* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
	spiTimerTickStart = HAL_GetTick();
 800636c:	f7fb fd30 	bl	8001dd0 <HAL_GetTick>
 8006370:	4603      	mov	r3, r0
 8006372:	4a04      	ldr	r2, [pc, #16]	@ (8006384 <SPI_Timer_On+0x20>)
 8006374:	6013      	str	r3, [r2, #0]
	spiTimerTickDelay = waitTicks;
 8006376:	4a04      	ldr	r2, [pc, #16]	@ (8006388 <SPI_Timer_On+0x24>)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6013      	str	r3, [r2, #0]
}
 800637c:	bf00      	nop
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	200002c4 	.word	0x200002c4
 8006388:	200002c8 	.word	0x200002c8

0800638c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0
	return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006390:	f7fb fd1e 	bl	8001dd0 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	4b06      	ldr	r3, [pc, #24]	@ (80063b0 <SPI_Timer_Status+0x24>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	1ad2      	subs	r2, r2, r3
 800639c:	4b05      	ldr	r3, [pc, #20]	@ (80063b4 <SPI_Timer_Status+0x28>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	bf34      	ite	cc
 80063a4:	2301      	movcc	r3, #1
 80063a6:	2300      	movcs	r3, #0
 80063a8:	b2db      	uxtb	r3, r3
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	200002c4 	.word	0x200002c4
 80063b4:	200002c8 	.word	0x200002c8

080063b8 <xchg_spi>:
/* SPI controls (Platform dependent)                                     */
/*-----------------------------------------------------------------------*/

/* Exchange a byte */
static BYTE xchg_spi(BYTE dat /* Data to send */
) {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af02      	add	r7, sp, #8
 80063be:	4603      	mov	r3, r0
 80063c0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
	HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80063c2:	f107 020f 	add.w	r2, r7, #15
 80063c6:	1df9      	adds	r1, r7, #7
 80063c8:	2332      	movs	r3, #50	@ 0x32
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	2301      	movs	r3, #1
 80063ce:	4804      	ldr	r0, [pc, #16]	@ (80063e0 <xchg_spi+0x28>)
 80063d0:	f7fd fdbf 	bl	8003f52 <HAL_SPI_TransmitReceive>
	return rxDat;
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	20000124 	.word	0x20000124

080063e4 <rcvr_spi_multi>:

/* Receive multiple byte */
static
void rcvr_spi_multi(BYTE *buff, /* Pointer to data buffer */
UINT btr /* Number of bytes to receive (even number) */
) {
 80063e4:	b590      	push	{r4, r7, lr}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
	for (UINT i = 0; i < btr; i++) {
 80063ee:	2300      	movs	r3, #0
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	e00a      	b.n	800640a <rcvr_spi_multi+0x26>
		*(buff + i) = xchg_spi(0xFF);
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	18d4      	adds	r4, r2, r3
 80063fa:	20ff      	movs	r0, #255	@ 0xff
 80063fc:	f7ff ffdc 	bl	80063b8 <xchg_spi>
 8006400:	4603      	mov	r3, r0
 8006402:	7023      	strb	r3, [r4, #0]
	for (UINT i = 0; i < btr; i++) {
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3301      	adds	r3, #1
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d3f0      	bcc.n	80063f4 <rcvr_spi_multi+0x10>
	}
}
 8006412:	bf00      	nop
 8006414:	bf00      	nop
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	bd90      	pop	{r4, r7, pc}

0800641c <xmit_spi_multi>:
#if _USE_WRITE
/* Send multiple byte */
static
void xmit_spi_multi(const BYTE *buff, /* Pointer to the data */
UINT btx /* Number of bytes to send (even number) */
) {
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, (uint8_t*) buff, btx, HAL_MAX_DELAY);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	b29a      	uxth	r2, r3
 800642a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800642e:	6879      	ldr	r1, [r7, #4]
 8006430:	4803      	ldr	r0, [pc, #12]	@ (8006440 <xmit_spi_multi+0x24>)
 8006432:	f7fd fbf7 	bl	8003c24 <HAL_SPI_Transmit>
}
 8006436:	bf00      	nop
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	20000124 	.word	0x20000124

08006444 <wait_ready>:
/*-----------------------------------------------------------------------*/

static
int wait_ready( /* 1:Ready, 0:Timeout */
UINT wt /* Timeout [ms] */
) {
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800644c:	f7fb fcc0 	bl	8001dd0 <HAL_GetTick>
 8006450:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t) wt;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006456:	20ff      	movs	r0, #255	@ 0xff
 8006458:	f7ff ffae 	bl	80063b8 <xchg_spi>
 800645c:	4603      	mov	r3, r0
 800645e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF
			&& ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay)); /* Wait for card goes ready or timeout */
 8006460:	7bfb      	ldrb	r3, [r7, #15]
 8006462:	2bff      	cmp	r3, #255	@ 0xff
 8006464:	d007      	beq.n	8006476 <wait_ready+0x32>
 8006466:	f7fb fcb3 	bl	8001dd0 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	429a      	cmp	r2, r3
 8006474:	d8ef      	bhi.n	8006456 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006476:	7bfb      	ldrb	r3, [r7, #15]
 8006478:	2bff      	cmp	r3, #255	@ 0xff
 800647a:	bf0c      	ite	eq
 800647c:	2301      	moveq	r3, #1
 800647e:	2300      	movne	r3, #0
 8006480:	b2db      	uxtb	r3, r3
}
 8006482:	4618      	mov	r0, r3
 8006484:	3718      	adds	r7, #24
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <despiselect>:
/*-----------------------------------------------------------------------*/
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect(void) {
 800648a:	b580      	push	{r7, lr}
 800648c:	af00      	add	r7, sp, #0
	CS_HIGH(); /* Set CS# high */
 800648e:	2201      	movs	r2, #1
 8006490:	2110      	movs	r1, #16
 8006492:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006496:	f7fb fff1 	bl	800247c <HAL_GPIO_WritePin>
	xchg_spi(0xFF); /* Dummy clock (force DO hi-z for multiple slave SPI) */
 800649a:	20ff      	movs	r0, #255	@ 0xff
 800649c:	f7ff ff8c 	bl	80063b8 <xchg_spi>

}
 80064a0:	bf00      	nop
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect(void) /* 1:OK, 0:Timeout */
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	af00      	add	r7, sp, #0
	CS_LOW(); /* Set CS# low */
 80064a8:	2200      	movs	r2, #0
 80064aa:	2110      	movs	r1, #16
 80064ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80064b0:	f7fb ffe4 	bl	800247c <HAL_GPIO_WritePin>
	xchg_spi(0xFF); /* Dummy clock (force DO enabled) */
 80064b4:	20ff      	movs	r0, #255	@ 0xff
 80064b6:	f7ff ff7f 	bl	80063b8 <xchg_spi>
	if (wait_ready(500))
 80064ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80064be:	f7ff ffc1 	bl	8006444 <wait_ready>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <spiselect+0x28>
		return 1; /* Wait for card ready */
 80064c8:	2301      	movs	r3, #1
 80064ca:	e002      	b.n	80064d2 <spiselect+0x2e>

	despiselect();
 80064cc:	f7ff ffdd 	bl	800648a <despiselect>
	return 0; /* Timeout */
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <rcvr_datablock>:

static
int rcvr_datablock( /* 1:OK, 0:Error */
BYTE *buff, /* Data buffer */
UINT btr /* Data block length (byte) */
) {
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	6039      	str	r1, [r7, #0]
	BYTE token;

	SPI_Timer_On(200);
 80064e0:	20c8      	movs	r0, #200	@ 0xc8
 80064e2:	f7ff ff3f 	bl	8006364 <SPI_Timer_On>
	do { /* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80064e6:	20ff      	movs	r0, #255	@ 0xff
 80064e8:	f7ff ff66 	bl	80063b8 <xchg_spi>
 80064ec:	4603      	mov	r3, r0
 80064ee:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
 80064f2:	2bff      	cmp	r3, #255	@ 0xff
 80064f4:	d104      	bne.n	8006500 <rcvr_datablock+0x2a>
 80064f6:	f7ff ff49 	bl	800638c <SPI_Timer_Status>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1f2      	bne.n	80064e6 <rcvr_datablock+0x10>
	if (token != 0xFE)
 8006500:	7bfb      	ldrb	r3, [r7, #15]
 8006502:	2bfe      	cmp	r3, #254	@ 0xfe
 8006504:	d001      	beq.n	800650a <rcvr_datablock+0x34>
		return 0; /* Function fails if invalid DataStart token or timeout */
 8006506:	2300      	movs	r3, #0
 8006508:	e00a      	b.n	8006520 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr); /* Store trailing data to the buffer */
 800650a:	6839      	ldr	r1, [r7, #0]
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7ff ff69 	bl	80063e4 <rcvr_spi_multi>
	xchg_spi(0xFF);
 8006512:	20ff      	movs	r0, #255	@ 0xff
 8006514:	f7ff ff50 	bl	80063b8 <xchg_spi>
	xchg_spi(0xFF); /* Discard CRC */
 8006518:	20ff      	movs	r0, #255	@ 0xff
 800651a:	f7ff ff4d 	bl	80063b8 <xchg_spi>

	return 1; /* Function succeeded */
 800651e:	2301      	movs	r3, #1
}
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <xmit_datablock>:
#if _USE_WRITE
static
int xmit_datablock( /* 1:OK, 0:Failed */
const BYTE *buff, /* Ponter to 512 byte data to be sent */
BYTE token /* Token */
) {
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	70fb      	strb	r3, [r7, #3]
	BYTE resp;

	if (!wait_ready(500))
 8006534:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006538:	f7ff ff84 	bl	8006444 <wait_ready>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <xmit_datablock+0x1e>
		return 0; /* Wait for card ready */
 8006542:	2300      	movs	r3, #0
 8006544:	e01e      	b.n	8006584 <xmit_datablock+0x5c>

	xchg_spi(token); /* Send token */
 8006546:	78fb      	ldrb	r3, [r7, #3]
 8006548:	4618      	mov	r0, r3
 800654a:	f7ff ff35 	bl	80063b8 <xchg_spi>
	if (token != 0xFD) { /* Send data if token is other than StopTran */
 800654e:	78fb      	ldrb	r3, [r7, #3]
 8006550:	2bfd      	cmp	r3, #253	@ 0xfd
 8006552:	d016      	beq.n	8006582 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512); /* Data */
 8006554:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff ff5f 	bl	800641c <xmit_spi_multi>
		xchg_spi(0xFF);
 800655e:	20ff      	movs	r0, #255	@ 0xff
 8006560:	f7ff ff2a 	bl	80063b8 <xchg_spi>
		xchg_spi(0xFF); /* Dummy CRC */
 8006564:	20ff      	movs	r0, #255	@ 0xff
 8006566:	f7ff ff27 	bl	80063b8 <xchg_spi>

		resp = xchg_spi(0xFF); /* Receive data resp */
 800656a:	20ff      	movs	r0, #255	@ 0xff
 800656c:	f7ff ff24 	bl	80063b8 <xchg_spi>
 8006570:	4603      	mov	r3, r0
 8006572:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05)
 8006574:	7bfb      	ldrb	r3, [r7, #15]
 8006576:	f003 031f 	and.w	r3, r3, #31
 800657a:	2b05      	cmp	r3, #5
 800657c:	d001      	beq.n	8006582 <xmit_datablock+0x5a>
			return 0; /* Function fails if the data packet was not accepted */
 800657e:	2300      	movs	r3, #0
 8006580:	e000      	b.n	8006584 <xmit_datablock+0x5c>
	}
	return 1;
 8006582:	2301      	movs	r3, #1
}
 8006584:	4618      	mov	r0, r3
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <send_cmd>:
/*-----------------------------------------------------------------------*/

static BYTE send_cmd( /* Return value: R1 resp (bit7==1:Failed to send) */
BYTE cmd, /* Command index */
DWORD arg /* Argument */
) {
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	4603      	mov	r3, r0
 8006594:	6039      	str	r1, [r7, #0]
 8006596:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (cmd & 0x80) { /* Send a CMD55 prior to ACMD<n> */
 8006598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800659c:	2b00      	cmp	r3, #0
 800659e:	da0e      	bge.n	80065be <send_cmd+0x32>
		cmd &= 0x7F;
 80065a0:	79fb      	ldrb	r3, [r7, #7]
 80065a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065a6:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80065a8:	2100      	movs	r1, #0
 80065aa:	2037      	movs	r0, #55	@ 0x37
 80065ac:	f7ff ffee 	bl	800658c <send_cmd>
 80065b0:	4603      	mov	r3, r0
 80065b2:	73bb      	strb	r3, [r7, #14]
		if (res > 1)
 80065b4:	7bbb      	ldrb	r3, [r7, #14]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d901      	bls.n	80065be <send_cmd+0x32>
			return res;
 80065ba:	7bbb      	ldrb	r3, [r7, #14]
 80065bc:	e051      	b.n	8006662 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80065be:	79fb      	ldrb	r3, [r7, #7]
 80065c0:	2b0c      	cmp	r3, #12
 80065c2:	d008      	beq.n	80065d6 <send_cmd+0x4a>
		despiselect();
 80065c4:	f7ff ff61 	bl	800648a <despiselect>
		if (!spiselect())
 80065c8:	f7ff ff6c 	bl	80064a4 <spiselect>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <send_cmd+0x4a>
			return 0xFF;
 80065d2:	23ff      	movs	r3, #255	@ 0xff
 80065d4:	e045      	b.n	8006662 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd); /* Start + command index */
 80065d6:	79fb      	ldrb	r3, [r7, #7]
 80065d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff feea 	bl	80063b8 <xchg_spi>
	xchg_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	0e1b      	lsrs	r3, r3, #24
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7ff fee4 	bl	80063b8 <xchg_spi>
	xchg_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	0c1b      	lsrs	r3, r3, #16
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7ff fede 	bl	80063b8 <xchg_spi>
	xchg_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	0a1b      	lsrs	r3, r3, #8
 8006600:	b2db      	uxtb	r3, r3
 8006602:	4618      	mov	r0, r3
 8006604:	f7ff fed8 	bl	80063b8 <xchg_spi>
	xchg_spi((BYTE) arg); /* Argument[7..0] */
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	b2db      	uxtb	r3, r3
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff fed3 	bl	80063b8 <xchg_spi>
	n = 0x01; /* Dummy CRC + Stop */
 8006612:	2301      	movs	r3, #1
 8006614:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8006616:	79fb      	ldrb	r3, [r7, #7]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <send_cmd+0x94>
		n = 0x95; /* Valid CRC for CMD0(0) */
 800661c:	2395      	movs	r3, #149	@ 0x95
 800661e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 8006620:	79fb      	ldrb	r3, [r7, #7]
 8006622:	2b08      	cmp	r3, #8
 8006624:	d101      	bne.n	800662a <send_cmd+0x9e>
		n = 0x87; /* Valid CRC for CMD8(0x1AA) */
 8006626:	2387      	movs	r3, #135	@ 0x87
 8006628:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	4618      	mov	r0, r3
 800662e:	f7ff fec3 	bl	80063b8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12)
 8006632:	79fb      	ldrb	r3, [r7, #7]
 8006634:	2b0c      	cmp	r3, #12
 8006636:	d102      	bne.n	800663e <send_cmd+0xb2>
		xchg_spi(0xFF); /* Diacard following one byte when CMD12 */
 8006638:	20ff      	movs	r0, #255	@ 0xff
 800663a:	f7ff febd 	bl	80063b8 <xchg_spi>
	n = 10; /* Wait for response (10 bytes max) */
 800663e:	230a      	movs	r3, #10
 8006640:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006642:	20ff      	movs	r0, #255	@ 0xff
 8006644:	f7ff feb8 	bl	80063b8 <xchg_spi>
 8006648:	4603      	mov	r3, r0
 800664a:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800664c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006650:	2b00      	cmp	r3, #0
 8006652:	da05      	bge.n	8006660 <send_cmd+0xd4>
 8006654:	7bfb      	ldrb	r3, [r7, #15]
 8006656:	3b01      	subs	r3, #1
 8006658:	73fb      	strb	r3, [r7, #15]
 800665a:	7bfb      	ldrb	r3, [r7, #15]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1f0      	bne.n	8006642 <send_cmd+0xb6>

	return res; /* Return received response */
 8006660:	7bbb      	ldrb	r3, [r7, #14]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
	...

0800666c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize disk drive                                                 */
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize(BYTE drv /* Physical drive number (0) */
) {
 800666c:	b590      	push	{r4, r7, lr}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	4603      	mov	r3, r0
 8006674:	71fb      	strb	r3, [r7, #7]
	myprintf("USER_SPI_initialize started\r\n");
 8006676:	4874      	ldr	r0, [pc, #464]	@ (8006848 <USER_SPI_initialize+0x1dc>)
 8006678:	f7fa fde8 	bl	800124c <myprintf>

	BYTE n, cmd, ty, ocr[4];

	if (drv != 0)
 800667c:	79fb      	ldrb	r3, [r7, #7]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <USER_SPI_initialize+0x1a>
		return STA_NOINIT; /* Supports only drive 0 */
 8006682:	2301      	movs	r3, #1
 8006684:	e0dc      	b.n	8006840 <USER_SPI_initialize+0x1d4>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK)
 8006686:	4b71      	ldr	r3, [pc, #452]	@ (800684c <USER_SPI_initialize+0x1e0>)
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	b2db      	uxtb	r3, r3
 800668c:	f003 0302 	and.w	r3, r3, #2
 8006690:	2b00      	cmp	r3, #0
 8006692:	d003      	beq.n	800669c <USER_SPI_initialize+0x30>
		return Stat; /* Is card existing in the soket? */
 8006694:	4b6d      	ldr	r3, [pc, #436]	@ (800684c <USER_SPI_initialize+0x1e0>)
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	b2db      	uxtb	r3, r3
 800669a:	e0d1      	b.n	8006840 <USER_SPI_initialize+0x1d4>

	FCLK_SLOW();
 800669c:	4b6c      	ldr	r3, [pc, #432]	@ (8006850 <USER_SPI_initialize+0x1e4>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80066a6:	4b6a      	ldr	r3, [pc, #424]	@ (8006850 <USER_SPI_initialize+0x1e4>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80066ae:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--)
 80066b0:	230a      	movs	r3, #10
 80066b2:	73fb      	strb	r3, [r7, #15]
 80066b4:	e005      	b.n	80066c2 <USER_SPI_initialize+0x56>
		xchg_spi(0xFF); /* Send 80 dummy clocks */
 80066b6:	20ff      	movs	r0, #255	@ 0xff
 80066b8:	f7ff fe7e 	bl	80063b8 <xchg_spi>
	for (n = 10; n; n--)
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	3b01      	subs	r3, #1
 80066c0:	73fb      	strb	r3, [r7, #15]
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1f6      	bne.n	80066b6 <USER_SPI_initialize+0x4a>

	ty = 0;
 80066c8:	2300      	movs	r3, #0
 80066ca:	737b      	strb	r3, [r7, #13]

	BYTE resp = send_cmd(CMD0, 0);
 80066cc:	2100      	movs	r1, #0
 80066ce:	2000      	movs	r0, #0
 80066d0:	f7ff ff5c 	bl	800658c <send_cmd>
 80066d4:	4603      	mov	r3, r0
 80066d6:	733b      	strb	r3, [r7, #12]
	if (send_cmd(CMD0, 0) == 1) { /* Put the card SPI/Idle state */
 80066d8:	2100      	movs	r1, #0
 80066da:	2000      	movs	r0, #0
 80066dc:	f7ff ff56 	bl	800658c <send_cmd>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	f040 808b 	bne.w	80067fe <USER_SPI_initialize+0x192>
		SPI_Timer_On(1000); /* Initialization timeout = 1 sec */
 80066e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80066ec:	f7ff fe3a 	bl	8006364 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2? */
 80066f0:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80066f4:	2008      	movs	r0, #8
 80066f6:	f7ff ff49 	bl	800658c <send_cmd>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d151      	bne.n	80067a4 <USER_SPI_initialize+0x138>
			for (n = 0; n < 4; n++)
 8006700:	2300      	movs	r3, #0
 8006702:	73fb      	strb	r3, [r7, #15]
 8006704:	e00d      	b.n	8006722 <USER_SPI_initialize+0xb6>
				ocr[n] = xchg_spi(0xFF); /* Get 32 bit return value of R7 resp */
 8006706:	7bfc      	ldrb	r4, [r7, #15]
 8006708:	20ff      	movs	r0, #255	@ 0xff
 800670a:	f7ff fe55 	bl	80063b8 <xchg_spi>
 800670e:	4603      	mov	r3, r0
 8006710:	461a      	mov	r2, r3
 8006712:	f104 0310 	add.w	r3, r4, #16
 8006716:	443b      	add	r3, r7
 8006718:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800671c:	7bfb      	ldrb	r3, [r7, #15]
 800671e:	3301      	adds	r3, #1
 8006720:	73fb      	strb	r3, [r7, #15]
 8006722:	7bfb      	ldrb	r3, [r7, #15]
 8006724:	2b03      	cmp	r3, #3
 8006726:	d9ee      	bls.n	8006706 <USER_SPI_initialize+0x9a>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* Is the card supports vcc of 2.7-3.6V? */
 8006728:	7abb      	ldrb	r3, [r7, #10]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d167      	bne.n	80067fe <USER_SPI_initialize+0x192>
 800672e:	7afb      	ldrb	r3, [r7, #11]
 8006730:	2baa      	cmp	r3, #170	@ 0xaa
 8006732:	d164      	bne.n	80067fe <USER_SPI_initialize+0x192>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30))
 8006734:	bf00      	nop
 8006736:	f7ff fe29 	bl	800638c <SPI_Timer_Status>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d007      	beq.n	8006750 <USER_SPI_initialize+0xe4>
 8006740:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006744:	20a9      	movs	r0, #169	@ 0xa9
 8006746:	f7ff ff21 	bl	800658c <send_cmd>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1f2      	bne.n	8006736 <USER_SPI_initialize+0xca>
					; /* Wait for end of initialization with ACMD41(HCS) */
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
 8006750:	f7ff fe1c 	bl	800638c <SPI_Timer_Status>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d051      	beq.n	80067fe <USER_SPI_initialize+0x192>
 800675a:	2100      	movs	r1, #0
 800675c:	203a      	movs	r0, #58	@ 0x3a
 800675e:	f7ff ff15 	bl	800658c <send_cmd>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d14a      	bne.n	80067fe <USER_SPI_initialize+0x192>
					for (n = 0; n < 4; n++)
 8006768:	2300      	movs	r3, #0
 800676a:	73fb      	strb	r3, [r7, #15]
 800676c:	e00d      	b.n	800678a <USER_SPI_initialize+0x11e>
						ocr[n] = xchg_spi(0xFF);
 800676e:	7bfc      	ldrb	r4, [r7, #15]
 8006770:	20ff      	movs	r0, #255	@ 0xff
 8006772:	f7ff fe21 	bl	80063b8 <xchg_spi>
 8006776:	4603      	mov	r3, r0
 8006778:	461a      	mov	r2, r3
 800677a:	f104 0310 	add.w	r3, r4, #16
 800677e:	443b      	add	r3, r7
 8006780:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8006784:	7bfb      	ldrb	r3, [r7, #15]
 8006786:	3301      	adds	r3, #1
 8006788:	73fb      	strb	r3, [r7, #15]
 800678a:	7bfb      	ldrb	r3, [r7, #15]
 800678c:	2b03      	cmp	r3, #3
 800678e:	d9ee      	bls.n	800676e <USER_SPI_initialize+0x102>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; /* Card id SDv2 */
 8006790:	7a3b      	ldrb	r3, [r7, #8]
 8006792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <USER_SPI_initialize+0x132>
 800679a:	230c      	movs	r3, #12
 800679c:	e000      	b.n	80067a0 <USER_SPI_initialize+0x134>
 800679e:	2304      	movs	r3, #4
 80067a0:	737b      	strb	r3, [r7, #13]
 80067a2:	e02c      	b.n	80067fe <USER_SPI_initialize+0x192>
				}
			}
		} else { /* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) { /* SDv1 or MMC? */
 80067a4:	2100      	movs	r1, #0
 80067a6:	20a9      	movs	r0, #169	@ 0xa9
 80067a8:	f7ff fef0 	bl	800658c <send_cmd>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d804      	bhi.n	80067bc <USER_SPI_initialize+0x150>
				ty = CT_SD1;
 80067b2:	2302      	movs	r3, #2
 80067b4:	737b      	strb	r3, [r7, #13]
				cmd = ACMD41; /* SDv1 (ACMD41(0)) */
 80067b6:	23a9      	movs	r3, #169	@ 0xa9
 80067b8:	73bb      	strb	r3, [r7, #14]
 80067ba:	e003      	b.n	80067c4 <USER_SPI_initialize+0x158>
			} else {
				ty = CT_MMC;
 80067bc:	2301      	movs	r3, #1
 80067be:	737b      	strb	r3, [r7, #13]
				cmd = CMD1; /* MMCv3 (CMD1(0)) */
 80067c0:	2301      	movs	r3, #1
 80067c2:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0))
 80067c4:	bf00      	nop
 80067c6:	f7ff fde1 	bl	800638c <SPI_Timer_Status>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d007      	beq.n	80067e0 <USER_SPI_initialize+0x174>
 80067d0:	7bbb      	ldrb	r3, [r7, #14]
 80067d2:	2100      	movs	r1, #0
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff fed9 	bl	800658c <send_cmd>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1f2      	bne.n	80067c6 <USER_SPI_initialize+0x15a>
				; /* Wait for end of initialization */
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0) /* Set block length: 512 */
 80067e0:	f7ff fdd4 	bl	800638c <SPI_Timer_Status>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d007      	beq.n	80067fa <USER_SPI_initialize+0x18e>
 80067ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80067ee:	2010      	movs	r0, #16
 80067f0:	f7ff fecc 	bl	800658c <send_cmd>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <USER_SPI_initialize+0x192>
				ty = 0;
 80067fa:	2300      	movs	r3, #0
 80067fc:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty; /* Card type */
 80067fe:	4a15      	ldr	r2, [pc, #84]	@ (8006854 <USER_SPI_initialize+0x1e8>)
 8006800:	7b7b      	ldrb	r3, [r7, #13]
 8006802:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006804:	f7ff fe41 	bl	800648a <despiselect>

	if (ty) { /* OK */
 8006808:	7b7b      	ldrb	r3, [r7, #13]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d012      	beq.n	8006834 <USER_SPI_initialize+0x1c8>
		FCLK_FAST(); /* Set fast clock */
 800680e:	4b10      	ldr	r3, [pc, #64]	@ (8006850 <USER_SPI_initialize+0x1e4>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8006818:	4b0d      	ldr	r3, [pc, #52]	@ (8006850 <USER_SPI_initialize+0x1e4>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f042 0210 	orr.w	r2, r2, #16
 8006820:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT flag */
 8006822:	4b0a      	ldr	r3, [pc, #40]	@ (800684c <USER_SPI_initialize+0x1e0>)
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	b2db      	uxtb	r3, r3
 8006828:	f023 0301 	bic.w	r3, r3, #1
 800682c:	b2da      	uxtb	r2, r3
 800682e:	4b07      	ldr	r3, [pc, #28]	@ (800684c <USER_SPI_initialize+0x1e0>)
 8006830:	701a      	strb	r2, [r3, #0]
 8006832:	e002      	b.n	800683a <USER_SPI_initialize+0x1ce>
	} else { /* Failed */
		Stat = STA_NOINIT;
 8006834:	4b05      	ldr	r3, [pc, #20]	@ (800684c <USER_SPI_initialize+0x1e0>)
 8006836:	2201      	movs	r2, #1
 8006838:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800683a:	4b04      	ldr	r3, [pc, #16]	@ (800684c <USER_SPI_initialize+0x1e0>)
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	b2db      	uxtb	r3, r3
}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	bd90      	pop	{r4, r7, pc}
 8006848:	08009b94 	.word	0x08009b94
 800684c:	20000020 	.word	0x20000020
 8006850:	20000124 	.word	0x20000124
 8006854:	200002c1 	.word	0x200002c1

08006858 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/
/* Get disk status                                                       */
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status(BYTE drv /* Physical drive number (0) */
) {
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	4603      	mov	r3, r0
 8006860:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8006862:	79fb      	ldrb	r3, [r7, #7]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <USER_SPI_status+0x14>
		return STA_NOINIT; /* Supports only drive 0 */
 8006868:	2301      	movs	r3, #1
 800686a:	e002      	b.n	8006872 <USER_SPI_status+0x1a>

	return Stat; /* Return disk status */
 800686c:	4b03      	ldr	r3, [pc, #12]	@ (800687c <USER_SPI_status+0x24>)
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	b2db      	uxtb	r3, r3
}
 8006872:	4618      	mov	r0, r3
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	bc80      	pop	{r7}
 800687a:	4770      	bx	lr
 800687c:	20000020 	.word	0x20000020

08006880 <USER_SPI_read>:

inline DRESULT USER_SPI_read(BYTE drv, /* Physical drive number (0) */
BYTE *buff, /* Pointer to the data buffer to store read data */
DWORD sector, /* Start sector number (LBA) */
UINT count /* Number of sectors to read (1..128) */
) {
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	60b9      	str	r1, [r7, #8]
 8006888:	607a      	str	r2, [r7, #4]
 800688a:	603b      	str	r3, [r7, #0]
 800688c:	4603      	mov	r3, r0
 800688e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count)
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d102      	bne.n	800689c <USER_SPI_read+0x1c>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <USER_SPI_read+0x20>
		return RES_PARERR; /* Check parameter */
 800689c:	2304      	movs	r3, #4
 800689e:	e04d      	b.n	800693c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT)
 80068a0:	4b28      	ldr	r3, [pc, #160]	@ (8006944 <USER_SPI_read+0xc4>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <USER_SPI_read+0x32>
		return RES_NOTRDY; /* Check if drive is ready */
 80068ae:	2303      	movs	r3, #3
 80068b0:	e044      	b.n	800693c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK))
 80068b2:	4b25      	ldr	r3, [pc, #148]	@ (8006948 <USER_SPI_read+0xc8>)
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	f003 0308 	and.w	r3, r3, #8
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d102      	bne.n	80068c4 <USER_SPI_read+0x44>
		sector *= 512; /* LBA ot BA conversion (byte addressing cards) */
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	025b      	lsls	r3, r3, #9
 80068c2:	607b      	str	r3, [r7, #4]

	if (count == 1) { /* Single sector read */
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d111      	bne.n	80068ee <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 80068ca:	6879      	ldr	r1, [r7, #4]
 80068cc:	2011      	movs	r0, #17
 80068ce:	f7ff fe5d 	bl	800658c <send_cmd>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d129      	bne.n	800692c <USER_SPI_read+0xac>
		&& rcvr_datablock(buff, 512)) {
 80068d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80068dc:	68b8      	ldr	r0, [r7, #8]
 80068de:	f7ff fdfa 	bl	80064d6 <rcvr_datablock>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d021      	beq.n	800692c <USER_SPI_read+0xac>
			count = 0;
 80068e8:	2300      	movs	r3, #0
 80068ea:	603b      	str	r3, [r7, #0]
 80068ec:	e01e      	b.n	800692c <USER_SPI_read+0xac>
		}
	} else { /* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 80068ee:	6879      	ldr	r1, [r7, #4]
 80068f0:	2012      	movs	r0, #18
 80068f2:	f7ff fe4b 	bl	800658c <send_cmd>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d117      	bne.n	800692c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512))
 80068fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006900:	68b8      	ldr	r0, [r7, #8]
 8006902:	f7ff fde8 	bl	80064d6 <rcvr_datablock>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00a      	beq.n	8006922 <USER_SPI_read+0xa2>
					break;
				buff += 512;
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006912:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	3b01      	subs	r3, #1
 8006918:	603b      	str	r3, [r7, #0]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1ed      	bne.n	80068fc <USER_SPI_read+0x7c>
 8006920:	e000      	b.n	8006924 <USER_SPI_read+0xa4>
					break;
 8006922:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8006924:	2100      	movs	r1, #0
 8006926:	200c      	movs	r0, #12
 8006928:	f7ff fe30 	bl	800658c <send_cmd>
		}
	}
	despiselect();
 800692c:	f7ff fdad 	bl	800648a <despiselect>

	return count ? RES_ERROR : RES_OK; /* Return result */
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	bf14      	ite	ne
 8006936:	2301      	movne	r3, #1
 8006938:	2300      	moveq	r3, #0
 800693a:	b2db      	uxtb	r3, r3
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	20000020 	.word	0x20000020
 8006948:	200002c1 	.word	0x200002c1

0800694c <USER_SPI_write>:
#if _USE_WRITE
inline DRESULT USER_SPI_write(BYTE drv, /* Physical drive number (0) */
const BYTE *buff, /* Ponter to the data to write */
DWORD sector, /* Start sector number (LBA) */
UINT count /* Number of sectors to write (1..128) */
) {
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	60b9      	str	r1, [r7, #8]
 8006954:	607a      	str	r2, [r7, #4]
 8006956:	603b      	str	r3, [r7, #0]
 8006958:	4603      	mov	r3, r0
 800695a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count)
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d102      	bne.n	8006968 <USER_SPI_write+0x1c>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <USER_SPI_write+0x20>
		return RES_PARERR; /* Check parameter */
 8006968:	2304      	movs	r3, #4
 800696a:	e063      	b.n	8006a34 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT)
 800696c:	4b33      	ldr	r3, [pc, #204]	@ (8006a3c <USER_SPI_write+0xf0>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	b2db      	uxtb	r3, r3
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <USER_SPI_write+0x32>
		return RES_NOTRDY; /* Check drive status */
 800697a:	2303      	movs	r3, #3
 800697c:	e05a      	b.n	8006a34 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT)
 800697e:	4b2f      	ldr	r3, [pc, #188]	@ (8006a3c <USER_SPI_write+0xf0>)
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	b2db      	uxtb	r3, r3
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b00      	cmp	r3, #0
 800698a:	d001      	beq.n	8006990 <USER_SPI_write+0x44>
		return RES_WRPRT; /* Check write protect */
 800698c:	2302      	movs	r3, #2
 800698e:	e051      	b.n	8006a34 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK))
 8006990:	4b2b      	ldr	r3, [pc, #172]	@ (8006a40 <USER_SPI_write+0xf4>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	f003 0308 	and.w	r3, r3, #8
 8006998:	2b00      	cmp	r3, #0
 800699a:	d102      	bne.n	80069a2 <USER_SPI_write+0x56>
		sector *= 512; /* LBA ==> BA conversion (byte addressing cards) */
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	025b      	lsls	r3, r3, #9
 80069a0:	607b      	str	r3, [r7, #4]

	if (count == 1) { /* Single sector write */
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d110      	bne.n	80069ca <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 80069a8:	6879      	ldr	r1, [r7, #4]
 80069aa:	2018      	movs	r0, #24
 80069ac:	f7ff fdee 	bl	800658c <send_cmd>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d136      	bne.n	8006a24 <USER_SPI_write+0xd8>
		&& xmit_datablock(buff, 0xFE)) {
 80069b6:	21fe      	movs	r1, #254	@ 0xfe
 80069b8:	68b8      	ldr	r0, [r7, #8]
 80069ba:	f7ff fdb5 	bl	8006528 <xmit_datablock>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d02f      	beq.n	8006a24 <USER_SPI_write+0xd8>
			count = 0;
 80069c4:	2300      	movs	r3, #0
 80069c6:	603b      	str	r3, [r7, #0]
 80069c8:	e02c      	b.n	8006a24 <USER_SPI_write+0xd8>
		}
	} else { /* Multiple sector write */
		if (CardType & CT_SDC)
 80069ca:	4b1d      	ldr	r3, [pc, #116]	@ (8006a40 <USER_SPI_write+0xf4>)
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	f003 0306 	and.w	r3, r3, #6
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <USER_SPI_write+0x92>
			send_cmd(ACMD23, count); /* Predefine number of sectors */
 80069d6:	6839      	ldr	r1, [r7, #0]
 80069d8:	2097      	movs	r0, #151	@ 0x97
 80069da:	f7ff fdd7 	bl	800658c <send_cmd>
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	2019      	movs	r0, #25
 80069e2:	f7ff fdd3 	bl	800658c <send_cmd>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d11b      	bne.n	8006a24 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC))
 80069ec:	21fc      	movs	r1, #252	@ 0xfc
 80069ee:	68b8      	ldr	r0, [r7, #8]
 80069f0:	f7ff fd9a 	bl	8006528 <xmit_datablock>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00a      	beq.n	8006a10 <USER_SPI_write+0xc4>
					break;
				buff += 512;
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006a00:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	3b01      	subs	r3, #1
 8006a06:	603b      	str	r3, [r7, #0]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1ee      	bne.n	80069ec <USER_SPI_write+0xa0>
 8006a0e:	e000      	b.n	8006a12 <USER_SPI_write+0xc6>
					break;
 8006a10:	bf00      	nop
			if (!xmit_datablock(0, 0xFD))
 8006a12:	21fd      	movs	r1, #253	@ 0xfd
 8006a14:	2000      	movs	r0, #0
 8006a16:	f7ff fd87 	bl	8006528 <xmit_datablock>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <USER_SPI_write+0xd8>
				count = 1; /* STOP_TRAN token */
 8006a20:	2301      	movs	r3, #1
 8006a22:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006a24:	f7ff fd31 	bl	800648a <despiselect>

	return count ? RES_ERROR : RES_OK; /* Return result */
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	bf14      	ite	ne
 8006a2e:	2301      	movne	r3, #1
 8006a30:	2300      	moveq	r3, #0
 8006a32:	b2db      	uxtb	r3, r3
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	20000020 	.word	0x20000020
 8006a40:	200002c1 	.word	0x200002c1

08006a44 <USER_SPI_ioctl>:

#if _USE_IOCTL
inline DRESULT USER_SPI_ioctl(BYTE drv, /* Physical drive number (0) */
BYTE cmd, /* Control command code */
void *buff /* Pointer to the conrtol data */
) {
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b08c      	sub	sp, #48	@ 0x30
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	603a      	str	r2, [r7, #0]
 8006a4e:	71fb      	strb	r3, [r7, #7]
 8006a50:	460b      	mov	r3, r1
 8006a52:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;

	if (drv)
 8006a54:	79fb      	ldrb	r3, [r7, #7]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <USER_SPI_ioctl+0x1a>
		return RES_PARERR; /* Check parameter */
 8006a5a:	2304      	movs	r3, #4
 8006a5c:	e15a      	b.n	8006d14 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT)
 8006a5e:	4baf      	ldr	r3, [pc, #700]	@ (8006d1c <USER_SPI_ioctl+0x2d8>)
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d001      	beq.n	8006a70 <USER_SPI_ioctl+0x2c>
		return RES_NOTRDY; /* Check if drive is ready */
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e151      	b.n	8006d14 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8006a76:	79bb      	ldrb	r3, [r7, #6]
 8006a78:	2b04      	cmp	r3, #4
 8006a7a:	f200 8136 	bhi.w	8006cea <USER_SPI_ioctl+0x2a6>
 8006a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a84 <USER_SPI_ioctl+0x40>)
 8006a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a84:	08006a99 	.word	0x08006a99
 8006a88:	08006aad 	.word	0x08006aad
 8006a8c:	08006ceb 	.word	0x08006ceb
 8006a90:	08006b59 	.word	0x08006b59
 8006a94:	08006c4f 	.word	0x08006c4f
	case CTRL_SYNC: /* Wait for end of internal write process of the drive */
		if (spiselect())
 8006a98:	f7ff fd04 	bl	80064a4 <spiselect>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 8127 	beq.w	8006cf2 <USER_SPI_ioctl+0x2ae>
			res = RES_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8006aaa:	e122      	b.n	8006cf2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT: /* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006aac:	2100      	movs	r1, #0
 8006aae:	2009      	movs	r0, #9
 8006ab0:	f7ff fd6c 	bl	800658c <send_cmd>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f040 811d 	bne.w	8006cf6 <USER_SPI_ioctl+0x2b2>
 8006abc:	f107 030c 	add.w	r3, r7, #12
 8006ac0:	2110      	movs	r1, #16
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7ff fd07 	bl	80064d6 <rcvr_datablock>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 8113 	beq.w	8006cf6 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8006ad0:	7b3b      	ldrb	r3, [r7, #12]
 8006ad2:	099b      	lsrs	r3, r3, #6
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d111      	bne.n	8006afe <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD) csd[8] << 8)
 8006ada:	7d7b      	ldrb	r3, [r7, #21]
 8006adc:	461a      	mov	r2, r3
 8006ade:	7d3b      	ldrb	r3, [r7, #20]
 8006ae0:	021b      	lsls	r3, r3, #8
 8006ae2:	4413      	add	r3, r2
 8006ae4:	461a      	mov	r2, r3
						+ ((DWORD) (csd[7] & 63) << 16) + 1;
 8006ae6:	7cfb      	ldrb	r3, [r7, #19]
 8006ae8:	041b      	lsls	r3, r3, #16
 8006aea:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8006aee:	4413      	add	r3, r2
				csize = csd[9] + ((WORD) csd[8] << 8)
 8006af0:	3301      	adds	r3, #1
 8006af2:	61fb      	str	r3, [r7, #28]
				*(DWORD*) buff = csize << 10;
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	029a      	lsls	r2, r3, #10
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	e028      	b.n	8006b50 <USER_SPI_ioctl+0x10c>
			} else { /* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1)
 8006afe:	7c7b      	ldrb	r3, [r7, #17]
 8006b00:	f003 030f 	and.w	r3, r3, #15
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	7dbb      	ldrb	r3, [r7, #22]
 8006b08:	09db      	lsrs	r3, r3, #7
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	4413      	add	r3, r2
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	7d7b      	ldrb	r3, [r7, #21]
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	f003 0306 	and.w	r3, r3, #6
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	4413      	add	r3, r2
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	3302      	adds	r3, #2
 8006b22:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
						+ 2;
				csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8006b26:	7d3b      	ldrb	r3, [r7, #20]
 8006b28:	099b      	lsrs	r3, r3, #6
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	7cfb      	ldrb	r3, [r7, #19]
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	441a      	add	r2, r3
						+ ((WORD) (csd[6] & 3) << 10) + 1;
 8006b34:	7cbb      	ldrb	r3, [r7, #18]
 8006b36:	029b      	lsls	r3, r3, #10
 8006b38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b3c:	4413      	add	r3, r2
 8006b3e:	3301      	adds	r3, #1
				csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8006b40:	61fb      	str	r3, [r7, #28]
				*(DWORD*) buff = csize << (n - 9);
 8006b42:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b46:	3b09      	subs	r3, #9
 8006b48:	69fa      	ldr	r2, [r7, #28]
 8006b4a:	409a      	lsls	r2, r3
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8006b56:	e0ce      	b.n	8006cf6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE: /* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) { /* SDC ver 2.00 */
 8006b58:	4b71      	ldr	r3, [pc, #452]	@ (8006d20 <USER_SPI_ioctl+0x2dc>)
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	f003 0304 	and.w	r3, r3, #4
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d031      	beq.n	8006bc8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) { /* Read SD status */
 8006b64:	2100      	movs	r1, #0
 8006b66:	208d      	movs	r0, #141	@ 0x8d
 8006b68:	f7ff fd10 	bl	800658c <send_cmd>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f040 80c3 	bne.w	8006cfa <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006b74:	20ff      	movs	r0, #255	@ 0xff
 8006b76:	f7ff fc1f 	bl	80063b8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) { /* Read partial block */
 8006b7a:	f107 030c 	add.w	r3, r7, #12
 8006b7e:	2110      	movs	r1, #16
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7ff fca8 	bl	80064d6 <rcvr_datablock>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 80b6 	beq.w	8006cfa <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--)
 8006b8e:	2330      	movs	r3, #48	@ 0x30
 8006b90:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006b94:	e007      	b.n	8006ba6 <USER_SPI_ioctl+0x162>
						xchg_spi(0xFF); /* Purge trailing data */
 8006b96:	20ff      	movs	r0, #255	@ 0xff
 8006b98:	f7ff fc0e 	bl	80063b8 <xchg_spi>
					for (n = 64 - 16; n; n--)
 8006b9c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006ba6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1f3      	bne.n	8006b96 <USER_SPI_ioctl+0x152>
					*(DWORD*) buff = 16UL << (csd[10] >> 4);
 8006bae:	7dbb      	ldrb	r3, [r7, #22]
 8006bb0:	091b      	lsrs	r3, r3, #4
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	2310      	movs	r3, #16
 8006bb8:	fa03 f202 	lsl.w	r2, r3, r2
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
											+ ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006bc6:	e098      	b.n	8006cfa <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) { /* Read CSD */
 8006bc8:	2100      	movs	r1, #0
 8006bca:	2009      	movs	r0, #9
 8006bcc:	f7ff fcde 	bl	800658c <send_cmd>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f040 8091 	bne.w	8006cfa <USER_SPI_ioctl+0x2b6>
 8006bd8:	f107 030c 	add.w	r3, r7, #12
 8006bdc:	2110      	movs	r1, #16
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7ff fc79 	bl	80064d6 <rcvr_datablock>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 8087 	beq.w	8006cfa <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) { /* SDC ver 1.XX */
 8006bec:	4b4c      	ldr	r3, [pc, #304]	@ (8006d20 <USER_SPI_ioctl+0x2dc>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d012      	beq.n	8006c1e <USER_SPI_ioctl+0x1da>
					*(DWORD*) buff = (((csd[10] & 63) << 1)
 8006bf8:	7dbb      	ldrb	r3, [r7, #22]
 8006bfa:	005b      	lsls	r3, r3, #1
 8006bfc:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
							+ ((WORD) (csd[11] & 128) >> 7) + 1)
 8006c00:	7dfa      	ldrb	r2, [r7, #23]
 8006c02:	09d2      	lsrs	r2, r2, #7
 8006c04:	b2d2      	uxtb	r2, r2
 8006c06:	4413      	add	r3, r2
 8006c08:	1c5a      	adds	r2, r3, #1
							<< ((csd[13] >> 6) - 1);
 8006c0a:	7e7b      	ldrb	r3, [r7, #25]
 8006c0c:	099b      	lsrs	r3, r3, #6
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	3b01      	subs	r3, #1
 8006c12:	fa02 f303 	lsl.w	r3, r2, r3
 8006c16:	461a      	mov	r2, r3
					*(DWORD*) buff = (((csd[10] & 63) << 1)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	e013      	b.n	8006c46 <USER_SPI_ioctl+0x202>
							((WORD) ((csd[10] & 124) >> 2) + 1)
 8006c1e:	7dbb      	ldrb	r3, [r7, #22]
 8006c20:	109b      	asrs	r3, r3, #2
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	f003 031f 	and.w	r3, r3, #31
 8006c28:	3301      	adds	r3, #1
									* (((csd[11] & 3) << 3)
 8006c2a:	7dfa      	ldrb	r2, [r7, #23]
 8006c2c:	00d2      	lsls	r2, r2, #3
 8006c2e:	f002 0218 	and.w	r2, r2, #24
											+ ((csd[11] & 224) >> 5) + 1);
 8006c32:	7df9      	ldrb	r1, [r7, #23]
 8006c34:	0949      	lsrs	r1, r1, #5
 8006c36:	b2c9      	uxtb	r1, r1
 8006c38:	440a      	add	r2, r1
 8006c3a:	3201      	adds	r2, #1
									* (((csd[11] & 3) << 3)
 8006c3c:	fb02 f303 	mul.w	r3, r2, r3
 8006c40:	461a      	mov	r2, r3
					*(DWORD*) buff =
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8006c4c:	e055      	b.n	8006cfa <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM: /* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC))
 8006c4e:	4b34      	ldr	r3, [pc, #208]	@ (8006d20 <USER_SPI_ioctl+0x2dc>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	f003 0306 	and.w	r3, r3, #6
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d051      	beq.n	8006cfe <USER_SPI_ioctl+0x2ba>
			break; /* Check if the card is SDC */
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd))
 8006c5a:	f107 020c 	add.w	r2, r7, #12
 8006c5e:	79fb      	ldrb	r3, [r7, #7]
 8006c60:	210b      	movs	r1, #11
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7ff feee 	bl	8006a44 <USER_SPI_ioctl>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d149      	bne.n	8006d02 <USER_SPI_ioctl+0x2be>
			break; /* Get CSD */
		if (!(csd[0] >> 6) && !(csd[10] & 0x40))
 8006c6e:	7b3b      	ldrb	r3, [r7, #12]
 8006c70:	099b      	lsrs	r3, r3, #6
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d104      	bne.n	8006c82 <USER_SPI_ioctl+0x23e>
 8006c78:	7dbb      	ldrb	r3, [r7, #22]
 8006c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d041      	beq.n	8006d06 <USER_SPI_ioctl+0x2c2>
			break; /* Check if sector erase can be applied to the card */
		dp = buff;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	623b      	str	r3, [r7, #32]
		st = dp[0];
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
		ed = dp[1]; /* Load sector block */
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8006c92:	4b23      	ldr	r3, [pc, #140]	@ (8006d20 <USER_SPI_ioctl+0x2dc>)
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	f003 0308 	and.w	r3, r3, #8
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d105      	bne.n	8006caa <USER_SPI_ioctl+0x266>
			st *= 512;
 8006c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca0:	025b      	lsls	r3, r3, #9
 8006ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
			ed *= 512;
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca6:	025b      	lsls	r3, r3, #9
 8006ca8:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0
 8006caa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cac:	2020      	movs	r0, #32
 8006cae:	f7ff fc6d 	bl	800658c <send_cmd>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d128      	bne.n	8006d0a <USER_SPI_ioctl+0x2c6>
 8006cb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006cba:	2021      	movs	r0, #33	@ 0x21
 8006cbc:	f7ff fc66 	bl	800658c <send_cmd>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d121      	bne.n	8006d0a <USER_SPI_ioctl+0x2c6>
				&& send_cmd(CMD38, 0) == 0 && wait_ready(30000)) { /* Erase sector block */
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	2026      	movs	r0, #38	@ 0x26
 8006cca:	f7ff fc5f 	bl	800658c <send_cmd>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d11a      	bne.n	8006d0a <USER_SPI_ioctl+0x2c6>
 8006cd4:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006cd8:	f7ff fbb4 	bl	8006444 <wait_ready>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d013      	beq.n	8006d0a <USER_SPI_ioctl+0x2c6>
			res = RES_OK; /* FatFs does not check result of this command */
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8006ce8:	e00f      	b.n	8006d0a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8006cea:	2304      	movs	r3, #4
 8006cec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006cf0:	e00c      	b.n	8006d0c <USER_SPI_ioctl+0x2c8>
		break;
 8006cf2:	bf00      	nop
 8006cf4:	e00a      	b.n	8006d0c <USER_SPI_ioctl+0x2c8>
		break;
 8006cf6:	bf00      	nop
 8006cf8:	e008      	b.n	8006d0c <USER_SPI_ioctl+0x2c8>
		break;
 8006cfa:	bf00      	nop
 8006cfc:	e006      	b.n	8006d0c <USER_SPI_ioctl+0x2c8>
			break; /* Check if the card is SDC */
 8006cfe:	bf00      	nop
 8006d00:	e004      	b.n	8006d0c <USER_SPI_ioctl+0x2c8>
			break; /* Get CSD */
 8006d02:	bf00      	nop
 8006d04:	e002      	b.n	8006d0c <USER_SPI_ioctl+0x2c8>
			break; /* Check if sector erase can be applied to the card */
 8006d06:	bf00      	nop
 8006d08:	e000      	b.n	8006d0c <USER_SPI_ioctl+0x2c8>
		break;
 8006d0a:	bf00      	nop
	}

	despiselect();
 8006d0c:	f7ff fbbd 	bl	800648a <despiselect>

	return res;
 8006d10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3730      	adds	r7, #48	@ 0x30
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	20000020 	.word	0x20000020
 8006d20:	200002c1 	.word	0x200002c1

08006d24 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006d2e:	79fb      	ldrb	r3, [r7, #7]
 8006d30:	4a08      	ldr	r2, [pc, #32]	@ (8006d54 <disk_status+0x30>)
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	79fa      	ldrb	r2, [r7, #7]
 8006d3c:	4905      	ldr	r1, [pc, #20]	@ (8006d54 <disk_status+0x30>)
 8006d3e:	440a      	add	r2, r1
 8006d40:	7a12      	ldrb	r2, [r2, #8]
 8006d42:	4610      	mov	r0, r2
 8006d44:	4798      	blx	r3
 8006d46:	4603      	mov	r3, r0
 8006d48:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	200002f4 	.word	0x200002f4

08006d58 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006d66:	79fb      	ldrb	r3, [r7, #7]
 8006d68:	4a0d      	ldr	r2, [pc, #52]	@ (8006da0 <disk_initialize+0x48>)
 8006d6a:	5cd3      	ldrb	r3, [r2, r3]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d111      	bne.n	8006d94 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006d70:	79fb      	ldrb	r3, [r7, #7]
 8006d72:	4a0b      	ldr	r2, [pc, #44]	@ (8006da0 <disk_initialize+0x48>)
 8006d74:	2101      	movs	r1, #1
 8006d76:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006d78:	79fb      	ldrb	r3, [r7, #7]
 8006d7a:	4a09      	ldr	r2, [pc, #36]	@ (8006da0 <disk_initialize+0x48>)
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	79fa      	ldrb	r2, [r7, #7]
 8006d86:	4906      	ldr	r1, [pc, #24]	@ (8006da0 <disk_initialize+0x48>)
 8006d88:	440a      	add	r2, r1
 8006d8a:	7a12      	ldrb	r2, [r2, #8]
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	4798      	blx	r3
 8006d90:	4603      	mov	r3, r0
 8006d92:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	200002f4 	.word	0x200002f4

08006da4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006da4:	b590      	push	{r4, r7, lr}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60b9      	str	r1, [r7, #8]
 8006dac:	607a      	str	r2, [r7, #4]
 8006dae:	603b      	str	r3, [r7, #0]
 8006db0:	4603      	mov	r3, r0
 8006db2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
 8006db6:	4a0a      	ldr	r2, [pc, #40]	@ (8006de0 <disk_read+0x3c>)
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	689c      	ldr	r4, [r3, #8]
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
 8006dc2:	4a07      	ldr	r2, [pc, #28]	@ (8006de0 <disk_read+0x3c>)
 8006dc4:	4413      	add	r3, r2
 8006dc6:	7a18      	ldrb	r0, [r3, #8]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	68b9      	ldr	r1, [r7, #8]
 8006dce:	47a0      	blx	r4
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	75fb      	strb	r3, [r7, #23]
  return res;
 8006dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	371c      	adds	r7, #28
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd90      	pop	{r4, r7, pc}
 8006dde:	bf00      	nop
 8006de0:	200002f4 	.word	0x200002f4

08006de4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006de4:	b590      	push	{r4, r7, lr}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60b9      	str	r1, [r7, #8]
 8006dec:	607a      	str	r2, [r7, #4]
 8006dee:	603b      	str	r3, [r7, #0]
 8006df0:	4603      	mov	r3, r0
 8006df2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
 8006df6:	4a0a      	ldr	r2, [pc, #40]	@ (8006e20 <disk_write+0x3c>)
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	68dc      	ldr	r4, [r3, #12]
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	4a07      	ldr	r2, [pc, #28]	@ (8006e20 <disk_write+0x3c>)
 8006e04:	4413      	add	r3, r2
 8006e06:	7a18      	ldrb	r0, [r3, #8]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	68b9      	ldr	r1, [r7, #8]
 8006e0e:	47a0      	blx	r4
 8006e10:	4603      	mov	r3, r0
 8006e12:	75fb      	strb	r3, [r7, #23]
  return res;
 8006e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	371c      	adds	r7, #28
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd90      	pop	{r4, r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	200002f4 	.word	0x200002f4

08006e24 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	603a      	str	r2, [r7, #0]
 8006e2e:	71fb      	strb	r3, [r7, #7]
 8006e30:	460b      	mov	r3, r1
 8006e32:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006e34:	79fb      	ldrb	r3, [r7, #7]
 8006e36:	4a09      	ldr	r2, [pc, #36]	@ (8006e5c <disk_ioctl+0x38>)
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	79fa      	ldrb	r2, [r7, #7]
 8006e42:	4906      	ldr	r1, [pc, #24]	@ (8006e5c <disk_ioctl+0x38>)
 8006e44:	440a      	add	r2, r1
 8006e46:	7a10      	ldrb	r0, [r2, #8]
 8006e48:	79b9      	ldrb	r1, [r7, #6]
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	4798      	blx	r3
 8006e4e:	4603      	mov	r3, r0
 8006e50:	73fb      	strb	r3, [r7, #15]
  return res;
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	200002f4 	.word	0x200002f4

08006e60 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006e70:	89fb      	ldrh	r3, [r7, #14]
 8006e72:	021b      	lsls	r3, r3, #8
 8006e74:	b21a      	sxth	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	b21b      	sxth	r3, r3
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	b21b      	sxth	r3, r3
 8006e80:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006e82:	89fb      	ldrh	r3, [r7, #14]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bc80      	pop	{r7}
 8006e8c:	4770      	bx	lr

08006e8e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b085      	sub	sp, #20
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3303      	adds	r3, #3
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	021b      	lsls	r3, r3, #8
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	3202      	adds	r2, #2
 8006ea6:	7812      	ldrb	r2, [r2, #0]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	021b      	lsls	r3, r3, #8
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	3201      	adds	r2, #1
 8006eb4:	7812      	ldrb	r2, [r2, #0]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	021b      	lsls	r3, r3, #8
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	7812      	ldrb	r2, [r2, #0]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]
	return rv;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bc80      	pop	{r7}
 8006ed0:	4770      	bx	lr

08006ed2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b083      	sub	sp, #12
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	460b      	mov	r3, r1
 8006edc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	607a      	str	r2, [r7, #4]
 8006ee4:	887a      	ldrh	r2, [r7, #2]
 8006ee6:	b2d2      	uxtb	r2, r2
 8006ee8:	701a      	strb	r2, [r3, #0]
 8006eea:	887b      	ldrh	r3, [r7, #2]
 8006eec:	0a1b      	lsrs	r3, r3, #8
 8006eee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	1c5a      	adds	r2, r3, #1
 8006ef4:	607a      	str	r2, [r7, #4]
 8006ef6:	887a      	ldrh	r2, [r7, #2]
 8006ef8:	b2d2      	uxtb	r2, r2
 8006efa:	701a      	strb	r2, [r3, #0]
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bc80      	pop	{r7}
 8006f04:	4770      	bx	lr

08006f06 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006f06:	b480      	push	{r7}
 8006f08:	b083      	sub	sp, #12
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	607a      	str	r2, [r7, #4]
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	b2d2      	uxtb	r2, r2
 8006f1a:	701a      	strb	r2, [r3, #0]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	0a1b      	lsrs	r3, r3, #8
 8006f20:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	1c5a      	adds	r2, r3, #1
 8006f26:	607a      	str	r2, [r7, #4]
 8006f28:	683a      	ldr	r2, [r7, #0]
 8006f2a:	b2d2      	uxtb	r2, r2
 8006f2c:	701a      	strb	r2, [r3, #0]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	0a1b      	lsrs	r3, r3, #8
 8006f32:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	607a      	str	r2, [r7, #4]
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	b2d2      	uxtb	r2, r2
 8006f3e:	701a      	strb	r2, [r3, #0]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	0a1b      	lsrs	r3, r3, #8
 8006f44:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	1c5a      	adds	r2, r3, #1
 8006f4a:	607a      	str	r2, [r7, #4]
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	b2d2      	uxtb	r2, r2
 8006f50:	701a      	strb	r2, [r3, #0]
}
 8006f52:	bf00      	nop
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bc80      	pop	{r7}
 8006f5a:	4770      	bx	lr

08006f5c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00d      	beq.n	8006f92 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	1c53      	adds	r3, r2, #1
 8006f7a:	613b      	str	r3, [r7, #16]
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	1c59      	adds	r1, r3, #1
 8006f80:	6179      	str	r1, [r7, #20]
 8006f82:	7812      	ldrb	r2, [r2, #0]
 8006f84:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	607b      	str	r3, [r7, #4]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1f1      	bne.n	8006f76 <mem_cpy+0x1a>
	}
}
 8006f92:	bf00      	nop
 8006f94:	371c      	adds	r7, #28
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bc80      	pop	{r7}
 8006f9a:	4770      	bx	lr

08006f9c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	1c5a      	adds	r2, r3, #1
 8006fb0:	617a      	str	r2, [r7, #20]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	b2d2      	uxtb	r2, r2
 8006fb6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	607b      	str	r3, [r7, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1f3      	bne.n	8006fac <mem_set+0x10>
}
 8006fc4:	bf00      	nop
 8006fc6:	bf00      	nop
 8006fc8:	371c      	adds	r7, #28
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bc80      	pop	{r7}
 8006fce:	4770      	bx	lr

08006fd0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006fd0:	b480      	push	{r7}
 8006fd2:	b089      	sub	sp, #36	@ 0x24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	61fb      	str	r3, [r7, #28]
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	1c5a      	adds	r2, r3, #1
 8006fec:	61fa      	str	r2, [r7, #28]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	1c5a      	adds	r2, r3, #1
 8006ff6:	61ba      	str	r2, [r7, #24]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	1acb      	subs	r3, r1, r3
 8006ffc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	3b01      	subs	r3, #1
 8007002:	607b      	str	r3, [r7, #4]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d002      	beq.n	8007010 <mem_cmp+0x40>
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d0eb      	beq.n	8006fe8 <mem_cmp+0x18>

	return r;
 8007010:	697b      	ldr	r3, [r7, #20]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3724      	adds	r7, #36	@ 0x24
 8007016:	46bd      	mov	sp, r7
 8007018:	bc80      	pop	{r7}
 800701a:	4770      	bx	lr

0800701c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007026:	e002      	b.n	800702e <chk_chr+0x12>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	3301      	adds	r3, #1
 800702c:	607b      	str	r3, [r7, #4]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d005      	beq.n	8007042 <chk_chr+0x26>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	4293      	cmp	r3, r2
 8007040:	d1f2      	bne.n	8007028 <chk_chr+0xc>
	return *str;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	781b      	ldrb	r3, [r3, #0]
}
 8007046:	4618      	mov	r0, r3
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	bc80      	pop	{r7}
 800704e:	4770      	bx	lr

08007050 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800705a:	2300      	movs	r3, #0
 800705c:	60bb      	str	r3, [r7, #8]
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	60fb      	str	r3, [r7, #12]
 8007062:	e029      	b.n	80070b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007064:	4a26      	ldr	r2, [pc, #152]	@ (8007100 <chk_lock+0xb0>)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	011b      	lsls	r3, r3, #4
 800706a:	4413      	add	r3, r2
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d01d      	beq.n	80070ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007072:	4a23      	ldr	r2, [pc, #140]	@ (8007100 <chk_lock+0xb0>)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	011b      	lsls	r3, r3, #4
 8007078:	4413      	add	r3, r2
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	429a      	cmp	r2, r3
 8007082:	d116      	bne.n	80070b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007084:	4a1e      	ldr	r2, [pc, #120]	@ (8007100 <chk_lock+0xb0>)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	011b      	lsls	r3, r3, #4
 800708a:	4413      	add	r3, r2
 800708c:	3304      	adds	r3, #4
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007094:	429a      	cmp	r2, r3
 8007096:	d10c      	bne.n	80070b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007098:	4a19      	ldr	r2, [pc, #100]	@ (8007100 <chk_lock+0xb0>)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	011b      	lsls	r3, r3, #4
 800709e:	4413      	add	r3, r2
 80070a0:	3308      	adds	r3, #8
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d102      	bne.n	80070b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80070ac:	e007      	b.n	80070be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80070ae:	2301      	movs	r3, #1
 80070b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3301      	adds	r3, #1
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d9d2      	bls.n	8007064 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d109      	bne.n	80070d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d102      	bne.n	80070d0 <chk_lock+0x80>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d101      	bne.n	80070d4 <chk_lock+0x84>
 80070d0:	2300      	movs	r3, #0
 80070d2:	e010      	b.n	80070f6 <chk_lock+0xa6>
 80070d4:	2312      	movs	r3, #18
 80070d6:	e00e      	b.n	80070f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d108      	bne.n	80070f0 <chk_lock+0xa0>
 80070de:	4a08      	ldr	r2, [pc, #32]	@ (8007100 <chk_lock+0xb0>)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	011b      	lsls	r3, r3, #4
 80070e4:	4413      	add	r3, r2
 80070e6:	330c      	adds	r3, #12
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070ee:	d101      	bne.n	80070f4 <chk_lock+0xa4>
 80070f0:	2310      	movs	r3, #16
 80070f2:	e000      	b.n	80070f6 <chk_lock+0xa6>
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3714      	adds	r7, #20
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bc80      	pop	{r7}
 80070fe:	4770      	bx	lr
 8007100:	200002d4 	.word	0x200002d4

08007104 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800710a:	2300      	movs	r3, #0
 800710c:	607b      	str	r3, [r7, #4]
 800710e:	e002      	b.n	8007116 <enq_lock+0x12>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	3301      	adds	r3, #1
 8007114:	607b      	str	r3, [r7, #4]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d806      	bhi.n	800712a <enq_lock+0x26>
 800711c:	4a08      	ldr	r2, [pc, #32]	@ (8007140 <enq_lock+0x3c>)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	011b      	lsls	r3, r3, #4
 8007122:	4413      	add	r3, r2
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1f2      	bne.n	8007110 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b02      	cmp	r3, #2
 800712e:	bf14      	ite	ne
 8007130:	2301      	movne	r3, #1
 8007132:	2300      	moveq	r3, #0
 8007134:	b2db      	uxtb	r3, r3
}
 8007136:	4618      	mov	r0, r3
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	bc80      	pop	{r7}
 800713e:	4770      	bx	lr
 8007140:	200002d4 	.word	0x200002d4

08007144 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800714e:	2300      	movs	r3, #0
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	e01f      	b.n	8007194 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007154:	4a41      	ldr	r2, [pc, #260]	@ (800725c <inc_lock+0x118>)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	011b      	lsls	r3, r3, #4
 800715a:	4413      	add	r3, r2
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	429a      	cmp	r2, r3
 8007164:	d113      	bne.n	800718e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007166:	4a3d      	ldr	r2, [pc, #244]	@ (800725c <inc_lock+0x118>)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	011b      	lsls	r3, r3, #4
 800716c:	4413      	add	r3, r2
 800716e:	3304      	adds	r3, #4
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007176:	429a      	cmp	r2, r3
 8007178:	d109      	bne.n	800718e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800717a:	4a38      	ldr	r2, [pc, #224]	@ (800725c <inc_lock+0x118>)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	011b      	lsls	r3, r3, #4
 8007180:	4413      	add	r3, r2
 8007182:	3308      	adds	r3, #8
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800718a:	429a      	cmp	r2, r3
 800718c:	d006      	beq.n	800719c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	3301      	adds	r3, #1
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d9dc      	bls.n	8007154 <inc_lock+0x10>
 800719a:	e000      	b.n	800719e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800719c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d132      	bne.n	800720a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80071a4:	2300      	movs	r3, #0
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	e002      	b.n	80071b0 <inc_lock+0x6c>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3301      	adds	r3, #1
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d806      	bhi.n	80071c4 <inc_lock+0x80>
 80071b6:	4a29      	ldr	r2, [pc, #164]	@ (800725c <inc_lock+0x118>)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	011b      	lsls	r3, r3, #4
 80071bc:	4413      	add	r3, r2
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1f2      	bne.n	80071aa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d101      	bne.n	80071ce <inc_lock+0x8a>
 80071ca:	2300      	movs	r3, #0
 80071cc:	e040      	b.n	8007250 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	4922      	ldr	r1, [pc, #136]	@ (800725c <inc_lock+0x118>)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	011b      	lsls	r3, r3, #4
 80071d8:	440b      	add	r3, r1
 80071da:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689a      	ldr	r2, [r3, #8]
 80071e0:	491e      	ldr	r1, [pc, #120]	@ (800725c <inc_lock+0x118>)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	011b      	lsls	r3, r3, #4
 80071e6:	440b      	add	r3, r1
 80071e8:	3304      	adds	r3, #4
 80071ea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	695a      	ldr	r2, [r3, #20]
 80071f0:	491a      	ldr	r1, [pc, #104]	@ (800725c <inc_lock+0x118>)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	011b      	lsls	r3, r3, #4
 80071f6:	440b      	add	r3, r1
 80071f8:	3308      	adds	r3, #8
 80071fa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80071fc:	4a17      	ldr	r2, [pc, #92]	@ (800725c <inc_lock+0x118>)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	011b      	lsls	r3, r3, #4
 8007202:	4413      	add	r3, r2
 8007204:	330c      	adds	r3, #12
 8007206:	2200      	movs	r2, #0
 8007208:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d009      	beq.n	8007224 <inc_lock+0xe0>
 8007210:	4a12      	ldr	r2, [pc, #72]	@ (800725c <inc_lock+0x118>)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	011b      	lsls	r3, r3, #4
 8007216:	4413      	add	r3, r2
 8007218:	330c      	adds	r3, #12
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <inc_lock+0xe0>
 8007220:	2300      	movs	r3, #0
 8007222:	e015      	b.n	8007250 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d108      	bne.n	800723c <inc_lock+0xf8>
 800722a:	4a0c      	ldr	r2, [pc, #48]	@ (800725c <inc_lock+0x118>)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	011b      	lsls	r3, r3, #4
 8007230:	4413      	add	r3, r2
 8007232:	330c      	adds	r3, #12
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	3301      	adds	r3, #1
 8007238:	b29a      	uxth	r2, r3
 800723a:	e001      	b.n	8007240 <inc_lock+0xfc>
 800723c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007240:	4906      	ldr	r1, [pc, #24]	@ (800725c <inc_lock+0x118>)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	011b      	lsls	r3, r3, #4
 8007246:	440b      	add	r3, r1
 8007248:	330c      	adds	r3, #12
 800724a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	3301      	adds	r3, #1
}
 8007250:	4618      	mov	r0, r3
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	bc80      	pop	{r7}
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	200002d4 	.word	0x200002d4

08007260 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	3b01      	subs	r3, #1
 800726c:	607b      	str	r3, [r7, #4]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d825      	bhi.n	80072c0 <dec_lock+0x60>
		n = Files[i].ctr;
 8007274:	4a16      	ldr	r2, [pc, #88]	@ (80072d0 <dec_lock+0x70>)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	011b      	lsls	r3, r3, #4
 800727a:	4413      	add	r3, r2
 800727c:	330c      	adds	r3, #12
 800727e:	881b      	ldrh	r3, [r3, #0]
 8007280:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007282:	89fb      	ldrh	r3, [r7, #14]
 8007284:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007288:	d101      	bne.n	800728e <dec_lock+0x2e>
 800728a:	2300      	movs	r3, #0
 800728c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800728e:	89fb      	ldrh	r3, [r7, #14]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d002      	beq.n	800729a <dec_lock+0x3a>
 8007294:	89fb      	ldrh	r3, [r7, #14]
 8007296:	3b01      	subs	r3, #1
 8007298:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800729a:	4a0d      	ldr	r2, [pc, #52]	@ (80072d0 <dec_lock+0x70>)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	011b      	lsls	r3, r3, #4
 80072a0:	4413      	add	r3, r2
 80072a2:	330c      	adds	r3, #12
 80072a4:	89fa      	ldrh	r2, [r7, #14]
 80072a6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80072a8:	89fb      	ldrh	r3, [r7, #14]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d105      	bne.n	80072ba <dec_lock+0x5a>
 80072ae:	4a08      	ldr	r2, [pc, #32]	@ (80072d0 <dec_lock+0x70>)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	011b      	lsls	r3, r3, #4
 80072b4:	4413      	add	r3, r2
 80072b6:	2200      	movs	r2, #0
 80072b8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	737b      	strb	r3, [r7, #13]
 80072be:	e001      	b.n	80072c4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80072c0:	2302      	movs	r3, #2
 80072c2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80072c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bc80      	pop	{r7}
 80072ce:	4770      	bx	lr
 80072d0:	200002d4 	.word	0x200002d4

080072d4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80072dc:	2300      	movs	r3, #0
 80072de:	60fb      	str	r3, [r7, #12]
 80072e0:	e010      	b.n	8007304 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80072e2:	4a0d      	ldr	r2, [pc, #52]	@ (8007318 <clear_lock+0x44>)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	011b      	lsls	r3, r3, #4
 80072e8:	4413      	add	r3, r2
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d105      	bne.n	80072fe <clear_lock+0x2a>
 80072f2:	4a09      	ldr	r2, [pc, #36]	@ (8007318 <clear_lock+0x44>)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	011b      	lsls	r3, r3, #4
 80072f8:	4413      	add	r3, r2
 80072fa:	2200      	movs	r2, #0
 80072fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	3301      	adds	r3, #1
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d9eb      	bls.n	80072e2 <clear_lock+0xe>
	}
}
 800730a:	bf00      	nop
 800730c:	bf00      	nop
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	bc80      	pop	{r7}
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	200002d4 	.word	0x200002d4

0800731c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	78db      	ldrb	r3, [r3, #3]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d034      	beq.n	800739a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007334:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	7858      	ldrb	r0, [r3, #1]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007340:	2301      	movs	r3, #1
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	f7ff fd4e 	bl	8006de4 <disk_write>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d002      	beq.n	8007354 <sync_window+0x38>
			res = FR_DISK_ERR;
 800734e:	2301      	movs	r3, #1
 8007350:	73fb      	strb	r3, [r7, #15]
 8007352:	e022      	b.n	800739a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	1ad2      	subs	r2, r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	429a      	cmp	r2, r3
 8007368:	d217      	bcs.n	800739a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	789b      	ldrb	r3, [r3, #2]
 800736e:	613b      	str	r3, [r7, #16]
 8007370:	e010      	b.n	8007394 <sync_window+0x78>
					wsect += fs->fsize;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	4413      	add	r3, r2
 800737a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	7858      	ldrb	r0, [r3, #1]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007386:	2301      	movs	r3, #1
 8007388:	697a      	ldr	r2, [r7, #20]
 800738a:	f7ff fd2b 	bl	8006de4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	3b01      	subs	r3, #1
 8007392:	613b      	str	r3, [r7, #16]
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d8eb      	bhi.n	8007372 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800739a:	7bfb      	ldrb	r3, [r7, #15]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3718      	adds	r7, #24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d01b      	beq.n	80073f4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f7ff ffad 	bl	800731c <sync_window>
 80073c2:	4603      	mov	r3, r0
 80073c4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80073c6:	7bfb      	ldrb	r3, [r7, #15]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d113      	bne.n	80073f4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	7858      	ldrb	r0, [r3, #1]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80073d6:	2301      	movs	r3, #1
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	f7ff fce3 	bl	8006da4 <disk_read>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d004      	beq.n	80073ee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80073e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073e8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
	...

08007400 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7ff ff87 	bl	800731c <sync_window>
 800740e:	4603      	mov	r3, r0
 8007410:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007412:	7bfb      	ldrb	r3, [r7, #15]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d158      	bne.n	80074ca <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	2b03      	cmp	r3, #3
 800741e:	d148      	bne.n	80074b2 <sync_fs+0xb2>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	791b      	ldrb	r3, [r3, #4]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d144      	bne.n	80074b2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	3330      	adds	r3, #48	@ 0x30
 800742c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007430:	2100      	movs	r1, #0
 8007432:	4618      	mov	r0, r3
 8007434:	f7ff fdb2 	bl	8006f9c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	3330      	adds	r3, #48	@ 0x30
 800743c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007440:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007444:	4618      	mov	r0, r3
 8007446:	f7ff fd44 	bl	8006ed2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	3330      	adds	r3, #48	@ 0x30
 800744e:	4921      	ldr	r1, [pc, #132]	@ (80074d4 <sync_fs+0xd4>)
 8007450:	4618      	mov	r0, r3
 8007452:	f7ff fd58 	bl	8006f06 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	3330      	adds	r3, #48	@ 0x30
 800745a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800745e:	491e      	ldr	r1, [pc, #120]	@ (80074d8 <sync_fs+0xd8>)
 8007460:	4618      	mov	r0, r3
 8007462:	f7ff fd50 	bl	8006f06 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	3330      	adds	r3, #48	@ 0x30
 800746a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	4619      	mov	r1, r3
 8007474:	4610      	mov	r0, r2
 8007476:	f7ff fd46 	bl	8006f06 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	3330      	adds	r3, #48	@ 0x30
 800747e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	4619      	mov	r1, r3
 8007488:	4610      	mov	r0, r2
 800748a:	f7ff fd3c 	bl	8006f06 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	1c5a      	adds	r2, r3, #1
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	7858      	ldrb	r0, [r3, #1]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074a6:	2301      	movs	r3, #1
 80074a8:	f7ff fc9c 	bl	8006de4 <disk_write>
			fs->fsi_flag = 0;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	785b      	ldrb	r3, [r3, #1]
 80074b6:	2200      	movs	r2, #0
 80074b8:	2100      	movs	r1, #0
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7ff fcb2 	bl	8006e24 <disk_ioctl>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <sync_fs+0xca>
 80074c6:	2301      	movs	r3, #1
 80074c8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	41615252 	.word	0x41615252
 80074d8:	61417272 	.word	0x61417272

080074dc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	3b02      	subs	r3, #2
 80074ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	3b02      	subs	r3, #2
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d301      	bcc.n	80074fc <clust2sect+0x20>
 80074f8:	2300      	movs	r3, #0
 80074fa:	e008      	b.n	800750e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	895b      	ldrh	r3, [r3, #10]
 8007500:	461a      	mov	r2, r3
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	fb03 f202 	mul.w	r2, r3, r2
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800750c:	4413      	add	r3, r2
}
 800750e:	4618      	mov	r0, r3
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	bc80      	pop	{r7}
 8007516:	4770      	bx	lr

08007518 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d904      	bls.n	8007538 <get_fat+0x20>
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	429a      	cmp	r2, r3
 8007536:	d302      	bcc.n	800753e <get_fat+0x26>
		val = 1;	/* Internal error */
 8007538:	2301      	movs	r3, #1
 800753a:	617b      	str	r3, [r7, #20]
 800753c:	e08e      	b.n	800765c <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800753e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007542:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	2b03      	cmp	r3, #3
 800754a:	d061      	beq.n	8007610 <get_fat+0xf8>
 800754c:	2b03      	cmp	r3, #3
 800754e:	dc7b      	bgt.n	8007648 <get_fat+0x130>
 8007550:	2b01      	cmp	r3, #1
 8007552:	d002      	beq.n	800755a <get_fat+0x42>
 8007554:	2b02      	cmp	r3, #2
 8007556:	d041      	beq.n	80075dc <get_fat+0xc4>
 8007558:	e076      	b.n	8007648 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	60fb      	str	r3, [r7, #12]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	085b      	lsrs	r3, r3, #1
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	4413      	add	r3, r2
 8007566:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	6a1a      	ldr	r2, [r3, #32]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	0a5b      	lsrs	r3, r3, #9
 8007570:	4413      	add	r3, r2
 8007572:	4619      	mov	r1, r3
 8007574:	6938      	ldr	r0, [r7, #16]
 8007576:	f7ff ff15 	bl	80073a4 <move_window>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d166      	bne.n	800764e <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	1c5a      	adds	r2, r3, #1
 8007584:	60fa      	str	r2, [r7, #12]
 8007586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	4413      	add	r3, r2
 800758e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007592:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	6a1a      	ldr	r2, [r3, #32]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	0a5b      	lsrs	r3, r3, #9
 800759c:	4413      	add	r3, r2
 800759e:	4619      	mov	r1, r3
 80075a0:	6938      	ldr	r0, [r7, #16]
 80075a2:	f7ff feff 	bl	80073a4 <move_window>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d152      	bne.n	8007652 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	4413      	add	r3, r2
 80075b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80075ba:	021b      	lsls	r3, r3, #8
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	4313      	orrs	r3, r2
 80075c0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	f003 0301 	and.w	r3, r3, #1
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d002      	beq.n	80075d2 <get_fat+0xba>
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	091b      	lsrs	r3, r3, #4
 80075d0:	e002      	b.n	80075d8 <get_fat+0xc0>
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075d8:	617b      	str	r3, [r7, #20]
			break;
 80075da:	e03f      	b.n	800765c <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	6a1a      	ldr	r2, [r3, #32]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	0a1b      	lsrs	r3, r3, #8
 80075e4:	4413      	add	r3, r2
 80075e6:	4619      	mov	r1, r3
 80075e8:	6938      	ldr	r0, [r7, #16]
 80075ea:	f7ff fedb 	bl	80073a4 <move_window>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d130      	bne.n	8007656 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	005b      	lsls	r3, r3, #1
 80075fe:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007602:	4413      	add	r3, r2
 8007604:	4618      	mov	r0, r3
 8007606:	f7ff fc2b 	bl	8006e60 <ld_word>
 800760a:	4603      	mov	r3, r0
 800760c:	617b      	str	r3, [r7, #20]
			break;
 800760e:	e025      	b.n	800765c <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	6a1a      	ldr	r2, [r3, #32]
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	09db      	lsrs	r3, r3, #7
 8007618:	4413      	add	r3, r2
 800761a:	4619      	mov	r1, r3
 800761c:	6938      	ldr	r0, [r7, #16]
 800761e:	f7ff fec1 	bl	80073a4 <move_window>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d118      	bne.n	800765a <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007636:	4413      	add	r3, r2
 8007638:	4618      	mov	r0, r3
 800763a:	f7ff fc28 	bl	8006e8e <ld_dword>
 800763e:	4603      	mov	r3, r0
 8007640:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007644:	617b      	str	r3, [r7, #20]
			break;
 8007646:	e009      	b.n	800765c <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007648:	2301      	movs	r3, #1
 800764a:	617b      	str	r3, [r7, #20]
 800764c:	e006      	b.n	800765c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800764e:	bf00      	nop
 8007650:	e004      	b.n	800765c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007652:	bf00      	nop
 8007654:	e002      	b.n	800765c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007656:	bf00      	nop
 8007658:	e000      	b.n	800765c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800765a:	bf00      	nop
		}
	}

	return val;
 800765c:	697b      	ldr	r3, [r7, #20]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007666:	b590      	push	{r4, r7, lr}
 8007668:	b089      	sub	sp, #36	@ 0x24
 800766a:	af00      	add	r7, sp, #0
 800766c:	60f8      	str	r0, [r7, #12]
 800766e:	60b9      	str	r1, [r7, #8]
 8007670:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007672:	2302      	movs	r3, #2
 8007674:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	2b01      	cmp	r3, #1
 800767a:	f240 80d9 	bls.w	8007830 <put_fat+0x1ca>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	429a      	cmp	r2, r3
 8007686:	f080 80d3 	bcs.w	8007830 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	2b03      	cmp	r3, #3
 8007690:	f000 8096 	beq.w	80077c0 <put_fat+0x15a>
 8007694:	2b03      	cmp	r3, #3
 8007696:	f300 80cb 	bgt.w	8007830 <put_fat+0x1ca>
 800769a:	2b01      	cmp	r3, #1
 800769c:	d002      	beq.n	80076a4 <put_fat+0x3e>
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d06e      	beq.n	8007780 <put_fat+0x11a>
 80076a2:	e0c5      	b.n	8007830 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	61bb      	str	r3, [r7, #24]
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	085b      	lsrs	r3, r3, #1
 80076ac:	69ba      	ldr	r2, [r7, #24]
 80076ae:	4413      	add	r3, r2
 80076b0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6a1a      	ldr	r2, [r3, #32]
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	0a5b      	lsrs	r3, r3, #9
 80076ba:	4413      	add	r3, r2
 80076bc:	4619      	mov	r1, r3
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f7ff fe70 	bl	80073a4 <move_window>
 80076c4:	4603      	mov	r3, r0
 80076c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80076c8:	7ffb      	ldrb	r3, [r7, #31]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f040 80a9 	bne.w	8007822 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	1c59      	adds	r1, r3, #1
 80076da:	61b9      	str	r1, [r7, #24]
 80076dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e0:	4413      	add	r3, r2
 80076e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00d      	beq.n	800770a <put_fat+0xa4>
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	b25b      	sxtb	r3, r3
 80076f4:	f003 030f 	and.w	r3, r3, #15
 80076f8:	b25a      	sxtb	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	011b      	lsls	r3, r3, #4
 8007700:	b25b      	sxtb	r3, r3
 8007702:	4313      	orrs	r3, r2
 8007704:	b25b      	sxtb	r3, r3
 8007706:	b2db      	uxtb	r3, r3
 8007708:	e001      	b.n	800770e <put_fat+0xa8>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	b2db      	uxtb	r3, r3
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2201      	movs	r2, #1
 8007716:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6a1a      	ldr	r2, [r3, #32]
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	0a5b      	lsrs	r3, r3, #9
 8007720:	4413      	add	r3, r2
 8007722:	4619      	mov	r1, r3
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f7ff fe3d 	bl	80073a4 <move_window>
 800772a:	4603      	mov	r3, r0
 800772c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800772e:	7ffb      	ldrb	r3, [r7, #31]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d178      	bne.n	8007826 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007740:	4413      	add	r3, r2
 8007742:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b00      	cmp	r3, #0
 800774c:	d003      	beq.n	8007756 <put_fat+0xf0>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	091b      	lsrs	r3, r3, #4
 8007752:	b2db      	uxtb	r3, r3
 8007754:	e00e      	b.n	8007774 <put_fat+0x10e>
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	b25b      	sxtb	r3, r3
 800775c:	f023 030f 	bic.w	r3, r3, #15
 8007760:	b25a      	sxtb	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	0a1b      	lsrs	r3, r3, #8
 8007766:	b25b      	sxtb	r3, r3
 8007768:	f003 030f 	and.w	r3, r3, #15
 800776c:	b25b      	sxtb	r3, r3
 800776e:	4313      	orrs	r3, r2
 8007770:	b25b      	sxtb	r3, r3
 8007772:	b2db      	uxtb	r3, r3
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2201      	movs	r2, #1
 800777c:	70da      	strb	r2, [r3, #3]
			break;
 800777e:	e057      	b.n	8007830 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6a1a      	ldr	r2, [r3, #32]
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	0a1b      	lsrs	r3, r3, #8
 8007788:	4413      	add	r3, r2
 800778a:	4619      	mov	r1, r3
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f7ff fe09 	bl	80073a4 <move_window>
 8007792:	4603      	mov	r3, r0
 8007794:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007796:	7ffb      	ldrb	r3, [r7, #31]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d146      	bne.n	800782a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	005b      	lsls	r3, r3, #1
 80077a6:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80077aa:	4413      	add	r3, r2
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	b292      	uxth	r2, r2
 80077b0:	4611      	mov	r1, r2
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7ff fb8d 	bl	8006ed2 <st_word>
			fs->wflag = 1;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2201      	movs	r2, #1
 80077bc:	70da      	strb	r2, [r3, #3]
			break;
 80077be:	e037      	b.n	8007830 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6a1a      	ldr	r2, [r3, #32]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	09db      	lsrs	r3, r3, #7
 80077c8:	4413      	add	r3, r2
 80077ca:	4619      	mov	r1, r3
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f7ff fde9 	bl	80073a4 <move_window>
 80077d2:	4603      	mov	r3, r0
 80077d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80077d6:	7ffb      	ldrb	r3, [r7, #31]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d128      	bne.n	800782e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80077f0:	4413      	add	r3, r2
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7ff fb4b 	bl	8006e8e <ld_dword>
 80077f8:	4603      	mov	r3, r0
 80077fa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80077fe:	4323      	orrs	r3, r4
 8007800:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007810:	4413      	add	r3, r2
 8007812:	6879      	ldr	r1, [r7, #4]
 8007814:	4618      	mov	r0, r3
 8007816:	f7ff fb76 	bl	8006f06 <st_dword>
			fs->wflag = 1;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2201      	movs	r2, #1
 800781e:	70da      	strb	r2, [r3, #3]
			break;
 8007820:	e006      	b.n	8007830 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007822:	bf00      	nop
 8007824:	e004      	b.n	8007830 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007826:	bf00      	nop
 8007828:	e002      	b.n	8007830 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800782a:	bf00      	nop
 800782c:	e000      	b.n	8007830 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800782e:	bf00      	nop
		}
	}
	return res;
 8007830:	7ffb      	ldrb	r3, [r7, #31]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3724      	adds	r7, #36	@ 0x24
 8007836:	46bd      	mov	sp, r7
 8007838:	bd90      	pop	{r4, r7, pc}

0800783a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b088      	sub	sp, #32
 800783e:	af00      	add	r7, sp, #0
 8007840:	60f8      	str	r0, [r7, #12]
 8007842:	60b9      	str	r1, [r7, #8]
 8007844:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d904      	bls.n	8007860 <remove_chain+0x26>
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	429a      	cmp	r2, r3
 800785e:	d301      	bcc.n	8007864 <remove_chain+0x2a>
 8007860:	2302      	movs	r3, #2
 8007862:	e04b      	b.n	80078fc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00c      	beq.n	8007884 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800786a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800786e:	6879      	ldr	r1, [r7, #4]
 8007870:	69b8      	ldr	r0, [r7, #24]
 8007872:	f7ff fef8 	bl	8007666 <put_fat>
 8007876:	4603      	mov	r3, r0
 8007878:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800787a:	7ffb      	ldrb	r3, [r7, #31]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d001      	beq.n	8007884 <remove_chain+0x4a>
 8007880:	7ffb      	ldrb	r3, [r7, #31]
 8007882:	e03b      	b.n	80078fc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007884:	68b9      	ldr	r1, [r7, #8]
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f7ff fe46 	bl	8007518 <get_fat>
 800788c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d031      	beq.n	80078f8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d101      	bne.n	800789e <remove_chain+0x64>
 800789a:	2302      	movs	r3, #2
 800789c:	e02e      	b.n	80078fc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078a4:	d101      	bne.n	80078aa <remove_chain+0x70>
 80078a6:	2301      	movs	r3, #1
 80078a8:	e028      	b.n	80078fc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80078aa:	2200      	movs	r2, #0
 80078ac:	68b9      	ldr	r1, [r7, #8]
 80078ae:	69b8      	ldr	r0, [r7, #24]
 80078b0:	f7ff fed9 	bl	8007666 <put_fat>
 80078b4:	4603      	mov	r3, r0
 80078b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80078b8:	7ffb      	ldrb	r3, [r7, #31]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <remove_chain+0x88>
 80078be:	7ffb      	ldrb	r3, [r7, #31]
 80078c0:	e01c      	b.n	80078fc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	691a      	ldr	r2, [r3, #16]
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	3b02      	subs	r3, #2
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d20b      	bcs.n	80078e8 <remove_chain+0xae>
			fs->free_clst++;
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	1c5a      	adds	r2, r3, #1
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	791b      	ldrb	r3, [r3, #4]
 80078de:	f043 0301 	orr.w	r3, r3, #1
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d3c6      	bcc.n	8007884 <remove_chain+0x4a>
 80078f6:	e000      	b.n	80078fa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80078f8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3720      	adds	r7, #32
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b088      	sub	sp, #32
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10d      	bne.n	8007936 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d004      	beq.n	8007930 <create_chain+0x2c>
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	69ba      	ldr	r2, [r7, #24]
 800792c:	429a      	cmp	r2, r3
 800792e:	d31b      	bcc.n	8007968 <create_chain+0x64>
 8007930:	2301      	movs	r3, #1
 8007932:	61bb      	str	r3, [r7, #24]
 8007934:	e018      	b.n	8007968 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007936:	6839      	ldr	r1, [r7, #0]
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f7ff fded 	bl	8007518 <get_fat>
 800793e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d801      	bhi.n	800794a <create_chain+0x46>
 8007946:	2301      	movs	r3, #1
 8007948:	e070      	b.n	8007a2c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007950:	d101      	bne.n	8007956 <create_chain+0x52>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	e06a      	b.n	8007a2c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	429a      	cmp	r2, r3
 800795e:	d201      	bcs.n	8007964 <create_chain+0x60>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	e063      	b.n	8007a2c <create_chain+0x128>
		scl = clst;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	3301      	adds	r3, #1
 8007970:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	69fa      	ldr	r2, [r7, #28]
 8007978:	429a      	cmp	r2, r3
 800797a:	d307      	bcc.n	800798c <create_chain+0x88>
				ncl = 2;
 800797c:	2302      	movs	r3, #2
 800797e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007980:	69fa      	ldr	r2, [r7, #28]
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	429a      	cmp	r2, r3
 8007986:	d901      	bls.n	800798c <create_chain+0x88>
 8007988:	2300      	movs	r3, #0
 800798a:	e04f      	b.n	8007a2c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800798c:	69f9      	ldr	r1, [r7, #28]
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7ff fdc2 	bl	8007518 <get_fat>
 8007994:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00e      	beq.n	80079ba <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d003      	beq.n	80079aa <create_chain+0xa6>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079a8:	d101      	bne.n	80079ae <create_chain+0xaa>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	e03e      	b.n	8007a2c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80079ae:	69fa      	ldr	r2, [r7, #28]
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d1da      	bne.n	800796c <create_chain+0x68>
 80079b6:	2300      	movs	r3, #0
 80079b8:	e038      	b.n	8007a2c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80079ba:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80079bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80079c0:	69f9      	ldr	r1, [r7, #28]
 80079c2:	6938      	ldr	r0, [r7, #16]
 80079c4:	f7ff fe4f 	bl	8007666 <put_fat>
 80079c8:	4603      	mov	r3, r0
 80079ca:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80079cc:	7dfb      	ldrb	r3, [r7, #23]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d109      	bne.n	80079e6 <create_chain+0xe2>
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d006      	beq.n	80079e6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80079d8:	69fa      	ldr	r2, [r7, #28]
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6938      	ldr	r0, [r7, #16]
 80079de:	f7ff fe42 	bl	8007666 <put_fat>
 80079e2:	4603      	mov	r3, r0
 80079e4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80079e6:	7dfb      	ldrb	r3, [r7, #23]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d116      	bne.n	8007a1a <create_chain+0x116>
		fs->last_clst = ncl;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	69fa      	ldr	r2, [r7, #28]
 80079f0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	691a      	ldr	r2, [r3, #16]
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	695b      	ldr	r3, [r3, #20]
 80079fa:	3b02      	subs	r3, #2
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d804      	bhi.n	8007a0a <create_chain+0x106>
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	1e5a      	subs	r2, r3, #1
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	791b      	ldrb	r3, [r3, #4]
 8007a0e:	f043 0301 	orr.w	r3, r3, #1
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	711a      	strb	r2, [r3, #4]
 8007a18:	e007      	b.n	8007a2a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007a1a:	7dfb      	ldrb	r3, [r7, #23]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d102      	bne.n	8007a26 <create_chain+0x122>
 8007a20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a24:	e000      	b.n	8007a28 <create_chain+0x124>
 8007a26:	2301      	movs	r3, #1
 8007a28:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007a2a:	69fb      	ldr	r3, [r7, #28]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3720      	adds	r7, #32
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b087      	sub	sp, #28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a48:	3304      	adds	r3, #4
 8007a4a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	0a5b      	lsrs	r3, r3, #9
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	8952      	ldrh	r2, [r2, #10]
 8007a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a58:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	1d1a      	adds	r2, r3, #4
 8007a5e:	613a      	str	r2, [r7, #16]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <clmt_clust+0x3a>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	e010      	b.n	8007a90 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d307      	bcc.n	8007a86 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	617b      	str	r3, [r7, #20]
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	3304      	adds	r3, #4
 8007a82:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007a84:	e7e9      	b.n	8007a5a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007a86:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	4413      	add	r3, r2
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	371c      	adds	r7, #28
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bc80      	pop	{r7}
 8007a98:	4770      	bx	lr

08007a9a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b086      	sub	sp, #24
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ab0:	d204      	bcs.n	8007abc <dir_sdi+0x22>
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	f003 031f 	and.w	r3, r3, #31
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d001      	beq.n	8007ac0 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007abc:	2302      	movs	r3, #2
 8007abe:	e063      	b.n	8007b88 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d106      	bne.n	8007ae0 <dir_sdi+0x46>
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d902      	bls.n	8007ae0 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ade:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d10c      	bne.n	8007b00 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	095b      	lsrs	r3, r3, #5
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	8912      	ldrh	r2, [r2, #8]
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d301      	bcc.n	8007af6 <dir_sdi+0x5c>
 8007af2:	2302      	movs	r3, #2
 8007af4:	e048      	b.n	8007b88 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	61da      	str	r2, [r3, #28]
 8007afe:	e029      	b.n	8007b54 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	895b      	ldrh	r3, [r3, #10]
 8007b04:	025b      	lsls	r3, r3, #9
 8007b06:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007b08:	e019      	b.n	8007b3e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6979      	ldr	r1, [r7, #20]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7ff fd02 	bl	8007518 <get_fat>
 8007b14:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b1c:	d101      	bne.n	8007b22 <dir_sdi+0x88>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e032      	b.n	8007b88 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d904      	bls.n	8007b32 <dir_sdi+0x98>
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d301      	bcc.n	8007b36 <dir_sdi+0x9c>
 8007b32:	2302      	movs	r3, #2
 8007b34:	e028      	b.n	8007b88 <dir_sdi+0xee>
			ofs -= csz;
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d2e1      	bcs.n	8007b0a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007b46:	6979      	ldr	r1, [r7, #20]
 8007b48:	6938      	ldr	r0, [r7, #16]
 8007b4a:	f7ff fcc7 	bl	80074dc <clust2sect>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <dir_sdi+0xcc>
 8007b62:	2302      	movs	r3, #2
 8007b64:	e010      	b.n	8007b88 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	69da      	ldr	r2, [r3, #28]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	0a5b      	lsrs	r3, r3, #9
 8007b6e:	441a      	add	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b80:	441a      	add	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3718      	adds	r7, #24
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	3320      	adds	r3, #32
 8007ba6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	69db      	ldr	r3, [r3, #28]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d003      	beq.n	8007bb8 <dir_next+0x28>
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007bb6:	d301      	bcc.n	8007bbc <dir_next+0x2c>
 8007bb8:	2304      	movs	r3, #4
 8007bba:	e0aa      	b.n	8007d12 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f040 8098 	bne.w	8007cf8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	69db      	ldr	r3, [r3, #28]
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10b      	bne.n	8007bf2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	095b      	lsrs	r3, r3, #5
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	8912      	ldrh	r2, [r2, #8]
 8007be2:	4293      	cmp	r3, r2
 8007be4:	f0c0 8088 	bcc.w	8007cf8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	61da      	str	r2, [r3, #28]
 8007bee:	2304      	movs	r3, #4
 8007bf0:	e08f      	b.n	8007d12 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	0a5b      	lsrs	r3, r3, #9
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	8952      	ldrh	r2, [r2, #10]
 8007bfa:	3a01      	subs	r2, #1
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d17a      	bne.n	8007cf8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	4619      	mov	r1, r3
 8007c0a:	4610      	mov	r0, r2
 8007c0c:	f7ff fc84 	bl	8007518 <get_fat>
 8007c10:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d801      	bhi.n	8007c1c <dir_next+0x8c>
 8007c18:	2302      	movs	r3, #2
 8007c1a:	e07a      	b.n	8007d12 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c22:	d101      	bne.n	8007c28 <dir_next+0x98>
 8007c24:	2301      	movs	r3, #1
 8007c26:	e074      	b.n	8007d12 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	695b      	ldr	r3, [r3, #20]
 8007c2c:	697a      	ldr	r2, [r7, #20]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d358      	bcc.n	8007ce4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d104      	bne.n	8007c42 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	61da      	str	r2, [r3, #28]
 8007c3e:	2304      	movs	r3, #4
 8007c40:	e067      	b.n	8007d12 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4610      	mov	r0, r2
 8007c4c:	f7ff fe5a 	bl	8007904 <create_chain>
 8007c50:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <dir_next+0xcc>
 8007c58:	2307      	movs	r3, #7
 8007c5a:	e05a      	b.n	8007d12 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d101      	bne.n	8007c66 <dir_next+0xd6>
 8007c62:	2302      	movs	r3, #2
 8007c64:	e055      	b.n	8007d12 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c6c:	d101      	bne.n	8007c72 <dir_next+0xe2>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e04f      	b.n	8007d12 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f7ff fb52 	bl	800731c <sync_window>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <dir_next+0xf2>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e047      	b.n	8007d12 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3330      	adds	r3, #48	@ 0x30
 8007c86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7ff f985 	bl	8006f9c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007c92:	2300      	movs	r3, #0
 8007c94:	613b      	str	r3, [r7, #16]
 8007c96:	6979      	ldr	r1, [r7, #20]
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f7ff fc1f 	bl	80074dc <clust2sect>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007ca4:	e012      	b.n	8007ccc <dir_next+0x13c>
						fs->wflag = 1;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f7ff fb35 	bl	800731c <sync_window>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d001      	beq.n	8007cbc <dir_next+0x12c>
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e02a      	b.n	8007d12 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	613b      	str	r3, [r7, #16]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc6:	1c5a      	adds	r2, r3, #1
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	895b      	ldrh	r3, [r3, #10]
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d3e6      	bcc.n	8007ca6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	1ad2      	subs	r2, r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007cea:	6979      	ldr	r1, [r7, #20]
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f7ff fbf5 	bl	80074dc <clust2sect>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d0a:	441a      	add	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3718      	adds	r7, #24
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b086      	sub	sp, #24
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7ff feb4 	bl	8007a9a <dir_sdi>
 8007d32:	4603      	mov	r3, r0
 8007d34:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007d36:	7dfb      	ldrb	r3, [r7, #23]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d12b      	bne.n	8007d94 <dir_alloc+0x7a>
		n = 0;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	69db      	ldr	r3, [r3, #28]
 8007d44:	4619      	mov	r1, r3
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f7ff fb2c 	bl	80073a4 <move_window>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007d50:	7dfb      	ldrb	r3, [r7, #23]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d11d      	bne.n	8007d92 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	2be5      	cmp	r3, #229	@ 0xe5
 8007d5e:	d004      	beq.n	8007d6a <dir_alloc+0x50>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a1b      	ldr	r3, [r3, #32]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d107      	bne.n	8007d7a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	613b      	str	r3, [r7, #16]
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d102      	bne.n	8007d7e <dir_alloc+0x64>
 8007d78:	e00c      	b.n	8007d94 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007d7e:	2101      	movs	r1, #1
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7ff ff05 	bl	8007b90 <dir_next>
 8007d86:	4603      	mov	r3, r0
 8007d88:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007d8a:	7dfb      	ldrb	r3, [r7, #23]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d0d7      	beq.n	8007d40 <dir_alloc+0x26>
 8007d90:	e000      	b.n	8007d94 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007d92:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007d94:	7dfb      	ldrb	r3, [r7, #23]
 8007d96:	2b04      	cmp	r3, #4
 8007d98:	d101      	bne.n	8007d9e <dir_alloc+0x84>
 8007d9a:	2307      	movs	r3, #7
 8007d9c:	75fb      	strb	r3, [r7, #23]
	return res;
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3718      	adds	r7, #24
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	331a      	adds	r3, #26
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7ff f852 	bl	8006e60 <ld_word>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	2b03      	cmp	r3, #3
 8007dc6:	d109      	bne.n	8007ddc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	3314      	adds	r3, #20
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7ff f847 	bl	8006e60 <ld_word>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	041b      	lsls	r3, r3, #16
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b084      	sub	sp, #16
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	60f8      	str	r0, [r7, #12]
 8007dee:	60b9      	str	r1, [r7, #8]
 8007df0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	331a      	adds	r3, #26
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	b292      	uxth	r2, r2
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7ff f868 	bl	8006ed2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d109      	bne.n	8007e1e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	f103 0214 	add.w	r2, r3, #20
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	0c1b      	lsrs	r3, r3, #16
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	4619      	mov	r1, r3
 8007e18:	4610      	mov	r0, r2
 8007e1a:	f7ff f85a 	bl	8006ed2 <st_word>
	}
}
 8007e1e:	bf00      	nop
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b086      	sub	sp, #24
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007e34:	2100      	movs	r1, #0
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7ff fe2f 	bl	8007a9a <dir_sdi>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007e40:	7dfb      	ldrb	r3, [r7, #23]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <dir_find+0x24>
 8007e46:	7dfb      	ldrb	r3, [r7, #23]
 8007e48:	e03e      	b.n	8007ec8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6938      	ldr	r0, [r7, #16]
 8007e52:	f7ff faa7 	bl	80073a4 <move_window>
 8007e56:	4603      	mov	r3, r0
 8007e58:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007e5a:	7dfb      	ldrb	r3, [r7, #23]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d12f      	bne.n	8007ec0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a1b      	ldr	r3, [r3, #32]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d102      	bne.n	8007e74 <dir_find+0x4e>
 8007e6e:	2304      	movs	r3, #4
 8007e70:	75fb      	strb	r3, [r7, #23]
 8007e72:	e028      	b.n	8007ec6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a1b      	ldr	r3, [r3, #32]
 8007e78:	330b      	adds	r3, #11
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a1b      	ldr	r3, [r3, #32]
 8007e8a:	330b      	adds	r3, #11
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	f003 0308 	and.w	r3, r3, #8
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10a      	bne.n	8007eac <dir_find+0x86>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a18      	ldr	r0, [r3, #32]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	3324      	adds	r3, #36	@ 0x24
 8007e9e:	220b      	movs	r2, #11
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	f7ff f895 	bl	8006fd0 <mem_cmp>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00b      	beq.n	8007ec4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007eac:	2100      	movs	r1, #0
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7ff fe6e 	bl	8007b90 <dir_next>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007eb8:	7dfb      	ldrb	r3, [r7, #23]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d0c5      	beq.n	8007e4a <dir_find+0x24>
 8007ebe:	e002      	b.n	8007ec6 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007ec0:	bf00      	nop
 8007ec2:	e000      	b.n	8007ec6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007ec4:	bf00      	nop

	return res;
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007ede:	2101      	movs	r1, #1
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f7ff ff1a 	bl	8007d1a <dir_alloc>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007eea:	7bfb      	ldrb	r3, [r7, #15]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d11c      	bne.n	8007f2a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	69db      	ldr	r3, [r3, #28]
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	68b8      	ldr	r0, [r7, #8]
 8007ef8:	f7ff fa54 	bl	80073a4 <move_window>
 8007efc:	4603      	mov	r3, r0
 8007efe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d111      	bne.n	8007f2a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	2220      	movs	r2, #32
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7ff f844 	bl	8006f9c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6a18      	ldr	r0, [r3, #32]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	3324      	adds	r3, #36	@ 0x24
 8007f1c:	220b      	movs	r2, #11
 8007f1e:	4619      	mov	r1, r3
 8007f20:	f7ff f81c 	bl	8006f5c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2201      	movs	r2, #1
 8007f28:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b088      	sub	sp, #32
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	60fb      	str	r3, [r7, #12]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3324      	adds	r3, #36	@ 0x24
 8007f48:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007f4a:	220b      	movs	r2, #11
 8007f4c:	2120      	movs	r1, #32
 8007f4e:	68b8      	ldr	r0, [r7, #8]
 8007f50:	f7ff f824 	bl	8006f9c <mem_set>
	si = i = 0; ni = 8;
 8007f54:	2300      	movs	r3, #0
 8007f56:	613b      	str	r3, [r7, #16]
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	61fb      	str	r3, [r7, #28]
 8007f5c:	2308      	movs	r3, #8
 8007f5e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	1c5a      	adds	r2, r3, #1
 8007f64:	61fa      	str	r2, [r7, #28]
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	4413      	add	r3, r2
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007f6e:	7efb      	ldrb	r3, [r7, #27]
 8007f70:	2b20      	cmp	r3, #32
 8007f72:	d94e      	bls.n	8008012 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007f74:	7efb      	ldrb	r3, [r7, #27]
 8007f76:	2b2f      	cmp	r3, #47	@ 0x2f
 8007f78:	d006      	beq.n	8007f88 <create_name+0x54>
 8007f7a:	7efb      	ldrb	r3, [r7, #27]
 8007f7c:	2b5c      	cmp	r3, #92	@ 0x5c
 8007f7e:	d110      	bne.n	8007fa2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007f80:	e002      	b.n	8007f88 <create_name+0x54>
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	3301      	adds	r3, #1
 8007f86:	61fb      	str	r3, [r7, #28]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	2b2f      	cmp	r3, #47	@ 0x2f
 8007f92:	d0f6      	beq.n	8007f82 <create_name+0x4e>
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	4413      	add	r3, r2
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	2b5c      	cmp	r3, #92	@ 0x5c
 8007f9e:	d0f0      	beq.n	8007f82 <create_name+0x4e>
			break;
 8007fa0:	e038      	b.n	8008014 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007fa2:	7efb      	ldrb	r3, [r7, #27]
 8007fa4:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fa6:	d003      	beq.n	8007fb0 <create_name+0x7c>
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d30c      	bcc.n	8007fca <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	2b0b      	cmp	r3, #11
 8007fb4:	d002      	beq.n	8007fbc <create_name+0x88>
 8007fb6:	7efb      	ldrb	r3, [r7, #27]
 8007fb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fba:	d001      	beq.n	8007fc0 <create_name+0x8c>
 8007fbc:	2306      	movs	r3, #6
 8007fbe:	e044      	b.n	800804a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007fc0:	2308      	movs	r3, #8
 8007fc2:	613b      	str	r3, [r7, #16]
 8007fc4:	230b      	movs	r3, #11
 8007fc6:	617b      	str	r3, [r7, #20]
			continue;
 8007fc8:	e022      	b.n	8008010 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007fca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	da04      	bge.n	8007fdc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007fd2:	7efb      	ldrb	r3, [r7, #27]
 8007fd4:	3b80      	subs	r3, #128	@ 0x80
 8007fd6:	4a1f      	ldr	r2, [pc, #124]	@ (8008054 <create_name+0x120>)
 8007fd8:	5cd3      	ldrb	r3, [r2, r3]
 8007fda:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007fdc:	7efb      	ldrb	r3, [r7, #27]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	481d      	ldr	r0, [pc, #116]	@ (8008058 <create_name+0x124>)
 8007fe2:	f7ff f81b 	bl	800701c <chk_chr>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d001      	beq.n	8007ff0 <create_name+0xbc>
 8007fec:	2306      	movs	r3, #6
 8007fee:	e02c      	b.n	800804a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007ff0:	7efb      	ldrb	r3, [r7, #27]
 8007ff2:	2b60      	cmp	r3, #96	@ 0x60
 8007ff4:	d905      	bls.n	8008002 <create_name+0xce>
 8007ff6:	7efb      	ldrb	r3, [r7, #27]
 8007ff8:	2b7a      	cmp	r3, #122	@ 0x7a
 8007ffa:	d802      	bhi.n	8008002 <create_name+0xce>
 8007ffc:	7efb      	ldrb	r3, [r7, #27]
 8007ffe:	3b20      	subs	r3, #32
 8008000:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	1c5a      	adds	r2, r3, #1
 8008006:	613a      	str	r2, [r7, #16]
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	4413      	add	r3, r2
 800800c:	7efa      	ldrb	r2, [r7, #27]
 800800e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008010:	e7a6      	b.n	8007f60 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008012:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	441a      	add	r2, r3
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d101      	bne.n	8008028 <create_name+0xf4>
 8008024:	2306      	movs	r3, #6
 8008026:	e010      	b.n	800804a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	2be5      	cmp	r3, #229	@ 0xe5
 800802e:	d102      	bne.n	8008036 <create_name+0x102>
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2205      	movs	r2, #5
 8008034:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008036:	7efb      	ldrb	r3, [r7, #27]
 8008038:	2b20      	cmp	r3, #32
 800803a:	d801      	bhi.n	8008040 <create_name+0x10c>
 800803c:	2204      	movs	r2, #4
 800803e:	e000      	b.n	8008042 <create_name+0x10e>
 8008040:	2200      	movs	r2, #0
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	330b      	adds	r3, #11
 8008046:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008048:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800804a:	4618      	mov	r0, r3
 800804c:	3720      	adds	r7, #32
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	08009cc0 	.word	0x08009cc0
 8008058:	08009bb4 	.word	0x08009bb4

0800805c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008070:	e002      	b.n	8008078 <follow_path+0x1c>
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	3301      	adds	r3, #1
 8008076:	603b      	str	r3, [r7, #0]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	2b2f      	cmp	r3, #47	@ 0x2f
 800807e:	d0f8      	beq.n	8008072 <follow_path+0x16>
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	2b5c      	cmp	r3, #92	@ 0x5c
 8008086:	d0f4      	beq.n	8008072 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	2200      	movs	r2, #0
 800808c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	2b1f      	cmp	r3, #31
 8008094:	d80a      	bhi.n	80080ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2280      	movs	r2, #128	@ 0x80
 800809a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800809e:	2100      	movs	r1, #0
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7ff fcfa 	bl	8007a9a <dir_sdi>
 80080a6:	4603      	mov	r3, r0
 80080a8:	75fb      	strb	r3, [r7, #23]
 80080aa:	e043      	b.n	8008134 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80080ac:	463b      	mov	r3, r7
 80080ae:	4619      	mov	r1, r3
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7ff ff3f 	bl	8007f34 <create_name>
 80080b6:	4603      	mov	r3, r0
 80080b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80080ba:	7dfb      	ldrb	r3, [r7, #23]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d134      	bne.n	800812a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f7ff feb0 	bl	8007e26 <dir_find>
 80080c6:	4603      	mov	r3, r0
 80080c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80080d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00a      	beq.n	80080ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80080d8:	7dfb      	ldrb	r3, [r7, #23]
 80080da:	2b04      	cmp	r3, #4
 80080dc:	d127      	bne.n	800812e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80080de:	7afb      	ldrb	r3, [r7, #11]
 80080e0:	f003 0304 	and.w	r3, r3, #4
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d122      	bne.n	800812e <follow_path+0xd2>
 80080e8:	2305      	movs	r3, #5
 80080ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80080ec:	e01f      	b.n	800812e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80080ee:	7afb      	ldrb	r3, [r7, #11]
 80080f0:	f003 0304 	and.w	r3, r3, #4
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d11c      	bne.n	8008132 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	799b      	ldrb	r3, [r3, #6]
 80080fc:	f003 0310 	and.w	r3, r3, #16
 8008100:	2b00      	cmp	r3, #0
 8008102:	d102      	bne.n	800810a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008104:	2305      	movs	r3, #5
 8008106:	75fb      	strb	r3, [r7, #23]
 8008108:	e014      	b.n	8008134 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	695b      	ldr	r3, [r3, #20]
 8008114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008118:	4413      	add	r3, r2
 800811a:	4619      	mov	r1, r3
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f7ff fe43 	bl	8007da8 <ld_clust>
 8008122:	4602      	mov	r2, r0
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008128:	e7c0      	b.n	80080ac <follow_path+0x50>
			if (res != FR_OK) break;
 800812a:	bf00      	nop
 800812c:	e002      	b.n	8008134 <follow_path+0xd8>
				break;
 800812e:	bf00      	nop
 8008130:	e000      	b.n	8008134 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008132:	bf00      	nop
			}
		}
	}

	return res;
 8008134:	7dfb      	ldrb	r3, [r7, #23]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3718      	adds	r7, #24
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800813e:	b480      	push	{r7}
 8008140:	b087      	sub	sp, #28
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008146:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800814a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d031      	beq.n	80081b8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	617b      	str	r3, [r7, #20]
 800815a:	e002      	b.n	8008162 <get_ldnumber+0x24>
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	3301      	adds	r3, #1
 8008160:	617b      	str	r3, [r7, #20]
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	2b20      	cmp	r3, #32
 8008168:	d903      	bls.n	8008172 <get_ldnumber+0x34>
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	2b3a      	cmp	r3, #58	@ 0x3a
 8008170:	d1f4      	bne.n	800815c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	2b3a      	cmp	r3, #58	@ 0x3a
 8008178:	d11c      	bne.n	80081b4 <get_ldnumber+0x76>
			tp = *path;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	1c5a      	adds	r2, r3, #1
 8008184:	60fa      	str	r2, [r7, #12]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	3b30      	subs	r3, #48	@ 0x30
 800818a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	2b09      	cmp	r3, #9
 8008190:	d80e      	bhi.n	80081b0 <get_ldnumber+0x72>
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	429a      	cmp	r2, r3
 8008198:	d10a      	bne.n	80081b0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d107      	bne.n	80081b0 <get_ldnumber+0x72>
					vol = (int)i;
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	3301      	adds	r3, #1
 80081a8:	617b      	str	r3, [r7, #20]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	697a      	ldr	r2, [r7, #20]
 80081ae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	e002      	b.n	80081ba <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80081b4:	2300      	movs	r3, #0
 80081b6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80081b8:	693b      	ldr	r3, [r7, #16]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	371c      	adds	r7, #28
 80081be:	46bd      	mov	sp, r7
 80081c0:	bc80      	pop	{r7}
 80081c2:	4770      	bx	lr

080081c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	70da      	strb	r2, [r3, #3]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80081da:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f7ff f8e0 	bl	80073a4 <move_window>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <check_fs+0x2a>
 80081ea:	2304      	movs	r3, #4
 80081ec:	e038      	b.n	8008260 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	3330      	adds	r3, #48	@ 0x30
 80081f2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fe fe32 	bl	8006e60 <ld_word>
 80081fc:	4603      	mov	r3, r0
 80081fe:	461a      	mov	r2, r3
 8008200:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008204:	429a      	cmp	r2, r3
 8008206:	d001      	beq.n	800820c <check_fs+0x48>
 8008208:	2303      	movs	r3, #3
 800820a:	e029      	b.n	8008260 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008212:	2be9      	cmp	r3, #233	@ 0xe9
 8008214:	d009      	beq.n	800822a <check_fs+0x66>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800821c:	2beb      	cmp	r3, #235	@ 0xeb
 800821e:	d11e      	bne.n	800825e <check_fs+0x9a>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008226:	2b90      	cmp	r3, #144	@ 0x90
 8008228:	d119      	bne.n	800825e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	3330      	adds	r3, #48	@ 0x30
 800822e:	3336      	adds	r3, #54	@ 0x36
 8008230:	4618      	mov	r0, r3
 8008232:	f7fe fe2c 	bl	8006e8e <ld_dword>
 8008236:	4603      	mov	r3, r0
 8008238:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800823c:	4a0a      	ldr	r2, [pc, #40]	@ (8008268 <check_fs+0xa4>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d101      	bne.n	8008246 <check_fs+0x82>
 8008242:	2300      	movs	r3, #0
 8008244:	e00c      	b.n	8008260 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	3330      	adds	r3, #48	@ 0x30
 800824a:	3352      	adds	r3, #82	@ 0x52
 800824c:	4618      	mov	r0, r3
 800824e:	f7fe fe1e 	bl	8006e8e <ld_dword>
 8008252:	4603      	mov	r3, r0
 8008254:	4a05      	ldr	r2, [pc, #20]	@ (800826c <check_fs+0xa8>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d101      	bne.n	800825e <check_fs+0x9a>
 800825a:	2300      	movs	r3, #0
 800825c:	e000      	b.n	8008260 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800825e:	2302      	movs	r3, #2
}
 8008260:	4618      	mov	r0, r3
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	00544146 	.word	0x00544146
 800826c:	33544146 	.word	0x33544146

08008270 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b096      	sub	sp, #88	@ 0x58
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	4613      	mov	r3, r2
 800827c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	2200      	movs	r2, #0
 8008282:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f7ff ff5a 	bl	800813e <get_ldnumber>
 800828a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800828c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800828e:	2b00      	cmp	r3, #0
 8008290:	da01      	bge.n	8008296 <find_volume+0x26>
 8008292:	230b      	movs	r3, #11
 8008294:	e22d      	b.n	80086f2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008296:	4aa1      	ldr	r2, [pc, #644]	@ (800851c <find_volume+0x2ac>)
 8008298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800829a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800829e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80082a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d101      	bne.n	80082aa <find_volume+0x3a>
 80082a6:	230c      	movs	r3, #12
 80082a8:	e223      	b.n	80086f2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80082ae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80082b0:	79fb      	ldrb	r3, [r7, #7]
 80082b2:	f023 0301 	bic.w	r3, r3, #1
 80082b6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80082b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d01a      	beq.n	80082f6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80082c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c2:	785b      	ldrb	r3, [r3, #1]
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fe fd2d 	bl	8006d24 <disk_status>
 80082ca:	4603      	mov	r3, r0
 80082cc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80082d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80082d4:	f003 0301 	and.w	r3, r3, #1
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10c      	bne.n	80082f6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80082dc:	79fb      	ldrb	r3, [r7, #7]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d007      	beq.n	80082f2 <find_volume+0x82>
 80082e2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80082e6:	f003 0304 	and.w	r3, r3, #4
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d001      	beq.n	80082f2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80082ee:	230a      	movs	r3, #10
 80082f0:	e1ff      	b.n	80086f2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80082f2:	2300      	movs	r3, #0
 80082f4:	e1fd      	b.n	80086f2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80082f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f8:	2200      	movs	r2, #0
 80082fa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80082fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008302:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008306:	785b      	ldrb	r3, [r3, #1]
 8008308:	4618      	mov	r0, r3
 800830a:	f7fe fd25 	bl	8006d58 <disk_initialize>
 800830e:	4603      	mov	r3, r0
 8008310:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008314:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008318:	f003 0301 	and.w	r3, r3, #1
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008320:	2303      	movs	r3, #3
 8008322:	e1e6      	b.n	80086f2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008324:	79fb      	ldrb	r3, [r7, #7]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d007      	beq.n	800833a <find_volume+0xca>
 800832a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800832e:	f003 0304 	and.w	r3, r3, #4
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008336:	230a      	movs	r3, #10
 8008338:	e1db      	b.n	80086f2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800833a:	2300      	movs	r3, #0
 800833c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800833e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008340:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008342:	f7ff ff3f 	bl	80081c4 <check_fs>
 8008346:	4603      	mov	r3, r0
 8008348:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800834c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008350:	2b02      	cmp	r3, #2
 8008352:	d149      	bne.n	80083e8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008354:	2300      	movs	r3, #0
 8008356:	643b      	str	r3, [r7, #64]	@ 0x40
 8008358:	e01e      	b.n	8008398 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800835a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008360:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008362:	011b      	lsls	r3, r3, #4
 8008364:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008368:	4413      	add	r3, r2
 800836a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800836c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836e:	3304      	adds	r3, #4
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d006      	beq.n	8008384 <find_volume+0x114>
 8008376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008378:	3308      	adds	r3, #8
 800837a:	4618      	mov	r0, r3
 800837c:	f7fe fd87 	bl	8006e8e <ld_dword>
 8008380:	4602      	mov	r2, r0
 8008382:	e000      	b.n	8008386 <find_volume+0x116>
 8008384:	2200      	movs	r2, #0
 8008386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	3358      	adds	r3, #88	@ 0x58
 800838c:	443b      	add	r3, r7
 800838e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008394:	3301      	adds	r3, #1
 8008396:	643b      	str	r3, [r7, #64]	@ 0x40
 8008398:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800839a:	2b03      	cmp	r3, #3
 800839c:	d9dd      	bls.n	800835a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800839e:	2300      	movs	r3, #0
 80083a0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80083a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d002      	beq.n	80083ae <find_volume+0x13e>
 80083a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083aa:	3b01      	subs	r3, #1
 80083ac:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80083ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	3358      	adds	r3, #88	@ 0x58
 80083b4:	443b      	add	r3, r7
 80083b6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80083ba:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80083bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d005      	beq.n	80083ce <find_volume+0x15e>
 80083c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80083c4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80083c6:	f7ff fefd 	bl	80081c4 <check_fs>
 80083ca:	4603      	mov	r3, r0
 80083cc:	e000      	b.n	80083d0 <find_volume+0x160>
 80083ce:	2303      	movs	r3, #3
 80083d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80083d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d905      	bls.n	80083e8 <find_volume+0x178>
 80083dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083de:	3301      	adds	r3, #1
 80083e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80083e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083e4:	2b03      	cmp	r3, #3
 80083e6:	d9e2      	bls.n	80083ae <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80083e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80083ec:	2b04      	cmp	r3, #4
 80083ee:	d101      	bne.n	80083f4 <find_volume+0x184>
 80083f0:	2301      	movs	r3, #1
 80083f2:	e17e      	b.n	80086f2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80083f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d901      	bls.n	8008400 <find_volume+0x190>
 80083fc:	230d      	movs	r3, #13
 80083fe:	e178      	b.n	80086f2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008402:	3330      	adds	r3, #48	@ 0x30
 8008404:	330b      	adds	r3, #11
 8008406:	4618      	mov	r0, r3
 8008408:	f7fe fd2a 	bl	8006e60 <ld_word>
 800840c:	4603      	mov	r3, r0
 800840e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008412:	d001      	beq.n	8008418 <find_volume+0x1a8>
 8008414:	230d      	movs	r3, #13
 8008416:	e16c      	b.n	80086f2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800841a:	3330      	adds	r3, #48	@ 0x30
 800841c:	3316      	adds	r3, #22
 800841e:	4618      	mov	r0, r3
 8008420:	f7fe fd1e 	bl	8006e60 <ld_word>
 8008424:	4603      	mov	r3, r0
 8008426:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008428:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800842a:	2b00      	cmp	r3, #0
 800842c:	d106      	bne.n	800843c <find_volume+0x1cc>
 800842e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008430:	3330      	adds	r3, #48	@ 0x30
 8008432:	3324      	adds	r3, #36	@ 0x24
 8008434:	4618      	mov	r0, r3
 8008436:	f7fe fd2a 	bl	8006e8e <ld_dword>
 800843a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800843c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800843e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008440:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008444:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8008448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800844a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800844c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800844e:	789b      	ldrb	r3, [r3, #2]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d005      	beq.n	8008460 <find_volume+0x1f0>
 8008454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008456:	789b      	ldrb	r3, [r3, #2]
 8008458:	2b02      	cmp	r3, #2
 800845a:	d001      	beq.n	8008460 <find_volume+0x1f0>
 800845c:	230d      	movs	r3, #13
 800845e:	e148      	b.n	80086f2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008462:	789b      	ldrb	r3, [r3, #2]
 8008464:	461a      	mov	r2, r3
 8008466:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008468:	fb02 f303 	mul.w	r3, r2, r3
 800846c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800846e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008474:	461a      	mov	r2, r3
 8008476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008478:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800847a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800847c:	895b      	ldrh	r3, [r3, #10]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d008      	beq.n	8008494 <find_volume+0x224>
 8008482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008484:	895b      	ldrh	r3, [r3, #10]
 8008486:	461a      	mov	r2, r3
 8008488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848a:	895b      	ldrh	r3, [r3, #10]
 800848c:	3b01      	subs	r3, #1
 800848e:	4013      	ands	r3, r2
 8008490:	2b00      	cmp	r3, #0
 8008492:	d001      	beq.n	8008498 <find_volume+0x228>
 8008494:	230d      	movs	r3, #13
 8008496:	e12c      	b.n	80086f2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849a:	3330      	adds	r3, #48	@ 0x30
 800849c:	3311      	adds	r3, #17
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fe fcde 	bl	8006e60 <ld_word>
 80084a4:	4603      	mov	r3, r0
 80084a6:	461a      	mov	r2, r3
 80084a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084aa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80084ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ae:	891b      	ldrh	r3, [r3, #8]
 80084b0:	f003 030f 	and.w	r3, r3, #15
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <find_volume+0x24e>
 80084ba:	230d      	movs	r3, #13
 80084bc:	e119      	b.n	80086f2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80084be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c0:	3330      	adds	r3, #48	@ 0x30
 80084c2:	3313      	adds	r3, #19
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7fe fccb 	bl	8006e60 <ld_word>
 80084ca:	4603      	mov	r3, r0
 80084cc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80084ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d106      	bne.n	80084e2 <find_volume+0x272>
 80084d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d6:	3330      	adds	r3, #48	@ 0x30
 80084d8:	3320      	adds	r3, #32
 80084da:	4618      	mov	r0, r3
 80084dc:	f7fe fcd7 	bl	8006e8e <ld_dword>
 80084e0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80084e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e4:	3330      	adds	r3, #48	@ 0x30
 80084e6:	330e      	adds	r3, #14
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fe fcb9 	bl	8006e60 <ld_word>
 80084ee:	4603      	mov	r3, r0
 80084f0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80084f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d101      	bne.n	80084fc <find_volume+0x28c>
 80084f8:	230d      	movs	r3, #13
 80084fa:	e0fa      	b.n	80086f2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80084fc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80084fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008500:	4413      	add	r3, r2
 8008502:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008504:	8912      	ldrh	r2, [r2, #8]
 8008506:	0912      	lsrs	r2, r2, #4
 8008508:	b292      	uxth	r2, r2
 800850a:	4413      	add	r3, r2
 800850c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800850e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008512:	429a      	cmp	r2, r3
 8008514:	d204      	bcs.n	8008520 <find_volume+0x2b0>
 8008516:	230d      	movs	r3, #13
 8008518:	e0eb      	b.n	80086f2 <find_volume+0x482>
 800851a:	bf00      	nop
 800851c:	200002cc 	.word	0x200002cc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008520:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008528:	8952      	ldrh	r2, [r2, #10]
 800852a:	fbb3 f3f2 	udiv	r3, r3, r2
 800852e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008532:	2b00      	cmp	r3, #0
 8008534:	d101      	bne.n	800853a <find_volume+0x2ca>
 8008536:	230d      	movs	r3, #13
 8008538:	e0db      	b.n	80086f2 <find_volume+0x482>
		fmt = FS_FAT32;
 800853a:	2303      	movs	r3, #3
 800853c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008542:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008546:	4293      	cmp	r3, r2
 8008548:	d802      	bhi.n	8008550 <find_volume+0x2e0>
 800854a:	2302      	movs	r3, #2
 800854c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008552:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008556:	4293      	cmp	r3, r2
 8008558:	d802      	bhi.n	8008560 <find_volume+0x2f0>
 800855a:	2301      	movs	r3, #1
 800855c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008562:	1c9a      	adds	r2, r3, #2
 8008564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008566:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800856a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800856c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800856e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008570:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008572:	441a      	add	r2, r3
 8008574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008576:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008578:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800857a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800857c:	441a      	add	r2, r3
 800857e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008580:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8008582:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008586:	2b03      	cmp	r3, #3
 8008588:	d11e      	bne.n	80085c8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800858a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858c:	3330      	adds	r3, #48	@ 0x30
 800858e:	332a      	adds	r3, #42	@ 0x2a
 8008590:	4618      	mov	r0, r3
 8008592:	f7fe fc65 	bl	8006e60 <ld_word>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d001      	beq.n	80085a0 <find_volume+0x330>
 800859c:	230d      	movs	r3, #13
 800859e:	e0a8      	b.n	80086f2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80085a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a2:	891b      	ldrh	r3, [r3, #8]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <find_volume+0x33c>
 80085a8:	230d      	movs	r3, #13
 80085aa:	e0a2      	b.n	80086f2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80085ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ae:	3330      	adds	r3, #48	@ 0x30
 80085b0:	332c      	adds	r3, #44	@ 0x2c
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7fe fc6b 	bl	8006e8e <ld_dword>
 80085b8:	4602      	mov	r2, r0
 80085ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085bc:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80085be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c0:	695b      	ldr	r3, [r3, #20]
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80085c6:	e01f      	b.n	8008608 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80085c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ca:	891b      	ldrh	r3, [r3, #8]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d101      	bne.n	80085d4 <find_volume+0x364>
 80085d0:	230d      	movs	r3, #13
 80085d2:	e08e      	b.n	80086f2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80085d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d6:	6a1a      	ldr	r2, [r3, #32]
 80085d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085da:	441a      	add	r2, r3
 80085dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085de:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80085e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d103      	bne.n	80085f0 <find_volume+0x380>
 80085e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ea:	695b      	ldr	r3, [r3, #20]
 80085ec:	005b      	lsls	r3, r3, #1
 80085ee:	e00a      	b.n	8008606 <find_volume+0x396>
 80085f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f2:	695a      	ldr	r2, [r3, #20]
 80085f4:	4613      	mov	r3, r2
 80085f6:	005b      	lsls	r3, r3, #1
 80085f8:	4413      	add	r3, r2
 80085fa:	085a      	lsrs	r2, r3, #1
 80085fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085fe:	695b      	ldr	r3, [r3, #20]
 8008600:	f003 0301 	and.w	r3, r3, #1
 8008604:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008606:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800860a:	699a      	ldr	r2, [r3, #24]
 800860c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800860e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008612:	0a5b      	lsrs	r3, r3, #9
 8008614:	429a      	cmp	r2, r3
 8008616:	d201      	bcs.n	800861c <find_volume+0x3ac>
 8008618:	230d      	movs	r3, #13
 800861a:	e06a      	b.n	80086f2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800861c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800861e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008622:	611a      	str	r2, [r3, #16]
 8008624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008626:	691a      	ldr	r2, [r3, #16]
 8008628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800862a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800862c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800862e:	2280      	movs	r2, #128	@ 0x80
 8008630:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008632:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008636:	2b03      	cmp	r3, #3
 8008638:	d149      	bne.n	80086ce <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800863a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863c:	3330      	adds	r3, #48	@ 0x30
 800863e:	3330      	adds	r3, #48	@ 0x30
 8008640:	4618      	mov	r0, r3
 8008642:	f7fe fc0d 	bl	8006e60 <ld_word>
 8008646:	4603      	mov	r3, r0
 8008648:	2b01      	cmp	r3, #1
 800864a:	d140      	bne.n	80086ce <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800864c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800864e:	3301      	adds	r3, #1
 8008650:	4619      	mov	r1, r3
 8008652:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008654:	f7fe fea6 	bl	80073a4 <move_window>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d137      	bne.n	80086ce <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800865e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008660:	2200      	movs	r2, #0
 8008662:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008666:	3330      	adds	r3, #48	@ 0x30
 8008668:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800866c:	4618      	mov	r0, r3
 800866e:	f7fe fbf7 	bl	8006e60 <ld_word>
 8008672:	4603      	mov	r3, r0
 8008674:	461a      	mov	r2, r3
 8008676:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800867a:	429a      	cmp	r2, r3
 800867c:	d127      	bne.n	80086ce <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800867e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008680:	3330      	adds	r3, #48	@ 0x30
 8008682:	4618      	mov	r0, r3
 8008684:	f7fe fc03 	bl	8006e8e <ld_dword>
 8008688:	4603      	mov	r3, r0
 800868a:	4a1c      	ldr	r2, [pc, #112]	@ (80086fc <find_volume+0x48c>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d11e      	bne.n	80086ce <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008692:	3330      	adds	r3, #48	@ 0x30
 8008694:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008698:	4618      	mov	r0, r3
 800869a:	f7fe fbf8 	bl	8006e8e <ld_dword>
 800869e:	4603      	mov	r3, r0
 80086a0:	4a17      	ldr	r2, [pc, #92]	@ (8008700 <find_volume+0x490>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d113      	bne.n	80086ce <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80086a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a8:	3330      	adds	r3, #48	@ 0x30
 80086aa:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fe fbed 	bl	8006e8e <ld_dword>
 80086b4:	4602      	mov	r2, r0
 80086b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80086ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086bc:	3330      	adds	r3, #48	@ 0x30
 80086be:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fe fbe3 	bl	8006e8e <ld_dword>
 80086c8:	4602      	mov	r2, r0
 80086ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086cc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80086ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80086d4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80086d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008704 <find_volume+0x494>)
 80086d8:	881b      	ldrh	r3, [r3, #0]
 80086da:	3301      	adds	r3, #1
 80086dc:	b29a      	uxth	r2, r3
 80086de:	4b09      	ldr	r3, [pc, #36]	@ (8008704 <find_volume+0x494>)
 80086e0:	801a      	strh	r2, [r3, #0]
 80086e2:	4b08      	ldr	r3, [pc, #32]	@ (8008704 <find_volume+0x494>)
 80086e4:	881a      	ldrh	r2, [r3, #0]
 80086e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80086ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80086ec:	f7fe fdf2 	bl	80072d4 <clear_lock>
#endif
	return FR_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3758      	adds	r7, #88	@ 0x58
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	41615252 	.word	0x41615252
 8008700:	61417272 	.word	0x61417272
 8008704:	200002d0 	.word	0x200002d0

08008708 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008712:	2309      	movs	r3, #9
 8008714:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d01c      	beq.n	8008756 <validate+0x4e>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d018      	beq.n	8008756 <validate+0x4e>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d013      	beq.n	8008756 <validate+0x4e>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	889a      	ldrh	r2, [r3, #4]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	88db      	ldrh	r3, [r3, #6]
 8008738:	429a      	cmp	r2, r3
 800873a:	d10c      	bne.n	8008756 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	785b      	ldrb	r3, [r3, #1]
 8008742:	4618      	mov	r0, r3
 8008744:	f7fe faee 	bl	8006d24 <disk_status>
 8008748:	4603      	mov	r3, r0
 800874a:	f003 0301 	and.w	r3, r3, #1
 800874e:	2b00      	cmp	r3, #0
 8008750:	d101      	bne.n	8008756 <validate+0x4e>
			res = FR_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008756:	7bfb      	ldrb	r3, [r7, #15]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d102      	bne.n	8008762 <validate+0x5a>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	e000      	b.n	8008764 <validate+0x5c>
 8008762:	2300      	movs	r3, #0
 8008764:	683a      	ldr	r2, [r7, #0]
 8008766:	6013      	str	r3, [r2, #0]
	return res;
 8008768:	7bfb      	ldrb	r3, [r7, #15]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
	...

08008774 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b088      	sub	sp, #32
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	4613      	mov	r3, r2
 8008780:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008786:	f107 0310 	add.w	r3, r7, #16
 800878a:	4618      	mov	r0, r3
 800878c:	f7ff fcd7 	bl	800813e <get_ldnumber>
 8008790:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	2b00      	cmp	r3, #0
 8008796:	da01      	bge.n	800879c <f_mount+0x28>
 8008798:	230b      	movs	r3, #11
 800879a:	e02b      	b.n	80087f4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800879c:	4a17      	ldr	r2, [pc, #92]	@ (80087fc <f_mount+0x88>)
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d005      	beq.n	80087b8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80087ac:	69b8      	ldr	r0, [r7, #24]
 80087ae:	f7fe fd91 	bl	80072d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	2200      	movs	r2, #0
 80087b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d002      	beq.n	80087c4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	490d      	ldr	r1, [pc, #52]	@ (80087fc <f_mount+0x88>)
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d002      	beq.n	80087da <f_mount+0x66>
 80087d4:	79fb      	ldrb	r3, [r7, #7]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d001      	beq.n	80087de <f_mount+0x6a>
 80087da:	2300      	movs	r3, #0
 80087dc:	e00a      	b.n	80087f4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80087de:	f107 010c 	add.w	r1, r7, #12
 80087e2:	f107 0308 	add.w	r3, r7, #8
 80087e6:	2200      	movs	r2, #0
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7ff fd41 	bl	8008270 <find_volume>
 80087ee:	4603      	mov	r3, r0
 80087f0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80087f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3720      	adds	r7, #32
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	200002cc 	.word	0x200002cc

08008800 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b098      	sub	sp, #96	@ 0x60
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	4613      	mov	r3, r2
 800880c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d101      	bne.n	8008818 <f_open+0x18>
 8008814:	2309      	movs	r3, #9
 8008816:	e1a9      	b.n	8008b6c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008818:	79fb      	ldrb	r3, [r7, #7]
 800881a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800881e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008820:	79fa      	ldrb	r2, [r7, #7]
 8008822:	f107 0110 	add.w	r1, r7, #16
 8008826:	f107 0308 	add.w	r3, r7, #8
 800882a:	4618      	mov	r0, r3
 800882c:	f7ff fd20 	bl	8008270 <find_volume>
 8008830:	4603      	mov	r3, r0
 8008832:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8008836:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800883a:	2b00      	cmp	r3, #0
 800883c:	f040 818d 	bne.w	8008b5a <f_open+0x35a>
		dj.obj.fs = fs;
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	f107 0314 	add.w	r3, r7, #20
 800884a:	4611      	mov	r1, r2
 800884c:	4618      	mov	r0, r3
 800884e:	f7ff fc05 	bl	800805c <follow_path>
 8008852:	4603      	mov	r3, r0
 8008854:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008858:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800885c:	2b00      	cmp	r3, #0
 800885e:	d118      	bne.n	8008892 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008860:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008864:	b25b      	sxtb	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	da03      	bge.n	8008872 <f_open+0x72>
				res = FR_INVALID_NAME;
 800886a:	2306      	movs	r3, #6
 800886c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008870:	e00f      	b.n	8008892 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008872:	79fb      	ldrb	r3, [r7, #7]
 8008874:	2b01      	cmp	r3, #1
 8008876:	bf8c      	ite	hi
 8008878:	2301      	movhi	r3, #1
 800887a:	2300      	movls	r3, #0
 800887c:	b2db      	uxtb	r3, r3
 800887e:	461a      	mov	r2, r3
 8008880:	f107 0314 	add.w	r3, r7, #20
 8008884:	4611      	mov	r1, r2
 8008886:	4618      	mov	r0, r3
 8008888:	f7fe fbe2 	bl	8007050 <chk_lock>
 800888c:	4603      	mov	r3, r0
 800888e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008892:	79fb      	ldrb	r3, [r7, #7]
 8008894:	f003 031c 	and.w	r3, r3, #28
 8008898:	2b00      	cmp	r3, #0
 800889a:	d07f      	beq.n	800899c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800889c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d017      	beq.n	80088d4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80088a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80088a8:	2b04      	cmp	r3, #4
 80088aa:	d10e      	bne.n	80088ca <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80088ac:	f7fe fc2a 	bl	8007104 <enq_lock>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d006      	beq.n	80088c4 <f_open+0xc4>
 80088b6:	f107 0314 	add.w	r3, r7, #20
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7ff fb08 	bl	8007ed0 <dir_register>
 80088c0:	4603      	mov	r3, r0
 80088c2:	e000      	b.n	80088c6 <f_open+0xc6>
 80088c4:	2312      	movs	r3, #18
 80088c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80088ca:	79fb      	ldrb	r3, [r7, #7]
 80088cc:	f043 0308 	orr.w	r3, r3, #8
 80088d0:	71fb      	strb	r3, [r7, #7]
 80088d2:	e010      	b.n	80088f6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80088d4:	7ebb      	ldrb	r3, [r7, #26]
 80088d6:	f003 0311 	and.w	r3, r3, #17
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d003      	beq.n	80088e6 <f_open+0xe6>
					res = FR_DENIED;
 80088de:	2307      	movs	r3, #7
 80088e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80088e4:	e007      	b.n	80088f6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80088e6:	79fb      	ldrb	r3, [r7, #7]
 80088e8:	f003 0304 	and.w	r3, r3, #4
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d002      	beq.n	80088f6 <f_open+0xf6>
 80088f0:	2308      	movs	r3, #8
 80088f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80088f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d168      	bne.n	80089d0 <f_open+0x1d0>
 80088fe:	79fb      	ldrb	r3, [r7, #7]
 8008900:	f003 0308 	and.w	r3, r3, #8
 8008904:	2b00      	cmp	r3, #0
 8008906:	d063      	beq.n	80089d0 <f_open+0x1d0>
				dw = GET_FATTIME();
 8008908:	f7fd fcd0 	bl	80062ac <get_fattime>
 800890c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800890e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008910:	330e      	adds	r3, #14
 8008912:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008914:	4618      	mov	r0, r3
 8008916:	f7fe faf6 	bl	8006f06 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800891a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800891c:	3316      	adds	r3, #22
 800891e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008920:	4618      	mov	r0, r3
 8008922:	f7fe faf0 	bl	8006f06 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008928:	330b      	adds	r3, #11
 800892a:	2220      	movs	r2, #32
 800892c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008932:	4611      	mov	r1, r2
 8008934:	4618      	mov	r0, r3
 8008936:	f7ff fa37 	bl	8007da8 <ld_clust>
 800893a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008940:	2200      	movs	r2, #0
 8008942:	4618      	mov	r0, r3
 8008944:	f7ff fa4f 	bl	8007de6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800894a:	331c      	adds	r3, #28
 800894c:	2100      	movs	r1, #0
 800894e:	4618      	mov	r0, r3
 8008950:	f7fe fad9 	bl	8006f06 <st_dword>
					fs->wflag = 1;
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	2201      	movs	r2, #1
 8008958:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800895a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800895c:	2b00      	cmp	r3, #0
 800895e:	d037      	beq.n	80089d0 <f_open+0x1d0>
						dw = fs->winsect;
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008964:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008966:	f107 0314 	add.w	r3, r7, #20
 800896a:	2200      	movs	r2, #0
 800896c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800896e:	4618      	mov	r0, r3
 8008970:	f7fe ff63 	bl	800783a <remove_chain>
 8008974:	4603      	mov	r3, r0
 8008976:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800897a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800897e:	2b00      	cmp	r3, #0
 8008980:	d126      	bne.n	80089d0 <f_open+0x1d0>
							res = move_window(fs, dw);
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008986:	4618      	mov	r0, r3
 8008988:	f7fe fd0c 	bl	80073a4 <move_window>
 800898c:	4603      	mov	r3, r0
 800898e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008996:	3a01      	subs	r2, #1
 8008998:	60da      	str	r2, [r3, #12]
 800899a:	e019      	b.n	80089d0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800899c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d115      	bne.n	80089d0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80089a4:	7ebb      	ldrb	r3, [r7, #26]
 80089a6:	f003 0310 	and.w	r3, r3, #16
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d003      	beq.n	80089b6 <f_open+0x1b6>
					res = FR_NO_FILE;
 80089ae:	2304      	movs	r3, #4
 80089b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80089b4:	e00c      	b.n	80089d0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80089b6:	79fb      	ldrb	r3, [r7, #7]
 80089b8:	f003 0302 	and.w	r3, r3, #2
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d007      	beq.n	80089d0 <f_open+0x1d0>
 80089c0:	7ebb      	ldrb	r3, [r7, #26]
 80089c2:	f003 0301 	and.w	r3, r3, #1
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d002      	beq.n	80089d0 <f_open+0x1d0>
						res = FR_DENIED;
 80089ca:	2307      	movs	r3, #7
 80089cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80089d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d126      	bne.n	8008a26 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80089d8:	79fb      	ldrb	r3, [r7, #7]
 80089da:	f003 0308 	and.w	r3, r3, #8
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d003      	beq.n	80089ea <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80089e2:	79fb      	ldrb	r3, [r7, #7]
 80089e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089e8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80089f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80089f8:	79fb      	ldrb	r3, [r7, #7]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	bf8c      	ite	hi
 80089fe:	2301      	movhi	r3, #1
 8008a00:	2300      	movls	r3, #0
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	461a      	mov	r2, r3
 8008a06:	f107 0314 	add.w	r3, r7, #20
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fe fb99 	bl	8007144 <inc_lock>
 8008a12:	4602      	mov	r2, r0
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d102      	bne.n	8008a26 <f_open+0x226>
 8008a20:	2302      	movs	r3, #2
 8008a22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008a26:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f040 8095 	bne.w	8008b5a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a34:	4611      	mov	r1, r2
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7ff f9b6 	bl	8007da8 <ld_clust>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a44:	331c      	adds	r3, #28
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fe fa21 	bl	8006e8e <ld_dword>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	88da      	ldrh	r2, [r3, #6]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	79fa      	ldrb	r2, [r7, #7]
 8008a6a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	3330      	adds	r3, #48	@ 0x30
 8008a82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a86:	2100      	movs	r1, #0
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7fe fa87 	bl	8006f9c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008a8e:	79fb      	ldrb	r3, [r7, #7]
 8008a90:	f003 0320 	and.w	r3, r3, #32
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d060      	beq.n	8008b5a <f_open+0x35a>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d05c      	beq.n	8008b5a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	68da      	ldr	r2, [r3, #12]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	895b      	ldrh	r3, [r3, #10]
 8008aac:	025b      	lsls	r3, r3, #9
 8008aae:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	657b      	str	r3, [r7, #84]	@ 0x54
 8008abc:	e016      	b.n	8008aec <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7fe fd28 	bl	8007518 <get_fat>
 8008ac8:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008aca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d802      	bhi.n	8008ad6 <f_open+0x2d6>
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008ad6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008adc:	d102      	bne.n	8008ae4 <f_open+0x2e4>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008ae4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008ae6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	657b      	str	r3, [r7, #84]	@ 0x54
 8008aec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d103      	bne.n	8008afc <f_open+0x2fc>
 8008af4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008af6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d8e0      	bhi.n	8008abe <f_open+0x2be>
				}
				fp->clust = clst;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b00:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008b02:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d127      	bne.n	8008b5a <f_open+0x35a>
 8008b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d022      	beq.n	8008b5a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7fe fcdf 	bl	80074dc <clust2sect>
 8008b1e:	6478      	str	r0, [r7, #68]	@ 0x44
 8008b20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d103      	bne.n	8008b2e <f_open+0x32e>
						res = FR_INT_ERR;
 8008b26:	2302      	movs	r3, #2
 8008b28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008b2c:	e015      	b.n	8008b5a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b30:	0a5a      	lsrs	r2, r3, #9
 8008b32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b34:	441a      	add	r2, r3
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	7858      	ldrb	r0, [r3, #1]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6a1a      	ldr	r2, [r3, #32]
 8008b48:	2301      	movs	r3, #1
 8008b4a:	f7fe f92b 	bl	8006da4 <disk_read>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d002      	beq.n	8008b5a <f_open+0x35a>
 8008b54:	2301      	movs	r3, #1
 8008b56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008b5a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d002      	beq.n	8008b68 <f_open+0x368>
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008b68:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3760      	adds	r7, #96	@ 0x60
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b08c      	sub	sp, #48	@ 0x30
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
 8008b80:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f107 0210 	add.w	r2, r7, #16
 8008b92:	4611      	mov	r1, r2
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7ff fdb7 	bl	8008708 <validate>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008ba0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d107      	bne.n	8008bb8 <f_write+0x44>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	7d5b      	ldrb	r3, [r3, #21]
 8008bac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008bb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d002      	beq.n	8008bbe <f_write+0x4a>
 8008bb8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008bbc:	e14b      	b.n	8008e56 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	7d1b      	ldrb	r3, [r3, #20]
 8008bc2:	f003 0302 	and.w	r3, r3, #2
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d101      	bne.n	8008bce <f_write+0x5a>
 8008bca:	2307      	movs	r3, #7
 8008bcc:	e143      	b.n	8008e56 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	699a      	ldr	r2, [r3, #24]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	441a      	add	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	699b      	ldr	r3, [r3, #24]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	f080 812d 	bcs.w	8008e3a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	43db      	mvns	r3, r3
 8008be6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008be8:	e127      	b.n	8008e3a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f040 80e3 	bne.w	8008dbe <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	699b      	ldr	r3, [r3, #24]
 8008bfc:	0a5b      	lsrs	r3, r3, #9
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	8952      	ldrh	r2, [r2, #10]
 8008c02:	3a01      	subs	r2, #1
 8008c04:	4013      	ands	r3, r2
 8008c06:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d143      	bne.n	8008c96 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10c      	bne.n	8008c30 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d11a      	bne.n	8008c58 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2100      	movs	r1, #0
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fe fe6c 	bl	8007904 <create_chain>
 8008c2c:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008c2e:	e013      	b.n	8008c58 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d007      	beq.n	8008c48 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f7fe fef8 	bl	8007a34 <clmt_clust>
 8008c44:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008c46:	e007      	b.n	8008c58 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	69db      	ldr	r3, [r3, #28]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	4610      	mov	r0, r2
 8008c52:	f7fe fe57 	bl	8007904 <create_chain>
 8008c56:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f000 80f2 	beq.w	8008e44 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d104      	bne.n	8008c70 <f_write+0xfc>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2202      	movs	r2, #2
 8008c6a:	755a      	strb	r2, [r3, #21]
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	e0f2      	b.n	8008e56 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c76:	d104      	bne.n	8008c82 <f_write+0x10e>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	755a      	strb	r2, [r3, #21]
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e0e9      	b.n	8008e56 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c86:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d102      	bne.n	8008c96 <f_write+0x122>
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c94:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	7d1b      	ldrb	r3, [r3, #20]
 8008c9a:	b25b      	sxtb	r3, r3
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	da18      	bge.n	8008cd2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	7858      	ldrb	r0, [r3, #1]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6a1a      	ldr	r2, [r3, #32]
 8008cae:	2301      	movs	r3, #1
 8008cb0:	f7fe f898 	bl	8006de4 <disk_write>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d004      	beq.n	8008cc4 <f_write+0x150>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	755a      	strb	r2, [r3, #21]
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e0c8      	b.n	8008e56 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	7d1b      	ldrb	r3, [r3, #20]
 8008cc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ccc:	b2da      	uxtb	r2, r3
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008cd2:	693a      	ldr	r2, [r7, #16]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	69db      	ldr	r3, [r3, #28]
 8008cd8:	4619      	mov	r1, r3
 8008cda:	4610      	mov	r0, r2
 8008cdc:	f7fe fbfe 	bl	80074dc <clust2sect>
 8008ce0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d104      	bne.n	8008cf2 <f_write+0x17e>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2202      	movs	r2, #2
 8008cec:	755a      	strb	r2, [r3, #21]
 8008cee:	2302      	movs	r3, #2
 8008cf0:	e0b1      	b.n	8008e56 <f_write+0x2e2>
			sect += csect;
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	0a5b      	lsrs	r3, r3, #9
 8008cfe:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008d00:	6a3b      	ldr	r3, [r7, #32]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d03c      	beq.n	8008d80 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008d06:	69ba      	ldr	r2, [r7, #24]
 8008d08:	6a3b      	ldr	r3, [r7, #32]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	693a      	ldr	r2, [r7, #16]
 8008d0e:	8952      	ldrh	r2, [r2, #10]
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d905      	bls.n	8008d20 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	895b      	ldrh	r3, [r3, #10]
 8008d18:	461a      	mov	r2, r3
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	7858      	ldrb	r0, [r3, #1]
 8008d24:	6a3b      	ldr	r3, [r7, #32]
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	69f9      	ldr	r1, [r7, #28]
 8008d2a:	f7fe f85b 	bl	8006de4 <disk_write>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d004      	beq.n	8008d3e <f_write+0x1ca>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2201      	movs	r2, #1
 8008d38:	755a      	strb	r2, [r3, #21]
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e08b      	b.n	8008e56 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6a1a      	ldr	r2, [r3, #32]
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	6a3a      	ldr	r2, [r7, #32]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d915      	bls.n	8008d78 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6a1a      	ldr	r2, [r3, #32]
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	025b      	lsls	r3, r3, #9
 8008d5c:	69fa      	ldr	r2, [r7, #28]
 8008d5e:	4413      	add	r3, r2
 8008d60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d64:	4619      	mov	r1, r3
 8008d66:	f7fe f8f9 	bl	8006f5c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	7d1b      	ldrb	r3, [r3, #20]
 8008d6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d72:	b2da      	uxtb	r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008d78:	6a3b      	ldr	r3, [r7, #32]
 8008d7a:	025b      	lsls	r3, r3, #9
 8008d7c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008d7e:	e03f      	b.n	8008e00 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6a1b      	ldr	r3, [r3, #32]
 8008d84:	697a      	ldr	r2, [r7, #20]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d016      	beq.n	8008db8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	699a      	ldr	r2, [r3, #24]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d210      	bcs.n	8008db8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	7858      	ldrb	r0, [r3, #1]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008da0:	2301      	movs	r3, #1
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	f7fd fffe 	bl	8006da4 <disk_read>
 8008da8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d004      	beq.n	8008db8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2201      	movs	r2, #1
 8008db2:	755a      	strb	r2, [r3, #21]
 8008db4:	2301      	movs	r3, #1
 8008db6:	e04e      	b.n	8008e56 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	697a      	ldr	r2, [r7, #20]
 8008dbc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	699b      	ldr	r3, [r3, #24]
 8008dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dc6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8008dca:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d901      	bls.n	8008dd8 <f_write+0x264>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008de6:	4413      	add	r3, r2
 8008de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dea:	69f9      	ldr	r1, [r7, #28]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fe f8b5 	bl	8006f5c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	7d1b      	ldrb	r3, [r3, #20]
 8008df6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008e00:	69fa      	ldr	r2, [r7, #28]
 8008e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e04:	4413      	add	r3, r2
 8008e06:	61fb      	str	r3, [r7, #28]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	699a      	ldr	r2, [r3, #24]
 8008e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0e:	441a      	add	r2, r3
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	619a      	str	r2, [r3, #24]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	68da      	ldr	r2, [r3, #12]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	bf38      	it	cc
 8008e20:	461a      	movcc	r2, r3
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	60da      	str	r2, [r3, #12]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e2c:	441a      	add	r2, r3
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	601a      	str	r2, [r3, #0]
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f47f aed4 	bne.w	8008bea <f_write+0x76>
 8008e42:	e000      	b.n	8008e46 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008e44:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	7d1b      	ldrb	r3, [r3, #20]
 8008e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e4e:	b2da      	uxtb	r2, r3
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3730      	adds	r7, #48	@ 0x30
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b086      	sub	sp, #24
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f107 0208 	add.w	r2, r7, #8
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7ff fc4a 	bl	8008708 <validate>
 8008e74:	4603      	mov	r3, r0
 8008e76:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008e78:	7dfb      	ldrb	r3, [r7, #23]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d168      	bne.n	8008f50 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	7d1b      	ldrb	r3, [r3, #20]
 8008e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d062      	beq.n	8008f50 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	7d1b      	ldrb	r3, [r3, #20]
 8008e8e:	b25b      	sxtb	r3, r3
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	da15      	bge.n	8008ec0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	7858      	ldrb	r0, [r3, #1]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a1a      	ldr	r2, [r3, #32]
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	f7fd ff9e 	bl	8006de4 <disk_write>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <f_sync+0x54>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e04f      	b.n	8008f52 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	7d1b      	ldrb	r3, [r3, #20]
 8008eb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eba:	b2da      	uxtb	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008ec0:	f7fd f9f4 	bl	80062ac <get_fattime>
 8008ec4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4610      	mov	r0, r2
 8008ed0:	f7fe fa68 	bl	80073a4 <move_window>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008ed8:	7dfb      	ldrb	r3, [r7, #23]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d138      	bne.n	8008f50 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	330b      	adds	r3, #11
 8008ee8:	781a      	ldrb	r2, [r3, #0]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	330b      	adds	r3, #11
 8008eee:	f042 0220 	orr.w	r2, r2, #32
 8008ef2:	b2d2      	uxtb	r2, r2
 8008ef4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6818      	ldr	r0, [r3, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	461a      	mov	r2, r3
 8008f00:	68f9      	ldr	r1, [r7, #12]
 8008f02:	f7fe ff70 	bl	8007de6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f103 021c 	add.w	r2, r3, #28
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	4619      	mov	r1, r3
 8008f12:	4610      	mov	r0, r2
 8008f14:	f7fd fff7 	bl	8006f06 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	3316      	adds	r3, #22
 8008f1c:	6939      	ldr	r1, [r7, #16]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fd fff1 	bl	8006f06 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	3312      	adds	r3, #18
 8008f28:	2100      	movs	r1, #0
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fd ffd1 	bl	8006ed2 <st_word>
					fs->wflag = 1;
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	2201      	movs	r2, #1
 8008f34:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7fe fa61 	bl	8007400 <sync_fs>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	7d1b      	ldrb	r3, [r3, #20]
 8008f46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f4a:	b2da      	uxtb	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3718      	adds	r7, #24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b084      	sub	sp, #16
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f7ff ff7b 	bl	8008e5e <f_sync>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d118      	bne.n	8008fa4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f107 0208 	add.w	r2, r7, #8
 8008f78:	4611      	mov	r1, r2
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7ff fbc4 	bl	8008708 <validate>
 8008f80:	4603      	mov	r3, r0
 8008f82:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10c      	bne.n	8008fa4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fe f966 	bl	8007260 <dec_lock>
 8008f94:	4603      	mov	r3, r0
 8008f96:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008f98:	7bfb      	ldrb	r3, [r7, #15]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d102      	bne.n	8008fa4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
	...

08008fb0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b087      	sub	sp, #28
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	4613      	mov	r3, r2
 8008fbc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8009040 <FATFS_LinkDriverEx+0x90>)
 8008fc8:	7a5b      	ldrb	r3, [r3, #9]
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d131      	bne.n	8009034 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8009040 <FATFS_LinkDriverEx+0x90>)
 8008fd2:	7a5b      	ldrb	r3, [r3, #9]
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	4b19      	ldr	r3, [pc, #100]	@ (8009040 <FATFS_LinkDriverEx+0x90>)
 8008fda:	2100      	movs	r1, #0
 8008fdc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008fde:	4b18      	ldr	r3, [pc, #96]	@ (8009040 <FATFS_LinkDriverEx+0x90>)
 8008fe0:	7a5b      	ldrb	r3, [r3, #9]
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	4a16      	ldr	r2, [pc, #88]	@ (8009040 <FATFS_LinkDriverEx+0x90>)
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	4413      	add	r3, r2
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008fee:	4b14      	ldr	r3, [pc, #80]	@ (8009040 <FATFS_LinkDriverEx+0x90>)
 8008ff0:	7a5b      	ldrb	r3, [r3, #9]
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	4b12      	ldr	r3, [pc, #72]	@ (8009040 <FATFS_LinkDriverEx+0x90>)
 8008ff8:	4413      	add	r3, r2
 8008ffa:	79fa      	ldrb	r2, [r7, #7]
 8008ffc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008ffe:	4b10      	ldr	r3, [pc, #64]	@ (8009040 <FATFS_LinkDriverEx+0x90>)
 8009000:	7a5b      	ldrb	r3, [r3, #9]
 8009002:	b2db      	uxtb	r3, r3
 8009004:	1c5a      	adds	r2, r3, #1
 8009006:	b2d1      	uxtb	r1, r2
 8009008:	4a0d      	ldr	r2, [pc, #52]	@ (8009040 <FATFS_LinkDriverEx+0x90>)
 800900a:	7251      	strb	r1, [r2, #9]
 800900c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800900e:	7dbb      	ldrb	r3, [r7, #22]
 8009010:	3330      	adds	r3, #48	@ 0x30
 8009012:	b2da      	uxtb	r2, r3
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	3301      	adds	r3, #1
 800901c:	223a      	movs	r2, #58	@ 0x3a
 800901e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	3302      	adds	r3, #2
 8009024:	222f      	movs	r2, #47	@ 0x2f
 8009026:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	3303      	adds	r3, #3
 800902c:	2200      	movs	r2, #0
 800902e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009030:	2300      	movs	r3, #0
 8009032:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009034:	7dfb      	ldrb	r3, [r7, #23]
}
 8009036:	4618      	mov	r0, r3
 8009038:	371c      	adds	r7, #28
 800903a:	46bd      	mov	sp, r7
 800903c:	bc80      	pop	{r7}
 800903e:	4770      	bx	lr
 8009040:	200002f4 	.word	0x200002f4

08009044 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800904e:	2200      	movs	r2, #0
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f7ff ffac 	bl	8008fb0 <FATFS_LinkDriverEx>
 8009058:	4603      	mov	r3, r0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
	...

08009064 <sniprintf>:
 8009064:	b40c      	push	{r2, r3}
 8009066:	b530      	push	{r4, r5, lr}
 8009068:	4b17      	ldr	r3, [pc, #92]	@ (80090c8 <sniprintf+0x64>)
 800906a:	1e0c      	subs	r4, r1, #0
 800906c:	681d      	ldr	r5, [r3, #0]
 800906e:	b09d      	sub	sp, #116	@ 0x74
 8009070:	da08      	bge.n	8009084 <sniprintf+0x20>
 8009072:	238b      	movs	r3, #139	@ 0x8b
 8009074:	602b      	str	r3, [r5, #0]
 8009076:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800907a:	b01d      	add	sp, #116	@ 0x74
 800907c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009080:	b002      	add	sp, #8
 8009082:	4770      	bx	lr
 8009084:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009088:	f8ad 3014 	strh.w	r3, [sp, #20]
 800908c:	bf14      	ite	ne
 800908e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8009092:	4623      	moveq	r3, r4
 8009094:	9304      	str	r3, [sp, #16]
 8009096:	9307      	str	r3, [sp, #28]
 8009098:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800909c:	9002      	str	r0, [sp, #8]
 800909e:	9006      	str	r0, [sp, #24]
 80090a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80090a4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80090a6:	ab21      	add	r3, sp, #132	@ 0x84
 80090a8:	a902      	add	r1, sp, #8
 80090aa:	4628      	mov	r0, r5
 80090ac:	9301      	str	r3, [sp, #4]
 80090ae:	f000 f8e5 	bl	800927c <_svfiprintf_r>
 80090b2:	1c43      	adds	r3, r0, #1
 80090b4:	bfbc      	itt	lt
 80090b6:	238b      	movlt	r3, #139	@ 0x8b
 80090b8:	602b      	strlt	r3, [r5, #0]
 80090ba:	2c00      	cmp	r4, #0
 80090bc:	d0dd      	beq.n	800907a <sniprintf+0x16>
 80090be:	9b02      	ldr	r3, [sp, #8]
 80090c0:	2200      	movs	r2, #0
 80090c2:	701a      	strb	r2, [r3, #0]
 80090c4:	e7d9      	b.n	800907a <sniprintf+0x16>
 80090c6:	bf00      	nop
 80090c8:	20000024 	.word	0x20000024

080090cc <_vsniprintf_r>:
 80090cc:	b530      	push	{r4, r5, lr}
 80090ce:	4614      	mov	r4, r2
 80090d0:	2c00      	cmp	r4, #0
 80090d2:	b09b      	sub	sp, #108	@ 0x6c
 80090d4:	4605      	mov	r5, r0
 80090d6:	461a      	mov	r2, r3
 80090d8:	da05      	bge.n	80090e6 <_vsniprintf_r+0x1a>
 80090da:	238b      	movs	r3, #139	@ 0x8b
 80090dc:	6003      	str	r3, [r0, #0]
 80090de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090e2:	b01b      	add	sp, #108	@ 0x6c
 80090e4:	bd30      	pop	{r4, r5, pc}
 80090e6:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80090ea:	f8ad 300c 	strh.w	r3, [sp, #12]
 80090ee:	bf14      	ite	ne
 80090f0:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80090f4:	4623      	moveq	r3, r4
 80090f6:	9302      	str	r3, [sp, #8]
 80090f8:	9305      	str	r3, [sp, #20]
 80090fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80090fe:	9100      	str	r1, [sp, #0]
 8009100:	9104      	str	r1, [sp, #16]
 8009102:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009106:	4669      	mov	r1, sp
 8009108:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800910a:	f000 f8b7 	bl	800927c <_svfiprintf_r>
 800910e:	1c43      	adds	r3, r0, #1
 8009110:	bfbc      	itt	lt
 8009112:	238b      	movlt	r3, #139	@ 0x8b
 8009114:	602b      	strlt	r3, [r5, #0]
 8009116:	2c00      	cmp	r4, #0
 8009118:	d0e3      	beq.n	80090e2 <_vsniprintf_r+0x16>
 800911a:	9b00      	ldr	r3, [sp, #0]
 800911c:	2200      	movs	r2, #0
 800911e:	701a      	strb	r2, [r3, #0]
 8009120:	e7df      	b.n	80090e2 <_vsniprintf_r+0x16>
	...

08009124 <vsniprintf>:
 8009124:	b507      	push	{r0, r1, r2, lr}
 8009126:	9300      	str	r3, [sp, #0]
 8009128:	4613      	mov	r3, r2
 800912a:	460a      	mov	r2, r1
 800912c:	4601      	mov	r1, r0
 800912e:	4803      	ldr	r0, [pc, #12]	@ (800913c <vsniprintf+0x18>)
 8009130:	6800      	ldr	r0, [r0, #0]
 8009132:	f7ff ffcb 	bl	80090cc <_vsniprintf_r>
 8009136:	b003      	add	sp, #12
 8009138:	f85d fb04 	ldr.w	pc, [sp], #4
 800913c:	20000024 	.word	0x20000024

08009140 <memset>:
 8009140:	4402      	add	r2, r0
 8009142:	4603      	mov	r3, r0
 8009144:	4293      	cmp	r3, r2
 8009146:	d100      	bne.n	800914a <memset+0xa>
 8009148:	4770      	bx	lr
 800914a:	f803 1b01 	strb.w	r1, [r3], #1
 800914e:	e7f9      	b.n	8009144 <memset+0x4>

08009150 <__errno>:
 8009150:	4b01      	ldr	r3, [pc, #4]	@ (8009158 <__errno+0x8>)
 8009152:	6818      	ldr	r0, [r3, #0]
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	20000024 	.word	0x20000024

0800915c <__libc_init_array>:
 800915c:	b570      	push	{r4, r5, r6, lr}
 800915e:	4d0d      	ldr	r5, [pc, #52]	@ (8009194 <__libc_init_array+0x38>)
 8009160:	4c0d      	ldr	r4, [pc, #52]	@ (8009198 <__libc_init_array+0x3c>)
 8009162:	1b64      	subs	r4, r4, r5
 8009164:	10a4      	asrs	r4, r4, #2
 8009166:	2600      	movs	r6, #0
 8009168:	42a6      	cmp	r6, r4
 800916a:	d109      	bne.n	8009180 <__libc_init_array+0x24>
 800916c:	4d0b      	ldr	r5, [pc, #44]	@ (800919c <__libc_init_array+0x40>)
 800916e:	4c0c      	ldr	r4, [pc, #48]	@ (80091a0 <__libc_init_array+0x44>)
 8009170:	f000 fc66 	bl	8009a40 <_init>
 8009174:	1b64      	subs	r4, r4, r5
 8009176:	10a4      	asrs	r4, r4, #2
 8009178:	2600      	movs	r6, #0
 800917a:	42a6      	cmp	r6, r4
 800917c:	d105      	bne.n	800918a <__libc_init_array+0x2e>
 800917e:	bd70      	pop	{r4, r5, r6, pc}
 8009180:	f855 3b04 	ldr.w	r3, [r5], #4
 8009184:	4798      	blx	r3
 8009186:	3601      	adds	r6, #1
 8009188:	e7ee      	b.n	8009168 <__libc_init_array+0xc>
 800918a:	f855 3b04 	ldr.w	r3, [r5], #4
 800918e:	4798      	blx	r3
 8009190:	3601      	adds	r6, #1
 8009192:	e7f2      	b.n	800917a <__libc_init_array+0x1e>
 8009194:	08009d7c 	.word	0x08009d7c
 8009198:	08009d7c 	.word	0x08009d7c
 800919c:	08009d7c 	.word	0x08009d7c
 80091a0:	08009d80 	.word	0x08009d80

080091a4 <__retarget_lock_acquire_recursive>:
 80091a4:	4770      	bx	lr

080091a6 <__retarget_lock_release_recursive>:
 80091a6:	4770      	bx	lr

080091a8 <memcpy>:
 80091a8:	440a      	add	r2, r1
 80091aa:	4291      	cmp	r1, r2
 80091ac:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80091b0:	d100      	bne.n	80091b4 <memcpy+0xc>
 80091b2:	4770      	bx	lr
 80091b4:	b510      	push	{r4, lr}
 80091b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091be:	4291      	cmp	r1, r2
 80091c0:	d1f9      	bne.n	80091b6 <memcpy+0xe>
 80091c2:	bd10      	pop	{r4, pc}

080091c4 <__ssputs_r>:
 80091c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091c8:	688e      	ldr	r6, [r1, #8]
 80091ca:	461f      	mov	r7, r3
 80091cc:	42be      	cmp	r6, r7
 80091ce:	680b      	ldr	r3, [r1, #0]
 80091d0:	4682      	mov	sl, r0
 80091d2:	460c      	mov	r4, r1
 80091d4:	4690      	mov	r8, r2
 80091d6:	d82d      	bhi.n	8009234 <__ssputs_r+0x70>
 80091d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80091e0:	d026      	beq.n	8009230 <__ssputs_r+0x6c>
 80091e2:	6965      	ldr	r5, [r4, #20]
 80091e4:	6909      	ldr	r1, [r1, #16]
 80091e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091ea:	eba3 0901 	sub.w	r9, r3, r1
 80091ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091f2:	1c7b      	adds	r3, r7, #1
 80091f4:	444b      	add	r3, r9
 80091f6:	106d      	asrs	r5, r5, #1
 80091f8:	429d      	cmp	r5, r3
 80091fa:	bf38      	it	cc
 80091fc:	461d      	movcc	r5, r3
 80091fe:	0553      	lsls	r3, r2, #21
 8009200:	d527      	bpl.n	8009252 <__ssputs_r+0x8e>
 8009202:	4629      	mov	r1, r5
 8009204:	f000 f958 	bl	80094b8 <_malloc_r>
 8009208:	4606      	mov	r6, r0
 800920a:	b360      	cbz	r0, 8009266 <__ssputs_r+0xa2>
 800920c:	6921      	ldr	r1, [r4, #16]
 800920e:	464a      	mov	r2, r9
 8009210:	f7ff ffca 	bl	80091a8 <memcpy>
 8009214:	89a3      	ldrh	r3, [r4, #12]
 8009216:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800921a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800921e:	81a3      	strh	r3, [r4, #12]
 8009220:	6126      	str	r6, [r4, #16]
 8009222:	6165      	str	r5, [r4, #20]
 8009224:	444e      	add	r6, r9
 8009226:	eba5 0509 	sub.w	r5, r5, r9
 800922a:	6026      	str	r6, [r4, #0]
 800922c:	60a5      	str	r5, [r4, #8]
 800922e:	463e      	mov	r6, r7
 8009230:	42be      	cmp	r6, r7
 8009232:	d900      	bls.n	8009236 <__ssputs_r+0x72>
 8009234:	463e      	mov	r6, r7
 8009236:	6820      	ldr	r0, [r4, #0]
 8009238:	4632      	mov	r2, r6
 800923a:	4641      	mov	r1, r8
 800923c:	f000 fb84 	bl	8009948 <memmove>
 8009240:	68a3      	ldr	r3, [r4, #8]
 8009242:	1b9b      	subs	r3, r3, r6
 8009244:	60a3      	str	r3, [r4, #8]
 8009246:	6823      	ldr	r3, [r4, #0]
 8009248:	4433      	add	r3, r6
 800924a:	6023      	str	r3, [r4, #0]
 800924c:	2000      	movs	r0, #0
 800924e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009252:	462a      	mov	r2, r5
 8009254:	f000 fb4a 	bl	80098ec <_realloc_r>
 8009258:	4606      	mov	r6, r0
 800925a:	2800      	cmp	r0, #0
 800925c:	d1e0      	bne.n	8009220 <__ssputs_r+0x5c>
 800925e:	6921      	ldr	r1, [r4, #16]
 8009260:	4650      	mov	r0, sl
 8009262:	f000 fb9b 	bl	800999c <_free_r>
 8009266:	230c      	movs	r3, #12
 8009268:	f8ca 3000 	str.w	r3, [sl]
 800926c:	89a3      	ldrh	r3, [r4, #12]
 800926e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009272:	81a3      	strh	r3, [r4, #12]
 8009274:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009278:	e7e9      	b.n	800924e <__ssputs_r+0x8a>
	...

0800927c <_svfiprintf_r>:
 800927c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009280:	4698      	mov	r8, r3
 8009282:	898b      	ldrh	r3, [r1, #12]
 8009284:	061b      	lsls	r3, r3, #24
 8009286:	b09d      	sub	sp, #116	@ 0x74
 8009288:	4607      	mov	r7, r0
 800928a:	460d      	mov	r5, r1
 800928c:	4614      	mov	r4, r2
 800928e:	d510      	bpl.n	80092b2 <_svfiprintf_r+0x36>
 8009290:	690b      	ldr	r3, [r1, #16]
 8009292:	b973      	cbnz	r3, 80092b2 <_svfiprintf_r+0x36>
 8009294:	2140      	movs	r1, #64	@ 0x40
 8009296:	f000 f90f 	bl	80094b8 <_malloc_r>
 800929a:	6028      	str	r0, [r5, #0]
 800929c:	6128      	str	r0, [r5, #16]
 800929e:	b930      	cbnz	r0, 80092ae <_svfiprintf_r+0x32>
 80092a0:	230c      	movs	r3, #12
 80092a2:	603b      	str	r3, [r7, #0]
 80092a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092a8:	b01d      	add	sp, #116	@ 0x74
 80092aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ae:	2340      	movs	r3, #64	@ 0x40
 80092b0:	616b      	str	r3, [r5, #20]
 80092b2:	2300      	movs	r3, #0
 80092b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80092b6:	2320      	movs	r3, #32
 80092b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80092c0:	2330      	movs	r3, #48	@ 0x30
 80092c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009460 <_svfiprintf_r+0x1e4>
 80092c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092ca:	f04f 0901 	mov.w	r9, #1
 80092ce:	4623      	mov	r3, r4
 80092d0:	469a      	mov	sl, r3
 80092d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092d6:	b10a      	cbz	r2, 80092dc <_svfiprintf_r+0x60>
 80092d8:	2a25      	cmp	r2, #37	@ 0x25
 80092da:	d1f9      	bne.n	80092d0 <_svfiprintf_r+0x54>
 80092dc:	ebba 0b04 	subs.w	fp, sl, r4
 80092e0:	d00b      	beq.n	80092fa <_svfiprintf_r+0x7e>
 80092e2:	465b      	mov	r3, fp
 80092e4:	4622      	mov	r2, r4
 80092e6:	4629      	mov	r1, r5
 80092e8:	4638      	mov	r0, r7
 80092ea:	f7ff ff6b 	bl	80091c4 <__ssputs_r>
 80092ee:	3001      	adds	r0, #1
 80092f0:	f000 80a7 	beq.w	8009442 <_svfiprintf_r+0x1c6>
 80092f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092f6:	445a      	add	r2, fp
 80092f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80092fa:	f89a 3000 	ldrb.w	r3, [sl]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f000 809f 	beq.w	8009442 <_svfiprintf_r+0x1c6>
 8009304:	2300      	movs	r3, #0
 8009306:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800930a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800930e:	f10a 0a01 	add.w	sl, sl, #1
 8009312:	9304      	str	r3, [sp, #16]
 8009314:	9307      	str	r3, [sp, #28]
 8009316:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800931a:	931a      	str	r3, [sp, #104]	@ 0x68
 800931c:	4654      	mov	r4, sl
 800931e:	2205      	movs	r2, #5
 8009320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009324:	484e      	ldr	r0, [pc, #312]	@ (8009460 <_svfiprintf_r+0x1e4>)
 8009326:	f7f6 ff33 	bl	8000190 <memchr>
 800932a:	9a04      	ldr	r2, [sp, #16]
 800932c:	b9d8      	cbnz	r0, 8009366 <_svfiprintf_r+0xea>
 800932e:	06d0      	lsls	r0, r2, #27
 8009330:	bf44      	itt	mi
 8009332:	2320      	movmi	r3, #32
 8009334:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009338:	0711      	lsls	r1, r2, #28
 800933a:	bf44      	itt	mi
 800933c:	232b      	movmi	r3, #43	@ 0x2b
 800933e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009342:	f89a 3000 	ldrb.w	r3, [sl]
 8009346:	2b2a      	cmp	r3, #42	@ 0x2a
 8009348:	d015      	beq.n	8009376 <_svfiprintf_r+0xfa>
 800934a:	9a07      	ldr	r2, [sp, #28]
 800934c:	4654      	mov	r4, sl
 800934e:	2000      	movs	r0, #0
 8009350:	f04f 0c0a 	mov.w	ip, #10
 8009354:	4621      	mov	r1, r4
 8009356:	f811 3b01 	ldrb.w	r3, [r1], #1
 800935a:	3b30      	subs	r3, #48	@ 0x30
 800935c:	2b09      	cmp	r3, #9
 800935e:	d94b      	bls.n	80093f8 <_svfiprintf_r+0x17c>
 8009360:	b1b0      	cbz	r0, 8009390 <_svfiprintf_r+0x114>
 8009362:	9207      	str	r2, [sp, #28]
 8009364:	e014      	b.n	8009390 <_svfiprintf_r+0x114>
 8009366:	eba0 0308 	sub.w	r3, r0, r8
 800936a:	fa09 f303 	lsl.w	r3, r9, r3
 800936e:	4313      	orrs	r3, r2
 8009370:	9304      	str	r3, [sp, #16]
 8009372:	46a2      	mov	sl, r4
 8009374:	e7d2      	b.n	800931c <_svfiprintf_r+0xa0>
 8009376:	9b03      	ldr	r3, [sp, #12]
 8009378:	1d19      	adds	r1, r3, #4
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	9103      	str	r1, [sp, #12]
 800937e:	2b00      	cmp	r3, #0
 8009380:	bfbb      	ittet	lt
 8009382:	425b      	neglt	r3, r3
 8009384:	f042 0202 	orrlt.w	r2, r2, #2
 8009388:	9307      	strge	r3, [sp, #28]
 800938a:	9307      	strlt	r3, [sp, #28]
 800938c:	bfb8      	it	lt
 800938e:	9204      	strlt	r2, [sp, #16]
 8009390:	7823      	ldrb	r3, [r4, #0]
 8009392:	2b2e      	cmp	r3, #46	@ 0x2e
 8009394:	d10a      	bne.n	80093ac <_svfiprintf_r+0x130>
 8009396:	7863      	ldrb	r3, [r4, #1]
 8009398:	2b2a      	cmp	r3, #42	@ 0x2a
 800939a:	d132      	bne.n	8009402 <_svfiprintf_r+0x186>
 800939c:	9b03      	ldr	r3, [sp, #12]
 800939e:	1d1a      	adds	r2, r3, #4
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	9203      	str	r2, [sp, #12]
 80093a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093a8:	3402      	adds	r4, #2
 80093aa:	9305      	str	r3, [sp, #20]
 80093ac:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009464 <_svfiprintf_r+0x1e8>
 80093b0:	7821      	ldrb	r1, [r4, #0]
 80093b2:	2203      	movs	r2, #3
 80093b4:	4650      	mov	r0, sl
 80093b6:	f7f6 feeb 	bl	8000190 <memchr>
 80093ba:	b138      	cbz	r0, 80093cc <_svfiprintf_r+0x150>
 80093bc:	9b04      	ldr	r3, [sp, #16]
 80093be:	eba0 000a 	sub.w	r0, r0, sl
 80093c2:	2240      	movs	r2, #64	@ 0x40
 80093c4:	4082      	lsls	r2, r0
 80093c6:	4313      	orrs	r3, r2
 80093c8:	3401      	adds	r4, #1
 80093ca:	9304      	str	r3, [sp, #16]
 80093cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093d0:	4825      	ldr	r0, [pc, #148]	@ (8009468 <_svfiprintf_r+0x1ec>)
 80093d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093d6:	2206      	movs	r2, #6
 80093d8:	f7f6 feda 	bl	8000190 <memchr>
 80093dc:	2800      	cmp	r0, #0
 80093de:	d036      	beq.n	800944e <_svfiprintf_r+0x1d2>
 80093e0:	4b22      	ldr	r3, [pc, #136]	@ (800946c <_svfiprintf_r+0x1f0>)
 80093e2:	bb1b      	cbnz	r3, 800942c <_svfiprintf_r+0x1b0>
 80093e4:	9b03      	ldr	r3, [sp, #12]
 80093e6:	3307      	adds	r3, #7
 80093e8:	f023 0307 	bic.w	r3, r3, #7
 80093ec:	3308      	adds	r3, #8
 80093ee:	9303      	str	r3, [sp, #12]
 80093f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093f2:	4433      	add	r3, r6
 80093f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80093f6:	e76a      	b.n	80092ce <_svfiprintf_r+0x52>
 80093f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80093fc:	460c      	mov	r4, r1
 80093fe:	2001      	movs	r0, #1
 8009400:	e7a8      	b.n	8009354 <_svfiprintf_r+0xd8>
 8009402:	2300      	movs	r3, #0
 8009404:	3401      	adds	r4, #1
 8009406:	9305      	str	r3, [sp, #20]
 8009408:	4619      	mov	r1, r3
 800940a:	f04f 0c0a 	mov.w	ip, #10
 800940e:	4620      	mov	r0, r4
 8009410:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009414:	3a30      	subs	r2, #48	@ 0x30
 8009416:	2a09      	cmp	r2, #9
 8009418:	d903      	bls.n	8009422 <_svfiprintf_r+0x1a6>
 800941a:	2b00      	cmp	r3, #0
 800941c:	d0c6      	beq.n	80093ac <_svfiprintf_r+0x130>
 800941e:	9105      	str	r1, [sp, #20]
 8009420:	e7c4      	b.n	80093ac <_svfiprintf_r+0x130>
 8009422:	fb0c 2101 	mla	r1, ip, r1, r2
 8009426:	4604      	mov	r4, r0
 8009428:	2301      	movs	r3, #1
 800942a:	e7f0      	b.n	800940e <_svfiprintf_r+0x192>
 800942c:	ab03      	add	r3, sp, #12
 800942e:	9300      	str	r3, [sp, #0]
 8009430:	462a      	mov	r2, r5
 8009432:	4b0f      	ldr	r3, [pc, #60]	@ (8009470 <_svfiprintf_r+0x1f4>)
 8009434:	a904      	add	r1, sp, #16
 8009436:	4638      	mov	r0, r7
 8009438:	f3af 8000 	nop.w
 800943c:	1c42      	adds	r2, r0, #1
 800943e:	4606      	mov	r6, r0
 8009440:	d1d6      	bne.n	80093f0 <_svfiprintf_r+0x174>
 8009442:	89ab      	ldrh	r3, [r5, #12]
 8009444:	065b      	lsls	r3, r3, #25
 8009446:	f53f af2d 	bmi.w	80092a4 <_svfiprintf_r+0x28>
 800944a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800944c:	e72c      	b.n	80092a8 <_svfiprintf_r+0x2c>
 800944e:	ab03      	add	r3, sp, #12
 8009450:	9300      	str	r3, [sp, #0]
 8009452:	462a      	mov	r2, r5
 8009454:	4b06      	ldr	r3, [pc, #24]	@ (8009470 <_svfiprintf_r+0x1f4>)
 8009456:	a904      	add	r1, sp, #16
 8009458:	4638      	mov	r0, r7
 800945a:	f000 f91b 	bl	8009694 <_printf_i>
 800945e:	e7ed      	b.n	800943c <_svfiprintf_r+0x1c0>
 8009460:	08009d40 	.word	0x08009d40
 8009464:	08009d46 	.word	0x08009d46
 8009468:	08009d4a 	.word	0x08009d4a
 800946c:	00000000 	.word	0x00000000
 8009470:	080091c5 	.word	0x080091c5

08009474 <sbrk_aligned>:
 8009474:	b570      	push	{r4, r5, r6, lr}
 8009476:	4e0f      	ldr	r6, [pc, #60]	@ (80094b4 <sbrk_aligned+0x40>)
 8009478:	460c      	mov	r4, r1
 800947a:	6831      	ldr	r1, [r6, #0]
 800947c:	4605      	mov	r5, r0
 800947e:	b911      	cbnz	r1, 8009486 <sbrk_aligned+0x12>
 8009480:	f000 fa7c 	bl	800997c <_sbrk_r>
 8009484:	6030      	str	r0, [r6, #0]
 8009486:	4621      	mov	r1, r4
 8009488:	4628      	mov	r0, r5
 800948a:	f000 fa77 	bl	800997c <_sbrk_r>
 800948e:	1c43      	adds	r3, r0, #1
 8009490:	d103      	bne.n	800949a <sbrk_aligned+0x26>
 8009492:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009496:	4620      	mov	r0, r4
 8009498:	bd70      	pop	{r4, r5, r6, pc}
 800949a:	1cc4      	adds	r4, r0, #3
 800949c:	f024 0403 	bic.w	r4, r4, #3
 80094a0:	42a0      	cmp	r0, r4
 80094a2:	d0f8      	beq.n	8009496 <sbrk_aligned+0x22>
 80094a4:	1a21      	subs	r1, r4, r0
 80094a6:	4628      	mov	r0, r5
 80094a8:	f000 fa68 	bl	800997c <_sbrk_r>
 80094ac:	3001      	adds	r0, #1
 80094ae:	d1f2      	bne.n	8009496 <sbrk_aligned+0x22>
 80094b0:	e7ef      	b.n	8009492 <sbrk_aligned+0x1e>
 80094b2:	bf00      	nop
 80094b4:	2000043c 	.word	0x2000043c

080094b8 <_malloc_r>:
 80094b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094bc:	1ccd      	adds	r5, r1, #3
 80094be:	f025 0503 	bic.w	r5, r5, #3
 80094c2:	3508      	adds	r5, #8
 80094c4:	2d0c      	cmp	r5, #12
 80094c6:	bf38      	it	cc
 80094c8:	250c      	movcc	r5, #12
 80094ca:	2d00      	cmp	r5, #0
 80094cc:	4606      	mov	r6, r0
 80094ce:	db01      	blt.n	80094d4 <_malloc_r+0x1c>
 80094d0:	42a9      	cmp	r1, r5
 80094d2:	d904      	bls.n	80094de <_malloc_r+0x26>
 80094d4:	230c      	movs	r3, #12
 80094d6:	6033      	str	r3, [r6, #0]
 80094d8:	2000      	movs	r0, #0
 80094da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80095b4 <_malloc_r+0xfc>
 80094e2:	f000 f9f7 	bl	80098d4 <__malloc_lock>
 80094e6:	f8d8 3000 	ldr.w	r3, [r8]
 80094ea:	461c      	mov	r4, r3
 80094ec:	bb44      	cbnz	r4, 8009540 <_malloc_r+0x88>
 80094ee:	4629      	mov	r1, r5
 80094f0:	4630      	mov	r0, r6
 80094f2:	f7ff ffbf 	bl	8009474 <sbrk_aligned>
 80094f6:	1c43      	adds	r3, r0, #1
 80094f8:	4604      	mov	r4, r0
 80094fa:	d158      	bne.n	80095ae <_malloc_r+0xf6>
 80094fc:	f8d8 4000 	ldr.w	r4, [r8]
 8009500:	4627      	mov	r7, r4
 8009502:	2f00      	cmp	r7, #0
 8009504:	d143      	bne.n	800958e <_malloc_r+0xd6>
 8009506:	2c00      	cmp	r4, #0
 8009508:	d04b      	beq.n	80095a2 <_malloc_r+0xea>
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	4639      	mov	r1, r7
 800950e:	4630      	mov	r0, r6
 8009510:	eb04 0903 	add.w	r9, r4, r3
 8009514:	f000 fa32 	bl	800997c <_sbrk_r>
 8009518:	4581      	cmp	r9, r0
 800951a:	d142      	bne.n	80095a2 <_malloc_r+0xea>
 800951c:	6821      	ldr	r1, [r4, #0]
 800951e:	1a6d      	subs	r5, r5, r1
 8009520:	4629      	mov	r1, r5
 8009522:	4630      	mov	r0, r6
 8009524:	f7ff ffa6 	bl	8009474 <sbrk_aligned>
 8009528:	3001      	adds	r0, #1
 800952a:	d03a      	beq.n	80095a2 <_malloc_r+0xea>
 800952c:	6823      	ldr	r3, [r4, #0]
 800952e:	442b      	add	r3, r5
 8009530:	6023      	str	r3, [r4, #0]
 8009532:	f8d8 3000 	ldr.w	r3, [r8]
 8009536:	685a      	ldr	r2, [r3, #4]
 8009538:	bb62      	cbnz	r2, 8009594 <_malloc_r+0xdc>
 800953a:	f8c8 7000 	str.w	r7, [r8]
 800953e:	e00f      	b.n	8009560 <_malloc_r+0xa8>
 8009540:	6822      	ldr	r2, [r4, #0]
 8009542:	1b52      	subs	r2, r2, r5
 8009544:	d420      	bmi.n	8009588 <_malloc_r+0xd0>
 8009546:	2a0b      	cmp	r2, #11
 8009548:	d917      	bls.n	800957a <_malloc_r+0xc2>
 800954a:	1961      	adds	r1, r4, r5
 800954c:	42a3      	cmp	r3, r4
 800954e:	6025      	str	r5, [r4, #0]
 8009550:	bf18      	it	ne
 8009552:	6059      	strne	r1, [r3, #4]
 8009554:	6863      	ldr	r3, [r4, #4]
 8009556:	bf08      	it	eq
 8009558:	f8c8 1000 	streq.w	r1, [r8]
 800955c:	5162      	str	r2, [r4, r5]
 800955e:	604b      	str	r3, [r1, #4]
 8009560:	4630      	mov	r0, r6
 8009562:	f000 f9bd 	bl	80098e0 <__malloc_unlock>
 8009566:	f104 000b 	add.w	r0, r4, #11
 800956a:	1d23      	adds	r3, r4, #4
 800956c:	f020 0007 	bic.w	r0, r0, #7
 8009570:	1ac2      	subs	r2, r0, r3
 8009572:	bf1c      	itt	ne
 8009574:	1a1b      	subne	r3, r3, r0
 8009576:	50a3      	strne	r3, [r4, r2]
 8009578:	e7af      	b.n	80094da <_malloc_r+0x22>
 800957a:	6862      	ldr	r2, [r4, #4]
 800957c:	42a3      	cmp	r3, r4
 800957e:	bf0c      	ite	eq
 8009580:	f8c8 2000 	streq.w	r2, [r8]
 8009584:	605a      	strne	r2, [r3, #4]
 8009586:	e7eb      	b.n	8009560 <_malloc_r+0xa8>
 8009588:	4623      	mov	r3, r4
 800958a:	6864      	ldr	r4, [r4, #4]
 800958c:	e7ae      	b.n	80094ec <_malloc_r+0x34>
 800958e:	463c      	mov	r4, r7
 8009590:	687f      	ldr	r7, [r7, #4]
 8009592:	e7b6      	b.n	8009502 <_malloc_r+0x4a>
 8009594:	461a      	mov	r2, r3
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	42a3      	cmp	r3, r4
 800959a:	d1fb      	bne.n	8009594 <_malloc_r+0xdc>
 800959c:	2300      	movs	r3, #0
 800959e:	6053      	str	r3, [r2, #4]
 80095a0:	e7de      	b.n	8009560 <_malloc_r+0xa8>
 80095a2:	230c      	movs	r3, #12
 80095a4:	6033      	str	r3, [r6, #0]
 80095a6:	4630      	mov	r0, r6
 80095a8:	f000 f99a 	bl	80098e0 <__malloc_unlock>
 80095ac:	e794      	b.n	80094d8 <_malloc_r+0x20>
 80095ae:	6005      	str	r5, [r0, #0]
 80095b0:	e7d6      	b.n	8009560 <_malloc_r+0xa8>
 80095b2:	bf00      	nop
 80095b4:	20000440 	.word	0x20000440

080095b8 <_printf_common>:
 80095b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095bc:	4616      	mov	r6, r2
 80095be:	4698      	mov	r8, r3
 80095c0:	688a      	ldr	r2, [r1, #8]
 80095c2:	690b      	ldr	r3, [r1, #16]
 80095c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80095c8:	4293      	cmp	r3, r2
 80095ca:	bfb8      	it	lt
 80095cc:	4613      	movlt	r3, r2
 80095ce:	6033      	str	r3, [r6, #0]
 80095d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80095d4:	4607      	mov	r7, r0
 80095d6:	460c      	mov	r4, r1
 80095d8:	b10a      	cbz	r2, 80095de <_printf_common+0x26>
 80095da:	3301      	adds	r3, #1
 80095dc:	6033      	str	r3, [r6, #0]
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	0699      	lsls	r1, r3, #26
 80095e2:	bf42      	ittt	mi
 80095e4:	6833      	ldrmi	r3, [r6, #0]
 80095e6:	3302      	addmi	r3, #2
 80095e8:	6033      	strmi	r3, [r6, #0]
 80095ea:	6825      	ldr	r5, [r4, #0]
 80095ec:	f015 0506 	ands.w	r5, r5, #6
 80095f0:	d106      	bne.n	8009600 <_printf_common+0x48>
 80095f2:	f104 0a19 	add.w	sl, r4, #25
 80095f6:	68e3      	ldr	r3, [r4, #12]
 80095f8:	6832      	ldr	r2, [r6, #0]
 80095fa:	1a9b      	subs	r3, r3, r2
 80095fc:	42ab      	cmp	r3, r5
 80095fe:	dc26      	bgt.n	800964e <_printf_common+0x96>
 8009600:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009604:	6822      	ldr	r2, [r4, #0]
 8009606:	3b00      	subs	r3, #0
 8009608:	bf18      	it	ne
 800960a:	2301      	movne	r3, #1
 800960c:	0692      	lsls	r2, r2, #26
 800960e:	d42b      	bmi.n	8009668 <_printf_common+0xb0>
 8009610:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009614:	4641      	mov	r1, r8
 8009616:	4638      	mov	r0, r7
 8009618:	47c8      	blx	r9
 800961a:	3001      	adds	r0, #1
 800961c:	d01e      	beq.n	800965c <_printf_common+0xa4>
 800961e:	6823      	ldr	r3, [r4, #0]
 8009620:	6922      	ldr	r2, [r4, #16]
 8009622:	f003 0306 	and.w	r3, r3, #6
 8009626:	2b04      	cmp	r3, #4
 8009628:	bf02      	ittt	eq
 800962a:	68e5      	ldreq	r5, [r4, #12]
 800962c:	6833      	ldreq	r3, [r6, #0]
 800962e:	1aed      	subeq	r5, r5, r3
 8009630:	68a3      	ldr	r3, [r4, #8]
 8009632:	bf0c      	ite	eq
 8009634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009638:	2500      	movne	r5, #0
 800963a:	4293      	cmp	r3, r2
 800963c:	bfc4      	itt	gt
 800963e:	1a9b      	subgt	r3, r3, r2
 8009640:	18ed      	addgt	r5, r5, r3
 8009642:	2600      	movs	r6, #0
 8009644:	341a      	adds	r4, #26
 8009646:	42b5      	cmp	r5, r6
 8009648:	d11a      	bne.n	8009680 <_printf_common+0xc8>
 800964a:	2000      	movs	r0, #0
 800964c:	e008      	b.n	8009660 <_printf_common+0xa8>
 800964e:	2301      	movs	r3, #1
 8009650:	4652      	mov	r2, sl
 8009652:	4641      	mov	r1, r8
 8009654:	4638      	mov	r0, r7
 8009656:	47c8      	blx	r9
 8009658:	3001      	adds	r0, #1
 800965a:	d103      	bne.n	8009664 <_printf_common+0xac>
 800965c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009664:	3501      	adds	r5, #1
 8009666:	e7c6      	b.n	80095f6 <_printf_common+0x3e>
 8009668:	18e1      	adds	r1, r4, r3
 800966a:	1c5a      	adds	r2, r3, #1
 800966c:	2030      	movs	r0, #48	@ 0x30
 800966e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009672:	4422      	add	r2, r4
 8009674:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009678:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800967c:	3302      	adds	r3, #2
 800967e:	e7c7      	b.n	8009610 <_printf_common+0x58>
 8009680:	2301      	movs	r3, #1
 8009682:	4622      	mov	r2, r4
 8009684:	4641      	mov	r1, r8
 8009686:	4638      	mov	r0, r7
 8009688:	47c8      	blx	r9
 800968a:	3001      	adds	r0, #1
 800968c:	d0e6      	beq.n	800965c <_printf_common+0xa4>
 800968e:	3601      	adds	r6, #1
 8009690:	e7d9      	b.n	8009646 <_printf_common+0x8e>
	...

08009694 <_printf_i>:
 8009694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009698:	7e0f      	ldrb	r7, [r1, #24]
 800969a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800969c:	2f78      	cmp	r7, #120	@ 0x78
 800969e:	4691      	mov	r9, r2
 80096a0:	4680      	mov	r8, r0
 80096a2:	460c      	mov	r4, r1
 80096a4:	469a      	mov	sl, r3
 80096a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80096aa:	d807      	bhi.n	80096bc <_printf_i+0x28>
 80096ac:	2f62      	cmp	r7, #98	@ 0x62
 80096ae:	d80a      	bhi.n	80096c6 <_printf_i+0x32>
 80096b0:	2f00      	cmp	r7, #0
 80096b2:	f000 80d2 	beq.w	800985a <_printf_i+0x1c6>
 80096b6:	2f58      	cmp	r7, #88	@ 0x58
 80096b8:	f000 80b9 	beq.w	800982e <_printf_i+0x19a>
 80096bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80096c4:	e03a      	b.n	800973c <_printf_i+0xa8>
 80096c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80096ca:	2b15      	cmp	r3, #21
 80096cc:	d8f6      	bhi.n	80096bc <_printf_i+0x28>
 80096ce:	a101      	add	r1, pc, #4	@ (adr r1, 80096d4 <_printf_i+0x40>)
 80096d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096d4:	0800972d 	.word	0x0800972d
 80096d8:	08009741 	.word	0x08009741
 80096dc:	080096bd 	.word	0x080096bd
 80096e0:	080096bd 	.word	0x080096bd
 80096e4:	080096bd 	.word	0x080096bd
 80096e8:	080096bd 	.word	0x080096bd
 80096ec:	08009741 	.word	0x08009741
 80096f0:	080096bd 	.word	0x080096bd
 80096f4:	080096bd 	.word	0x080096bd
 80096f8:	080096bd 	.word	0x080096bd
 80096fc:	080096bd 	.word	0x080096bd
 8009700:	08009841 	.word	0x08009841
 8009704:	0800976b 	.word	0x0800976b
 8009708:	080097fb 	.word	0x080097fb
 800970c:	080096bd 	.word	0x080096bd
 8009710:	080096bd 	.word	0x080096bd
 8009714:	08009863 	.word	0x08009863
 8009718:	080096bd 	.word	0x080096bd
 800971c:	0800976b 	.word	0x0800976b
 8009720:	080096bd 	.word	0x080096bd
 8009724:	080096bd 	.word	0x080096bd
 8009728:	08009803 	.word	0x08009803
 800972c:	6833      	ldr	r3, [r6, #0]
 800972e:	1d1a      	adds	r2, r3, #4
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	6032      	str	r2, [r6, #0]
 8009734:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009738:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800973c:	2301      	movs	r3, #1
 800973e:	e09d      	b.n	800987c <_printf_i+0x1e8>
 8009740:	6833      	ldr	r3, [r6, #0]
 8009742:	6820      	ldr	r0, [r4, #0]
 8009744:	1d19      	adds	r1, r3, #4
 8009746:	6031      	str	r1, [r6, #0]
 8009748:	0606      	lsls	r6, r0, #24
 800974a:	d501      	bpl.n	8009750 <_printf_i+0xbc>
 800974c:	681d      	ldr	r5, [r3, #0]
 800974e:	e003      	b.n	8009758 <_printf_i+0xc4>
 8009750:	0645      	lsls	r5, r0, #25
 8009752:	d5fb      	bpl.n	800974c <_printf_i+0xb8>
 8009754:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009758:	2d00      	cmp	r5, #0
 800975a:	da03      	bge.n	8009764 <_printf_i+0xd0>
 800975c:	232d      	movs	r3, #45	@ 0x2d
 800975e:	426d      	negs	r5, r5
 8009760:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009764:	4859      	ldr	r0, [pc, #356]	@ (80098cc <_printf_i+0x238>)
 8009766:	230a      	movs	r3, #10
 8009768:	e011      	b.n	800978e <_printf_i+0xfa>
 800976a:	6821      	ldr	r1, [r4, #0]
 800976c:	6833      	ldr	r3, [r6, #0]
 800976e:	0608      	lsls	r0, r1, #24
 8009770:	f853 5b04 	ldr.w	r5, [r3], #4
 8009774:	d402      	bmi.n	800977c <_printf_i+0xe8>
 8009776:	0649      	lsls	r1, r1, #25
 8009778:	bf48      	it	mi
 800977a:	b2ad      	uxthmi	r5, r5
 800977c:	2f6f      	cmp	r7, #111	@ 0x6f
 800977e:	4853      	ldr	r0, [pc, #332]	@ (80098cc <_printf_i+0x238>)
 8009780:	6033      	str	r3, [r6, #0]
 8009782:	bf14      	ite	ne
 8009784:	230a      	movne	r3, #10
 8009786:	2308      	moveq	r3, #8
 8009788:	2100      	movs	r1, #0
 800978a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800978e:	6866      	ldr	r6, [r4, #4]
 8009790:	60a6      	str	r6, [r4, #8]
 8009792:	2e00      	cmp	r6, #0
 8009794:	bfa2      	ittt	ge
 8009796:	6821      	ldrge	r1, [r4, #0]
 8009798:	f021 0104 	bicge.w	r1, r1, #4
 800979c:	6021      	strge	r1, [r4, #0]
 800979e:	b90d      	cbnz	r5, 80097a4 <_printf_i+0x110>
 80097a0:	2e00      	cmp	r6, #0
 80097a2:	d04b      	beq.n	800983c <_printf_i+0x1a8>
 80097a4:	4616      	mov	r6, r2
 80097a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80097aa:	fb03 5711 	mls	r7, r3, r1, r5
 80097ae:	5dc7      	ldrb	r7, [r0, r7]
 80097b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80097b4:	462f      	mov	r7, r5
 80097b6:	42bb      	cmp	r3, r7
 80097b8:	460d      	mov	r5, r1
 80097ba:	d9f4      	bls.n	80097a6 <_printf_i+0x112>
 80097bc:	2b08      	cmp	r3, #8
 80097be:	d10b      	bne.n	80097d8 <_printf_i+0x144>
 80097c0:	6823      	ldr	r3, [r4, #0]
 80097c2:	07df      	lsls	r7, r3, #31
 80097c4:	d508      	bpl.n	80097d8 <_printf_i+0x144>
 80097c6:	6923      	ldr	r3, [r4, #16]
 80097c8:	6861      	ldr	r1, [r4, #4]
 80097ca:	4299      	cmp	r1, r3
 80097cc:	bfde      	ittt	le
 80097ce:	2330      	movle	r3, #48	@ 0x30
 80097d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80097d4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80097d8:	1b92      	subs	r2, r2, r6
 80097da:	6122      	str	r2, [r4, #16]
 80097dc:	f8cd a000 	str.w	sl, [sp]
 80097e0:	464b      	mov	r3, r9
 80097e2:	aa03      	add	r2, sp, #12
 80097e4:	4621      	mov	r1, r4
 80097e6:	4640      	mov	r0, r8
 80097e8:	f7ff fee6 	bl	80095b8 <_printf_common>
 80097ec:	3001      	adds	r0, #1
 80097ee:	d14a      	bne.n	8009886 <_printf_i+0x1f2>
 80097f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097f4:	b004      	add	sp, #16
 80097f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097fa:	6823      	ldr	r3, [r4, #0]
 80097fc:	f043 0320 	orr.w	r3, r3, #32
 8009800:	6023      	str	r3, [r4, #0]
 8009802:	4833      	ldr	r0, [pc, #204]	@ (80098d0 <_printf_i+0x23c>)
 8009804:	2778      	movs	r7, #120	@ 0x78
 8009806:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800980a:	6823      	ldr	r3, [r4, #0]
 800980c:	6831      	ldr	r1, [r6, #0]
 800980e:	061f      	lsls	r7, r3, #24
 8009810:	f851 5b04 	ldr.w	r5, [r1], #4
 8009814:	d402      	bmi.n	800981c <_printf_i+0x188>
 8009816:	065f      	lsls	r7, r3, #25
 8009818:	bf48      	it	mi
 800981a:	b2ad      	uxthmi	r5, r5
 800981c:	6031      	str	r1, [r6, #0]
 800981e:	07d9      	lsls	r1, r3, #31
 8009820:	bf44      	itt	mi
 8009822:	f043 0320 	orrmi.w	r3, r3, #32
 8009826:	6023      	strmi	r3, [r4, #0]
 8009828:	b11d      	cbz	r5, 8009832 <_printf_i+0x19e>
 800982a:	2310      	movs	r3, #16
 800982c:	e7ac      	b.n	8009788 <_printf_i+0xf4>
 800982e:	4827      	ldr	r0, [pc, #156]	@ (80098cc <_printf_i+0x238>)
 8009830:	e7e9      	b.n	8009806 <_printf_i+0x172>
 8009832:	6823      	ldr	r3, [r4, #0]
 8009834:	f023 0320 	bic.w	r3, r3, #32
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	e7f6      	b.n	800982a <_printf_i+0x196>
 800983c:	4616      	mov	r6, r2
 800983e:	e7bd      	b.n	80097bc <_printf_i+0x128>
 8009840:	6833      	ldr	r3, [r6, #0]
 8009842:	6825      	ldr	r5, [r4, #0]
 8009844:	6961      	ldr	r1, [r4, #20]
 8009846:	1d18      	adds	r0, r3, #4
 8009848:	6030      	str	r0, [r6, #0]
 800984a:	062e      	lsls	r6, r5, #24
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	d501      	bpl.n	8009854 <_printf_i+0x1c0>
 8009850:	6019      	str	r1, [r3, #0]
 8009852:	e002      	b.n	800985a <_printf_i+0x1c6>
 8009854:	0668      	lsls	r0, r5, #25
 8009856:	d5fb      	bpl.n	8009850 <_printf_i+0x1bc>
 8009858:	8019      	strh	r1, [r3, #0]
 800985a:	2300      	movs	r3, #0
 800985c:	6123      	str	r3, [r4, #16]
 800985e:	4616      	mov	r6, r2
 8009860:	e7bc      	b.n	80097dc <_printf_i+0x148>
 8009862:	6833      	ldr	r3, [r6, #0]
 8009864:	1d1a      	adds	r2, r3, #4
 8009866:	6032      	str	r2, [r6, #0]
 8009868:	681e      	ldr	r6, [r3, #0]
 800986a:	6862      	ldr	r2, [r4, #4]
 800986c:	2100      	movs	r1, #0
 800986e:	4630      	mov	r0, r6
 8009870:	f7f6 fc8e 	bl	8000190 <memchr>
 8009874:	b108      	cbz	r0, 800987a <_printf_i+0x1e6>
 8009876:	1b80      	subs	r0, r0, r6
 8009878:	6060      	str	r0, [r4, #4]
 800987a:	6863      	ldr	r3, [r4, #4]
 800987c:	6123      	str	r3, [r4, #16]
 800987e:	2300      	movs	r3, #0
 8009880:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009884:	e7aa      	b.n	80097dc <_printf_i+0x148>
 8009886:	6923      	ldr	r3, [r4, #16]
 8009888:	4632      	mov	r2, r6
 800988a:	4649      	mov	r1, r9
 800988c:	4640      	mov	r0, r8
 800988e:	47d0      	blx	sl
 8009890:	3001      	adds	r0, #1
 8009892:	d0ad      	beq.n	80097f0 <_printf_i+0x15c>
 8009894:	6823      	ldr	r3, [r4, #0]
 8009896:	079b      	lsls	r3, r3, #30
 8009898:	d413      	bmi.n	80098c2 <_printf_i+0x22e>
 800989a:	68e0      	ldr	r0, [r4, #12]
 800989c:	9b03      	ldr	r3, [sp, #12]
 800989e:	4298      	cmp	r0, r3
 80098a0:	bfb8      	it	lt
 80098a2:	4618      	movlt	r0, r3
 80098a4:	e7a6      	b.n	80097f4 <_printf_i+0x160>
 80098a6:	2301      	movs	r3, #1
 80098a8:	4632      	mov	r2, r6
 80098aa:	4649      	mov	r1, r9
 80098ac:	4640      	mov	r0, r8
 80098ae:	47d0      	blx	sl
 80098b0:	3001      	adds	r0, #1
 80098b2:	d09d      	beq.n	80097f0 <_printf_i+0x15c>
 80098b4:	3501      	adds	r5, #1
 80098b6:	68e3      	ldr	r3, [r4, #12]
 80098b8:	9903      	ldr	r1, [sp, #12]
 80098ba:	1a5b      	subs	r3, r3, r1
 80098bc:	42ab      	cmp	r3, r5
 80098be:	dcf2      	bgt.n	80098a6 <_printf_i+0x212>
 80098c0:	e7eb      	b.n	800989a <_printf_i+0x206>
 80098c2:	2500      	movs	r5, #0
 80098c4:	f104 0619 	add.w	r6, r4, #25
 80098c8:	e7f5      	b.n	80098b6 <_printf_i+0x222>
 80098ca:	bf00      	nop
 80098cc:	08009d51 	.word	0x08009d51
 80098d0:	08009d62 	.word	0x08009d62

080098d4 <__malloc_lock>:
 80098d4:	4801      	ldr	r0, [pc, #4]	@ (80098dc <__malloc_lock+0x8>)
 80098d6:	f7ff bc65 	b.w	80091a4 <__retarget_lock_acquire_recursive>
 80098da:	bf00      	nop
 80098dc:	20000438 	.word	0x20000438

080098e0 <__malloc_unlock>:
 80098e0:	4801      	ldr	r0, [pc, #4]	@ (80098e8 <__malloc_unlock+0x8>)
 80098e2:	f7ff bc60 	b.w	80091a6 <__retarget_lock_release_recursive>
 80098e6:	bf00      	nop
 80098e8:	20000438 	.word	0x20000438

080098ec <_realloc_r>:
 80098ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098f0:	4680      	mov	r8, r0
 80098f2:	4615      	mov	r5, r2
 80098f4:	460c      	mov	r4, r1
 80098f6:	b921      	cbnz	r1, 8009902 <_realloc_r+0x16>
 80098f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098fc:	4611      	mov	r1, r2
 80098fe:	f7ff bddb 	b.w	80094b8 <_malloc_r>
 8009902:	b92a      	cbnz	r2, 8009910 <_realloc_r+0x24>
 8009904:	f000 f84a 	bl	800999c <_free_r>
 8009908:	2400      	movs	r4, #0
 800990a:	4620      	mov	r0, r4
 800990c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009910:	f000 f88e 	bl	8009a30 <_malloc_usable_size_r>
 8009914:	4285      	cmp	r5, r0
 8009916:	4606      	mov	r6, r0
 8009918:	d802      	bhi.n	8009920 <_realloc_r+0x34>
 800991a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800991e:	d8f4      	bhi.n	800990a <_realloc_r+0x1e>
 8009920:	4629      	mov	r1, r5
 8009922:	4640      	mov	r0, r8
 8009924:	f7ff fdc8 	bl	80094b8 <_malloc_r>
 8009928:	4607      	mov	r7, r0
 800992a:	2800      	cmp	r0, #0
 800992c:	d0ec      	beq.n	8009908 <_realloc_r+0x1c>
 800992e:	42b5      	cmp	r5, r6
 8009930:	462a      	mov	r2, r5
 8009932:	4621      	mov	r1, r4
 8009934:	bf28      	it	cs
 8009936:	4632      	movcs	r2, r6
 8009938:	f7ff fc36 	bl	80091a8 <memcpy>
 800993c:	4621      	mov	r1, r4
 800993e:	4640      	mov	r0, r8
 8009940:	f000 f82c 	bl	800999c <_free_r>
 8009944:	463c      	mov	r4, r7
 8009946:	e7e0      	b.n	800990a <_realloc_r+0x1e>

08009948 <memmove>:
 8009948:	4288      	cmp	r0, r1
 800994a:	b510      	push	{r4, lr}
 800994c:	eb01 0402 	add.w	r4, r1, r2
 8009950:	d902      	bls.n	8009958 <memmove+0x10>
 8009952:	4284      	cmp	r4, r0
 8009954:	4623      	mov	r3, r4
 8009956:	d807      	bhi.n	8009968 <memmove+0x20>
 8009958:	1e43      	subs	r3, r0, #1
 800995a:	42a1      	cmp	r1, r4
 800995c:	d008      	beq.n	8009970 <memmove+0x28>
 800995e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009962:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009966:	e7f8      	b.n	800995a <memmove+0x12>
 8009968:	4402      	add	r2, r0
 800996a:	4601      	mov	r1, r0
 800996c:	428a      	cmp	r2, r1
 800996e:	d100      	bne.n	8009972 <memmove+0x2a>
 8009970:	bd10      	pop	{r4, pc}
 8009972:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009976:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800997a:	e7f7      	b.n	800996c <memmove+0x24>

0800997c <_sbrk_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	4d06      	ldr	r5, [pc, #24]	@ (8009998 <_sbrk_r+0x1c>)
 8009980:	2300      	movs	r3, #0
 8009982:	4604      	mov	r4, r0
 8009984:	4608      	mov	r0, r1
 8009986:	602b      	str	r3, [r5, #0]
 8009988:	f7f8 f950 	bl	8001c2c <_sbrk>
 800998c:	1c43      	adds	r3, r0, #1
 800998e:	d102      	bne.n	8009996 <_sbrk_r+0x1a>
 8009990:	682b      	ldr	r3, [r5, #0]
 8009992:	b103      	cbz	r3, 8009996 <_sbrk_r+0x1a>
 8009994:	6023      	str	r3, [r4, #0]
 8009996:	bd38      	pop	{r3, r4, r5, pc}
 8009998:	20000444 	.word	0x20000444

0800999c <_free_r>:
 800999c:	b538      	push	{r3, r4, r5, lr}
 800999e:	4605      	mov	r5, r0
 80099a0:	2900      	cmp	r1, #0
 80099a2:	d041      	beq.n	8009a28 <_free_r+0x8c>
 80099a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099a8:	1f0c      	subs	r4, r1, #4
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	bfb8      	it	lt
 80099ae:	18e4      	addlt	r4, r4, r3
 80099b0:	f7ff ff90 	bl	80098d4 <__malloc_lock>
 80099b4:	4a1d      	ldr	r2, [pc, #116]	@ (8009a2c <_free_r+0x90>)
 80099b6:	6813      	ldr	r3, [r2, #0]
 80099b8:	b933      	cbnz	r3, 80099c8 <_free_r+0x2c>
 80099ba:	6063      	str	r3, [r4, #4]
 80099bc:	6014      	str	r4, [r2, #0]
 80099be:	4628      	mov	r0, r5
 80099c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099c4:	f7ff bf8c 	b.w	80098e0 <__malloc_unlock>
 80099c8:	42a3      	cmp	r3, r4
 80099ca:	d908      	bls.n	80099de <_free_r+0x42>
 80099cc:	6820      	ldr	r0, [r4, #0]
 80099ce:	1821      	adds	r1, r4, r0
 80099d0:	428b      	cmp	r3, r1
 80099d2:	bf01      	itttt	eq
 80099d4:	6819      	ldreq	r1, [r3, #0]
 80099d6:	685b      	ldreq	r3, [r3, #4]
 80099d8:	1809      	addeq	r1, r1, r0
 80099da:	6021      	streq	r1, [r4, #0]
 80099dc:	e7ed      	b.n	80099ba <_free_r+0x1e>
 80099de:	461a      	mov	r2, r3
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	b10b      	cbz	r3, 80099e8 <_free_r+0x4c>
 80099e4:	42a3      	cmp	r3, r4
 80099e6:	d9fa      	bls.n	80099de <_free_r+0x42>
 80099e8:	6811      	ldr	r1, [r2, #0]
 80099ea:	1850      	adds	r0, r2, r1
 80099ec:	42a0      	cmp	r0, r4
 80099ee:	d10b      	bne.n	8009a08 <_free_r+0x6c>
 80099f0:	6820      	ldr	r0, [r4, #0]
 80099f2:	4401      	add	r1, r0
 80099f4:	1850      	adds	r0, r2, r1
 80099f6:	4283      	cmp	r3, r0
 80099f8:	6011      	str	r1, [r2, #0]
 80099fa:	d1e0      	bne.n	80099be <_free_r+0x22>
 80099fc:	6818      	ldr	r0, [r3, #0]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	6053      	str	r3, [r2, #4]
 8009a02:	4408      	add	r0, r1
 8009a04:	6010      	str	r0, [r2, #0]
 8009a06:	e7da      	b.n	80099be <_free_r+0x22>
 8009a08:	d902      	bls.n	8009a10 <_free_r+0x74>
 8009a0a:	230c      	movs	r3, #12
 8009a0c:	602b      	str	r3, [r5, #0]
 8009a0e:	e7d6      	b.n	80099be <_free_r+0x22>
 8009a10:	6820      	ldr	r0, [r4, #0]
 8009a12:	1821      	adds	r1, r4, r0
 8009a14:	428b      	cmp	r3, r1
 8009a16:	bf04      	itt	eq
 8009a18:	6819      	ldreq	r1, [r3, #0]
 8009a1a:	685b      	ldreq	r3, [r3, #4]
 8009a1c:	6063      	str	r3, [r4, #4]
 8009a1e:	bf04      	itt	eq
 8009a20:	1809      	addeq	r1, r1, r0
 8009a22:	6021      	streq	r1, [r4, #0]
 8009a24:	6054      	str	r4, [r2, #4]
 8009a26:	e7ca      	b.n	80099be <_free_r+0x22>
 8009a28:	bd38      	pop	{r3, r4, r5, pc}
 8009a2a:	bf00      	nop
 8009a2c:	20000440 	.word	0x20000440

08009a30 <_malloc_usable_size_r>:
 8009a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a34:	1f18      	subs	r0, r3, #4
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	bfbc      	itt	lt
 8009a3a:	580b      	ldrlt	r3, [r1, r0]
 8009a3c:	18c0      	addlt	r0, r0, r3
 8009a3e:	4770      	bx	lr

08009a40 <_init>:
 8009a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a42:	bf00      	nop
 8009a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a46:	bc08      	pop	{r3}
 8009a48:	469e      	mov	lr, r3
 8009a4a:	4770      	bx	lr

08009a4c <_fini>:
 8009a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a4e:	bf00      	nop
 8009a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a52:	bc08      	pop	{r3}
 8009a54:	469e      	mov	lr, r3
 8009a56:	4770      	bx	lr
