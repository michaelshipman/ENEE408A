
bno085-log-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcf8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  0800be38  0800be38  0000ce38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4a8  0800c4a8  0000e1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4a8  0800c4a8  0000d4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4b0  0800c4b0  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4b0  0800c4b0  0000d4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c4b4  0800c4b4  0000d4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800c4b8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000093c  200001ec  0800c6a4  0000e1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b28  0800c6a4  0000eb28  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ac0  00000000  00000000  0000e216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003895  00000000  00000000  00024cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c8  00000000  00000000  00028570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001150  00000000  00000000  00029c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d975  00000000  00000000  0002ad88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f46  00000000  00000000  000486fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7376  00000000  00000000  00062643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001099b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070b8  00000000  00000000  001099fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00110ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001ec 	.word	0x200001ec
 800015c:	00000000 	.word	0x00000000
 8000160:	0800be20 	.word	0x0800be20

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f0 	.word	0x200001f0
 800017c:	0800be20 	.word	0x0800be20

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_frsub>:
 8000bf8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bfc:	e002      	b.n	8000c04 <__addsf3>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fsub>:
 8000c00:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c04 <__addsf3>:
 8000c04:	0042      	lsls	r2, r0, #1
 8000c06:	bf1f      	itttt	ne
 8000c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c0c:	ea92 0f03 	teqne	r2, r3
 8000c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c18:	d06a      	beq.n	8000cf0 <__addsf3+0xec>
 8000c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c22:	bfc1      	itttt	gt
 8000c24:	18d2      	addgt	r2, r2, r3
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	4048      	eorgt	r0, r1
 8000c2a:	4041      	eorgt	r1, r0
 8000c2c:	bfb8      	it	lt
 8000c2e:	425b      	neglt	r3, r3
 8000c30:	2b19      	cmp	r3, #25
 8000c32:	bf88      	it	hi
 8000c34:	4770      	bxhi	lr
 8000c36:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c4a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c4e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4249      	negne	r1, r1
 8000c56:	ea92 0f03 	teq	r2, r3
 8000c5a:	d03f      	beq.n	8000cdc <__addsf3+0xd8>
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	fa41 fc03 	asr.w	ip, r1, r3
 8000c64:	eb10 000c 	adds.w	r0, r0, ip
 8000c68:	f1c3 0320 	rsb	r3, r3, #32
 8000c6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c70:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__addsf3+0x78>
 8000c76:	4249      	negs	r1, r1
 8000c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c7c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c80:	d313      	bcc.n	8000caa <__addsf3+0xa6>
 8000c82:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c86:	d306      	bcc.n	8000c96 <__addsf3+0x92>
 8000c88:	0840      	lsrs	r0, r0, #1
 8000c8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8e:	f102 0201 	add.w	r2, r2, #1
 8000c92:	2afe      	cmp	r2, #254	@ 0xfe
 8000c94:	d251      	bcs.n	8000d3a <__addsf3+0x136>
 8000c96:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9e:	bf08      	it	eq
 8000ca0:	f020 0001 	biceq.w	r0, r0, #1
 8000ca4:	ea40 0003 	orr.w	r0, r0, r3
 8000ca8:	4770      	bx	lr
 8000caa:	0049      	lsls	r1, r1, #1
 8000cac:	eb40 0000 	adc.w	r0, r0, r0
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb8:	d2ed      	bcs.n	8000c96 <__addsf3+0x92>
 8000cba:	fab0 fc80 	clz	ip, r0
 8000cbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cc2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cca:	bfaa      	itet	ge
 8000ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd0:	4252      	neglt	r2, r2
 8000cd2:	4318      	orrge	r0, r3
 8000cd4:	bfbc      	itt	lt
 8000cd6:	40d0      	lsrlt	r0, r2
 8000cd8:	4318      	orrlt	r0, r3
 8000cda:	4770      	bx	lr
 8000cdc:	f092 0f00 	teq	r2, #0
 8000ce0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ce4:	bf06      	itte	eq
 8000ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cea:	3201      	addeq	r2, #1
 8000cec:	3b01      	subne	r3, #1
 8000cee:	e7b5      	b.n	8000c5c <__addsf3+0x58>
 8000cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	bf18      	it	ne
 8000cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfe:	d021      	beq.n	8000d44 <__addsf3+0x140>
 8000d00:	ea92 0f03 	teq	r2, r3
 8000d04:	d004      	beq.n	8000d10 <__addsf3+0x10c>
 8000d06:	f092 0f00 	teq	r2, #0
 8000d0a:	bf08      	it	eq
 8000d0c:	4608      	moveq	r0, r1
 8000d0e:	4770      	bx	lr
 8000d10:	ea90 0f01 	teq	r0, r1
 8000d14:	bf1c      	itt	ne
 8000d16:	2000      	movne	r0, #0
 8000d18:	4770      	bxne	lr
 8000d1a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d1e:	d104      	bne.n	8000d2a <__addsf3+0x126>
 8000d20:	0040      	lsls	r0, r0, #1
 8000d22:	bf28      	it	cs
 8000d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d28:	4770      	bx	lr
 8000d2a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d2e:	bf3c      	itt	cc
 8000d30:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d34:	4770      	bxcc	lr
 8000d36:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d42:	4770      	bx	lr
 8000d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d48:	bf16      	itet	ne
 8000d4a:	4608      	movne	r0, r1
 8000d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d50:	4601      	movne	r1, r0
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	bf06      	itte	eq
 8000d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d5a:	ea90 0f01 	teqeq	r0, r1
 8000d5e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_ui2f>:
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e004      	b.n	8000d74 <__aeabi_i2f+0x8>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_i2f>:
 8000d6c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d70:	bf48      	it	mi
 8000d72:	4240      	negmi	r0, r0
 8000d74:	ea5f 0c00 	movs.w	ip, r0
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d80:	4601      	mov	r1, r0
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	e01c      	b.n	8000dc2 <__aeabi_l2f+0x2a>

08000d88 <__aeabi_ul2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e00a      	b.n	8000dac <__aeabi_l2f+0x14>
 8000d96:	bf00      	nop

08000d98 <__aeabi_l2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000da4:	d502      	bpl.n	8000dac <__aeabi_l2f+0x14>
 8000da6:	4240      	negs	r0, r0
 8000da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dac:	ea5f 0c01 	movs.w	ip, r1
 8000db0:	bf02      	ittt	eq
 8000db2:	4684      	moveq	ip, r0
 8000db4:	4601      	moveq	r1, r0
 8000db6:	2000      	moveq	r0, #0
 8000db8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dbc:	bf08      	it	eq
 8000dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dc6:	fabc f28c 	clz	r2, ip
 8000dca:	3a08      	subs	r2, #8
 8000dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd0:	db10      	blt.n	8000df4 <__aeabi_l2f+0x5c>
 8000dd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000de4:	fa20 f202 	lsr.w	r2, r0, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f102 0220 	add.w	r2, r2, #32
 8000df8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfc:	f1c2 0220 	rsb	r2, r2, #32
 8000e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e04:	fa21 f202 	lsr.w	r2, r1, r2
 8000e08:	eb43 0002 	adc.w	r0, r3, r2
 8000e0c:	bf08      	it	eq
 8000e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_uldivmod>:
 8000e14:	b953      	cbnz	r3, 8000e2c <__aeabi_uldivmod+0x18>
 8000e16:	b94a      	cbnz	r2, 8000e2c <__aeabi_uldivmod+0x18>
 8000e18:	2900      	cmp	r1, #0
 8000e1a:	bf08      	it	eq
 8000e1c:	2800      	cmpeq	r0, #0
 8000e1e:	bf1c      	itt	ne
 8000e20:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000e24:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000e28:	f000 b96a 	b.w	8001100 <__aeabi_idiv0>
 8000e2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e34:	f000 f806 	bl	8000e44 <__udivmoddi4>
 8000e38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e40:	b004      	add	sp, #16
 8000e42:	4770      	bx	lr

08000e44 <__udivmoddi4>:
 8000e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e48:	9d08      	ldr	r5, [sp, #32]
 8000e4a:	460c      	mov	r4, r1
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d14e      	bne.n	8000eee <__udivmoddi4+0xaa>
 8000e50:	4694      	mov	ip, r2
 8000e52:	458c      	cmp	ip, r1
 8000e54:	4686      	mov	lr, r0
 8000e56:	fab2 f282 	clz	r2, r2
 8000e5a:	d962      	bls.n	8000f22 <__udivmoddi4+0xde>
 8000e5c:	b14a      	cbz	r2, 8000e72 <__udivmoddi4+0x2e>
 8000e5e:	f1c2 0320 	rsb	r3, r2, #32
 8000e62:	4091      	lsls	r1, r2
 8000e64:	fa20 f303 	lsr.w	r3, r0, r3
 8000e68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e6c:	4319      	orrs	r1, r3
 8000e6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e76:	fa1f f68c 	uxth.w	r6, ip
 8000e7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e82:	fb07 1114 	mls	r1, r7, r4, r1
 8000e86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e8a:	fb04 f106 	mul.w	r1, r4, r6
 8000e8e:	4299      	cmp	r1, r3
 8000e90:	d90a      	bls.n	8000ea8 <__udivmoddi4+0x64>
 8000e92:	eb1c 0303 	adds.w	r3, ip, r3
 8000e96:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000e9a:	f080 8112 	bcs.w	80010c2 <__udivmoddi4+0x27e>
 8000e9e:	4299      	cmp	r1, r3
 8000ea0:	f240 810f 	bls.w	80010c2 <__udivmoddi4+0x27e>
 8000ea4:	3c02      	subs	r4, #2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	1a59      	subs	r1, r3, r1
 8000eaa:	fa1f f38e 	uxth.w	r3, lr
 8000eae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb2:	fb07 1110 	mls	r1, r7, r0, r1
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f606 	mul.w	r6, r0, r6
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	d90a      	bls.n	8000ed8 <__udivmoddi4+0x94>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000eca:	f080 80fc 	bcs.w	80010c6 <__udivmoddi4+0x282>
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	f240 80f9 	bls.w	80010c6 <__udivmoddi4+0x282>
 8000ed4:	4463      	add	r3, ip
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ede:	2100      	movs	r1, #0
 8000ee0:	b11d      	cbz	r5, 8000eea <__udivmoddi4+0xa6>
 8000ee2:	40d3      	lsrs	r3, r2
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d905      	bls.n	8000efe <__udivmoddi4+0xba>
 8000ef2:	b10d      	cbz	r5, 8000ef8 <__udivmoddi4+0xb4>
 8000ef4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4608      	mov	r0, r1
 8000efc:	e7f5      	b.n	8000eea <__udivmoddi4+0xa6>
 8000efe:	fab3 f183 	clz	r1, r3
 8000f02:	2900      	cmp	r1, #0
 8000f04:	d146      	bne.n	8000f94 <__udivmoddi4+0x150>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d302      	bcc.n	8000f10 <__udivmoddi4+0xcc>
 8000f0a:	4290      	cmp	r0, r2
 8000f0c:	f0c0 80f0 	bcc.w	80010f0 <__udivmoddi4+0x2ac>
 8000f10:	1a86      	subs	r6, r0, r2
 8000f12:	eb64 0303 	sbc.w	r3, r4, r3
 8000f16:	2001      	movs	r0, #1
 8000f18:	2d00      	cmp	r5, #0
 8000f1a:	d0e6      	beq.n	8000eea <__udivmoddi4+0xa6>
 8000f1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000f20:	e7e3      	b.n	8000eea <__udivmoddi4+0xa6>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	f040 8090 	bne.w	8001048 <__udivmoddi4+0x204>
 8000f28:	eba1 040c 	sub.w	r4, r1, ip
 8000f2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f30:	fa1f f78c 	uxth.w	r7, ip
 8000f34:	2101      	movs	r1, #1
 8000f36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000f42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f46:	fb07 f006 	mul.w	r0, r7, r6
 8000f4a:	4298      	cmp	r0, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x11c>
 8000f4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f52:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000f56:	d202      	bcs.n	8000f5e <__udivmoddi4+0x11a>
 8000f58:	4298      	cmp	r0, r3
 8000f5a:	f200 80cd 	bhi.w	80010f8 <__udivmoddi4+0x2b4>
 8000f5e:	4626      	mov	r6, r4
 8000f60:	1a1c      	subs	r4, r3, r0
 8000f62:	fa1f f38e 	uxth.w	r3, lr
 8000f66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f72:	fb00 f707 	mul.w	r7, r0, r7
 8000f76:	429f      	cmp	r7, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x148>
 8000f7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f7e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000f82:	d202      	bcs.n	8000f8a <__udivmoddi4+0x146>
 8000f84:	429f      	cmp	r7, r3
 8000f86:	f200 80b0 	bhi.w	80010ea <__udivmoddi4+0x2a6>
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	1bdb      	subs	r3, r3, r7
 8000f8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f92:	e7a5      	b.n	8000ee0 <__udivmoddi4+0x9c>
 8000f94:	f1c1 0620 	rsb	r6, r1, #32
 8000f98:	408b      	lsls	r3, r1
 8000f9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f9e:	431f      	orrs	r7, r3
 8000fa0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000fa4:	fa04 f301 	lsl.w	r3, r4, r1
 8000fa8:	ea43 030c 	orr.w	r3, r3, ip
 8000fac:	40f4      	lsrs	r4, r6
 8000fae:	fa00 f801 	lsl.w	r8, r0, r1
 8000fb2:	0c38      	lsrs	r0, r7, #16
 8000fb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000fb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000fbc:	fa1f fc87 	uxth.w	ip, r7
 8000fc0:	fb00 441e 	mls	r4, r0, lr, r4
 8000fc4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fc8:	fb0e f90c 	mul.w	r9, lr, ip
 8000fcc:	45a1      	cmp	r9, r4
 8000fce:	fa02 f201 	lsl.w	r2, r2, r1
 8000fd2:	d90a      	bls.n	8000fea <__udivmoddi4+0x1a6>
 8000fd4:	193c      	adds	r4, r7, r4
 8000fd6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000fda:	f080 8084 	bcs.w	80010e6 <__udivmoddi4+0x2a2>
 8000fde:	45a1      	cmp	r9, r4
 8000fe0:	f240 8081 	bls.w	80010e6 <__udivmoddi4+0x2a2>
 8000fe4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fe8:	443c      	add	r4, r7
 8000fea:	eba4 0409 	sub.w	r4, r4, r9
 8000fee:	fa1f f983 	uxth.w	r9, r3
 8000ff2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ff6:	fb00 4413 	mls	r4, r0, r3, r4
 8000ffa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ffe:	fb03 fc0c 	mul.w	ip, r3, ip
 8001002:	45a4      	cmp	ip, r4
 8001004:	d907      	bls.n	8001016 <__udivmoddi4+0x1d2>
 8001006:	193c      	adds	r4, r7, r4
 8001008:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800100c:	d267      	bcs.n	80010de <__udivmoddi4+0x29a>
 800100e:	45a4      	cmp	ip, r4
 8001010:	d965      	bls.n	80010de <__udivmoddi4+0x29a>
 8001012:	3b02      	subs	r3, #2
 8001014:	443c      	add	r4, r7
 8001016:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800101a:	fba0 9302 	umull	r9, r3, r0, r2
 800101e:	eba4 040c 	sub.w	r4, r4, ip
 8001022:	429c      	cmp	r4, r3
 8001024:	46ce      	mov	lr, r9
 8001026:	469c      	mov	ip, r3
 8001028:	d351      	bcc.n	80010ce <__udivmoddi4+0x28a>
 800102a:	d04e      	beq.n	80010ca <__udivmoddi4+0x286>
 800102c:	b155      	cbz	r5, 8001044 <__udivmoddi4+0x200>
 800102e:	ebb8 030e 	subs.w	r3, r8, lr
 8001032:	eb64 040c 	sbc.w	r4, r4, ip
 8001036:	fa04 f606 	lsl.w	r6, r4, r6
 800103a:	40cb      	lsrs	r3, r1
 800103c:	431e      	orrs	r6, r3
 800103e:	40cc      	lsrs	r4, r1
 8001040:	e9c5 6400 	strd	r6, r4, [r5]
 8001044:	2100      	movs	r1, #0
 8001046:	e750      	b.n	8000eea <__udivmoddi4+0xa6>
 8001048:	f1c2 0320 	rsb	r3, r2, #32
 800104c:	fa20 f103 	lsr.w	r1, r0, r3
 8001050:	fa0c fc02 	lsl.w	ip, ip, r2
 8001054:	fa24 f303 	lsr.w	r3, r4, r3
 8001058:	4094      	lsls	r4, r2
 800105a:	430c      	orrs	r4, r1
 800105c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001060:	fa00 fe02 	lsl.w	lr, r0, r2
 8001064:	fa1f f78c 	uxth.w	r7, ip
 8001068:	fbb3 f0f8 	udiv	r0, r3, r8
 800106c:	fb08 3110 	mls	r1, r8, r0, r3
 8001070:	0c23      	lsrs	r3, r4, #16
 8001072:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001076:	fb00 f107 	mul.w	r1, r0, r7
 800107a:	4299      	cmp	r1, r3
 800107c:	d908      	bls.n	8001090 <__udivmoddi4+0x24c>
 800107e:	eb1c 0303 	adds.w	r3, ip, r3
 8001082:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001086:	d22c      	bcs.n	80010e2 <__udivmoddi4+0x29e>
 8001088:	4299      	cmp	r1, r3
 800108a:	d92a      	bls.n	80010e2 <__udivmoddi4+0x29e>
 800108c:	3802      	subs	r0, #2
 800108e:	4463      	add	r3, ip
 8001090:	1a5b      	subs	r3, r3, r1
 8001092:	b2a4      	uxth	r4, r4
 8001094:	fbb3 f1f8 	udiv	r1, r3, r8
 8001098:	fb08 3311 	mls	r3, r8, r1, r3
 800109c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010a0:	fb01 f307 	mul.w	r3, r1, r7
 80010a4:	42a3      	cmp	r3, r4
 80010a6:	d908      	bls.n	80010ba <__udivmoddi4+0x276>
 80010a8:	eb1c 0404 	adds.w	r4, ip, r4
 80010ac:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80010b0:	d213      	bcs.n	80010da <__udivmoddi4+0x296>
 80010b2:	42a3      	cmp	r3, r4
 80010b4:	d911      	bls.n	80010da <__udivmoddi4+0x296>
 80010b6:	3902      	subs	r1, #2
 80010b8:	4464      	add	r4, ip
 80010ba:	1ae4      	subs	r4, r4, r3
 80010bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010c0:	e739      	b.n	8000f36 <__udivmoddi4+0xf2>
 80010c2:	4604      	mov	r4, r0
 80010c4:	e6f0      	b.n	8000ea8 <__udivmoddi4+0x64>
 80010c6:	4608      	mov	r0, r1
 80010c8:	e706      	b.n	8000ed8 <__udivmoddi4+0x94>
 80010ca:	45c8      	cmp	r8, r9
 80010cc:	d2ae      	bcs.n	800102c <__udivmoddi4+0x1e8>
 80010ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80010d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80010d6:	3801      	subs	r0, #1
 80010d8:	e7a8      	b.n	800102c <__udivmoddi4+0x1e8>
 80010da:	4631      	mov	r1, r6
 80010dc:	e7ed      	b.n	80010ba <__udivmoddi4+0x276>
 80010de:	4603      	mov	r3, r0
 80010e0:	e799      	b.n	8001016 <__udivmoddi4+0x1d2>
 80010e2:	4630      	mov	r0, r6
 80010e4:	e7d4      	b.n	8001090 <__udivmoddi4+0x24c>
 80010e6:	46d6      	mov	lr, sl
 80010e8:	e77f      	b.n	8000fea <__udivmoddi4+0x1a6>
 80010ea:	4463      	add	r3, ip
 80010ec:	3802      	subs	r0, #2
 80010ee:	e74d      	b.n	8000f8c <__udivmoddi4+0x148>
 80010f0:	4606      	mov	r6, r0
 80010f2:	4623      	mov	r3, r4
 80010f4:	4608      	mov	r0, r1
 80010f6:	e70f      	b.n	8000f18 <__udivmoddi4+0xd4>
 80010f8:	3e02      	subs	r6, #2
 80010fa:	4463      	add	r3, ip
 80010fc:	e730      	b.n	8000f60 <__udivmoddi4+0x11c>
 80010fe:	bf00      	nop

08001100 <__aeabi_idiv0>:
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop

08001104 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800110c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001110:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001112:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4313      	orrs	r3, r2
 800111a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800111c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001120:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4013      	ands	r3, r2
 8001126:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001128:	68fb      	ldr	r3, [r7, #12]
}
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800113c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001140:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001142:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4313      	orrs	r3, r2
 800114a:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800114c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001150:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4013      	ands	r3, r2
 8001156:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001158:	68fb      	ldr	r3, [r7, #12]
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	601a      	str	r2, [r3, #0]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr

08001182 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	601a      	str	r2, [r3, #0]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80011b4:	f023 0306 	bic.w	r3, r3, #6
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	430a      	orrs	r2, r1
 80011be:	431a      	orrs	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	60da      	str	r2, [r3, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60da      	str	r2, [r3, #12]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	605a      	str	r2, [r3, #4]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
	...

0800120c <format_csv_line>:
			y_accel,   ///< The Y acceleration value in m/s^2
			z_accel;   ///< The Z acceleration value in m/s^2
} sensor_data_t;

static inline void format_csv_line(char *buffer, size_t size,
		const sensor_data_t *data) {
 800120c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001210:	b0a1      	sub	sp, #132	@ 0x84
 8001212:	af12      	add	r7, sp, #72	@ 0x48
 8001214:	6378      	str	r0, [r7, #52]	@ 0x34
 8001216:	6339      	str	r1, [r7, #48]	@ 0x30
 8001218:	62fa      	str	r2, [r7, #44]	@ 0x2c
	snprintf(buffer, size,
			"%lu,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\r\n",
			data->timestamp, data->roll, data->pitch, data->yaw, data->x_accel,
 800121a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800121c:	681e      	ldr	r6, [r3, #0]
 800121e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001220:	699b      	ldr	r3, [r3, #24]
	snprintf(buffer, size,
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f968 	bl	80004f8 <__aeabi_f2d>
 8001228:	e9c7 0108 	strd	r0, r1, [r7, #32]
			data->timestamp, data->roll, data->pitch, data->yaw, data->x_accel,
 800122c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800122e:	695b      	ldr	r3, [r3, #20]
	snprintf(buffer, size,
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f961 	bl	80004f8 <__aeabi_f2d>
 8001236:	e9c7 0106 	strd	r0, r1, [r7, #24]
			data->timestamp, data->roll, data->pitch, data->yaw, data->x_accel,
 800123a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800123c:	691b      	ldr	r3, [r3, #16]
	snprintf(buffer, size,
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f95a 	bl	80004f8 <__aeabi_f2d>
 8001244:	e9c7 0104 	strd	r0, r1, [r7, #16]
			data->timestamp, data->roll, data->pitch, data->yaw, data->x_accel,
 8001248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800124a:	69db      	ldr	r3, [r3, #28]
	snprintf(buffer, size,
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f953 	bl	80004f8 <__aeabi_f2d>
 8001252:	e9c7 0102 	strd	r0, r1, [r7, #8]
			data->y_accel, data->z_accel, data->temperature, data->pressure,
 8001256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001258:	6a1b      	ldr	r3, [r3, #32]
	snprintf(buffer, size,
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f94c 	bl	80004f8 <__aeabi_f2d>
 8001260:	e9c7 0100 	strd	r0, r1, [r7]
			data->y_accel, data->z_accel, data->temperature, data->pressure,
 8001264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	snprintf(buffer, size,
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f945 	bl	80004f8 <__aeabi_f2d>
 800126e:	4682      	mov	sl, r0
 8001270:	468b      	mov	fp, r1
			data->y_accel, data->z_accel, data->temperature, data->pressure,
 8001272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001274:	685b      	ldr	r3, [r3, #4]
	snprintf(buffer, size,
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f93e 	bl	80004f8 <__aeabi_f2d>
 800127c:	4680      	mov	r8, r0
 800127e:	4689      	mov	r9, r1
			data->y_accel, data->z_accel, data->temperature, data->pressure,
 8001280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001282:	689b      	ldr	r3, [r3, #8]
	snprintf(buffer, size,
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f937 	bl	80004f8 <__aeabi_f2d>
 800128a:	4604      	mov	r4, r0
 800128c:	460d      	mov	r5, r1
			data->humidity);
 800128e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001290:	68db      	ldr	r3, [r3, #12]
	snprintf(buffer, size,
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f930 	bl	80004f8 <__aeabi_f2d>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80012a0:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
 80012a4:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 80012a8:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 80012ac:	e9d7 3400 	ldrd	r3, r4, [r7]
 80012b0:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80012b4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80012b8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80012bc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80012c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80012c4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80012c8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80012cc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80012d0:	e9cd 3400 	strd	r3, r4, [sp]
 80012d4:	4633      	mov	r3, r6
 80012d6:	4a05      	ldr	r2, [pc, #20]	@ (80012ec <format_csv_line+0xe0>)
 80012d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80012da:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80012dc:	f008 fb68 	bl	80099b0 <sniprintf>
}
 80012e0:	bf00      	nop
 80012e2:	373c      	adds	r7, #60	@ 0x3c
 80012e4:	46bd      	mov	sp, r7
 80012e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012ea:	bf00      	nop
 80012ec:	0800be38 	.word	0x0800be38

080012f0 <get_bno_data>:

extern UART_HandleTypeDef hlpuart1;

static inline void get_bno_data(sensor_data_t *data) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08c      	sub	sp, #48	@ 0x30
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

	uint8_t bno_buffer[20] = { 0 };
 80012f8:	2300      	movs	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]

	while (bno_buffer[0] != 0xAA)
 800130a:	e007      	b.n	800131c <get_bno_data+0x2c>
		HAL_UART_Receive(&hlpuart1, bno_buffer, 1, 1000);
 800130c:	f107 0118 	add.w	r1, r7, #24
 8001310:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001314:	2201      	movs	r2, #1
 8001316:	4888      	ldr	r0, [pc, #544]	@ (8001538 <get_bno_data+0x248>)
 8001318:	f003 fb7d 	bl	8004a16 <HAL_UART_Receive>
	while (bno_buffer[0] != 0xAA)
 800131c:	7e3b      	ldrb	r3, [r7, #24]
 800131e:	2baa      	cmp	r3, #170	@ 0xaa
 8001320:	d1f4      	bne.n	800130c <get_bno_data+0x1c>

	while (bno_buffer[1] != 0xAA)
 8001322:	e008      	b.n	8001336 <get_bno_data+0x46>
		HAL_UART_Receive(&hlpuart1, bno_buffer + 1, 1, 1000);
 8001324:	f107 0118 	add.w	r1, r7, #24
 8001328:	3101      	adds	r1, #1
 800132a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800132e:	2201      	movs	r2, #1
 8001330:	4881      	ldr	r0, [pc, #516]	@ (8001538 <get_bno_data+0x248>)
 8001332:	f003 fb70 	bl	8004a16 <HAL_UART_Receive>
	while (bno_buffer[1] != 0xAA)
 8001336:	7e7b      	ldrb	r3, [r7, #25]
 8001338:	2baa      	cmp	r3, #170	@ 0xaa
 800133a:	d1f3      	bne.n	8001324 <get_bno_data+0x34>

	HAL_UART_Receive(&hlpuart1, bno_buffer + 2, 17, 1000);
 800133c:	f107 0118 	add.w	r1, r7, #24
 8001340:	3102      	adds	r1, #2
 8001342:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001346:	2211      	movs	r2, #17
 8001348:	487b      	ldr	r0, [pc, #492]	@ (8001538 <get_bno_data+0x248>)
 800134a:	f003 fb64 	bl	8004a16 <HAL_UART_Receive>

	if (bno_buffer[0] == 0xAA && bno_buffer[1] == 0xAA) {
 800134e:	7e3b      	ldrb	r3, [r7, #24]
 8001350:	2baa      	cmp	r3, #170	@ 0xaa
 8001352:	f040 80e2 	bne.w	800151a <get_bno_data+0x22a>
 8001356:	7e7b      	ldrb	r3, [r7, #25]
 8001358:	2baa      	cmp	r3, #170	@ 0xaa
 800135a:	f040 80de 	bne.w	800151a <get_bno_data+0x22a>
		//got data!!!

		uint8_t sum = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		// get checksum ready
		for (uint8_t i = 2; i < 17; i++) {
 8001364:	2302      	movs	r3, #2
 8001366:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800136a:	e00f      	b.n	800138c <get_bno_data+0x9c>
			sum += bno_buffer[i];
 800136c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001370:	3330      	adds	r3, #48	@ 0x30
 8001372:	443b      	add	r3, r7
 8001374:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001378:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800137c:	4413      	add	r3, r2
 800137e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		for (uint8_t i = 2; i < 17; i++) {
 8001382:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001386:	3301      	adds	r3, #1
 8001388:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800138c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001390:	2b10      	cmp	r3, #16
 8001392:	d9eb      	bls.n	800136c <get_bno_data+0x7c>
		}

		// The data comes in endian'd, this solves it so it works on all platforms
		int16_t buffer_16[6];

		for (uint8_t i = 0; i < 6; i++) {
 8001394:	2300      	movs	r3, #0
 8001396:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800139a:	e030      	b.n	80013fe <get_bno_data+0x10e>

			buffer_16[i] = (bno_buffer[1 + (i * 2)]);
 800139c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	3301      	adds	r3, #1
 80013a4:	3330      	adds	r3, #48	@ 0x30
 80013a6:	443b      	add	r3, r7
 80013a8:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80013ac:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80013b0:	b212      	sxth	r2, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	3330      	adds	r3, #48	@ 0x30
 80013b6:	443b      	add	r3, r7
 80013b8:	f823 2c24 	strh.w	r2, [r3, #-36]
			buffer_16[i] += (bno_buffer[1 + (i * 2) + 1] << 8);
 80013bc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	3330      	adds	r3, #48	@ 0x30
 80013c4:	443b      	add	r3, r7
 80013c6:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80013d0:	3301      	adds	r3, #1
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	3330      	adds	r3, #48	@ 0x30
 80013d6:	443b      	add	r3, r7
 80013d8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	b29b      	uxth	r3, r3
 80013e0:	4413      	add	r3, r2
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80013e8:	b212      	sxth	r2, r2
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	3330      	adds	r3, #48	@ 0x30
 80013ee:	443b      	add	r3, r7
 80013f0:	f823 2c24 	strh.w	r2, [r3, #-36]
		for (uint8_t i = 0; i < 6; i++) {
 80013f4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80013f8:	3301      	adds	r3, #1
 80013fa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80013fe:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001402:	2b05      	cmp	r3, #5
 8001404:	d9ca      	bls.n	800139c <get_bno_data+0xac>
		}
		data->yaw = (float) buffer_16[0] * DEGREE_SCALE;
 8001406:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fcae 	bl	8000d6c <__aeabi_i2f>
 8001410:	4603      	mov	r3, r0
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f870 	bl	80004f8 <__aeabi_f2d>
 8001418:	a343      	add	r3, pc, #268	@ (adr r3, 8001528 <get_bno_data+0x238>)
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	f7ff f8c3 	bl	80005a8 <__aeabi_dmul>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4610      	mov	r0, r2
 8001428:	4619      	mov	r1, r3
 800142a:	f7ff fb95 	bl	8000b58 <__aeabi_d2f>
 800142e:	4602      	mov	r2, r0
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	611a      	str	r2, [r3, #16]
		data->pitch = (float) buffer_16[1] * DEGREE_SCALE;
 8001434:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fc97 	bl	8000d6c <__aeabi_i2f>
 800143e:	4603      	mov	r3, r0
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f859 	bl	80004f8 <__aeabi_f2d>
 8001446:	a338      	add	r3, pc, #224	@ (adr r3, 8001528 <get_bno_data+0x238>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f7ff f8ac 	bl	80005a8 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	f7ff fb7e 	bl	8000b58 <__aeabi_d2f>
 800145c:	4602      	mov	r2, r0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	615a      	str	r2, [r3, #20]
		data->roll = (float) buffer_16[2] * DEGREE_SCALE;
 8001462:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fc80 	bl	8000d6c <__aeabi_i2f>
 800146c:	4603      	mov	r3, r0
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f842 	bl	80004f8 <__aeabi_f2d>
 8001474:	a32c      	add	r3, pc, #176	@ (adr r3, 8001528 <get_bno_data+0x238>)
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	f7ff f895 	bl	80005a8 <__aeabi_dmul>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fb67 	bl	8000b58 <__aeabi_d2f>
 800148a:	4602      	mov	r2, r0
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	619a      	str	r2, [r3, #24]

		data->x_accel = (float) buffer_16[3] * MILLI_G_TO_MS2;
 8001490:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fc69 	bl	8000d6c <__aeabi_i2f>
 800149a:	4603      	mov	r3, r0
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f82b 	bl	80004f8 <__aeabi_f2d>
 80014a2:	a323      	add	r3, pc, #140	@ (adr r3, 8001530 <get_bno_data+0x240>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	f7ff f87e 	bl	80005a8 <__aeabi_dmul>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f7ff fb50 	bl	8000b58 <__aeabi_d2f>
 80014b8:	4602      	mov	r2, r0
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	61da      	str	r2, [r3, #28]
		data->y_accel = (float) buffer_16[4] * MILLI_G_TO_MS2;
 80014be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fc52 	bl	8000d6c <__aeabi_i2f>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff f814 	bl	80004f8 <__aeabi_f2d>
 80014d0:	a317      	add	r3, pc, #92	@ (adr r3, 8001530 <get_bno_data+0x240>)
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	f7ff f867 	bl	80005a8 <__aeabi_dmul>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	f7ff fb39 	bl	8000b58 <__aeabi_d2f>
 80014e6:	4602      	mov	r2, r0
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	621a      	str	r2, [r3, #32]
		data->z_accel = (float) buffer_16[5] * MILLI_G_TO_MS2;
 80014ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fc3b 	bl	8000d6c <__aeabi_i2f>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7fe fffd 	bl	80004f8 <__aeabi_f2d>
 80014fe:	a30c      	add	r3, pc, #48	@ (adr r3, 8001530 <get_bno_data+0x240>)
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	f7ff f850 	bl	80005a8 <__aeabi_dmul>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f7ff fb22 	bl	8000b58 <__aeabi_d2f>
 8001514:	4602      	mov	r2, r0
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 800151a:	bf00      	nop
 800151c:	3730      	adds	r7, #48	@ 0x30
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	f3af 8000 	nop.w
 8001528:	47ae147b 	.word	0x47ae147b
 800152c:	3f847ae1 	.word	0x3f847ae1
 8001530:	fe40e31f 	.word	0xfe40e31f
 8001534:	3f841588 	.word	0x3f841588
 8001538:	20000208 	.word	0x20000208

0800153c <myprintf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void myprintf(const char *fmt, ...) {
 800153c:	b40f      	push	{r0, r1, r2, r3}
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	607b      	str	r3, [r7, #4]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001552:	4805      	ldr	r0, [pc, #20]	@ (8001568 <myprintf+0x2c>)
 8001554:	f008 fb4e 	bl	8009bf4 <vsniprintf>
	va_end(args);
	//HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001562:	b004      	add	sp, #16
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000890 	.word	0x20000890

0800156c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001572:	f000 fc33 	bl	8001ddc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001576:	f000 f8c1 	bl	80016fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800157a:	f000 fa11 	bl	80019a0 <MX_GPIO_Init>
	MX_I2C1_Init();
 800157e:	f000 f90f 	bl	80017a0 <MX_I2C1_Init>
	MX_SPI1_Init();
 8001582:	f000 f9cf 	bl	8001924 <MX_SPI1_Init>
	MX_LPUART1_UART_Init();
 8001586:	f000 f97d 	bl	8001884 <MX_LPUART1_UART_Init>
	MX_FATFS_Init();
 800158a:	f004 fec5 	bl	8006318 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */

	// Link the FatFS driver to SD logical drive
	FATFS_LinkDriver(&USER_Driver, "/SD");
 800158e:	4949      	ldr	r1, [pc, #292]	@ (80016b4 <main+0x148>)
 8001590:	4849      	ldr	r0, [pc, #292]	@ (80016b8 <main+0x14c>)
 8001592:	f007 fda5 	bl	80090e0 <FATFS_LinkDriver>

	//-- Mount the filesystem --
	res = f_mount(&fs, "/SD", 1);
 8001596:	2201      	movs	r2, #1
 8001598:	4946      	ldr	r1, [pc, #280]	@ (80016b4 <main+0x148>)
 800159a:	4848      	ldr	r0, [pc, #288]	@ (80016bc <main+0x150>)
 800159c:	f007 f938 	bl	8008810 <f_mount>
 80015a0:	4603      	mov	r3, r0
 80015a2:	461a      	mov	r2, r3
 80015a4:	4b46      	ldr	r3, [pc, #280]	@ (80016c0 <main+0x154>)
 80015a6:	701a      	strb	r2, [r3, #0]
	if (res != FR_OK) {
 80015a8:	4b45      	ldr	r3, [pc, #276]	@ (80016c0 <main+0x154>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <main+0x56>
		// If mounting fails print error and halt
		myprintf("f_mount failed (%d)\r\n", res);
 80015b0:	4b43      	ldr	r3, [pc, #268]	@ (80016c0 <main+0x154>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	4843      	ldr	r0, [pc, #268]	@ (80016c4 <main+0x158>)
 80015b8:	f7ff ffc0 	bl	800153c <myprintf>
		Error_Handler();
 80015bc:	f000 fa15 	bl	80019ea <Error_Handler>
 80015c0:	e002      	b.n	80015c8 <main+0x5c>
	} else {
		// Print if mounting succeeds
		myprintf("SD mounted.\r\n");
 80015c2:	4841      	ldr	r0, [pc, #260]	@ (80016c8 <main+0x15c>)
 80015c4:	f7ff ffba 	bl	800153c <myprintf>
	}

	//-- CSV File Setup --
	// Open/create CSV file for writing
	res = f_open(&csvFile, "data.csv", FA_WRITE | FA_OPEN_ALWAYS);
 80015c8:	2212      	movs	r2, #18
 80015ca:	4940      	ldr	r1, [pc, #256]	@ (80016cc <main+0x160>)
 80015cc:	4840      	ldr	r0, [pc, #256]	@ (80016d0 <main+0x164>)
 80015ce:	f007 f965 	bl	800889c <f_open>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b3a      	ldr	r3, [pc, #232]	@ (80016c0 <main+0x154>)
 80015d8:	701a      	strb	r2, [r3, #0]
	if (res == FR_OK) {
 80015da:	4b39      	ldr	r3, [pc, #228]	@ (80016c0 <main+0x154>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d120      	bne.n	8001624 <main+0xb8>
		// CSV column headers
		const char *header =
 80015e2:	4b3c      	ldr	r3, [pc, #240]	@ (80016d4 <main+0x168>)
 80015e4:	607b      	str	r3, [r7, #4]
				"timestamp,yaw,pitch,roll,x_accel,y_accel,z_accel\r\n";
		res = f_write(&csvFile, header, strlen(header), &bytes_written);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7fe fe1a 	bl	8000220 <strlen>
 80015ec:	4602      	mov	r2, r0
 80015ee:	4b3a      	ldr	r3, [pc, #232]	@ (80016d8 <main+0x16c>)
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	4837      	ldr	r0, [pc, #220]	@ (80016d0 <main+0x164>)
 80015f4:	f007 fb0c 	bl	8008c10 <f_write>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b30      	ldr	r3, [pc, #192]	@ (80016c0 <main+0x154>)
 80015fe:	701a      	strb	r2, [r3, #0]
		if (res == FR_OK) {
 8001600:	4b2f      	ldr	r3, [pc, #188]	@ (80016c0 <main+0x154>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d103      	bne.n	8001610 <main+0xa4>
			myprintf("CSV header written.\r\n");
 8001608:	4834      	ldr	r0, [pc, #208]	@ (80016dc <main+0x170>)
 800160a:	f7ff ff97 	bl	800153c <myprintf>
 800160e:	e005      	b.n	800161c <main+0xb0>
		} else {
			myprintf("CSV header write failed (%d).\r\n", res);
 8001610:	4b2b      	ldr	r3, [pc, #172]	@ (80016c0 <main+0x154>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	4619      	mov	r1, r3
 8001616:	4832      	ldr	r0, [pc, #200]	@ (80016e0 <main+0x174>)
 8001618:	f7ff ff90 	bl	800153c <myprintf>
		}
		// Close file after writing
		f_close(&csvFile);
 800161c:	482c      	ldr	r0, [pc, #176]	@ (80016d0 <main+0x164>)
 800161e:	f007 fcea 	bl	8008ff6 <f_close>
 8001622:	e005      	b.n	8001630 <main+0xc4>

	} else {
		// If opening CSV file failed print
		myprintf("Failed to open data.csv (%d).\r\n", res);
 8001624:	4b26      	ldr	r3, [pc, #152]	@ (80016c0 <main+0x154>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	482e      	ldr	r0, [pc, #184]	@ (80016e4 <main+0x178>)
 800162c:	f7ff ff86 	bl	800153c <myprintf>
	/* USER CODE BEGIN WHILE */

	while (1) {

		// fill data struct
		data.timestamp = HAL_GetTick();
 8001630:	f000 fc40 	bl	8001eb4 <HAL_GetTick>
 8001634:	4603      	mov	r3, r0
 8001636:	4a2c      	ldr	r2, [pc, #176]	@ (80016e8 <main+0x17c>)
 8001638:	6013      	str	r3, [r2, #0]
		get_bno_data(&data);
 800163a:	482b      	ldr	r0, [pc, #172]	@ (80016e8 <main+0x17c>)
 800163c:	f7ff fe58 	bl	80012f0 <get_bno_data>

		// Format CSV line
		format_csv_line(csv_line, sizeof(csv_line), &data);
 8001640:	4a29      	ldr	r2, [pc, #164]	@ (80016e8 <main+0x17c>)
 8001642:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001646:	4829      	ldr	r0, [pc, #164]	@ (80016ec <main+0x180>)
 8001648:	f7ff fde0 	bl	800120c <format_csv_line>

		// Open file in append mode
		res = f_open(&csvFile, "data.csv", FA_OPEN_APPEND | FA_WRITE);
 800164c:	2232      	movs	r2, #50	@ 0x32
 800164e:	491f      	ldr	r1, [pc, #124]	@ (80016cc <main+0x160>)
 8001650:	481f      	ldr	r0, [pc, #124]	@ (80016d0 <main+0x164>)
 8001652:	f007 f923 	bl	800889c <f_open>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	4b19      	ldr	r3, [pc, #100]	@ (80016c0 <main+0x154>)
 800165c:	701a      	strb	r2, [r3, #0]
		if (res == FR_OK) {
 800165e:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <main+0x154>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d11f      	bne.n	80016a6 <main+0x13a>
			UINT bytes_written;
			res = f_write(&csvFile, csv_line, strlen(csv_line), &bytes_written);
 8001666:	4821      	ldr	r0, [pc, #132]	@ (80016ec <main+0x180>)
 8001668:	f7fe fdda 	bl	8000220 <strlen>
 800166c:	4602      	mov	r2, r0
 800166e:	463b      	mov	r3, r7
 8001670:	491e      	ldr	r1, [pc, #120]	@ (80016ec <main+0x180>)
 8001672:	4817      	ldr	r0, [pc, #92]	@ (80016d0 <main+0x164>)
 8001674:	f007 facc 	bl	8008c10 <f_write>
 8001678:	4603      	mov	r3, r0
 800167a:	461a      	mov	r2, r3
 800167c:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <main+0x154>)
 800167e:	701a      	strb	r2, [r3, #0]
			f_close(&csvFile);
 8001680:	4813      	ldr	r0, [pc, #76]	@ (80016d0 <main+0x164>)
 8001682:	f007 fcb8 	bl	8008ff6 <f_close>

			// Report success or failure over UART
			if (res == FR_OK) {
 8001686:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <main+0x154>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d104      	bne.n	8001698 <main+0x12c>
				myprintf("Row written: %s", csv_line);
 800168e:	4917      	ldr	r1, [pc, #92]	@ (80016ec <main+0x180>)
 8001690:	4817      	ldr	r0, [pc, #92]	@ (80016f0 <main+0x184>)
 8001692:	f7ff ff53 	bl	800153c <myprintf>
 8001696:	e7cb      	b.n	8001630 <main+0xc4>
			} else {
				myprintf("Write failed (%d)\r\n", res);
 8001698:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <main+0x154>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	4815      	ldr	r0, [pc, #84]	@ (80016f4 <main+0x188>)
 80016a0:	f7ff ff4c 	bl	800153c <myprintf>
 80016a4:	e7c4      	b.n	8001630 <main+0xc4>
			}
		} else {
			myprintf("Append open failed (%d)\r\n", res);
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <main+0x154>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	4619      	mov	r1, r3
 80016ac:	4812      	ldr	r0, [pc, #72]	@ (80016f8 <main+0x18c>)
 80016ae:	f7ff ff45 	bl	800153c <myprintf>
		data.timestamp = HAL_GetTick();
 80016b2:	e7bd      	b.n	8001630 <main+0xc4>
 80016b4:	0800be6c 	.word	0x0800be6c
 80016b8:	2000000c 	.word	0x2000000c
 80016bc:	20000328 	.word	0x20000328
 80016c0:	20000558 	.word	0x20000558
 80016c4:	0800be70 	.word	0x0800be70
 80016c8:	0800be88 	.word	0x0800be88
 80016cc:	0800be98 	.word	0x0800be98
 80016d0:	2000055c 	.word	0x2000055c
 80016d4:	0800bea4 	.word	0x0800bea4
 80016d8:	2000078c 	.word	0x2000078c
 80016dc:	0800bed8 	.word	0x0800bed8
 80016e0:	0800bef0 	.word	0x0800bef0
 80016e4:	0800bf10 	.word	0x0800bf10
 80016e8:	20000300 	.word	0x20000300
 80016ec:	20000790 	.word	0x20000790
 80016f0:	0800bf30 	.word	0x0800bf30
 80016f4:	0800bf40 	.word	0x0800bf40
 80016f8:	0800bf54 	.word	0x0800bf54

080016fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b09a      	sub	sp, #104	@ 0x68
 8001700:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001702:	f107 0320 	add.w	r3, r7, #32
 8001706:	2248      	movs	r2, #72	@ 0x48
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f008 fa80 	bl	8009c10 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
 8001720:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001722:	4b1e      	ldr	r3, [pc, #120]	@ (800179c <SystemClock_Config+0xa0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800172a:	4a1c      	ldr	r2, [pc, #112]	@ (800179c <SystemClock_Config+0xa0>)
 800172c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	4b1a      	ldr	r3, [pc, #104]	@ (800179c <SystemClock_Config+0xa0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800173e:	2320      	movs	r3, #32
 8001740:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001742:	2301      	movs	r3, #1
 8001744:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001746:	2300      	movs	r3, #0
 8001748:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800174a:	23b0      	movs	r3, #176	@ 0xb0
 800174c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800174e:	2300      	movs	r3, #0
 8001750:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001752:	f107 0320 	add.w	r3, r7, #32
 8001756:	4618      	mov	r0, r3
 8001758:	f001 f9a0 	bl	8002a9c <HAL_RCC_OscConfig>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <SystemClock_Config+0x6a>
		Error_Handler();
 8001762:	f000 f942 	bl	80019ea <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 8001766:	234f      	movs	r3, #79	@ 0x4f
 8001768:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800177e:	f107 0308 	add.w	r3, r7, #8
 8001782:	2102      	movs	r1, #2
 8001784:	4618      	mov	r0, r3
 8001786:	f001 fd0b 	bl	80031a0 <HAL_RCC_ClockConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <SystemClock_Config+0x98>
		Error_Handler();
 8001790:	f000 f92b 	bl	80019ea <Error_Handler>
	}
}
 8001794:	bf00      	nop
 8001796:	3768      	adds	r7, #104	@ 0x68
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	58000400 	.word	0x58000400

080017a0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b09c      	sub	sp, #112	@ 0x70
 80017a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN I2C1_Init 0 */

	/* USER CODE END I2C1_Init 0 */

	LL_I2C_InitTypeDef I2C_InitStruct = { 0 };
 80017a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	611a      	str	r2, [r3, #16]
 80017b6:	615a      	str	r2, [r3, #20]
 80017b8:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017ba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]
 80017ca:	615a      	str	r2, [r3, #20]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2238      	movs	r2, #56	@ 0x38
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f008 fa1c 	bl	8009c10 <memset>

	/** Initializes the peripherals clocks
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017d8:	2340      	movs	r3, #64	@ 0x40
 80017da:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017dc:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80017e0:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	4618      	mov	r0, r3
 80017e6:	f002 f87d 	bl	80038e4 <HAL_RCCEx_PeriphCLKConfig>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_I2C1_Init+0x54>
		Error_Handler();
 80017f0:	f000 f8fb 	bl	80019ea <Error_Handler>
	}

	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80017f4:	2001      	movs	r0, #1
 80017f6:	f7ff fc85 	bl	8001104 <LL_AHB2_GRP1_EnableClock>
	/**I2C1 GPIO Configuration
	 PA9   ------> I2C1_SCL
	 PA10   ------> I2C1_SDA
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_9 | LL_GPIO_PIN_10;
 80017fa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80017fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001800:	2302      	movs	r3, #2
 8001802:	643b      	str	r3, [r7, #64]	@ 0x40
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	647b      	str	r3, [r7, #68]	@ 0x44
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001808:	2301      	movs	r3, #1
 800180a:	64bb      	str	r3, [r7, #72]	@ 0x48
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800180c:	2300      	movs	r3, #0
 800180e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001810:	2304      	movs	r3, #4
 8001812:	653b      	str	r3, [r7, #80]	@ 0x50
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001818:	4619      	mov	r1, r3
 800181a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800181e:	f004 fc38 	bl	8006092 <LL_GPIO_Init>

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001822:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001826:	f7ff fc85 	bl	8001134 <LL_APB1_GRP1_EnableClock>

	/* USER CODE END I2C1_Init 1 */

	/** I2C Initialization
	 */
	LL_I2C_EnableAutoEndMode(I2C1);
 800182a:	4814      	ldr	r0, [pc, #80]	@ (800187c <MX_I2C1_Init+0xdc>)
 800182c:	f7ff fcde 	bl	80011ec <LL_I2C_EnableAutoEndMode>
	LL_I2C_DisableOwnAddress2(I2C1);
 8001830:	4812      	ldr	r0, [pc, #72]	@ (800187c <MX_I2C1_Init+0xdc>)
 8001832:	f7ff fccc 	bl	80011ce <LL_I2C_DisableOwnAddress2>
	LL_I2C_DisableGeneralCall(I2C1);
 8001836:	4811      	ldr	r0, [pc, #68]	@ (800187c <MX_I2C1_Init+0xdc>)
 8001838:	f7ff fca3 	bl	8001182 <LL_I2C_DisableGeneralCall>
	LL_I2C_EnableClockStretching(I2C1);
 800183c:	480f      	ldr	r0, [pc, #60]	@ (800187c <MX_I2C1_Init+0xdc>)
 800183e:	f7ff fc91 	bl	8001164 <LL_I2C_EnableClockStretching>
	I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001842:	2300      	movs	r3, #0
 8001844:	657b      	str	r3, [r7, #84]	@ 0x54
	I2C_InitStruct.Timing = 0x10805D88;
 8001846:	4b0e      	ldr	r3, [pc, #56]	@ (8001880 <MX_I2C1_Init+0xe0>)
 8001848:	65bb      	str	r3, [r7, #88]	@ 0x58
	I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800184a:	2300      	movs	r3, #0
 800184c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	I2C_InitStruct.DigitalFilter = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	663b      	str	r3, [r7, #96]	@ 0x60
	I2C_InitStruct.OwnAddress1 = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	667b      	str	r3, [r7, #100]	@ 0x64
	I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001856:	2300      	movs	r3, #0
 8001858:	66bb      	str	r3, [r7, #104]	@ 0x68
	I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800185a:	2300      	movs	r3, #0
 800185c:	66fb      	str	r3, [r7, #108]	@ 0x6c
	LL_I2C_Init(I2C1, &I2C_InitStruct);
 800185e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001862:	4619      	mov	r1, r3
 8001864:	4805      	ldr	r0, [pc, #20]	@ (800187c <MX_I2C1_Init+0xdc>)
 8001866:	f004 fd1b 	bl	80062a0 <LL_I2C_Init>
	LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	4803      	ldr	r0, [pc, #12]	@ (800187c <MX_I2C1_Init+0xdc>)
 8001870:	f7ff fc96 	bl	80011a0 <LL_I2C_SetOwnAddress2>
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001874:	bf00      	nop
 8001876:	3770      	adds	r7, #112	@ 0x70
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40005400 	.word	0x40005400
 8001880:	10805d88 	.word	0x10805d88

08001884 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8001888:	4b24      	ldr	r3, [pc, #144]	@ (800191c <MX_LPUART1_UART_Init+0x98>)
 800188a:	4a25      	ldr	r2, [pc, #148]	@ (8001920 <MX_LPUART1_UART_Init+0x9c>)
 800188c:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 800188e:	4b23      	ldr	r3, [pc, #140]	@ (800191c <MX_LPUART1_UART_Init+0x98>)
 8001890:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001894:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001896:	4b21      	ldr	r3, [pc, #132]	@ (800191c <MX_LPUART1_UART_Init+0x98>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800189c:	4b1f      	ldr	r3, [pc, #124]	@ (800191c <MX_LPUART1_UART_Init+0x98>)
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 80018a2:	4b1e      	ldr	r3, [pc, #120]	@ (800191c <MX_LPUART1_UART_Init+0x98>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_RX;
 80018a8:	4b1c      	ldr	r3, [pc, #112]	@ (800191c <MX_LPUART1_UART_Init+0x98>)
 80018aa:	2204      	movs	r2, #4
 80018ac:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ae:	4b1b      	ldr	r3, [pc, #108]	@ (800191c <MX_LPUART1_UART_Init+0x98>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018b4:	4b19      	ldr	r3, [pc, #100]	@ (800191c <MX_LPUART1_UART_Init+0x98>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018ba:	4b18      	ldr	r3, [pc, #96]	@ (800191c <MX_LPUART1_UART_Init+0x98>)
 80018bc:	2200      	movs	r2, #0
 80018be:	625a      	str	r2, [r3, #36]	@ 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit =
 80018c0:	4b16      	ldr	r3, [pc, #88]	@ (800191c <MX_LPUART1_UART_Init+0x98>)
 80018c2:	2210      	movs	r2, #16
 80018c4:	629a      	str	r2, [r3, #40]	@ 0x28
	UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
	hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80018c6:	4b15      	ldr	r3, [pc, #84]	@ (800191c <MX_LPUART1_UART_Init+0x98>)
 80018c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018cc:	63da      	str	r2, [r3, #60]	@ 0x3c
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80018ce:	4b13      	ldr	r3, [pc, #76]	@ (800191c <MX_LPUART1_UART_Init+0x98>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	665a      	str	r2, [r3, #100]	@ 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 80018d4:	4811      	ldr	r0, [pc, #68]	@ (800191c <MX_LPUART1_UART_Init+0x98>)
 80018d6:	f003 f84e 	bl	8004976 <HAL_UART_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_LPUART1_UART_Init+0x60>
		Error_Handler();
 80018e0:	f000 f883 	bl	80019ea <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8)
 80018e4:	2100      	movs	r1, #0
 80018e6:	480d      	ldr	r0, [pc, #52]	@ (800191c <MX_LPUART1_UART_Init+0x98>)
 80018e8:	f004 f9c6 	bl	8005c78 <HAL_UARTEx_SetTxFifoThreshold>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_LPUART1_UART_Init+0x72>
			!= HAL_OK) {
		Error_Handler();
 80018f2:	f000 f87a 	bl	80019ea <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8)
 80018f6:	2100      	movs	r1, #0
 80018f8:	4808      	ldr	r0, [pc, #32]	@ (800191c <MX_LPUART1_UART_Init+0x98>)
 80018fa:	f004 f9fb 	bl	8005cf4 <HAL_UARTEx_SetRxFifoThreshold>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_LPUART1_UART_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 8001904:	f000 f871 	bl	80019ea <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 8001908:	4804      	ldr	r0, [pc, #16]	@ (800191c <MX_LPUART1_UART_Init+0x98>)
 800190a:	f004 f97d 	bl	8005c08 <HAL_UARTEx_DisableFifoMode>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_LPUART1_UART_Init+0x94>
		Error_Handler();
 8001914:	f000 f869 	bl	80019ea <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000208 	.word	0x20000208
 8001920:	40008000 	.word	0x40008000

08001924 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001928:	4b1b      	ldr	r3, [pc, #108]	@ (8001998 <MX_SPI1_Init+0x74>)
 800192a:	4a1c      	ldr	r2, [pc, #112]	@ (800199c <MX_SPI1_Init+0x78>)
 800192c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800192e:	4b1a      	ldr	r3, [pc, #104]	@ (8001998 <MX_SPI1_Init+0x74>)
 8001930:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001934:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001936:	4b18      	ldr	r3, [pc, #96]	@ (8001998 <MX_SPI1_Init+0x74>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800193c:	4b16      	ldr	r3, [pc, #88]	@ (8001998 <MX_SPI1_Init+0x74>)
 800193e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001942:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001944:	4b14      	ldr	r3, [pc, #80]	@ (8001998 <MX_SPI1_Init+0x74>)
 8001946:	2200      	movs	r2, #0
 8001948:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800194a:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <MX_SPI1_Init+0x74>)
 800194c:	2200      	movs	r2, #0
 800194e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001950:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <MX_SPI1_Init+0x74>)
 8001952:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001956:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001958:	4b0f      	ldr	r3, [pc, #60]	@ (8001998 <MX_SPI1_Init+0x74>)
 800195a:	2238      	movs	r2, #56	@ 0x38
 800195c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800195e:	4b0e      	ldr	r3, [pc, #56]	@ (8001998 <MX_SPI1_Init+0x74>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001964:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <MX_SPI1_Init+0x74>)
 8001966:	2200      	movs	r2, #0
 8001968:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800196a:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <MX_SPI1_Init+0x74>)
 800196c:	2200      	movs	r2, #0
 800196e:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001970:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <MX_SPI1_Init+0x74>)
 8001972:	2207      	movs	r2, #7
 8001974:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001976:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <MX_SPI1_Init+0x74>)
 8001978:	2200      	movs	r2, #0
 800197a:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800197c:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <MX_SPI1_Init+0x74>)
 800197e:	2208      	movs	r2, #8
 8001980:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001982:	4805      	ldr	r0, [pc, #20]	@ (8001998 <MX_SPI1_Init+0x74>)
 8001984:	f002 f8c8 	bl	8003b18 <HAL_SPI_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_SPI1_Init+0x6e>
		Error_Handler();
 800198e:	f000 f82c 	bl	80019ea <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	2000029c 	.word	0x2000029c
 800199c:	40013000 	.word	0x40013000

080019a0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019b4:	2001      	movs	r0, #1
 80019b6:	f7ff fba5 	bl	8001104 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2110      	movs	r1, #16
 80019be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019c2:	f000 fda9 	bl	8002518 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019c6:	2310      	movs	r3, #16
 80019c8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ca:	2301      	movs	r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	4619      	mov	r1, r3
 80019da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019de:	f000 fc3b 	bl	8002258 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ee:	b672      	cpsid	i
}
 80019f0:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80019f2:	bf00      	nop
 80019f4:	e7fd      	b.n	80019f2 <Error_Handler+0x8>

080019f6 <LL_AHB2_GRP1_EnableClock>:
{
 80019f6:	b480      	push	{r7}
 80019f8:	b085      	sub	sp, #20
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4013      	ands	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr

08001a26 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b085      	sub	sp, #20
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001a3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a42:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4013      	ands	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b085      	sub	sp, #20
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a62:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a72:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4013      	ands	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr

08001a86 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
	...

08001a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b096      	sub	sp, #88	@ 0x58
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	2238      	movs	r2, #56	@ 0x38
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f008 f8ab 	bl	8009c10 <memset>
  if(huart->Instance==LPUART1)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a1a      	ldr	r2, [pc, #104]	@ (8001b28 <HAL_UART_MspInit+0x94>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d12c      	bne.n	8001b1e <HAL_UART_MspInit+0x8a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001ac4:	2320      	movs	r3, #32
 8001ac6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001acc:	f107 030c 	add.w	r3, r7, #12
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f001 ff07 	bl	80038e4 <HAL_RCCEx_PeriphCLKConfig>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001adc:	f7ff ff85 	bl	80019ea <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f7ff ffa0 	bl	8001a26 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f7ff ff85 	bl	80019f6 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001aec:	230c      	movs	r3, #12
 8001aee:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2300      	movs	r3, #0
 8001afa:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001afc:	2308      	movs	r3, #8
 8001afe:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001b04:	4619      	mov	r1, r3
 8001b06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b0a:	f000 fba5 	bl	8002258 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2100      	movs	r1, #0
 8001b12:	2026      	movs	r0, #38	@ 0x26
 8001b14:	f000 faaf 	bl	8002076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001b18:	2026      	movs	r0, #38	@ 0x26
 8001b1a:	f000 fac6 	bl	80020aa <HAL_NVIC_EnableIRQ>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001b1e:	bf00      	nop
 8001b20:	3758      	adds	r7, #88	@ 0x58
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40008000 	.word	0x40008000

08001b2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0f      	ldr	r2, [pc, #60]	@ (8001b88 <HAL_SPI_MspInit+0x5c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d118      	bne.n	8001b80 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b4e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001b52:	f7ff ff80 	bl	8001a56 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	2001      	movs	r0, #1
 8001b58:	f7ff ff4d 	bl	80019f6 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA11     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_11;
 8001b5c:	f44f 630a 	mov.w	r3, #2208	@ 0x8a0
 8001b60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b6e:	2305      	movs	r3, #5
 8001b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b72:	f107 030c 	add.w	r3, r7, #12
 8001b76:	4619      	mov	r1, r3
 8001b78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b7c:	f000 fb6c 	bl	8002258 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b80:	bf00      	nop
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40013000 	.word	0x40013000

08001b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <NMI_Handler+0x4>

08001b94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <HardFault_Handler+0x4>

08001b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <MemManage_Handler+0x4>

08001ba4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <BusFault_Handler+0x4>

08001bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <UsageFault_Handler+0x4>

08001bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bdc:	f000 f958 	bl	8001e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001be8:	4802      	ldr	r0, [pc, #8]	@ (8001bf4 <LPUART1_IRQHandler+0x10>)
 8001bea:	f002 ffd9 	bl	8004ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000208 	.word	0x20000208

08001bf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return 1;
 8001bfc:	2301      	movs	r3, #1
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr

08001c06 <_kill>:

int _kill(int pid, int sig)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c10:	f008 f80a 	bl	8009c28 <__errno>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2216      	movs	r2, #22
 8001c18:	601a      	str	r2, [r3, #0]
  return -1;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <_exit>:

void _exit (int status)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c2e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ffe7 	bl	8001c06 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <_exit+0x12>

08001c3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	e00a      	b.n	8001c64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c4e:	f3af 8000 	nop.w
 8001c52:	4601      	mov	r1, r0
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	60ba      	str	r2, [r7, #8]
 8001c5a:	b2ca      	uxtb	r2, r1
 8001c5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	3301      	adds	r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	dbf0      	blt.n	8001c4e <_read+0x12>
  }

  return len;
 8001c6c:	687b      	ldr	r3, [r7, #4]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	e009      	b.n	8001c9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	60ba      	str	r2, [r7, #8]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	dbf1      	blt.n	8001c88 <_write+0x12>
  }
  return len;
 8001ca4:	687b      	ldr	r3, [r7, #4]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <_close>:

int _close(int file)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cd4:	605a      	str	r2, [r3, #4]
  return 0;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr

08001ce2 <_isatty>:

int _isatty(int file)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cea:	2301      	movs	r3, #1
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b085      	sub	sp, #20
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
	...

08001d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d18:	4a14      	ldr	r2, [pc, #80]	@ (8001d6c <_sbrk+0x5c>)
 8001d1a:	4b15      	ldr	r3, [pc, #84]	@ (8001d70 <_sbrk+0x60>)
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d24:	4b13      	ldr	r3, [pc, #76]	@ (8001d74 <_sbrk+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <_sbrk+0x64>)
 8001d2e:	4a12      	ldr	r2, [pc, #72]	@ (8001d78 <_sbrk+0x68>)
 8001d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d32:	4b10      	ldr	r3, [pc, #64]	@ (8001d74 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d207      	bcs.n	8001d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d40:	f007 ff72 	bl	8009c28 <__errno>
 8001d44:	4603      	mov	r3, r0
 8001d46:	220c      	movs	r2, #12
 8001d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d4e:	e009      	b.n	8001d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d50:	4b08      	ldr	r3, [pc, #32]	@ (8001d74 <_sbrk+0x64>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d56:	4b07      	ldr	r3, [pc, #28]	@ (8001d74 <_sbrk+0x64>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4a05      	ldr	r2, [pc, #20]	@ (8001d74 <_sbrk+0x64>)
 8001d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d62:	68fb      	ldr	r3, [r7, #12]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20010000 	.word	0x20010000
 8001d70:	00000400 	.word	0x00000400
 8001d74:	20000990 	.word	0x20000990
 8001d78:	20000b28 	.word	0x20000b28

08001d7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d88:	480d      	ldr	r0, [pc, #52]	@ (8001dc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d8a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d8c:	f7ff fff6 	bl	8001d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d90:	480c      	ldr	r0, [pc, #48]	@ (8001dc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d92:	490d      	ldr	r1, [pc, #52]	@ (8001dc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d94:	4a0d      	ldr	r2, [pc, #52]	@ (8001dcc <LoopForever+0xe>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d98:	e002      	b.n	8001da0 <LoopCopyDataInit>

08001d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d9e:	3304      	adds	r3, #4

08001da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da4:	d3f9      	bcc.n	8001d9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001da6:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001da8:	4c0a      	ldr	r4, [pc, #40]	@ (8001dd4 <LoopForever+0x16>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dac:	e001      	b.n	8001db2 <LoopFillZerobss>

08001dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db0:	3204      	adds	r2, #4

08001db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db4:	d3fb      	bcc.n	8001dae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001db6:	f007 ff3d 	bl	8009c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dba:	f7ff fbd7 	bl	800156c <main>

08001dbe <LoopForever>:

LoopForever:
    b LoopForever
 8001dbe:	e7fe      	b.n	8001dbe <LoopForever>
  ldr   r0, =_estack
 8001dc0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001dcc:	0800c4b8 	.word	0x0800c4b8
  ldr r2, =_sbss
 8001dd0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001dd4:	20000b28 	.word	0x20000b28

08001dd8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dd8:	e7fe      	b.n	8001dd8 <ADC_IRQHandler>
	...

08001ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de6:	2003      	movs	r0, #3
 8001de8:	f000 f93a 	bl	8002060 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001dec:	f001 fb9c 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4a09      	ldr	r2, [pc, #36]	@ (8001e18 <HAL_Init+0x3c>)
 8001df4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001df6:	200f      	movs	r0, #15
 8001df8:	f000 f810 	bl	8001e1c <HAL_InitTick>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	71fb      	strb	r3, [r7, #7]
 8001e06:	e001      	b.n	8001e0c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e08:	f7ff fe3d 	bl	8001a86 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000000 	.word	0x20000000

08001e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e28:	4b17      	ldr	r3, [pc, #92]	@ (8001e88 <HAL_InitTick+0x6c>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d024      	beq.n	8001e7a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e30:	f001 fb7a 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b14      	ldr	r3, [pc, #80]	@ (8001e88 <HAL_InitTick+0x6c>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e40:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 f93c 	bl	80020c6 <HAL_SYSTICK_Config>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10f      	bne.n	8001e74 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b0f      	cmp	r3, #15
 8001e58:	d809      	bhi.n	8001e6e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e62:	f000 f908 	bl	8002076 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e66:	4a09      	ldr	r2, [pc, #36]	@ (8001e8c <HAL_InitTick+0x70>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	e007      	b.n	8001e7e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	73fb      	strb	r3, [r7, #15]
 8001e72:	e004      	b.n	8001e7e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
 8001e78:	e001      	b.n	8001e7e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000008 	.word	0x20000008
 8001e8c:	20000004 	.word	0x20000004

08001e90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e94:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <HAL_IncTick+0x1c>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b05      	ldr	r3, [pc, #20]	@ (8001eb0 <HAL_IncTick+0x20>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a03      	ldr	r2, [pc, #12]	@ (8001eb0 <HAL_IncTick+0x20>)
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	20000008 	.word	0x20000008
 8001eb0:	20000994 	.word	0x20000994

08001eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb8:	4b02      	ldr	r3, [pc, #8]	@ (8001ec4 <HAL_GetTick+0x10>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	20000994 	.word	0x20000994

08001ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efa:	4a04      	ldr	r2, [pc, #16]	@ (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	60d3      	str	r3, [r2, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f14:	4b04      	ldr	r3, [pc, #16]	@ (8001f28 <__NVIC_GetPriorityGrouping+0x18>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	f003 0307 	and.w	r3, r3, #7
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	db0b      	blt.n	8001f56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	f003 021f 	and.w	r2, r3, #31
 8001f44:	4906      	ldr	r1, [pc, #24]	@ (8001f60 <__NVIC_EnableIRQ+0x34>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr
 8001f60:	e000e100 	.word	0xe000e100

08001f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	6039      	str	r1, [r7, #0]
 8001f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	db0a      	blt.n	8001f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	490c      	ldr	r1, [pc, #48]	@ (8001fb0 <__NVIC_SetPriority+0x4c>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	0112      	lsls	r2, r2, #4
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	440b      	add	r3, r1
 8001f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f8c:	e00a      	b.n	8001fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4908      	ldr	r1, [pc, #32]	@ (8001fb4 <__NVIC_SetPriority+0x50>)
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	3b04      	subs	r3, #4
 8001f9c:	0112      	lsls	r2, r2, #4
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	761a      	strb	r2, [r3, #24]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000e100 	.word	0xe000e100
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b089      	sub	sp, #36	@ 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f1c3 0307 	rsb	r3, r3, #7
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	bf28      	it	cs
 8001fd6:	2304      	movcs	r3, #4
 8001fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	2b06      	cmp	r3, #6
 8001fe0:	d902      	bls.n	8001fe8 <NVIC_EncodePriority+0x30>
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3b03      	subs	r3, #3
 8001fe6:	e000      	b.n	8001fea <NVIC_EncodePriority+0x32>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43da      	mvns	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002000:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	43d9      	mvns	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002010:	4313      	orrs	r3, r2
         );
}
 8002012:	4618      	mov	r0, r3
 8002014:	3724      	adds	r7, #36	@ 0x24
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800202c:	d301      	bcc.n	8002032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202e:	2301      	movs	r3, #1
 8002030:	e00f      	b.n	8002052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002032:	4a0a      	ldr	r2, [pc, #40]	@ (800205c <SysTick_Config+0x40>)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3b01      	subs	r3, #1
 8002038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800203a:	210f      	movs	r1, #15
 800203c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002040:	f7ff ff90 	bl	8001f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002044:	4b05      	ldr	r3, [pc, #20]	@ (800205c <SysTick_Config+0x40>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204a:	4b04      	ldr	r3, [pc, #16]	@ (800205c <SysTick_Config+0x40>)
 800204c:	2207      	movs	r2, #7
 800204e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	e000e010 	.word	0xe000e010

08002060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ff2d 	bl	8001ec8 <__NVIC_SetPriorityGrouping>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002084:	f7ff ff44 	bl	8001f10 <__NVIC_GetPriorityGrouping>
 8002088:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	6978      	ldr	r0, [r7, #20]
 8002090:	f7ff ff92 	bl	8001fb8 <NVIC_EncodePriority>
 8002094:	4602      	mov	r2, r0
 8002096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff61 	bl	8001f64 <__NVIC_SetPriority>
}
 80020a2:	bf00      	nop
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff37 	bl	8001f2c <__NVIC_EnableIRQ>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ffa4 	bl	800201c <SysTick_Config>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e04f      	b.n	8002190 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d008      	beq.n	800210e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2204      	movs	r2, #4
 8002100:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e040      	b.n	8002190 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 020e 	bic.w	r2, r2, #14
 800211c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002128:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800212c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0201 	bic.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002142:	f003 021c 	and.w	r2, r3, #28
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	2101      	movs	r1, #1
 800214c:	fa01 f202 	lsl.w	r2, r1, r2
 8002150:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800215a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00c      	beq.n	800217e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002172:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800217c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d005      	beq.n	80021be <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2204      	movs	r2, #4
 80021b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
 80021bc:	e047      	b.n	800224e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 020e 	bic.w	r2, r2, #14
 80021cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0201 	bic.w	r2, r2, #1
 80021dc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f2:	f003 021c 	and.w	r2, r3, #28
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fa:	2101      	movs	r1, #1
 80021fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002200:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800220a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00c      	beq.n	800222e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002222:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800222c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	4798      	blx	r3
    }
  }
  return status;
 800224e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002266:	e140      	b.n	80024ea <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	2101      	movs	r1, #1
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	4013      	ands	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 8132 	beq.w	80024e4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	2b01      	cmp	r3, #1
 800228a:	d005      	beq.n	8002298 <HAL_GPIO_Init+0x40>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d130      	bne.n	80022fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	2203      	movs	r2, #3
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4313      	orrs	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ce:	2201      	movs	r2, #1
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	091b      	lsrs	r3, r3, #4
 80022e4:	f003 0201 	and.w	r2, r3, #1
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	2b03      	cmp	r3, #3
 8002304:	d017      	beq.n	8002336 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	2203      	movs	r2, #3
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d123      	bne.n	800238a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	08da      	lsrs	r2, r3, #3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3208      	adds	r2, #8
 800234a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800234e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	220f      	movs	r2, #15
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4013      	ands	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	08da      	lsrs	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3208      	adds	r2, #8
 8002384:	6939      	ldr	r1, [r7, #16]
 8002386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	2203      	movs	r2, #3
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4013      	ands	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 0203 	and.w	r2, r3, #3
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 808c 	beq.w	80024e4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80023cc:	4a4e      	ldr	r2, [pc, #312]	@ (8002508 <HAL_GPIO_Init+0x2b0>)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	089b      	lsrs	r3, r3, #2
 80023d2:	3302      	adds	r3, #2
 80023d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	2207      	movs	r2, #7
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023f6:	d00d      	beq.n	8002414 <HAL_GPIO_Init+0x1bc>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a44      	ldr	r2, [pc, #272]	@ (800250c <HAL_GPIO_Init+0x2b4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d007      	beq.n	8002410 <HAL_GPIO_Init+0x1b8>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a43      	ldr	r2, [pc, #268]	@ (8002510 <HAL_GPIO_Init+0x2b8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d101      	bne.n	800240c <HAL_GPIO_Init+0x1b4>
 8002408:	2302      	movs	r3, #2
 800240a:	e004      	b.n	8002416 <HAL_GPIO_Init+0x1be>
 800240c:	2307      	movs	r3, #7
 800240e:	e002      	b.n	8002416 <HAL_GPIO_Init+0x1be>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <HAL_GPIO_Init+0x1be>
 8002414:	2300      	movs	r3, #0
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	f002 0203 	and.w	r2, r2, #3
 800241c:	0092      	lsls	r2, r2, #2
 800241e:	4093      	lsls	r3, r2
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002426:	4938      	ldr	r1, [pc, #224]	@ (8002508 <HAL_GPIO_Init+0x2b0>)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	089b      	lsrs	r3, r3, #2
 800242c:	3302      	adds	r3, #2
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002434:	4b37      	ldr	r3, [pc, #220]	@ (8002514 <HAL_GPIO_Init+0x2bc>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	43db      	mvns	r3, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002458:	4a2e      	ldr	r2, [pc, #184]	@ (8002514 <HAL_GPIO_Init+0x2bc>)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800245e:	4b2d      	ldr	r3, [pc, #180]	@ (8002514 <HAL_GPIO_Init+0x2bc>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	43db      	mvns	r3, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002482:	4a24      	ldr	r2, [pc, #144]	@ (8002514 <HAL_GPIO_Init+0x2bc>)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002488:	4b22      	ldr	r3, [pc, #136]	@ (8002514 <HAL_GPIO_Init+0x2bc>)
 800248a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800248e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	43db      	mvns	r3, r3
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	4013      	ands	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80024ae:	4a19      	ldr	r2, [pc, #100]	@ (8002514 <HAL_GPIO_Init+0x2bc>)
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80024b6:	4b17      	ldr	r3, [pc, #92]	@ (8002514 <HAL_GPIO_Init+0x2bc>)
 80024b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024bc:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80024dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002514 <HAL_GPIO_Init+0x2bc>)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	3301      	adds	r3, #1
 80024e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	fa22 f303 	lsr.w	r3, r2, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f47f aeb7 	bne.w	8002268 <HAL_GPIO_Init+0x10>
  }
}
 80024fa:	bf00      	nop
 80024fc:	bf00      	nop
 80024fe:	371c      	adds	r7, #28
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40010000 	.word	0x40010000
 800250c:	48000400 	.word	0x48000400
 8002510:	48000800 	.word	0x48000800
 8002514:	58000800 	.word	0x58000800

08002518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
 8002524:	4613      	mov	r3, r2
 8002526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002528:	787b      	ldrb	r3, [r7, #1]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800252e:	887a      	ldrh	r2, [r7, #2]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002534:	e002      	b.n	800253c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002536:	887a      	ldrh	r2, [r7, #2]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
	...

08002548 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800254c:	4b04      	ldr	r3, [pc, #16]	@ (8002560 <HAL_PWR_EnableBkUpAccess+0x18>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a03      	ldr	r2, [pc, #12]	@ (8002560 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002556:	6013      	str	r3, [r2, #0]
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	58000400 	.word	0x58000400

08002564 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002568:	4b03      	ldr	r3, [pc, #12]	@ (8002578 <HAL_PWREx_GetVoltageRange+0x14>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	58000400 	.word	0x58000400

0800257c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002580:	4b06      	ldr	r3, [pc, #24]	@ (800259c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002588:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800258c:	d101      	bne.n	8002592 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	58000400 	.word	0x58000400

080025a0 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80025a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025b2:	6013      	str	r3, [r2, #0]
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80025c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80025ce:	6013      	str	r3, [r2, #0]
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80025dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025ea:	d101      	bne.n	80025f0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr

080025fa <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80025fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800260c:	6013      	str	r3, [r2, #0]
}
 800260e:	bf00      	nop
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr

08002616 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800261a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002624:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002628:	6013      	str	r3, [r2, #0]
}
 800262a:	bf00      	nop
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr

08002632 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002640:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002644:	d101      	bne.n	800264a <LL_RCC_HSE_IsReady+0x18>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <LL_RCC_HSE_IsReady+0x1a>
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr

08002654 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002658:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002662:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002666:	6013      	str	r3, [r2, #0]
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002674:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800267e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002682:	6013      	str	r3, [r2, #0]
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002690:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800269a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800269e:	d101      	bne.n	80026a4 <LL_RCC_HSI_IsReady+0x18>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <LL_RCC_HSI_IsReady+0x1a>
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr

080026ae <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80026b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	061b      	lsls	r3, r3, #24
 80026c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026c8:	4313      	orrs	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80026da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d101      	bne.n	80026ee <LL_RCC_LSE_IsReady+0x18>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <LL_RCC_LSE_IsReady+0x1a>
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80026fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002700:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002704:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800271c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002720:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002724:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002728:	f023 0301 	bic.w	r3, r3, #1
 800272c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800273c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002740:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b02      	cmp	r3, #2
 800274a:	d101      	bne.n	8002750 <LL_RCC_LSI_IsReady+0x18>
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <LL_RCC_LSI_IsReady+0x1a>
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800275e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6013      	str	r3, [r2, #0]
}
 800276e:	bf00      	nop
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800277a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002784:	f023 0301 	bic.w	r3, r3, #1
 8002788:	6013      	str	r3, [r2, #0]
}
 800278a:	bf00      	nop
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002796:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d101      	bne.n	80027a8 <LL_RCC_MSI_IsReady+0x16>
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <LL_RCC_MSI_IsReady+0x18>
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80027b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d101      	bne.n	80027c8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr

080027d2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80027d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80027ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027f4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	021b      	lsls	r3, r3, #8
 8002816:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800281a:	4313      	orrs	r3, r2
 800281c:	604b      	str	r3, [r1, #4]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f023 0203 	bic.w	r2, r3, #3
 800283a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4313      	orrs	r3, r2
 8002842:	608b      	str	r3, [r1, #8]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr

0800284e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002852:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 030c 	and.w	r3, r3, #12
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800286c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002876:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4313      	orrs	r3, r2
 800287e:	608b      	str	r3, [r1, #8]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr

0800288a <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002896:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800289a:	f023 020f 	bic.w	r2, r3, #15
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr

080028b6 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80028be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	608b      	str	r3, [r1, #8]
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80028e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	608b      	str	r3, [r1, #8]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr

08002902 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002902:	b480      	push	{r7}
 8002904:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002910:	4618      	mov	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800291c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002920:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800292a:	4618      	mov	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr

08002932 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002932:	b480      	push	{r7}
 8002934:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002936:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800294c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002956:	4618      	mov	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800295e:	b480      	push	{r7}
 8002960:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800296c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002970:	6013      	str	r3, [r2, #0]
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800297e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002988:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800298c:	6013      	str	r3, [r2, #0]
}
 800298e:	bf00      	nop
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002996:	b480      	push	{r7}
 8002998:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800299a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80029a8:	d101      	bne.n	80029ae <LL_RCC_PLL_IsReady+0x18>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <LL_RCC_PLL_IsReady+0x1a>
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80029bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	0a1b      	lsrs	r3, r3, #8
 80029c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80029d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80029de:	4618      	mov	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80029e6:	b480      	push	{r7}
 80029e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80029ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002a00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f003 0303 	and.w	r3, r3, #3
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr

08002a12 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002a16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a24:	d101      	bne.n	8002a2a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002a38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a3c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002a40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a48:	d101      	bne.n	8002a4e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002a5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a6a:	d101      	bne.n	8002a70 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr

08002a7a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002a7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a8c:	d101      	bne.n	8002a92 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr

08002a9c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e36f      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aae:	f7ff fece 	bl	800284e <LL_RCC_GetSysClkSource>
 8002ab2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ab4:	f7ff ffa2 	bl	80029fc <LL_RCC_PLL_GetMainSource>
 8002ab8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 80c4 	beq.w	8002c50 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <HAL_RCC_OscConfig+0x3e>
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	2b0c      	cmp	r3, #12
 8002ad2:	d176      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d173      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e353      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002aea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_OscConfig+0x68>
 8002af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b02:	e006      	b.n	8002b12 <HAL_RCC_OscConfig+0x76>
 8002b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b0c:	091b      	lsrs	r3, r3, #4
 8002b0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d222      	bcs.n	8002b5c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 fd3c 	bl	8003598 <RCC_SetFlashLatencyFromMSIRange>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e331      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b34:	f043 0308 	orr.w	r3, r3, #8
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fe53 	bl	8002800 <LL_RCC_MSI_SetCalibTrimming>
 8002b5a:	e021      	b.n	8002ba0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b66:	f043 0308 	orr.w	r3, r3, #8
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fe3a 	bl	8002800 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fd01 	bl	8003598 <RCC_SetFlashLatencyFromMSIRange>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e2f6      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ba0:	f000 fcc2 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4aa7      	ldr	r2, [pc, #668]	@ (8002e44 <HAL_RCC_OscConfig+0x3a8>)
 8002ba8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002baa:	4ba7      	ldr	r3, [pc, #668]	@ (8002e48 <HAL_RCC_OscConfig+0x3ac>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff f934 	bl	8001e1c <HAL_InitTick>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002bb8:	7cfb      	ldrb	r3, [r7, #19]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d047      	beq.n	8002c4e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002bbe:	7cfb      	ldrb	r3, [r7, #19]
 8002bc0:	e2e5      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d02c      	beq.n	8002c24 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bca:	f7ff fdc6 	bl	800275a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bce:	f7ff f971 	bl	8001eb4 <HAL_GetTick>
 8002bd2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bd6:	f7ff f96d 	bl	8001eb4 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e2d2      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002be8:	f7ff fdd3 	bl	8002792 <LL_RCC_MSI_IsReady>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f1      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bfc:	f043 0308 	orr.w	r3, r3, #8
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c14:	4313      	orrs	r3, r2
 8002c16:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff fdef 	bl	8002800 <LL_RCC_MSI_SetCalibTrimming>
 8002c22:	e015      	b.n	8002c50 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c24:	f7ff fda7 	bl	8002776 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c28:	f7ff f944 	bl	8001eb4 <HAL_GetTick>
 8002c2c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c30:	f7ff f940 	bl	8001eb4 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e2a5      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002c42:	f7ff fda6 	bl	8002792 <LL_RCC_MSI_IsReady>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f1      	bne.n	8002c30 <HAL_RCC_OscConfig+0x194>
 8002c4c:	e000      	b.n	8002c50 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002c4e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d058      	beq.n	8002d0e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d005      	beq.n	8002c6e <HAL_RCC_OscConfig+0x1d2>
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	2b0c      	cmp	r3, #12
 8002c66:	d108      	bne.n	8002c7a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d105      	bne.n	8002c7a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d14b      	bne.n	8002d0e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e289      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c98:	d102      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x204>
 8002c9a:	f7ff fcae 	bl	80025fa <LL_RCC_HSE_Enable>
 8002c9e:	e00d      	b.n	8002cbc <HAL_RCC_OscConfig+0x220>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002ca8:	d104      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x218>
 8002caa:	f7ff fc79 	bl	80025a0 <LL_RCC_HSE_EnableTcxo>
 8002cae:	f7ff fca4 	bl	80025fa <LL_RCC_HSE_Enable>
 8002cb2:	e003      	b.n	8002cbc <HAL_RCC_OscConfig+0x220>
 8002cb4:	f7ff fcaf 	bl	8002616 <LL_RCC_HSE_Disable>
 8002cb8:	f7ff fc80 	bl	80025bc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7ff f8f6 	bl	8001eb4 <HAL_GetTick>
 8002cc8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ccc:	f7ff f8f2 	bl	8001eb4 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b64      	cmp	r3, #100	@ 0x64
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e257      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002cde:	f7ff fca8 	bl	8002632 <LL_RCC_HSE_IsReady>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0f1      	beq.n	8002ccc <HAL_RCC_OscConfig+0x230>
 8002ce8:	e011      	b.n	8002d0e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cea:	f7ff f8e3 	bl	8001eb4 <HAL_GetTick>
 8002cee:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf2:	f7ff f8df 	bl	8001eb4 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b64      	cmp	r3, #100	@ 0x64
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e244      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002d04:	f7ff fc95 	bl	8002632 <LL_RCC_HSE_IsReady>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f1      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d046      	beq.n	8002da8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d005      	beq.n	8002d2c <HAL_RCC_OscConfig+0x290>
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	2b0c      	cmp	r3, #12
 8002d24:	d10e      	bne.n	8002d44 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d10b      	bne.n	8002d44 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e22a      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fcb6 	bl	80026ae <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002d42:	e031      	b.n	8002da8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d019      	beq.n	8002d80 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d4c:	f7ff fc82 	bl	8002654 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7ff f8b0 	bl	8001eb4 <HAL_GetTick>
 8002d54:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d58:	f7ff f8ac 	bl	8001eb4 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e211      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002d6a:	f7ff fc8f 	bl	800268c <LL_RCC_HSI_IsReady>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f1      	beq.n	8002d58 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff fc98 	bl	80026ae <LL_RCC_HSI_SetCalibTrimming>
 8002d7e:	e013      	b.n	8002da8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d80:	f7ff fc76 	bl	8002670 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7ff f896 	bl	8001eb4 <HAL_GetTick>
 8002d88:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8c:	f7ff f892 	bl	8001eb4 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e1f7      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002d9e:	f7ff fc75 	bl	800268c <LL_RCC_HSI_IsReady>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1f1      	bne.n	8002d8c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d06e      	beq.n	8002e92 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d056      	beq.n	8002e6a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002dbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dc4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69da      	ldr	r2, [r3, #28]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d031      	beq.n	8002e38 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d006      	beq.n	8002dec <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e1d0      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d013      	beq.n	8002e1e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002df6:	f7ff fc8f 	bl	8002718 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dfa:	f7ff f85b 	bl	8001eb4 <HAL_GetTick>
 8002dfe:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e02:	f7ff f857 	bl	8001eb4 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b11      	cmp	r3, #17
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e1bc      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002e14:	f7ff fc90 	bl	8002738 <LL_RCC_LSI_IsReady>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f1      	bne.n	8002e02 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002e1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e26:	f023 0210 	bic.w	r2, r3, #16
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e38:	f7ff fc5e 	bl	80026f8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3c:	f7ff f83a 	bl	8001eb4 <HAL_GetTick>
 8002e40:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002e42:	e00c      	b.n	8002e5e <HAL_RCC_OscConfig+0x3c2>
 8002e44:	20000000 	.word	0x20000000
 8002e48:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e4c:	f7ff f832 	bl	8001eb4 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b11      	cmp	r3, #17
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e197      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002e5e:	f7ff fc6b 	bl	8002738 <LL_RCC_LSI_IsReady>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f1      	beq.n	8002e4c <HAL_RCC_OscConfig+0x3b0>
 8002e68:	e013      	b.n	8002e92 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e6a:	f7ff fc55 	bl	8002718 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6e:	f7ff f821 	bl	8001eb4 <HAL_GetTick>
 8002e72:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e76:	f7ff f81d 	bl	8001eb4 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b11      	cmp	r3, #17
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e182      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002e88:	f7ff fc56 	bl	8002738 <LL_RCC_LSI_IsReady>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f1      	bne.n	8002e76 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 80d8 	beq.w	8003050 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002ea0:	f7ff fb6c 	bl	800257c <LL_PWR_IsEnabledBkUpAccess>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d113      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002eaa:	f7ff fb4d 	bl	8002548 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eae:	f7ff f801 	bl	8001eb4 <HAL_GetTick>
 8002eb2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb6:	f7fe fffd 	bl	8001eb4 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e162      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002ec8:	f7ff fb58 	bl	800257c <LL_PWR_IsEnabledBkUpAccess>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f1      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d07b      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	2b85      	cmp	r3, #133	@ 0x85
 8002ee0:	d003      	beq.n	8002eea <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	2b05      	cmp	r3, #5
 8002ee8:	d109      	bne.n	8002efe <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002eea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ef6:	f043 0304 	orr.w	r3, r3, #4
 8002efa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efe:	f7fe ffd9 	bl	8001eb4 <HAL_GetTick>
 8002f02:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002f18:	e00a      	b.n	8002f30 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1a:	f7fe ffcb 	bl	8001eb4 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e12e      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002f30:	f7ff fbd1 	bl	80026d6 <LL_RCC_LSE_IsReady>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0ef      	beq.n	8002f1a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	2b81      	cmp	r3, #129	@ 0x81
 8002f40:	d003      	beq.n	8002f4a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	2b85      	cmp	r3, #133	@ 0x85
 8002f48:	d121      	bne.n	8002f8e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4a:	f7fe ffb3 	bl	8001eb4 <HAL_GetTick>
 8002f4e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002f64:	e00a      	b.n	8002f7c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f66:	f7fe ffa5 	bl	8001eb4 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e108      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002f7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0ec      	beq.n	8002f66 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002f8c:	e060      	b.n	8003050 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8e:	f7fe ff91 	bl	8001eb4 <HAL_GetTick>
 8002f92:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fa0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fa8:	e00a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002faa:	f7fe ff83 	bl	8001eb4 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e0e6      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1ec      	bne.n	8002faa <HAL_RCC_OscConfig+0x50e>
 8002fd0:	e03e      	b.n	8003050 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd2:	f7fe ff6f 	bl	8001eb4 <HAL_GetTick>
 8002fd6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fe4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fe8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fec:	e00a      	b.n	8003004 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fee:	f7fe ff61 	bl	8001eb4 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e0c4      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003004:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800300c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1ec      	bne.n	8002fee <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003014:	f7fe ff4e 	bl	8001eb4 <HAL_GetTick>
 8003018:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800301a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003022:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003026:	f023 0301 	bic.w	r3, r3, #1
 800302a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800302e:	e00a      	b.n	8003046 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003030:	f7fe ff40 	bl	8001eb4 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e0a3      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003046:	f7ff fb46 	bl	80026d6 <LL_RCC_LSE_IsReady>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1ef      	bne.n	8003030 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 8099 	beq.w	800318c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	2b0c      	cmp	r3, #12
 800305e:	d06c      	beq.n	800313a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003064:	2b02      	cmp	r3, #2
 8003066:	d14b      	bne.n	8003100 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003068:	f7ff fc87 	bl	800297a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7fe ff22 	bl	8001eb4 <HAL_GetTick>
 8003070:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003074:	f7fe ff1e 	bl	8001eb4 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b0a      	cmp	r3, #10
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e083      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003086:	f7ff fc86 	bl	8002996 <LL_RCC_PLL_IsReady>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1f1      	bne.n	8003074 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003090:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	4b40      	ldr	r3, [pc, #256]	@ (8003198 <HAL_RCC_OscConfig+0x6fc>)
 8003098:	4013      	ands	r3, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030a2:	4311      	orrs	r1, r2
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80030a8:	0212      	lsls	r2, r2, #8
 80030aa:	4311      	orrs	r1, r2
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80030b0:	4311      	orrs	r1, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80030b6:	4311      	orrs	r1, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80030bc:	430a      	orrs	r2, r1
 80030be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030c2:	4313      	orrs	r3, r2
 80030c4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030c6:	f7ff fc4a 	bl	800295e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030d8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030da:	f7fe feeb 	bl	8001eb4 <HAL_GetTick>
 80030de:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e2:	f7fe fee7 	bl	8001eb4 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b0a      	cmp	r3, #10
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e04c      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80030f4:	f7ff fc4f 	bl	8002996 <LL_RCC_PLL_IsReady>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f1      	beq.n	80030e2 <HAL_RCC_OscConfig+0x646>
 80030fe:	e045      	b.n	800318c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003100:	f7ff fc3b 	bl	800297a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003104:	f7fe fed6 	bl	8001eb4 <HAL_GetTick>
 8003108:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310c:	f7fe fed2 	bl	8001eb4 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b0a      	cmp	r3, #10
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e037      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800311e:	f7ff fc3a 	bl	8002996 <LL_RCC_PLL_IsReady>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f1      	bne.n	800310c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003132:	4b1a      	ldr	r3, [pc, #104]	@ (800319c <HAL_RCC_OscConfig+0x700>)
 8003134:	4013      	ands	r3, r2
 8003136:	60cb      	str	r3, [r1, #12]
 8003138:	e028      	b.n	800318c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e023      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003146:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	f003 0203 	and.w	r2, r3, #3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003158:	429a      	cmp	r2, r3
 800315a:	d115      	bne.n	8003188 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003166:	429a      	cmp	r2, r3
 8003168:	d10e      	bne.n	8003188 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003174:	021b      	lsls	r3, r3, #8
 8003176:	429a      	cmp	r2, r3
 8003178:	d106      	bne.n	8003188 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	11c1808c 	.word	0x11c1808c
 800319c:	eefefffc 	.word	0xeefefffc

080031a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e10f      	b.n	80033d4 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031b4:	4b89      	ldr	r3, [pc, #548]	@ (80033dc <HAL_RCC_ClockConfig+0x23c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d91b      	bls.n	80031fa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c2:	4b86      	ldr	r3, [pc, #536]	@ (80033dc <HAL_RCC_ClockConfig+0x23c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f023 0207 	bic.w	r2, r3, #7
 80031ca:	4984      	ldr	r1, [pc, #528]	@ (80033dc <HAL_RCC_ClockConfig+0x23c>)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d2:	f7fe fe6f 	bl	8001eb4 <HAL_GetTick>
 80031d6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80031da:	f7fe fe6b 	bl	8001eb4 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e0f3      	b.n	80033d4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ec:	4b7b      	ldr	r3, [pc, #492]	@ (80033dc <HAL_RCC_ClockConfig+0x23c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d1ef      	bne.n	80031da <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d016      	beq.n	8003234 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff fb2a 	bl	8002864 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003210:	f7fe fe50 	bl	8001eb4 <HAL_GetTick>
 8003214:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003216:	e008      	b.n	800322a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003218:	f7fe fe4c 	bl	8001eb4 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e0d4      	b.n	80033d4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800322a:	f7ff fbf2 	bl	8002a12 <LL_RCC_IsActiveFlag_HPRE>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f1      	beq.n	8003218 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800323c:	2b00      	cmp	r3, #0
 800323e:	d016      	beq.n	800326e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fb20 	bl	800288a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800324a:	f7fe fe33 	bl	8001eb4 <HAL_GetTick>
 800324e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003250:	e008      	b.n	8003264 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003252:	f7fe fe2f 	bl	8001eb4 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e0b7      	b.n	80033d4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003264:	f7ff fbe6 	bl	8002a34 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f1      	beq.n	8003252 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d016      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fb19 	bl	80028b6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003284:	f7fe fe16 	bl	8001eb4 <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800328c:	f7fe fe12 	bl	8001eb4 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e09a      	b.n	80033d4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800329e:	f7ff fbdb 	bl	8002a58 <LL_RCC_IsActiveFlag_PPRE1>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f1      	beq.n	800328c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d017      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff fb0e 	bl	80028dc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80032c0:	f7fe fdf8 	bl	8001eb4 <HAL_GetTick>
 80032c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80032c8:	f7fe fdf4 	bl	8001eb4 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e07c      	b.n	80033d4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80032da:	f7ff fbce 	bl	8002a7a <LL_RCC_IsActiveFlag_PPRE2>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0f1      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d043      	beq.n	8003378 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d106      	bne.n	8003306 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80032f8:	f7ff f99b 	bl	8002632 <LL_RCC_HSE_IsReady>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d11e      	bne.n	8003340 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e066      	b.n	80033d4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b03      	cmp	r3, #3
 800330c:	d106      	bne.n	800331c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800330e:	f7ff fb42 	bl	8002996 <LL_RCC_PLL_IsReady>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d113      	bne.n	8003340 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e05b      	b.n	80033d4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d106      	bne.n	8003332 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003324:	f7ff fa35 	bl	8002792 <LL_RCC_MSI_IsReady>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d108      	bne.n	8003340 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e050      	b.n	80033d4 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003332:	f7ff f9ab 	bl	800268c <LL_RCC_HSI_IsReady>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e049      	b.n	80033d4 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff fa6f 	bl	8002828 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800334a:	f7fe fdb3 	bl	8001eb4 <HAL_GetTick>
 800334e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003350:	e00a      	b.n	8003368 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003352:	f7fe fdaf 	bl	8001eb4 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003360:	4293      	cmp	r3, r2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e035      	b.n	80033d4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003368:	f7ff fa71 	bl	800284e <LL_RCC_GetSysClkSource>
 800336c:	4602      	mov	r2, r0
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	429a      	cmp	r2, r3
 8003376:	d1ec      	bne.n	8003352 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003378:	4b18      	ldr	r3, [pc, #96]	@ (80033dc <HAL_RCC_ClockConfig+0x23c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d21b      	bcs.n	80033be <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003386:	4b15      	ldr	r3, [pc, #84]	@ (80033dc <HAL_RCC_ClockConfig+0x23c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 0207 	bic.w	r2, r3, #7
 800338e:	4913      	ldr	r1, [pc, #76]	@ (80033dc <HAL_RCC_ClockConfig+0x23c>)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	4313      	orrs	r3, r2
 8003394:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003396:	f7fe fd8d 	bl	8001eb4 <HAL_GetTick>
 800339a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800339e:	f7fe fd89 	bl	8001eb4 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e011      	b.n	80033d4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b0:	4b0a      	ldr	r3, [pc, #40]	@ (80033dc <HAL_RCC_ClockConfig+0x23c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d1ef      	bne.n	800339e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80033be:	f000 f8b3 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 80033c2:	4603      	mov	r3, r0
 80033c4:	4a06      	ldr	r2, [pc, #24]	@ (80033e0 <HAL_RCC_ClockConfig+0x240>)
 80033c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80033c8:	4b06      	ldr	r3, [pc, #24]	@ (80033e4 <HAL_RCC_ClockConfig+0x244>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fe fd25 	bl	8001e1c <HAL_InitTick>
 80033d2:	4603      	mov	r3, r0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	58004000 	.word	0x58004000
 80033e0:	20000000 	.word	0x20000000
 80033e4:	20000004 	.word	0x20000004

080033e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033f6:	f7ff fa2a 	bl	800284e <LL_RCC_GetSysClkSource>
 80033fa:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033fc:	f7ff fafe 	bl	80029fc <LL_RCC_PLL_GetMainSource>
 8003400:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <HAL_RCC_GetSysClockFreq+0x2c>
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2b0c      	cmp	r3, #12
 800340c:	d139      	bne.n	8003482 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d136      	bne.n	8003482 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003414:	f7ff f9cd 	bl	80027b2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d115      	bne.n	800344a <HAL_RCC_GetSysClockFreq+0x62>
 800341e:	f7ff f9c8 	bl	80027b2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003422:	4603      	mov	r3, r0
 8003424:	2b01      	cmp	r3, #1
 8003426:	d106      	bne.n	8003436 <HAL_RCC_GetSysClockFreq+0x4e>
 8003428:	f7ff f9d3 	bl	80027d2 <LL_RCC_MSI_GetRange>
 800342c:	4603      	mov	r3, r0
 800342e:	0a1b      	lsrs	r3, r3, #8
 8003430:	f003 030f 	and.w	r3, r3, #15
 8003434:	e005      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x5a>
 8003436:	f7ff f9d7 	bl	80027e8 <LL_RCC_MSI_GetRangeAfterStandby>
 800343a:	4603      	mov	r3, r0
 800343c:	0a1b      	lsrs	r3, r3, #8
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	4a36      	ldr	r2, [pc, #216]	@ (800351c <HAL_RCC_GetSysClockFreq+0x134>)
 8003444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003448:	e014      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x8c>
 800344a:	f7ff f9b2 	bl	80027b2 <LL_RCC_MSI_IsEnabledRangeSelect>
 800344e:	4603      	mov	r3, r0
 8003450:	2b01      	cmp	r3, #1
 8003452:	d106      	bne.n	8003462 <HAL_RCC_GetSysClockFreq+0x7a>
 8003454:	f7ff f9bd 	bl	80027d2 <LL_RCC_MSI_GetRange>
 8003458:	4603      	mov	r3, r0
 800345a:	091b      	lsrs	r3, r3, #4
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	e005      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x86>
 8003462:	f7ff f9c1 	bl	80027e8 <LL_RCC_MSI_GetRangeAfterStandby>
 8003466:	4603      	mov	r3, r0
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	4a2b      	ldr	r2, [pc, #172]	@ (800351c <HAL_RCC_GetSysClockFreq+0x134>)
 8003470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003474:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d115      	bne.n	80034a8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003480:	e012      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b04      	cmp	r3, #4
 8003486:	d102      	bne.n	800348e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003488:	4b25      	ldr	r3, [pc, #148]	@ (8003520 <HAL_RCC_GetSysClockFreq+0x138>)
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	e00c      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b08      	cmp	r3, #8
 8003492:	d109      	bne.n	80034a8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003494:	f7ff f8a0 	bl	80025d8 <LL_RCC_HSE_IsEnabledDiv2>
 8003498:	4603      	mov	r3, r0
 800349a:	2b01      	cmp	r3, #1
 800349c:	d102      	bne.n	80034a4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800349e:	4b20      	ldr	r3, [pc, #128]	@ (8003520 <HAL_RCC_GetSysClockFreq+0x138>)
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	e001      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80034a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x13c>)
 80034a6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034a8:	f7ff f9d1 	bl	800284e <LL_RCC_GetSysClkSource>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	d12f      	bne.n	8003512 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80034b2:	f7ff faa3 	bl	80029fc <LL_RCC_PLL_GetMainSource>
 80034b6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d003      	beq.n	80034c6 <HAL_RCC_GetSysClockFreq+0xde>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d003      	beq.n	80034cc <HAL_RCC_GetSysClockFreq+0xe4>
 80034c4:	e00d      	b.n	80034e2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80034c6:	4b16      	ldr	r3, [pc, #88]	@ (8003520 <HAL_RCC_GetSysClockFreq+0x138>)
 80034c8:	60fb      	str	r3, [r7, #12]
        break;
 80034ca:	e00d      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80034cc:	f7ff f884 	bl	80025d8 <LL_RCC_HSE_IsEnabledDiv2>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d102      	bne.n	80034dc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80034d6:	4b12      	ldr	r3, [pc, #72]	@ (8003520 <HAL_RCC_GetSysClockFreq+0x138>)
 80034d8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80034da:	e005      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80034dc:	4b11      	ldr	r3, [pc, #68]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x13c>)
 80034de:	60fb      	str	r3, [r7, #12]
        break;
 80034e0:	e002      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	60fb      	str	r3, [r7, #12]
        break;
 80034e6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80034e8:	f7ff fa66 	bl	80029b8 <LL_RCC_PLL_GetN>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	fb03 f402 	mul.w	r4, r3, r2
 80034f4:	f7ff fa77 	bl	80029e6 <LL_RCC_PLL_GetDivider>
 80034f8:	4603      	mov	r3, r0
 80034fa:	091b      	lsrs	r3, r3, #4
 80034fc:	3301      	adds	r3, #1
 80034fe:	fbb4 f4f3 	udiv	r4, r4, r3
 8003502:	f7ff fa65 	bl	80029d0 <LL_RCC_PLL_GetR>
 8003506:	4603      	mov	r3, r0
 8003508:	0f5b      	lsrs	r3, r3, #29
 800350a:	3301      	adds	r3, #1
 800350c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003510:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003512:	697b      	ldr	r3, [r7, #20]
}
 8003514:	4618      	mov	r0, r3
 8003516:	371c      	adds	r7, #28
 8003518:	46bd      	mov	sp, r7
 800351a:	bd90      	pop	{r4, r7, pc}
 800351c:	0800c050 	.word	0x0800c050
 8003520:	00f42400 	.word	0x00f42400
 8003524:	01e84800 	.word	0x01e84800

08003528 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003528:	b598      	push	{r3, r4, r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800352c:	f7ff ff5c 	bl	80033e8 <HAL_RCC_GetSysClockFreq>
 8003530:	4604      	mov	r4, r0
 8003532:	f7ff f9e6 	bl	8002902 <LL_RCC_GetAHBPrescaler>
 8003536:	4603      	mov	r3, r0
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	4a03      	ldr	r2, [pc, #12]	@ (800354c <HAL_RCC_GetHCLKFreq+0x24>)
 8003540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003544:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003548:	4618      	mov	r0, r3
 800354a:	bd98      	pop	{r3, r4, r7, pc}
 800354c:	0800bff0 	.word	0x0800bff0

08003550 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003550:	b598      	push	{r3, r4, r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003554:	f7ff ffe8 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 8003558:	4604      	mov	r4, r0
 800355a:	f7ff f9ea 	bl	8002932 <LL_RCC_GetAPB1Prescaler>
 800355e:	4603      	mov	r3, r0
 8003560:	0a1b      	lsrs	r3, r3, #8
 8003562:	4a03      	ldr	r2, [pc, #12]	@ (8003570 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003568:	fa24 f303 	lsr.w	r3, r4, r3
}
 800356c:	4618      	mov	r0, r3
 800356e:	bd98      	pop	{r3, r4, r7, pc}
 8003570:	0800c030 	.word	0x0800c030

08003574 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003574:	b598      	push	{r3, r4, r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003578:	f7ff ffd6 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 800357c:	4604      	mov	r4, r0
 800357e:	f7ff f9e3 	bl	8002948 <LL_RCC_GetAPB2Prescaler>
 8003582:	4603      	mov	r3, r0
 8003584:	0adb      	lsrs	r3, r3, #11
 8003586:	4a03      	ldr	r2, [pc, #12]	@ (8003594 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800358c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003590:	4618      	mov	r0, r3
 8003592:	bd98      	pop	{r3, r4, r7, pc}
 8003594:	0800c030 	.word	0x0800c030

08003598 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003598:	b590      	push	{r4, r7, lr}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	f003 030f 	and.w	r3, r3, #15
 80035a8:	4a10      	ldr	r2, [pc, #64]	@ (80035ec <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80035aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ae:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80035b0:	f7ff f9b2 	bl	8002918 <LL_RCC_GetAHB3Prescaler>
 80035b4:	4603      	mov	r3, r0
 80035b6:	091b      	lsrs	r3, r3, #4
 80035b8:	f003 030f 	and.w	r3, r3, #15
 80035bc:	4a0c      	ldr	r2, [pc, #48]	@ (80035f0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80035be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	4a09      	ldr	r2, [pc, #36]	@ (80035f4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80035ce:	fba2 2303 	umull	r2, r3, r2, r3
 80035d2:	0c9c      	lsrs	r4, r3, #18
 80035d4:	f7fe ffc6 	bl	8002564 <HAL_PWREx_GetVoltageRange>
 80035d8:	4603      	mov	r3, r0
 80035da:	4619      	mov	r1, r3
 80035dc:	4620      	mov	r0, r4
 80035de:	f000 f80b 	bl	80035f8 <RCC_SetFlashLatency>
 80035e2:	4603      	mov	r3, r0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd90      	pop	{r4, r7, pc}
 80035ec:	0800c050 	.word	0x0800c050
 80035f0:	0800bff0 	.word	0x0800bff0
 80035f4:	431bde83 	.word	0x431bde83

080035f8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08e      	sub	sp, #56	@ 0x38
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003602:	4a3a      	ldr	r2, [pc, #232]	@ (80036ec <RCC_SetFlashLatency+0xf4>)
 8003604:	f107 0320 	add.w	r3, r7, #32
 8003608:	e892 0003 	ldmia.w	r2, {r0, r1}
 800360c:	6018      	str	r0, [r3, #0]
 800360e:	3304      	adds	r3, #4
 8003610:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003612:	4a37      	ldr	r2, [pc, #220]	@ (80036f0 <RCC_SetFlashLatency+0xf8>)
 8003614:	f107 0318 	add.w	r3, r7, #24
 8003618:	e892 0003 	ldmia.w	r2, {r0, r1}
 800361c:	6018      	str	r0, [r3, #0]
 800361e:	3304      	adds	r3, #4
 8003620:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003622:	4a34      	ldr	r2, [pc, #208]	@ (80036f4 <RCC_SetFlashLatency+0xfc>)
 8003624:	f107 030c 	add.w	r3, r7, #12
 8003628:	ca07      	ldmia	r2, {r0, r1, r2}
 800362a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800362e:	2300      	movs	r3, #0
 8003630:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003638:	d11b      	bne.n	8003672 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800363a:	2300      	movs	r3, #0
 800363c:	633b      	str	r3, [r7, #48]	@ 0x30
 800363e:	e014      	b.n	800366a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	3338      	adds	r3, #56	@ 0x38
 8003646:	443b      	add	r3, r7
 8003648:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800364c:	461a      	mov	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4293      	cmp	r3, r2
 8003652:	d807      	bhi.n	8003664 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	3338      	adds	r3, #56	@ 0x38
 800365a:	443b      	add	r3, r7
 800365c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003660:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003662:	e021      	b.n	80036a8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003666:	3301      	adds	r3, #1
 8003668:	633b      	str	r3, [r7, #48]	@ 0x30
 800366a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366c:	2b02      	cmp	r3, #2
 800366e:	d9e7      	bls.n	8003640 <RCC_SetFlashLatency+0x48>
 8003670:	e01a      	b.n	80036a8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003672:	2300      	movs	r3, #0
 8003674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003676:	e014      	b.n	80036a2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	3338      	adds	r3, #56	@ 0x38
 800367e:	443b      	add	r3, r7
 8003680:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003684:	461a      	mov	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4293      	cmp	r3, r2
 800368a:	d807      	bhi.n	800369c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800368c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	3338      	adds	r3, #56	@ 0x38
 8003692:	443b      	add	r3, r7
 8003694:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003698:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800369a:	e005      	b.n	80036a8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800369c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800369e:	3301      	adds	r3, #1
 80036a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d9e7      	bls.n	8003678 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036a8:	4b13      	ldr	r3, [pc, #76]	@ (80036f8 <RCC_SetFlashLatency+0x100>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f023 0207 	bic.w	r2, r3, #7
 80036b0:	4911      	ldr	r1, [pc, #68]	@ (80036f8 <RCC_SetFlashLatency+0x100>)
 80036b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b4:	4313      	orrs	r3, r2
 80036b6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80036b8:	f7fe fbfc 	bl	8001eb4 <HAL_GetTick>
 80036bc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80036be:	e008      	b.n	80036d2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80036c0:	f7fe fbf8 	bl	8001eb4 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e007      	b.n	80036e2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80036d2:	4b09      	ldr	r3, [pc, #36]	@ (80036f8 <RCC_SetFlashLatency+0x100>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036dc:	429a      	cmp	r2, r3
 80036de:	d1ef      	bne.n	80036c0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3738      	adds	r7, #56	@ 0x38
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	0800bf70 	.word	0x0800bf70
 80036f0:	0800bf78 	.word	0x0800bf78
 80036f4:	0800bf80 	.word	0x0800bf80
 80036f8:	58004000 	.word	0x58004000

080036fc <LL_RCC_LSE_IsReady>:
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003700:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b02      	cmp	r3, #2
 800370e:	d101      	bne.n	8003714 <LL_RCC_LSE_IsReady+0x18>
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <LL_RCC_LSE_IsReady+0x1a>
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr

0800371e <LL_RCC_SetUSARTClockSource>:
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003726:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800372a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	0c1b      	lsrs	r3, r3, #16
 8003732:	43db      	mvns	r3, r3
 8003734:	401a      	ands	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	b29b      	uxth	r3, r3
 800373a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr

0800374e <LL_RCC_SetI2SClockSource>:
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003756:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800375a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800375e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003762:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr

08003778 <LL_RCC_SetLPUARTClockSource>:
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003788:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800378c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr

080037a2 <LL_RCC_SetI2CClockSource>:
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80037aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	091b      	lsrs	r3, r3, #4
 80037b6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80037ba:	43db      	mvns	r3, r3
 80037bc:	401a      	ands	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80037c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr

080037da <LL_RCC_SetLPTIMClockSource>:
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80037e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	0c1b      	lsrs	r3, r3, #16
 80037ee:	041b      	lsls	r3, r3, #16
 80037f0:	43db      	mvns	r3, r3
 80037f2:	401a      	ands	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	041b      	lsls	r3, r3, #16
 80037f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr

0800380c <LL_RCC_SetRNGClockSource>:
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800381c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003820:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr

08003836 <LL_RCC_SetADCClockSource>:
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800383e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003846:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800384a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <LL_RCC_SetRTCClockSource>:
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800386c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003870:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003874:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr

0800388a <LL_RCC_GetRTCClockSource>:
{
 800388a:	b480      	push	{r7}
 800388c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800388e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003896:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800389a:	4618      	mov	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr

080038a2 <LL_RCC_ForceBackupDomainReset>:
{
 80038a2:	b480      	push	{r7}
 80038a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80038a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80038ba:	bf00      	nop
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr

080038c2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80038c2:	b480      	push	{r7}
 80038c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80038c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80038da:	bf00      	nop
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr
	...

080038e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80038f0:	2300      	movs	r3, #0
 80038f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80038f4:	2300      	movs	r3, #0
 80038f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d058      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003904:	f7fe fe20 	bl	8002548 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003908:	f7fe fad4 	bl	8001eb4 <HAL_GetTick>
 800390c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800390e:	e009      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003910:	f7fe fad0 	bl	8001eb4 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d902      	bls.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	74fb      	strb	r3, [r7, #19]
        break;
 8003922:	e006      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003924:	4b7b      	ldr	r3, [pc, #492]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800392c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003930:	d1ee      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003932:	7cfb      	ldrb	r3, [r7, #19]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d13c      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003938:	f7ff ffa7 	bl	800388a <LL_RCC_GetRTCClockSource>
 800393c:	4602      	mov	r2, r0
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003942:	429a      	cmp	r2, r3
 8003944:	d00f      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003946:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800394e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003952:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003954:	f7ff ffa5 	bl	80038a2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003958:	f7ff ffb3 	bl	80038c2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800395c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d014      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7fe faa0 	bl	8001eb4 <HAL_GetTick>
 8003974:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003976:	e00b      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003978:	f7fe fa9c 	bl	8001eb4 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003986:	4293      	cmp	r3, r2
 8003988:	d902      	bls.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	74fb      	strb	r3, [r7, #19]
            break;
 800398e:	e004      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003990:	f7ff feb4 	bl	80036fc <LL_RCC_LSE_IsReady>
 8003994:	4603      	mov	r3, r0
 8003996:	2b01      	cmp	r3, #1
 8003998:	d1ee      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800399a:	7cfb      	ldrb	r3, [r7, #19]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d105      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff ff5b 	bl	8003860 <LL_RCC_SetRTCClockSource>
 80039aa:	e004      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039ac:	7cfb      	ldrb	r3, [r7, #19]
 80039ae:	74bb      	strb	r3, [r7, #18]
 80039b0:	e001      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b2:	7cfb      	ldrb	r3, [r7, #19]
 80039b4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d004      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff fea9 	bl	800371e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d004      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff fe9e 	bl	800371e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d004      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff fec0 	bl	8003778 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d004      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fee6 	bl	80037da <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d004      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff fedb 	bl	80037da <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d004      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff fed0 	bl	80037da <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d004      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff fea9 	bl	80037a2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d004      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff fe9e 	bl	80037a2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d004      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff fe93 	bl	80037a2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d011      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff fe5e 	bl	800374e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a9a:	d107      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003a9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003aa6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aaa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d010      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff fea5 	bl	800380c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d107      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003aca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ad4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ad8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d011      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff fea3 	bl	8003836 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003af8:	d107      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003afa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b08:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003b0a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	58000400 	.word	0x58000400

08003b18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e0c6      	b.n	8003cb8 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d108      	bne.n	8003b44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b3a:	d009      	beq.n	8003b50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	61da      	str	r2, [r3, #28]
 8003b42:	e005      	b.n	8003b50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d106      	bne.n	8003b6a <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7fd ffe1 	bl	8001b2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b80:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b8a:	d902      	bls.n	8003b92 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	e002      	b.n	8003b98 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b96:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003ba0:	d007      	beq.n	8003bb2 <HAL_SPI_Init+0x9a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003baa:	d002      	beq.n	8003bb2 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bf4:	ea42 0103 	orr.w	r1, r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c10:	d11b      	bne.n	8003c4a <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10b      	bne.n	8003c32 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c22:	d903      	bls.n	8003c2c <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c2a:	e002      	b.n	8003c32 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d107      	bne.n	8003c4a <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c48:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	0c1b      	lsrs	r3, r3, #16
 8003c50:	f003 0204 	and.w	r2, r3, #4
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003c70:	ea42 0103 	orr.w	r1, r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c8a:	d105      	bne.n	8003c98 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	b292      	uxth	r2, r2
 8003c96:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69da      	ldr	r2, [r3, #28]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ca6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <HAL_SPI_Transmit+0x22>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e181      	b.n	8003fe6 <HAL_SPI_Transmit+0x326>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cea:	f7fe f8e3 	bl	8001eb4 <HAL_GetTick>
 8003cee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
 8003cf2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d002      	beq.n	8003d06 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d00:	2302      	movs	r3, #2
 8003d02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d04:	e16a      	b.n	8003fdc <HAL_SPI_Transmit+0x31c>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <HAL_SPI_Transmit+0x52>
 8003d0c:	88fb      	ldrh	r3, [r7, #6]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d102      	bne.n	8003d18 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d16:	e161      	b.n	8003fdc <HAL_SPI_Transmit+0x31c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2203      	movs	r2, #3
 8003d1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	88fa      	ldrh	r2, [r7, #6]
 8003d30:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	88fa      	ldrh	r2, [r7, #6]
 8003d36:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d62:	d10f      	bne.n	8003d84 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d82:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d8c:	d10f      	bne.n	8003dae <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003dac:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db8:	2b40      	cmp	r3, #64	@ 0x40
 8003dba:	d007      	beq.n	8003dcc <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003dd4:	d94f      	bls.n	8003e76 <HAL_SPI_Transmit+0x1b6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <HAL_SPI_Transmit+0x124>
 8003dde:	8afb      	ldrh	r3, [r7, #22]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d142      	bne.n	8003e6a <HAL_SPI_Transmit+0x1aa>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de8:	881a      	ldrh	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df4:	1c9a      	adds	r2, r3, #2
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e08:	e02f      	b.n	8003e6a <HAL_SPI_Transmit+0x1aa>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d112      	bne.n	8003e3e <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1c:	881a      	ldrh	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e28:	1c9a      	adds	r2, r3, #2
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e3c:	e015      	b.n	8003e6a <HAL_SPI_Transmit+0x1aa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e3e:	f7fe f839 	bl	8001eb4 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d803      	bhi.n	8003e56 <HAL_SPI_Transmit+0x196>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e54:	d102      	bne.n	8003e5c <HAL_SPI_Transmit+0x19c>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d106      	bne.n	8003e6a <HAL_SPI_Transmit+0x1aa>
        {
          errorcode = HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003e68:	e0b8      	b.n	8003fdc <HAL_SPI_Transmit+0x31c>
    while (hspi->TxXferCount > 0U)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1ca      	bne.n	8003e0a <HAL_SPI_Transmit+0x14a>
 8003e74:	e080      	b.n	8003f78 <HAL_SPI_Transmit+0x2b8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <HAL_SPI_Transmit+0x1c4>
 8003e7e:	8afb      	ldrh	r3, [r7, #22]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d174      	bne.n	8003f6e <HAL_SPI_Transmit+0x2ae>
    {
      if (hspi->TxXferCount > 1U)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d912      	bls.n	8003eb4 <HAL_SPI_Transmit+0x1f4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e92:	881a      	ldrh	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e9e:	1c9a      	adds	r2, r3, #2
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	3b02      	subs	r3, #2
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003eb2:	e05c      	b.n	8003f6e <HAL_SPI_Transmit+0x2ae>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	330c      	adds	r3, #12
 8003ebe:	7812      	ldrb	r2, [r2, #0]
 8003ec0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003eda:	e048      	b.n	8003f6e <HAL_SPI_Transmit+0x2ae>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d12b      	bne.n	8003f42 <HAL_SPI_Transmit+0x282>
      {
        if (hspi->TxXferCount > 1U)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d912      	bls.n	8003f1a <HAL_SPI_Transmit+0x25a>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef8:	881a      	ldrh	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f04:	1c9a      	adds	r2, r3, #2
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b02      	subs	r3, #2
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f18:	e029      	b.n	8003f6e <HAL_SPI_Transmit+0x2ae>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	330c      	adds	r3, #12
 8003f24:	7812      	ldrb	r2, [r2, #0]
 8003f26:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f40:	e015      	b.n	8003f6e <HAL_SPI_Transmit+0x2ae>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f42:	f7fd ffb7 	bl	8001eb4 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d803      	bhi.n	8003f5a <HAL_SPI_Transmit+0x29a>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f58:	d102      	bne.n	8003f60 <HAL_SPI_Transmit+0x2a0>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d106      	bne.n	8003f6e <HAL_SPI_Transmit+0x2ae>
        {
          errorcode = HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003f6c:	e036      	b.n	8003fdc <HAL_SPI_Transmit+0x31c>
    while (hspi->TxXferCount > 0U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1b1      	bne.n	8003edc <HAL_SPI_Transmit+0x21c>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f80:	d107      	bne.n	8003f92 <HAL_SPI_Transmit+0x2d2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f90:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	6839      	ldr	r1, [r7, #0]
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 fc86 	bl	80048a8 <SPI_EndRxTxTransaction>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <HAL_SPI_Transmit+0x2e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10a      	bne.n	8003fc6 <HAL_SPI_Transmit+0x306>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	613b      	str	r3, [r7, #16]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	613b      	str	r3, [r7, #16]
 8003fc4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <HAL_SPI_Transmit+0x314>
  {
    errorcode = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	77fb      	strb	r3, [r7, #31]
 8003fd2:	e003      	b.n	8003fdc <HAL_SPI_Transmit+0x31c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003fe4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3720      	adds	r7, #32
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b092      	sub	sp, #72	@ 0x48
 8003ff2:	af02      	add	r7, sp, #8
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	607a      	str	r2, [r7, #4]
 8003ffa:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004000:	2300      	movs	r3, #0
 8004002:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004004:	2301      	movs	r3, #1
 8004006:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004008:	2300      	movs	r3, #0
 800400a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004014:	2b01      	cmp	r3, #1
 8004016:	d101      	bne.n	800401c <HAL_SPI_TransmitReceive+0x2e>
 8004018:	2302      	movs	r3, #2
 800401a:	e322      	b.n	8004662 <HAL_SPI_TransmitReceive+0x674>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004024:	f7fd ff46 	bl	8001eb4 <HAL_GetTick>
 8004028:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004030:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  tmp_mode            = hspi->Init.Mode;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	62fb      	str	r3, [r7, #44]	@ 0x2c
  initial_TxXferCount = Size;
 800403a:	887b      	ldrh	r3, [r7, #2]
 800403c:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800403e:	887b      	ldrh	r3, [r7, #2]
 8004040:	853b      	strh	r3, [r7, #40]	@ 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	627b      	str	r3, [r7, #36]	@ 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004052:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004056:	2b01      	cmp	r3, #1
 8004058:	d00f      	beq.n	800407a <HAL_SPI_TransmitReceive+0x8c>
 800405a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800405c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004060:	d107      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d103      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x84>
 800406a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800406e:	2b04      	cmp	r3, #4
 8004070:	d003      	beq.n	800407a <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8004072:	2302      	movs	r3, #2
 8004074:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    goto error;
 8004078:	e2ed      	b.n	8004656 <HAL_SPI_TransmitReceive+0x668>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_SPI_TransmitReceive+0x9e>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <HAL_SPI_TransmitReceive+0x9e>
 8004086:	887b      	ldrh	r3, [r7, #2]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d103      	bne.n	8004094 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    goto error;
 8004092:	e2e0      	b.n	8004656 <HAL_SPI_TransmitReceive+0x668>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b04      	cmp	r3, #4
 800409e:	d003      	beq.n	80040a8 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2205      	movs	r2, #5
 80040a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	887a      	ldrh	r2, [r7, #2]
 80040b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	887a      	ldrh	r2, [r7, #2]
 80040c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	887a      	ldrh	r2, [r7, #2]
 80040ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	887a      	ldrh	r2, [r7, #2]
 80040d4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040ea:	d10f      	bne.n	800410c <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800410a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004114:	d802      	bhi.n	800411c <HAL_SPI_TransmitReceive+0x12e>
 8004116:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004118:	2b01      	cmp	r3, #1
 800411a:	d908      	bls.n	800412e <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800412a:	605a      	str	r2, [r3, #4]
 800412c:	e007      	b.n	800413e <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800413c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004148:	2b40      	cmp	r3, #64	@ 0x40
 800414a:	d007      	beq.n	800415c <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800415a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004164:	f240 80ce 	bls.w	8004304 <HAL_SPI_TransmitReceive+0x316>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <HAL_SPI_TransmitReceive+0x18a>
 8004170:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004172:	2b01      	cmp	r3, #1
 8004174:	f040 80b8 	bne.w	80042e8 <HAL_SPI_TransmitReceive+0x2fa>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417c:	881a      	ldrh	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004188:	1c9a      	adds	r2, r3, #2
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f040 80a0 	bne.w	80042e8 <HAL_SPI_TransmitReceive+0x2fa>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041b0:	f040 809a 	bne.w	80042e8 <HAL_SPI_TransmitReceive+0x2fa>
      {
        /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
        if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80041b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b6:	f003 0304 	and.w	r3, r3, #4
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10c      	bne.n	80041d8 <HAL_SPI_TransmitReceive+0x1ea>
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d007      	beq.n	80041d8 <HAL_SPI_TransmitReceive+0x1ea>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041d6:	601a      	str	r2, [r3, #0]
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80041e6:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041e8:	e07e      	b.n	80042e8 <HAL_SPI_TransmitReceive+0x2fa>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d13f      	bne.n	8004278 <HAL_SPI_TransmitReceive+0x28a>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d03a      	beq.n	8004278 <HAL_SPI_TransmitReceive+0x28a>
 8004202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004204:	2b01      	cmp	r3, #1
 8004206:	d137      	bne.n	8004278 <HAL_SPI_TransmitReceive+0x28a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420c:	881a      	ldrh	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004218:	1c9a      	adds	r2, r3, #2
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004222:	b29b      	uxth	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	63fb      	str	r3, [r7, #60]	@ 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d11e      	bne.n	8004278 <HAL_SPI_TransmitReceive+0x28a>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004242:	d119      	bne.n	8004278 <HAL_SPI_TransmitReceive+0x28a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8004244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10c      	bne.n	8004268 <HAL_SPI_TransmitReceive+0x27a>
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d007      	beq.n	8004268 <HAL_SPI_TransmitReceive+0x27a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004266:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004276:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b01      	cmp	r3, #1
 8004284:	d11c      	bne.n	80042c0 <HAL_SPI_TransmitReceive+0x2d2>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d016      	beq.n	80042c0 <HAL_SPI_TransmitReceive+0x2d2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429c:	b292      	uxth	r2, r2
 800429e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a4:	1c9a      	adds	r2, r3, #2
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042bc:	2301      	movs	r3, #1
 80042be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042c0:	f7fd fdf8 	bl	8001eb4 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d80b      	bhi.n	80042e8 <HAL_SPI_TransmitReceive+0x2fa>
 80042d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042d6:	d007      	beq.n	80042e8 <HAL_SPI_TransmitReceive+0x2fa>
      {
        errorcode = HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80042e6:	e1b6      	b.n	8004656 <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f47f af7b 	bne.w	80041ea <HAL_SPI_TransmitReceive+0x1fc>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f47f af74 	bne.w	80041ea <HAL_SPI_TransmitReceive+0x1fc>
 8004302:	e12d      	b.n	8004560 <HAL_SPI_TransmitReceive+0x572>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <HAL_SPI_TransmitReceive+0x326>
 800430c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800430e:	2b01      	cmp	r3, #1
 8004310:	f040 8119 	bne.w	8004546 <HAL_SPI_TransmitReceive+0x558>
    {
      if (hspi->TxXferCount > 1U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b01      	cmp	r3, #1
 800431c:	d912      	bls.n	8004344 <HAL_SPI_TransmitReceive+0x356>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004322:	881a      	ldrh	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432e:	1c9a      	adds	r2, r3, #2
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b02      	subs	r3, #2
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004342:	e100      	b.n	8004546 <HAL_SPI_TransmitReceive+0x558>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	330c      	adds	r3, #12
 800434e:	7812      	ldrb	r2, [r2, #0]
 8004350:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004360:	b29b      	uxth	r3, r3
 8004362:	3b01      	subs	r3, #1
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800436e:	b29b      	uxth	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	f040 80e8 	bne.w	8004546 <HAL_SPI_TransmitReceive+0x558>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800437e:	f040 80e2 	bne.w	8004546 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8004382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10c      	bne.n	80043a6 <HAL_SPI_TransmitReceive+0x3b8>
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <HAL_SPI_TransmitReceive+0x3b8>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043a4:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80043b4:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043b6:	e0c6      	b.n	8004546 <HAL_SPI_TransmitReceive+0x558>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d158      	bne.n	8004478 <HAL_SPI_TransmitReceive+0x48a>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d053      	beq.n	8004478 <HAL_SPI_TransmitReceive+0x48a>
 80043d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d150      	bne.n	8004478 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->TxXferCount > 1U)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d912      	bls.n	8004406 <HAL_SPI_TransmitReceive+0x418>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e4:	881a      	ldrh	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f0:	1c9a      	adds	r2, r3, #2
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b02      	subs	r3, #2
 80043fe:	b29a      	uxth	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004404:	e012      	b.n	800442c <HAL_SPI_TransmitReceive+0x43e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	330c      	adds	r3, #12
 8004410:	7812      	ldrb	r2, [r2, #0]
 8004412:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004422:	b29b      	uxth	r3, r3
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	63fb      	str	r3, [r7, #60]	@ 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d11e      	bne.n	8004478 <HAL_SPI_TransmitReceive+0x48a>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004442:	d119      	bne.n	8004478 <HAL_SPI_TransmitReceive+0x48a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8004444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10c      	bne.n	8004468 <HAL_SPI_TransmitReceive+0x47a>
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <HAL_SPI_TransmitReceive+0x47a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004466:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004476:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b01      	cmp	r3, #1
 8004484:	d148      	bne.n	8004518 <HAL_SPI_TransmitReceive+0x52a>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d042      	beq.n	8004518 <HAL_SPI_TransmitReceive+0x52a>
      {
        if (hspi->RxXferCount > 1U)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b01      	cmp	r3, #1
 800449c:	d923      	bls.n	80044e6 <HAL_SPI_TransmitReceive+0x4f8>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a8:	b292      	uxth	r2, r2
 80044aa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b0:	1c9a      	adds	r2, r3, #2
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b02      	subs	r3, #2
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d81f      	bhi.n	8004514 <HAL_SPI_TransmitReceive+0x526>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80044e2:	605a      	str	r2, [r3, #4]
 80044e4:	e016      	b.n	8004514 <HAL_SPI_TransmitReceive+0x526>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f103 020c 	add.w	r2, r3, #12
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f2:	7812      	ldrb	r2, [r2, #0]
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004514:	2301      	movs	r3, #1
 8004516:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004518:	f7fd fccc 	bl	8001eb4 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004524:	429a      	cmp	r2, r3
 8004526:	d803      	bhi.n	8004530 <HAL_SPI_TransmitReceive+0x542>
 8004528:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800452a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800452e:	d102      	bne.n	8004536 <HAL_SPI_TransmitReceive+0x548>
 8004530:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004532:	2b00      	cmp	r3, #0
 8004534:	d107      	bne.n	8004546 <HAL_SPI_TransmitReceive+0x558>
      {
        errorcode = HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004544:	e087      	b.n	8004656 <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800454a:	b29b      	uxth	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	f47f af33 	bne.w	80043b8 <HAL_SPI_TransmitReceive+0x3ca>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	f47f af2c 	bne.w	80043b8 <HAL_SPI_TransmitReceive+0x3ca>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004564:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004568:	d146      	bne.n	80045f8 <HAL_SPI_TransmitReceive+0x60a>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800456a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004570:	2201      	movs	r2, #1
 8004572:	2101      	movs	r1, #1
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f879 	bl	800466c <SPI_WaitFlagStateUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d009      	beq.n	8004594 <HAL_SPI_TransmitReceive+0x5a6>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004584:	f043 0202 	orr.w	r2, r3, #2
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      goto error;
 8004592:	e060      	b.n	8004656 <HAL_SPI_TransmitReceive+0x668>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800459c:	d105      	bne.n	80045aa <HAL_SPI_TransmitReceive+0x5bc>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	e026      	b.n	80045f8 <HAL_SPI_TransmitReceive+0x60a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	330c      	adds	r3, #12
 80045b0:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80045ba:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d119      	bne.n	80045f8 <HAL_SPI_TransmitReceive+0x60a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80045c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045ca:	2201      	movs	r2, #1
 80045cc:	2101      	movs	r1, #1
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f84c 	bl	800466c <SPI_WaitFlagStateUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <HAL_SPI_TransmitReceive+0x600>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045de:	f043 0202 	orr.w	r2, r3, #2
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	661a      	str	r2, [r3, #96]	@ 0x60
          errorcode = HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
          goto error;
 80045ec:	e033      	b.n	8004656 <HAL_SPI_TransmitReceive+0x668>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80045f6:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 0310 	and.w	r3, r3, #16
 8004602:	2b10      	cmp	r3, #16
 8004604:	d10d      	bne.n	8004622 <HAL_SPI_TransmitReceive+0x634>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800460a:	f043 0202 	orr.w	r2, r3, #2
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800461a:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004622:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004624:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f93e 	bl	80048a8 <SPI_EndRxTxTransaction>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d005      	beq.n	800463e <HAL_SPI_TransmitReceive+0x650>
  {
    errorcode = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2220      	movs	r2, #32
 800463c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_SPI_TransmitReceive+0x660>
  {
    errorcode = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800464c:	e003      	b.n	8004656 <HAL_SPI_TransmitReceive+0x668>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800465e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
}
 8004662:	4618      	mov	r0, r3
 8004664:	3740      	adds	r7, #64	@ 0x40
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	603b      	str	r3, [r7, #0]
 8004678:	4613      	mov	r3, r2
 800467a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800467c:	f7fd fc1a 	bl	8001eb4 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004684:	1a9b      	subs	r3, r3, r2
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	4413      	add	r3, r2
 800468a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800468c:	f7fd fc12 	bl	8001eb4 <HAL_GetTick>
 8004690:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004692:	4b39      	ldr	r3, [pc, #228]	@ (8004778 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	015b      	lsls	r3, r3, #5
 8004698:	0d1b      	lsrs	r3, r3, #20
 800469a:	69fa      	ldr	r2, [r7, #28]
 800469c:	fb02 f303 	mul.w	r3, r2, r3
 80046a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046a2:	e054      	b.n	800474e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046aa:	d050      	beq.n	800474e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046ac:	f7fd fc02 	bl	8001eb4 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	69fa      	ldr	r2, [r7, #28]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d902      	bls.n	80046c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d13d      	bne.n	800473e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80046d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046da:	d111      	bne.n	8004700 <SPI_WaitFlagStateUntilTimeout+0x94>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046e4:	d004      	beq.n	80046f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ee:	d107      	bne.n	8004700 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004708:	d10f      	bne.n	800472a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004728:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e017      	b.n	800476e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	3b01      	subs	r3, #1
 800474c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4013      	ands	r3, r2
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	429a      	cmp	r2, r3
 800475c:	bf0c      	ite	eq
 800475e:	2301      	moveq	r3, #1
 8004760:	2300      	movne	r3, #0
 8004762:	b2db      	uxtb	r3, r3
 8004764:	461a      	mov	r2, r3
 8004766:	79fb      	ldrb	r3, [r7, #7]
 8004768:	429a      	cmp	r2, r3
 800476a:	d19b      	bne.n	80046a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3720      	adds	r7, #32
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20000000 	.word	0x20000000

0800477c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08a      	sub	sp, #40	@ 0x28
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800478a:	2300      	movs	r3, #0
 800478c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800478e:	f7fd fb91 	bl	8001eb4 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004796:	1a9b      	subs	r3, r3, r2
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	4413      	add	r3, r2
 800479c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800479e:	f7fd fb89 	bl	8001eb4 <HAL_GetTick>
 80047a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	330c      	adds	r3, #12
 80047aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80047ac:	4b3d      	ldr	r3, [pc, #244]	@ (80048a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	4613      	mov	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	00da      	lsls	r2, r3, #3
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	0d1b      	lsrs	r3, r3, #20
 80047bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047be:	fb02 f303 	mul.w	r3, r2, r3
 80047c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80047c4:	e060      	b.n	8004888 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80047cc:	d107      	bne.n	80047de <SPI_WaitFifoStateUntilTimeout+0x62>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d104      	bne.n	80047de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80047dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047e4:	d050      	beq.n	8004888 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047e6:	f7fd fb65 	bl	8001eb4 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d902      	bls.n	80047fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80047f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d13d      	bne.n	8004878 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800480a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004814:	d111      	bne.n	800483a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800481e:	d004      	beq.n	800482a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004828:	d107      	bne.n	800483a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004838:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004842:	d10f      	bne.n	8004864 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004862:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e010      	b.n	800489a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	3b01      	subs	r3, #1
 8004886:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	4013      	ands	r3, r2
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	429a      	cmp	r2, r3
 8004896:	d196      	bne.n	80047c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3728      	adds	r7, #40	@ 0x28
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20000000 	.word	0x20000000

080048a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af02      	add	r7, sp, #8
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f7ff ff5b 	bl	800477c <SPI_WaitFifoStateUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d007      	beq.n	80048dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048d0:	f043 0220 	orr.w	r2, r3, #32
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e027      	b.n	800492c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2200      	movs	r2, #0
 80048e4:	2180      	movs	r1, #128	@ 0x80
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f7ff fec0 	bl	800466c <SPI_WaitFlagStateUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d007      	beq.n	8004902 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048f6:	f043 0220 	orr.w	r2, r3, #32
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e014      	b.n	800492c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2200      	movs	r2, #0
 800490a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f7ff ff34 	bl	800477c <SPI_WaitFifoStateUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d007      	beq.n	800492a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800491e:	f043 0220 	orr.w	r2, r3, #32
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e000      	b.n	800492c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <LL_RCC_GetUSARTClockSource>:
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800493c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004940:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	401a      	ands	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	041b      	lsls	r3, r3, #16
 800494c:	4313      	orrs	r3, r2
}
 800494e:	4618      	mov	r0, r3
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr

08004958 <LL_RCC_GetLPUARTClockSource>:
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004960:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004964:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4013      	ands	r3, r2
}
 800496c:	4618      	mov	r0, r3
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	bc80      	pop	{r7}
 8004974:	4770      	bx	lr

08004976 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b082      	sub	sp, #8
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e042      	b.n	8004a0e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7fd f87a 	bl	8001a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2224      	movs	r2, #36	@ 0x24
 80049a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0201 	bic.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 fea3 	bl	800570c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fc2c 	bl	8005224 <UART_SetConfig>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e01b      	b.n	8004a0e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0201 	orr.w	r2, r2, #1
 8004a04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 ff21 	bl	800584e <UART_CheckIdleState>
 8004a0c:	4603      	mov	r3, r0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b08a      	sub	sp, #40	@ 0x28
 8004a1a:	af02      	add	r7, sp, #8
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	60b9      	str	r1, [r7, #8]
 8004a20:	603b      	str	r3, [r7, #0]
 8004a22:	4613      	mov	r3, r2
 8004a24:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	f040 80b1 	bne.w	8004b94 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <HAL_UART_Receive+0x28>
 8004a38:	88fb      	ldrh	r3, [r7, #6]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e0a9      	b.n	8004b96 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2222      	movs	r2, #34	@ 0x22
 8004a4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a58:	f7fd fa2c 	bl	8001eb4 <HAL_GetTick>
 8004a5c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	88fa      	ldrh	r2, [r7, #6]
 8004a62:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	88fa      	ldrh	r2, [r7, #6]
 8004a6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a76:	d10e      	bne.n	8004a96 <HAL_UART_Receive+0x80>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d105      	bne.n	8004a8c <HAL_UART_Receive+0x76>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004a86:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004a8a:	e02d      	b.n	8004ae8 <HAL_UART_Receive+0xd2>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	22ff      	movs	r2, #255	@ 0xff
 8004a90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004a94:	e028      	b.n	8004ae8 <HAL_UART_Receive+0xd2>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10d      	bne.n	8004aba <HAL_UART_Receive+0xa4>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d104      	bne.n	8004ab0 <HAL_UART_Receive+0x9a>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	22ff      	movs	r2, #255	@ 0xff
 8004aaa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004aae:	e01b      	b.n	8004ae8 <HAL_UART_Receive+0xd2>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	227f      	movs	r2, #127	@ 0x7f
 8004ab4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004ab8:	e016      	b.n	8004ae8 <HAL_UART_Receive+0xd2>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ac2:	d10d      	bne.n	8004ae0 <HAL_UART_Receive+0xca>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d104      	bne.n	8004ad6 <HAL_UART_Receive+0xc0>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	227f      	movs	r2, #127	@ 0x7f
 8004ad0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004ad4:	e008      	b.n	8004ae8 <HAL_UART_Receive+0xd2>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	223f      	movs	r2, #63	@ 0x3f
 8004ada:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004ade:	e003      	b.n	8004ae8 <HAL_UART_Receive+0xd2>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004aee:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004af8:	d108      	bne.n	8004b0c <HAL_UART_Receive+0xf6>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d104      	bne.n	8004b0c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004b02:	2300      	movs	r3, #0
 8004b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	e003      	b.n	8004b14 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004b14:	e032      	b.n	8004b7c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2120      	movs	r1, #32
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 fee2 	bl	80058ea <UART_WaitOnFlagUntilTimeout>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e032      	b.n	8004b96 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10c      	bne.n	8004b50 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	8a7b      	ldrh	r3, [r7, #18]
 8004b40:	4013      	ands	r3, r2
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	3302      	adds	r3, #2
 8004b4c:	61bb      	str	r3, [r7, #24]
 8004b4e:	e00c      	b.n	8004b6a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	8a7b      	ldrh	r3, [r7, #18]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	3301      	adds	r3, #1
 8004b68:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1c6      	bne.n	8004b16 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8004b90:	2300      	movs	r3, #0
 8004b92:	e000      	b.n	8004b96 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004b94:	2302      	movs	r3, #2
  }
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3720      	adds	r7, #32
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
	...

08004ba0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b0ba      	sub	sp, #232	@ 0xe8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004bc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004bca:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004bce:	4013      	ands	r3, r2
 8004bd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004bd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d11b      	bne.n	8004c14 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d015      	beq.n	8004c14 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bec:	f003 0320 	and.w	r3, r3, #32
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d105      	bne.n	8004c00 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004bf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d009      	beq.n	8004c14 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 82e3 	beq.w	80051d0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	4798      	blx	r3
      }
      return;
 8004c12:	e2dd      	b.n	80051d0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004c14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 8123 	beq.w	8004e64 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004c1e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004c22:	4b8d      	ldr	r3, [pc, #564]	@ (8004e58 <HAL_UART_IRQHandler+0x2b8>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004c2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004c2e:	4b8b      	ldr	r3, [pc, #556]	@ (8004e5c <HAL_UART_IRQHandler+0x2bc>)
 8004c30:	4013      	ands	r3, r2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 8116 	beq.w	8004e64 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d011      	beq.n	8004c68 <HAL_UART_IRQHandler+0xc8>
 8004c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00b      	beq.n	8004c68 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2201      	movs	r2, #1
 8004c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c5e:	f043 0201 	orr.w	r2, r3, #1
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d011      	beq.n	8004c98 <HAL_UART_IRQHandler+0xf8>
 8004c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00b      	beq.n	8004c98 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2202      	movs	r2, #2
 8004c86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8e:	f043 0204 	orr.w	r2, r3, #4
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d011      	beq.n	8004cc8 <HAL_UART_IRQHandler+0x128>
 8004ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00b      	beq.n	8004cc8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2204      	movs	r2, #4
 8004cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cbe:	f043 0202 	orr.w	r2, r3, #2
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d017      	beq.n	8004d04 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cd8:	f003 0320 	and.w	r3, r3, #32
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d105      	bne.n	8004cec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004ce0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004ce4:	4b5c      	ldr	r3, [pc, #368]	@ (8004e58 <HAL_UART_IRQHandler+0x2b8>)
 8004ce6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00b      	beq.n	8004d04 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfa:	f043 0208 	orr.w	r2, r3, #8
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d012      	beq.n	8004d36 <HAL_UART_IRQHandler+0x196>
 8004d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00c      	beq.n	8004d36 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2c:	f043 0220 	orr.w	r2, r3, #32
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 8249 	beq.w	80051d4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d013      	beq.n	8004d76 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d105      	bne.n	8004d66 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d007      	beq.n	8004d76 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d8a:	2b40      	cmp	r3, #64	@ 0x40
 8004d8c:	d005      	beq.n	8004d9a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d054      	beq.n	8004e44 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fe73 	bl	8005a86 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004daa:	2b40      	cmp	r3, #64	@ 0x40
 8004dac:	d146      	bne.n	8004e3c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3308      	adds	r3, #8
 8004db4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004dbc:	e853 3f00 	ldrex	r3, [r3]
 8004dc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3308      	adds	r3, #8
 8004dd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004dda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004dde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004de6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004dea:	e841 2300 	strex	r3, r2, [r1]
 8004dee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004df2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1d9      	bne.n	8004dae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d017      	beq.n	8004e34 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e0a:	4a15      	ldr	r2, [pc, #84]	@ (8004e60 <HAL_UART_IRQHandler+0x2c0>)
 8004e0c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fd f9c0 	bl	800219a <HAL_DMA_Abort_IT>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d019      	beq.n	8004e54 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004e2e:	4610      	mov	r0, r2
 8004e30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e32:	e00f      	b.n	8004e54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f9e0 	bl	80051fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e3a:	e00b      	b.n	8004e54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f9dc 	bl	80051fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e42:	e007      	b.n	8004e54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f9d8 	bl	80051fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004e52:	e1bf      	b.n	80051d4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e54:	bf00      	nop
    return;
 8004e56:	e1bd      	b.n	80051d4 <HAL_UART_IRQHandler+0x634>
 8004e58:	10000001 	.word	0x10000001
 8004e5c:	04000120 	.word	0x04000120
 8004e60:	08005b51 	.word	0x08005b51

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	f040 8153 	bne.w	8005114 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e72:	f003 0310 	and.w	r3, r3, #16
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 814c 	beq.w	8005114 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e80:	f003 0310 	and.w	r3, r3, #16
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 8145 	beq.w	8005114 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2210      	movs	r2, #16
 8004e90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e9c:	2b40      	cmp	r3, #64	@ 0x40
 8004e9e:	f040 80bb 	bne.w	8005018 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004eb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 818f 	beq.w	80051d8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ec0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	f080 8187 	bcs.w	80051d8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ed0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0320 	and.w	r3, r3, #32
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f040 8087 	bne.w	8004ff6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ef4:	e853 3f00 	ldrex	r3, [r3]
 8004ef8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004f12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f16:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1da      	bne.n	8004ee8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3308      	adds	r3, #8
 8004f38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f3c:	e853 3f00 	ldrex	r3, [r3]
 8004f40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f44:	f023 0301 	bic.w	r3, r3, #1
 8004f48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3308      	adds	r3, #8
 8004f52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f56:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e1      	bne.n	8004f32 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3308      	adds	r3, #8
 8004f74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f78:	e853 3f00 	ldrex	r3, [r3]
 8004f7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004fa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e3      	bne.n	8004f6e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fbc:	e853 3f00 	ldrex	r3, [r3]
 8004fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004fc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fc4:	f023 0310 	bic.w	r3, r3, #16
 8004fc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004fd8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004fdc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004fe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1e4      	bne.n	8004fb4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fd f874 	bl	80020de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005008:	b29b      	uxth	r3, r3
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	b29b      	uxth	r3, r3
 800500e:	4619      	mov	r1, r3
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f8fb 	bl	800520c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005016:	e0df      	b.n	80051d8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005024:	b29b      	uxth	r3, r3
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005032:	b29b      	uxth	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 80d1 	beq.w	80051dc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800503a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 80cc 	beq.w	80051dc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800504c:	e853 3f00 	ldrex	r3, [r3]
 8005050:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005054:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005058:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005066:	647b      	str	r3, [r7, #68]	@ 0x44
 8005068:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800506c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1e4      	bne.n	8005044 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	3308      	adds	r3, #8
 8005080:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	e853 3f00 	ldrex	r3, [r3]
 8005088:	623b      	str	r3, [r7, #32]
   return(result);
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005090:	f023 0301 	bic.w	r3, r3, #1
 8005094:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3308      	adds	r3, #8
 800509e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80050a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80050a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e1      	bne.n	800507a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	e853 3f00 	ldrex	r3, [r3]
 80050d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0310 	bic.w	r3, r3, #16
 80050de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80050ec:	61fb      	str	r3, [r7, #28]
 80050ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	69b9      	ldr	r1, [r7, #24]
 80050f2:	69fa      	ldr	r2, [r7, #28]
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	617b      	str	r3, [r7, #20]
   return(result);
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e4      	bne.n	80050ca <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005106:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800510a:	4619      	mov	r1, r3
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f87d 	bl	800520c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005112:	e063      	b.n	80051dc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005118:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00e      	beq.n	800513e <HAL_UART_IRQHandler+0x59e>
 8005120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005124:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d008      	beq.n	800513e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005134:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 fd4b 	bl	8005bd2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800513c:	e051      	b.n	80051e2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800513e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005146:	2b00      	cmp	r3, #0
 8005148:	d014      	beq.n	8005174 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800514a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800514e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005152:	2b00      	cmp	r3, #0
 8005154:	d105      	bne.n	8005162 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800515a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d008      	beq.n	8005174 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005166:	2b00      	cmp	r3, #0
 8005168:	d03a      	beq.n	80051e0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	4798      	blx	r3
    }
    return;
 8005172:	e035      	b.n	80051e0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d009      	beq.n	8005194 <HAL_UART_IRQHandler+0x5f4>
 8005180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 fcf5 	bl	8005b7c <UART_EndTransmit_IT>
    return;
 8005192:	e026      	b.n	80051e2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005198:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d009      	beq.n	80051b4 <HAL_UART_IRQHandler+0x614>
 80051a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d003      	beq.n	80051b4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fd22 	bl	8005bf6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051b2:	e016      	b.n	80051e2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80051b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d010      	beq.n	80051e2 <HAL_UART_IRQHandler+0x642>
 80051c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	da0c      	bge.n	80051e2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fd0b 	bl	8005be4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051ce:	e008      	b.n	80051e2 <HAL_UART_IRQHandler+0x642>
      return;
 80051d0:	bf00      	nop
 80051d2:	e006      	b.n	80051e2 <HAL_UART_IRQHandler+0x642>
    return;
 80051d4:	bf00      	nop
 80051d6:	e004      	b.n	80051e2 <HAL_UART_IRQHandler+0x642>
      return;
 80051d8:	bf00      	nop
 80051da:	e002      	b.n	80051e2 <HAL_UART_IRQHandler+0x642>
      return;
 80051dc:	bf00      	nop
 80051de:	e000      	b.n	80051e2 <HAL_UART_IRQHandler+0x642>
    return;
 80051e0:	bf00      	nop
  }
}
 80051e2:	37e8      	adds	r7, #232	@ 0xe8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr

080051fa <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	bc80      	pop	{r7}
 800520a:	4770      	bx	lr

0800520c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	460b      	mov	r3, r1
 8005216:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	bc80      	pop	{r7}
 8005220:	4770      	bx	lr
	...

08005224 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005228:	b08c      	sub	sp, #48	@ 0x30
 800522a:	af00      	add	r7, sp, #0
 800522c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	431a      	orrs	r2, r3
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	431a      	orrs	r2, r3
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	4313      	orrs	r3, r2
 800524a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	4b94      	ldr	r3, [pc, #592]	@ (80054a4 <UART_SetConfig+0x280>)
 8005254:	4013      	ands	r3, r2
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	6812      	ldr	r2, [r2, #0]
 800525a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800525c:	430b      	orrs	r3, r1
 800525e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a89      	ldr	r2, [pc, #548]	@ (80054a8 <UART_SetConfig+0x284>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d004      	beq.n	8005290 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800528c:	4313      	orrs	r3, r2
 800528e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800529a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	6812      	ldr	r2, [r2, #0]
 80052a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052a4:	430b      	orrs	r3, r1
 80052a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ae:	f023 010f 	bic.w	r1, r3, #15
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a7a      	ldr	r2, [pc, #488]	@ (80054ac <UART_SetConfig+0x288>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d127      	bne.n	8005318 <UART_SetConfig+0xf4>
 80052c8:	2003      	movs	r0, #3
 80052ca:	f7ff fb33 	bl	8004934 <LL_RCC_GetUSARTClockSource>
 80052ce:	4603      	mov	r3, r0
 80052d0:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d81b      	bhi.n	8005310 <UART_SetConfig+0xec>
 80052d8:	a201      	add	r2, pc, #4	@ (adr r2, 80052e0 <UART_SetConfig+0xbc>)
 80052da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052de:	bf00      	nop
 80052e0:	080052f1 	.word	0x080052f1
 80052e4:	08005301 	.word	0x08005301
 80052e8:	080052f9 	.word	0x080052f9
 80052ec:	08005309 	.word	0x08005309
 80052f0:	2301      	movs	r3, #1
 80052f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052f6:	e080      	b.n	80053fa <UART_SetConfig+0x1d6>
 80052f8:	2302      	movs	r3, #2
 80052fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052fe:	e07c      	b.n	80053fa <UART_SetConfig+0x1d6>
 8005300:	2304      	movs	r3, #4
 8005302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005306:	e078      	b.n	80053fa <UART_SetConfig+0x1d6>
 8005308:	2308      	movs	r3, #8
 800530a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800530e:	e074      	b.n	80053fa <UART_SetConfig+0x1d6>
 8005310:	2310      	movs	r3, #16
 8005312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005316:	e070      	b.n	80053fa <UART_SetConfig+0x1d6>
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a64      	ldr	r2, [pc, #400]	@ (80054b0 <UART_SetConfig+0x28c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d138      	bne.n	8005394 <UART_SetConfig+0x170>
 8005322:	200c      	movs	r0, #12
 8005324:	f7ff fb06 	bl	8004934 <LL_RCC_GetUSARTClockSource>
 8005328:	4603      	mov	r3, r0
 800532a:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800532e:	2b0c      	cmp	r3, #12
 8005330:	d82c      	bhi.n	800538c <UART_SetConfig+0x168>
 8005332:	a201      	add	r2, pc, #4	@ (adr r2, 8005338 <UART_SetConfig+0x114>)
 8005334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005338:	0800536d 	.word	0x0800536d
 800533c:	0800538d 	.word	0x0800538d
 8005340:	0800538d 	.word	0x0800538d
 8005344:	0800538d 	.word	0x0800538d
 8005348:	0800537d 	.word	0x0800537d
 800534c:	0800538d 	.word	0x0800538d
 8005350:	0800538d 	.word	0x0800538d
 8005354:	0800538d 	.word	0x0800538d
 8005358:	08005375 	.word	0x08005375
 800535c:	0800538d 	.word	0x0800538d
 8005360:	0800538d 	.word	0x0800538d
 8005364:	0800538d 	.word	0x0800538d
 8005368:	08005385 	.word	0x08005385
 800536c:	2300      	movs	r3, #0
 800536e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005372:	e042      	b.n	80053fa <UART_SetConfig+0x1d6>
 8005374:	2302      	movs	r3, #2
 8005376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800537a:	e03e      	b.n	80053fa <UART_SetConfig+0x1d6>
 800537c:	2304      	movs	r3, #4
 800537e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005382:	e03a      	b.n	80053fa <UART_SetConfig+0x1d6>
 8005384:	2308      	movs	r3, #8
 8005386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800538a:	e036      	b.n	80053fa <UART_SetConfig+0x1d6>
 800538c:	2310      	movs	r3, #16
 800538e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005392:	e032      	b.n	80053fa <UART_SetConfig+0x1d6>
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a43      	ldr	r2, [pc, #268]	@ (80054a8 <UART_SetConfig+0x284>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d12a      	bne.n	80053f4 <UART_SetConfig+0x1d0>
 800539e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80053a2:	f7ff fad9 	bl	8004958 <LL_RCC_GetLPUARTClockSource>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80053ac:	d01a      	beq.n	80053e4 <UART_SetConfig+0x1c0>
 80053ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80053b2:	d81b      	bhi.n	80053ec <UART_SetConfig+0x1c8>
 80053b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053b8:	d00c      	beq.n	80053d4 <UART_SetConfig+0x1b0>
 80053ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053be:	d815      	bhi.n	80053ec <UART_SetConfig+0x1c8>
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d003      	beq.n	80053cc <UART_SetConfig+0x1a8>
 80053c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053c8:	d008      	beq.n	80053dc <UART_SetConfig+0x1b8>
 80053ca:	e00f      	b.n	80053ec <UART_SetConfig+0x1c8>
 80053cc:	2300      	movs	r3, #0
 80053ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053d2:	e012      	b.n	80053fa <UART_SetConfig+0x1d6>
 80053d4:	2302      	movs	r3, #2
 80053d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053da:	e00e      	b.n	80053fa <UART_SetConfig+0x1d6>
 80053dc:	2304      	movs	r3, #4
 80053de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053e2:	e00a      	b.n	80053fa <UART_SetConfig+0x1d6>
 80053e4:	2308      	movs	r3, #8
 80053e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ea:	e006      	b.n	80053fa <UART_SetConfig+0x1d6>
 80053ec:	2310      	movs	r3, #16
 80053ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053f2:	e002      	b.n	80053fa <UART_SetConfig+0x1d6>
 80053f4:	2310      	movs	r3, #16
 80053f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a2a      	ldr	r2, [pc, #168]	@ (80054a8 <UART_SetConfig+0x284>)
 8005400:	4293      	cmp	r3, r2
 8005402:	f040 80a4 	bne.w	800554e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005406:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800540a:	2b08      	cmp	r3, #8
 800540c:	d823      	bhi.n	8005456 <UART_SetConfig+0x232>
 800540e:	a201      	add	r2, pc, #4	@ (adr r2, 8005414 <UART_SetConfig+0x1f0>)
 8005410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005414:	08005439 	.word	0x08005439
 8005418:	08005457 	.word	0x08005457
 800541c:	08005441 	.word	0x08005441
 8005420:	08005457 	.word	0x08005457
 8005424:	08005447 	.word	0x08005447
 8005428:	08005457 	.word	0x08005457
 800542c:	08005457 	.word	0x08005457
 8005430:	08005457 	.word	0x08005457
 8005434:	0800544f 	.word	0x0800544f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005438:	f7fe f88a 	bl	8003550 <HAL_RCC_GetPCLK1Freq>
 800543c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800543e:	e010      	b.n	8005462 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005440:	4b1c      	ldr	r3, [pc, #112]	@ (80054b4 <UART_SetConfig+0x290>)
 8005442:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005444:	e00d      	b.n	8005462 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005446:	f7fd ffcf 	bl	80033e8 <HAL_RCC_GetSysClockFreq>
 800544a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800544c:	e009      	b.n	8005462 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800544e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005452:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005454:	e005      	b.n	8005462 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005460:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 8137 	beq.w	80056d8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546e:	4a12      	ldr	r2, [pc, #72]	@ (80054b8 <UART_SetConfig+0x294>)
 8005470:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005474:	461a      	mov	r2, r3
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	fbb3 f3f2 	udiv	r3, r3, r2
 800547c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	4613      	mov	r3, r2
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	4413      	add	r3, r2
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	429a      	cmp	r2, r3
 800548c:	d305      	bcc.n	800549a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	429a      	cmp	r2, r3
 8005498:	d910      	bls.n	80054bc <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80054a0:	e11a      	b.n	80056d8 <UART_SetConfig+0x4b4>
 80054a2:	bf00      	nop
 80054a4:	cfff69f3 	.word	0xcfff69f3
 80054a8:	40008000 	.word	0x40008000
 80054ac:	40013800 	.word	0x40013800
 80054b0:	40004400 	.word	0x40004400
 80054b4:	00f42400 	.word	0x00f42400
 80054b8:	0800c090 	.word	0x0800c090
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054be:	2200      	movs	r2, #0
 80054c0:	60bb      	str	r3, [r7, #8]
 80054c2:	60fa      	str	r2, [r7, #12]
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c8:	4a8e      	ldr	r2, [pc, #568]	@ (8005704 <UART_SetConfig+0x4e0>)
 80054ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	2200      	movs	r2, #0
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	607a      	str	r2, [r7, #4]
 80054d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054de:	f7fb fc99 	bl	8000e14 <__aeabi_uldivmod>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	4610      	mov	r0, r2
 80054e8:	4619      	mov	r1, r3
 80054ea:	f04f 0200 	mov.w	r2, #0
 80054ee:	f04f 0300 	mov.w	r3, #0
 80054f2:	020b      	lsls	r3, r1, #8
 80054f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054f8:	0202      	lsls	r2, r0, #8
 80054fa:	6979      	ldr	r1, [r7, #20]
 80054fc:	6849      	ldr	r1, [r1, #4]
 80054fe:	0849      	lsrs	r1, r1, #1
 8005500:	2000      	movs	r0, #0
 8005502:	460c      	mov	r4, r1
 8005504:	4605      	mov	r5, r0
 8005506:	eb12 0804 	adds.w	r8, r2, r4
 800550a:	eb43 0905 	adc.w	r9, r3, r5
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	469a      	mov	sl, r3
 8005516:	4693      	mov	fp, r2
 8005518:	4652      	mov	r2, sl
 800551a:	465b      	mov	r3, fp
 800551c:	4640      	mov	r0, r8
 800551e:	4649      	mov	r1, r9
 8005520:	f7fb fc78 	bl	8000e14 <__aeabi_uldivmod>
 8005524:	4602      	mov	r2, r0
 8005526:	460b      	mov	r3, r1
 8005528:	4613      	mov	r3, r2
 800552a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005532:	d308      	bcc.n	8005546 <UART_SetConfig+0x322>
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800553a:	d204      	bcs.n	8005546 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6a3a      	ldr	r2, [r7, #32]
 8005542:	60da      	str	r2, [r3, #12]
 8005544:	e0c8      	b.n	80056d8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800554c:	e0c4      	b.n	80056d8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005556:	d167      	bne.n	8005628 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005558:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800555c:	2b08      	cmp	r3, #8
 800555e:	d828      	bhi.n	80055b2 <UART_SetConfig+0x38e>
 8005560:	a201      	add	r2, pc, #4	@ (adr r2, 8005568 <UART_SetConfig+0x344>)
 8005562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005566:	bf00      	nop
 8005568:	0800558d 	.word	0x0800558d
 800556c:	08005595 	.word	0x08005595
 8005570:	0800559d 	.word	0x0800559d
 8005574:	080055b3 	.word	0x080055b3
 8005578:	080055a3 	.word	0x080055a3
 800557c:	080055b3 	.word	0x080055b3
 8005580:	080055b3 	.word	0x080055b3
 8005584:	080055b3 	.word	0x080055b3
 8005588:	080055ab 	.word	0x080055ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800558c:	f7fd ffe0 	bl	8003550 <HAL_RCC_GetPCLK1Freq>
 8005590:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005592:	e014      	b.n	80055be <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005594:	f7fd ffee 	bl	8003574 <HAL_RCC_GetPCLK2Freq>
 8005598:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800559a:	e010      	b.n	80055be <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800559c:	4b5a      	ldr	r3, [pc, #360]	@ (8005708 <UART_SetConfig+0x4e4>)
 800559e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055a0:	e00d      	b.n	80055be <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055a2:	f7fd ff21 	bl	80033e8 <HAL_RCC_GetSysClockFreq>
 80055a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055a8:	e009      	b.n	80055be <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055b0:	e005      	b.n	80055be <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80055bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 8089 	beq.w	80056d8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ca:	4a4e      	ldr	r2, [pc, #312]	@ (8005704 <UART_SetConfig+0x4e0>)
 80055cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055d0:	461a      	mov	r2, r3
 80055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80055d8:	005a      	lsls	r2, r3, #1
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	085b      	lsrs	r3, r3, #1
 80055e0:	441a      	add	r2, r3
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	2b0f      	cmp	r3, #15
 80055f0:	d916      	bls.n	8005620 <UART_SetConfig+0x3fc>
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055f8:	d212      	bcs.n	8005620 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	f023 030f 	bic.w	r3, r3, #15
 8005602:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	085b      	lsrs	r3, r3, #1
 8005608:	b29b      	uxth	r3, r3
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	b29a      	uxth	r2, r3
 8005610:	8bfb      	ldrh	r3, [r7, #30]
 8005612:	4313      	orrs	r3, r2
 8005614:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	8bfa      	ldrh	r2, [r7, #30]
 800561c:	60da      	str	r2, [r3, #12]
 800561e:	e05b      	b.n	80056d8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005626:	e057      	b.n	80056d8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005628:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800562c:	2b08      	cmp	r3, #8
 800562e:	d828      	bhi.n	8005682 <UART_SetConfig+0x45e>
 8005630:	a201      	add	r2, pc, #4	@ (adr r2, 8005638 <UART_SetConfig+0x414>)
 8005632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005636:	bf00      	nop
 8005638:	0800565d 	.word	0x0800565d
 800563c:	08005665 	.word	0x08005665
 8005640:	0800566d 	.word	0x0800566d
 8005644:	08005683 	.word	0x08005683
 8005648:	08005673 	.word	0x08005673
 800564c:	08005683 	.word	0x08005683
 8005650:	08005683 	.word	0x08005683
 8005654:	08005683 	.word	0x08005683
 8005658:	0800567b 	.word	0x0800567b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800565c:	f7fd ff78 	bl	8003550 <HAL_RCC_GetPCLK1Freq>
 8005660:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005662:	e014      	b.n	800568e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005664:	f7fd ff86 	bl	8003574 <HAL_RCC_GetPCLK2Freq>
 8005668:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800566a:	e010      	b.n	800568e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800566c:	4b26      	ldr	r3, [pc, #152]	@ (8005708 <UART_SetConfig+0x4e4>)
 800566e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005670:	e00d      	b.n	800568e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005672:	f7fd feb9 	bl	80033e8 <HAL_RCC_GetSysClockFreq>
 8005676:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005678:	e009      	b.n	800568e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800567a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800567e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005680:	e005      	b.n	800568e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005682:	2300      	movs	r3, #0
 8005684:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800568c:	bf00      	nop
    }

    if (pclk != 0U)
 800568e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005690:	2b00      	cmp	r3, #0
 8005692:	d021      	beq.n	80056d8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005698:	4a1a      	ldr	r2, [pc, #104]	@ (8005704 <UART_SetConfig+0x4e0>)
 800569a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800569e:	461a      	mov	r2, r3
 80056a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	085b      	lsrs	r3, r3, #1
 80056ac:	441a      	add	r2, r3
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	2b0f      	cmp	r3, #15
 80056bc:	d909      	bls.n	80056d2 <UART_SetConfig+0x4ae>
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056c4:	d205      	bcs.n	80056d2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	60da      	str	r2, [r3, #12]
 80056d0:	e002      	b.n	80056d8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	2201      	movs	r2, #1
 80056dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2200      	movs	r2, #0
 80056ec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2200      	movs	r2, #0
 80056f2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80056f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3730      	adds	r7, #48	@ 0x30
 80056fc:	46bd      	mov	sp, r7
 80056fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005702:	bf00      	nop
 8005704:	0800c090 	.word	0x0800c090
 8005708:	00f42400 	.word	0x00f42400

0800570c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005718:	f003 0308 	and.w	r3, r3, #8
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00a      	beq.n	8005736 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00a      	beq.n	800577a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800577e:	f003 0304 	and.w	r3, r3, #4
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a0:	f003 0310 	and.w	r3, r3, #16
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00a      	beq.n	80057be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c2:	f003 0320 	and.w	r3, r3, #32
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d01a      	beq.n	8005822 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005806:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800580a:	d10a      	bne.n	8005822 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	605a      	str	r2, [r3, #4]
  }
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	bc80      	pop	{r7}
 800584c:	4770      	bx	lr

0800584e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b086      	sub	sp, #24
 8005852:	af02      	add	r7, sp, #8
 8005854:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800585e:	f7fc fb29 	bl	8001eb4 <HAL_GetTick>
 8005862:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0308 	and.w	r3, r3, #8
 800586e:	2b08      	cmp	r3, #8
 8005870:	d10e      	bne.n	8005890 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005872:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f832 	bl	80058ea <UART_WaitOnFlagUntilTimeout>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e028      	b.n	80058e2 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b04      	cmp	r3, #4
 800589c:	d10e      	bne.n	80058bc <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800589e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f81c 	bl	80058ea <UART_WaitOnFlagUntilTimeout>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e012      	b.n	80058e2 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b09c      	sub	sp, #112	@ 0x70
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	60f8      	str	r0, [r7, #12]
 80058f2:	60b9      	str	r1, [r7, #8]
 80058f4:	603b      	str	r3, [r7, #0]
 80058f6:	4613      	mov	r3, r2
 80058f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058fa:	e0af      	b.n	8005a5c <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005902:	f000 80ab 	beq.w	8005a5c <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005906:	f7fc fad5 	bl	8001eb4 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005912:	429a      	cmp	r2, r3
 8005914:	d302      	bcc.n	800591c <UART_WaitOnFlagUntilTimeout+0x32>
 8005916:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005918:	2b00      	cmp	r3, #0
 800591a:	d140      	bne.n	800599e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005922:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005924:	e853 3f00 	ldrex	r3, [r3]
 8005928:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800592a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800592c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005930:	667b      	str	r3, [r7, #100]	@ 0x64
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800593a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800593c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005940:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005942:	e841 2300 	strex	r3, r2, [r1]
 8005946:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005948:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1e6      	bne.n	800591c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3308      	adds	r3, #8
 8005954:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800595e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005960:	f023 0301 	bic.w	r3, r3, #1
 8005964:	663b      	str	r3, [r7, #96]	@ 0x60
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3308      	adds	r3, #8
 800596c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800596e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005970:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005974:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800597c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e5      	bne.n	800594e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2220      	movs	r2, #32
 8005986:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2220      	movs	r2, #32
 800598e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e06f      	b.n	8005a7e <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d057      	beq.n	8005a5c <UART_WaitOnFlagUntilTimeout+0x172>
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2b80      	cmp	r3, #128	@ 0x80
 80059b0:	d054      	beq.n	8005a5c <UART_WaitOnFlagUntilTimeout+0x172>
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b40      	cmp	r3, #64	@ 0x40
 80059b6:	d051      	beq.n	8005a5c <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059c6:	d149      	bne.n	8005a5c <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80059d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059da:	e853 3f00 	ldrex	r3, [r3]
 80059de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80059e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	461a      	mov	r2, r3
 80059ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80059f2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059f8:	e841 2300 	strex	r3, r2, [r1]
 80059fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80059fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1e6      	bne.n	80059d2 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3308      	adds	r3, #8
 8005a0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	e853 3f00 	ldrex	r3, [r3]
 8005a12:	613b      	str	r3, [r7, #16]
   return(result);
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	f023 0301 	bic.w	r3, r3, #1
 8005a1a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3308      	adds	r3, #8
 8005a22:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005a24:	623a      	str	r2, [r7, #32]
 8005a26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a28:	69f9      	ldr	r1, [r7, #28]
 8005a2a:	6a3a      	ldr	r2, [r7, #32]
 8005a2c:	e841 2300 	strex	r3, r2, [r1]
 8005a30:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1e5      	bne.n	8005a04 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e010      	b.n	8005a7e <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	69da      	ldr	r2, [r3, #28]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	4013      	ands	r3, r2
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	bf0c      	ite	eq
 8005a6c:	2301      	moveq	r3, #1
 8005a6e:	2300      	movne	r3, #0
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	461a      	mov	r2, r3
 8005a74:	79fb      	ldrb	r3, [r7, #7]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	f43f af40 	beq.w	80058fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3770      	adds	r7, #112	@ 0x70
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b095      	sub	sp, #84	@ 0x54
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a96:	e853 3f00 	ldrex	r3, [r3]
 8005a9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aac:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ab2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ab4:	e841 2300 	strex	r3, r2, [r1]
 8005ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1e6      	bne.n	8005a8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3308      	adds	r3, #8
 8005ac6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	e853 3f00 	ldrex	r3, [r3]
 8005ace:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ad6:	f023 0301 	bic.w	r3, r3, #1
 8005ada:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ae4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005aec:	e841 2300 	strex	r3, r2, [r1]
 8005af0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1e3      	bne.n	8005ac0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d118      	bne.n	8005b32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	e853 3f00 	ldrex	r3, [r3]
 8005b0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f023 0310 	bic.w	r3, r3, #16
 8005b14:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b1e:	61bb      	str	r3, [r7, #24]
 8005b20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b22:	6979      	ldr	r1, [r7, #20]
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	e841 2300 	strex	r3, r2, [r1]
 8005b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1e6      	bne.n	8005b00 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2220      	movs	r2, #32
 8005b36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005b46:	bf00      	nop
 8005b48:	3754      	adds	r7, #84	@ 0x54
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bc80      	pop	{r7}
 8005b4e:	4770      	bx	lr

08005b50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f7ff fb43 	bl	80051fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b74:	bf00      	nop
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b088      	sub	sp, #32
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	e853 3f00 	ldrex	r3, [r3]
 8005b90:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b98:	61fb      	str	r3, [r7, #28]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	61bb      	str	r3, [r7, #24]
 8005ba4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba6:	6979      	ldr	r1, [r7, #20]
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	e841 2300 	strex	r3, r2, [r1]
 8005bae:	613b      	str	r3, [r7, #16]
   return(result);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1e6      	bne.n	8005b84 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f7ff fb0f 	bl	80051e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bca:	bf00      	nop
 8005bcc:	3720      	adds	r7, #32
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b083      	sub	sp, #12
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bc80      	pop	{r7}
 8005be2:	4770      	bx	lr

08005be4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bc80      	pop	{r7}
 8005bf4:	4770      	bx	lr

08005bf6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bc80      	pop	{r7}
 8005c06:	4770      	bx	lr

08005c08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d101      	bne.n	8005c1e <HAL_UARTEx_DisableFifoMode+0x16>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	e027      	b.n	8005c6e <HAL_UARTEx_DisableFifoMode+0x66>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2224      	movs	r2, #36	@ 0x24
 8005c2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0201 	bic.w	r2, r2, #1
 8005c44:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005c4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bc80      	pop	{r7}
 8005c76:	4770      	bx	lr

08005c78 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d101      	bne.n	8005c90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e02d      	b.n	8005cec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2224      	movs	r2, #36	@ 0x24
 8005c9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0201 	bic.w	r2, r2, #1
 8005cb6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f84f 	bl	8005d70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d101      	bne.n	8005d0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e02d      	b.n	8005d68 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2224      	movs	r2, #36	@ 0x24
 8005d18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0201 	bic.w	r2, r2, #1
 8005d32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f811 	bl	8005d70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d108      	bne.n	8005d92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d90:	e031      	b.n	8005df6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d92:	2308      	movs	r3, #8
 8005d94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d96:	2308      	movs	r3, #8
 8005d98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	0e5b      	lsrs	r3, r3, #25
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	f003 0307 	and.w	r3, r3, #7
 8005da8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	0f5b      	lsrs	r3, r3, #29
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005dba:	7bbb      	ldrb	r3, [r7, #14]
 8005dbc:	7b3a      	ldrb	r2, [r7, #12]
 8005dbe:	4910      	ldr	r1, [pc, #64]	@ (8005e00 <UARTEx_SetNbDataToProcess+0x90>)
 8005dc0:	5c8a      	ldrb	r2, [r1, r2]
 8005dc2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005dc6:	7b3a      	ldrb	r2, [r7, #12]
 8005dc8:	490e      	ldr	r1, [pc, #56]	@ (8005e04 <UARTEx_SetNbDataToProcess+0x94>)
 8005dca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005dcc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
 8005dda:	7b7a      	ldrb	r2, [r7, #13]
 8005ddc:	4908      	ldr	r1, [pc, #32]	@ (8005e00 <UARTEx_SetNbDataToProcess+0x90>)
 8005dde:	5c8a      	ldrb	r2, [r1, r2]
 8005de0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005de4:	7b7a      	ldrb	r2, [r7, #13]
 8005de6:	4907      	ldr	r1, [pc, #28]	@ (8005e04 <UARTEx_SetNbDataToProcess+0x94>)
 8005de8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dea:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005df6:	bf00      	nop
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bc80      	pop	{r7}
 8005dfe:	4770      	bx	lr
 8005e00:	0800c0a8 	.word	0x0800c0a8
 8005e04:	0800c0b0 	.word	0x0800c0b0

08005e08 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b08b      	sub	sp, #44	@ 0x2c
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
#else
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	fa93 f3a3 	rbit	r3, r3
 8005e22:	613b      	str	r3, [r7, #16]
  return result;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8005e2e:	2320      	movs	r3, #32
 8005e30:	e003      	b.n	8005e3a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	fab3 f383 	clz	r3, r3
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	005b      	lsls	r3, r3, #1
 8005e3c:	2103      	movs	r1, #3
 8005e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e42:	43db      	mvns	r3, r3
 8005e44:	401a      	ands	r2, r3
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	fa93 f3a3 	rbit	r3, r3
 8005e50:	61fb      	str	r3, [r7, #28]
  return result;
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005e5c:	2320      	movs	r3, #32
 8005e5e:	e003      	b.n	8005e68 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e62:	fab3 f383 	clz	r3, r3
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	6879      	ldr	r1, [r7, #4]
 8005e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e70:	431a      	orrs	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	601a      	str	r2, [r3, #0]
#endif /* CORE_CM0PLUS */
}
 8005e76:	bf00      	nop
 8005e78:	372c      	adds	r7, #44	@ 0x2c
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr

08005e80 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	43db      	mvns	r3, r3
 8005e94:	401a      	ands	r2, r3
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	6879      	ldr	r1, [r7, #4]
 8005e9a:	fb01 f303 	mul.w	r3, r1, r3
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	605a      	str	r2, [r3, #4]
}
 8005ea4:	bf00      	nop
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bc80      	pop	{r7}
 8005eac:	4770      	bx	lr

08005eae <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b08b      	sub	sp, #44	@ 0x2c
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	60f8      	str	r0, [r7, #12]
 8005eb6:	60b9      	str	r1, [r7, #8]
 8005eb8:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
#else
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	689a      	ldr	r2, [r3, #8]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	fa93 f3a3 	rbit	r3, r3
 8005ec8:	613b      	str	r3, [r7, #16]
  return result;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005ed4:	2320      	movs	r3, #32
 8005ed6:	e003      	b.n	8005ee0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	fab3 f383 	clz	r3, r3
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	2103      	movs	r1, #3
 8005ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	401a      	ands	r2, r3
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	fa93 f3a3 	rbit	r3, r3
 8005ef6:	61fb      	str	r3, [r7, #28]
  return result;
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005f02:	2320      	movs	r3, #32
 8005f04:	e003      	b.n	8005f0e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f08:	fab3 f383 	clz	r3, r3
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	6879      	ldr	r1, [r7, #4]
 8005f12:	fa01 f303 	lsl.w	r3, r1, r3
 8005f16:	431a      	orrs	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
#endif /* CORE_CM0PLUS */
}
 8005f1c:	bf00      	nop
 8005f1e:	372c      	adds	r7, #44	@ 0x2c
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bc80      	pop	{r7}
 8005f24:	4770      	bx	lr

08005f26 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b08b      	sub	sp, #44	@ 0x2c
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	60f8      	str	r0, [r7, #12]
 8005f2e:	60b9      	str	r1, [r7, #8]
 8005f30:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
#else
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	fa93 f3a3 	rbit	r3, r3
 8005f40:	613b      	str	r3, [r7, #16]
  return result;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d101      	bne.n	8005f50 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005f4c:	2320      	movs	r3, #32
 8005f4e:	e003      	b.n	8005f58 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	fab3 f383 	clz	r3, r3
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	2103      	movs	r1, #3
 8005f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f60:	43db      	mvns	r3, r3
 8005f62:	401a      	ands	r2, r3
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	fa93 f3a3 	rbit	r3, r3
 8005f6e:	61fb      	str	r3, [r7, #28]
  return result;
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005f7a:	2320      	movs	r3, #32
 8005f7c:	e003      	b.n	8005f86 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f80:	fab3 f383 	clz	r3, r3
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	005b      	lsls	r3, r3, #1
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f8e:	431a      	orrs	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	60da      	str	r2, [r3, #12]
#endif /* CORE_CM0PLUS */
}
 8005f94:	bf00      	nop
 8005f96:	372c      	adds	r7, #44	@ 0x2c
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bc80      	pop	{r7}
 8005f9c:	4770      	bx	lr

08005f9e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b08b      	sub	sp, #44	@ 0x2c
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
#else
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6a1a      	ldr	r2, [r3, #32]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	fa93 f3a3 	rbit	r3, r3
 8005fb8:	613b      	str	r3, [r7, #16]
  return result;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005fc4:	2320      	movs	r3, #32
 8005fc6:	e003      	b.n	8005fd0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	fab3 f383 	clz	r3, r3
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	210f      	movs	r1, #15
 8005fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd8:	43db      	mvns	r3, r3
 8005fda:	401a      	ands	r2, r3
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	fa93 f3a3 	rbit	r3, r3
 8005fe6:	61fb      	str	r3, [r7, #28]
  return result;
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005ff2:	2320      	movs	r3, #32
 8005ff4:	e003      	b.n	8005ffe <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff8:	fab3 f383 	clz	r3, r3
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	6879      	ldr	r1, [r7, #4]
 8006002:	fa01 f303 	lsl.w	r3, r1, r3
 8006006:	431a      	orrs	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
#endif /* CORE_CM0PLUS */
}
 800600c:	bf00      	nop
 800600e:	372c      	adds	r7, #44	@ 0x2c
 8006010:	46bd      	mov	sp, r7
 8006012:	bc80      	pop	{r7}
 8006014:	4770      	bx	lr

08006016 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006016:	b480      	push	{r7}
 8006018:	b08b      	sub	sp, #44	@ 0x2c
 800601a:	af00      	add	r7, sp, #0
 800601c:	60f8      	str	r0, [r7, #12]
 800601e:	60b9      	str	r1, [r7, #8]
 8006020:	607a      	str	r2, [r7, #4]
#if defined(CORE_CM0PLUS)
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
#else
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	0a1b      	lsrs	r3, r3, #8
 800602a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	fa93 f3a3 	rbit	r3, r3
 8006032:	613b      	str	r3, [r7, #16]
  return result;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800603e:	2320      	movs	r3, #32
 8006040:	e003      	b.n	800604a <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	fab3 f383 	clz	r3, r3
 8006048:	b2db      	uxtb	r3, r3
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	210f      	movs	r1, #15
 800604e:	fa01 f303 	lsl.w	r3, r1, r3
 8006052:	43db      	mvns	r3, r3
 8006054:	401a      	ands	r2, r3
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	0a1b      	lsrs	r3, r3, #8
 800605a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	fa93 f3a3 	rbit	r3, r3
 8006062:	61fb      	str	r3, [r7, #28]
  return result;
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800606e:	2320      	movs	r3, #32
 8006070:	e003      	b.n	800607a <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006074:	fab3 f383 	clz	r3, r3
 8006078:	b2db      	uxtb	r3, r3
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	6879      	ldr	r1, [r7, #4]
 800607e:	fa01 f303 	lsl.w	r3, r1, r3
 8006082:	431a      	orrs	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
#endif /* CORE_CM0PLUS */
}
 8006088:	bf00      	nop
 800608a:	372c      	adds	r7, #44	@ 0x2c
 800608c:	46bd      	mov	sp, r7
 800608e:	bc80      	pop	{r7}
 8006090:	4770      	bx	lr

08006092 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b088      	sub	sp, #32
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	6039      	str	r1, [r7, #0]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
#if defined(CORE_CM0PLUS)
  pinpos = 0;
#else
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	fa93 f3a3 	rbit	r3, r3
 80060a8:	60fb      	str	r3, [r7, #12]
  return result;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <LL_GPIO_Init+0x26>
    return 32U;
 80060b4:	2320      	movs	r3, #32
 80060b6:	e003      	b.n	80060c0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	fab3 f383 	clz	r3, r3
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	61fb      	str	r3, [r7, #28]
#endif /* CORE_CM0PLUS */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80060c2:	e047      	b.n	8006154 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	2101      	movs	r1, #1
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	fa01 f303 	lsl.w	r3, r1, r3
 80060d0:	4013      	ands	r3, r2
 80060d2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d039      	beq.n	800614e <LL_GPIO_Init+0xbc>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d003      	beq.n	80060ea <LL_GPIO_Init+0x58>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d10d      	bne.n	8006106 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	461a      	mov	r2, r3
 80060f0:	69b9      	ldr	r1, [r7, #24]
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7ff fedb 	bl	8005eae <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	461a      	mov	r2, r3
 80060fe:	69b9      	ldr	r1, [r7, #24]
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7ff febd 	bl	8005e80 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	461a      	mov	r2, r3
 800610c:	69b9      	ldr	r1, [r7, #24]
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7ff ff09 	bl	8005f26 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	2b02      	cmp	r3, #2
 800611a:	d111      	bne.n	8006140 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	2bff      	cmp	r3, #255	@ 0xff
 8006120:	d807      	bhi.n	8006132 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	461a      	mov	r2, r3
 8006128:	69b9      	ldr	r1, [r7, #24]
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7ff ff37 	bl	8005f9e <LL_GPIO_SetAFPin_0_7>
 8006130:	e006      	b.n	8006140 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	461a      	mov	r2, r3
 8006138:	69b9      	ldr	r1, [r7, #24]
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7ff ff6b 	bl	8006016 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	461a      	mov	r2, r3
 8006146:	69b9      	ldr	r1, [r7, #24]
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7ff fe5d 	bl	8005e08 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	3301      	adds	r3, #1
 8006152:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	fa22 f303 	lsr.w	r3, r2, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1b0      	bne.n	80060c4 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8006162:	2301      	movs	r3, #1
}
 8006164:	4618      	mov	r0, r3
 8006166:	3720      	adds	r7, #32
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <LL_I2C_Enable>:
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f043 0201 	orr.w	r2, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	601a      	str	r2, [r3, #0]
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	bc80      	pop	{r7}
 8006188:	4770      	bx	lr

0800618a <LL_I2C_Disable>:
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f023 0201 	bic.w	r2, r3, #1
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	601a      	str	r2, [r3, #0]
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bc80      	pop	{r7}
 80061a6:	4770      	bx	lr

080061a8 <LL_I2C_ConfigFilters>:
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	0219      	lsls	r1, r3, #8
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	430b      	orrs	r3, r1
 80061c4:	431a      	orrs	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	601a      	str	r2, [r3, #0]
}
 80061ca:	bf00      	nop
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bc80      	pop	{r7}
 80061d2:	4770      	bx	lr

080061d4 <LL_I2C_SetOwnAddress1>:
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80061e8:	f023 0307 	bic.w	r3, r3, #7
 80061ec:	68b9      	ldr	r1, [r7, #8]
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	431a      	orrs	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	609a      	str	r2, [r3, #8]
}
 80061f8:	bf00      	nop
 80061fa:	3714      	adds	r7, #20
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bc80      	pop	{r7}
 8006200:	4770      	bx	lr

08006202 <LL_I2C_EnableOwnAddress1>:
{
 8006202:	b480      	push	{r7}
 8006204:	b083      	sub	sp, #12
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	609a      	str	r2, [r3, #8]
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	bc80      	pop	{r7}
 800621e:	4770      	bx	lr

08006220 <LL_I2C_DisableOwnAddress1>:
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	609a      	str	r2, [r3, #8]
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	bc80      	pop	{r7}
 800623c:	4770      	bx	lr

0800623e <LL_I2C_SetTiming>:
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	611a      	str	r2, [r3, #16]
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	bc80      	pop	{r7}
 8006256:	4770      	bx	lr

08006258 <LL_I2C_SetMode>:
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	431a      	orrs	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	601a      	str	r2, [r3, #0]
}
 8006272:	bf00      	nop
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	bc80      	pop	{r7}
 800627a:	4770      	bx	lr

0800627c <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	431a      	orrs	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	605a      	str	r2, [r3, #4]
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	bc80      	pop	{r7}
 800629e:	4770      	bx	lr

080062a0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7ff ff6d 	bl	800618a <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	6899      	ldr	r1, [r3, #8]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	461a      	mov	r2, r3
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7ff ff74 	bl	80061a8 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	4619      	mov	r1, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7ff ffb9 	bl	800623e <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff ff4d 	bl	800616c <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7ff ffa4 	bl	8006220 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	6919      	ldr	r1, [r3, #16]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	461a      	mov	r2, r3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7ff ff76 	bl	80061d4 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff ff86 	bl	8006202 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff ffab 	bl	8006258 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7ff ffb7 	bl	800627c <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800630e:	2301      	movs	r3, #1
}
 8006310:	4618      	mov	r0, r3
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800631c:	4907      	ldr	r1, [pc, #28]	@ (800633c <MX_FATFS_Init+0x24>)
 800631e:	4808      	ldr	r0, [pc, #32]	@ (8006340 <MX_FATFS_Init+0x28>)
 8006320:	f002 fede 	bl	80090e0 <FATFS_LinkDriver>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800632a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800632e:	e003      	b.n	8006338 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8006330:	4b04      	ldr	r3, [pc, #16]	@ (8006344 <MX_FATFS_Init+0x2c>)
 8006332:	2201      	movs	r2, #1
 8006334:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8006336:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8006338:	4618      	mov	r0, r3
 800633a:	bd80      	pop	{r7, pc}
 800633c:	20000998 	.word	0x20000998
 8006340:	2000000c 	.word	0x2000000c
 8006344:	2000099c 	.word	0x2000099c

08006348 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006348:	b480      	push	{r7}
 800634a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800634c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800634e:	4618      	mov	r0, r3
 8006350:	46bd      	mov	sp, r7
 8006352:	bc80      	pop	{r7}
 8006354:	4770      	bx	lr

08006356 <USER_initialize>:
 * @brief  Initializes a Drive
 * @param  pdrv: Physical drive number (0..)
 * @retval DSTATUS: Operation status
 */
DSTATUS USER_initialize(BYTE pdrv /* Physical drive nmuber to identify the drive */
) {
 8006356:	b580      	push	{r7, lr}
 8006358:	b082      	sub	sp, #8
 800635a:	af00      	add	r7, sp, #0
 800635c:	4603      	mov	r3, r0
 800635e:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8006360:	79fb      	ldrb	r3, [r7, #7]
 8006362:	4618      	mov	r0, r3
 8006364:	f000 f9d0 	bl	8006708 <USER_SPI_initialize>
 8006368:	4603      	mov	r3, r0
	/* USER CODE END INIT */
}
 800636a:	4618      	mov	r0, r3
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <USER_status>:
 * @brief  Gets Disk Status
 * @param  pdrv: Physical drive number (0..)
 * @retval DSTATUS: Operation status
 */
DSTATUS USER_status(BYTE pdrv /* Physical drive number to identify the drive */
) {
 8006372:	b580      	push	{r7, lr}
 8006374:	b082      	sub	sp, #8
 8006376:	af00      	add	r7, sp, #0
 8006378:	4603      	mov	r3, r0
 800637a:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800637c:	79fb      	ldrb	r3, [r7, #7]
 800637e:	4618      	mov	r0, r3
 8006380:	f000 fab8 	bl	80068f4 <USER_SPI_status>
 8006384:	4603      	mov	r3, r0
	/* USER CODE END STATUS */
}
 8006386:	4618      	mov	r0, r3
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <USER_read>:
 */
DRESULT USER_read(BYTE pdrv, /* Physical drive nmuber to identify the drive */
BYTE *buff, /* Data buffer to store read data */
DWORD sector, /* Sector address in LBA */
UINT count /* Number of sectors to read */
) {
 800638e:	b580      	push	{r7, lr}
 8006390:	b084      	sub	sp, #16
 8006392:	af00      	add	r7, sp, #0
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	603b      	str	r3, [r7, #0]
 800639a:	4603      	mov	r3, r0
 800639c:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800639e:	7bf8      	ldrb	r0, [r7, #15]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	68b9      	ldr	r1, [r7, #8]
 80063a6:	f000 fab9 	bl	800691c <USER_SPI_read>
 80063aa:	4603      	mov	r3, r0
	/* USER CODE END READ */
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <USER_write>:
#if _USE_WRITE == 1
DRESULT USER_write(BYTE pdrv, /* Physical drive nmuber to identify the drive */
const BYTE *buff, /* Data to be written */
DWORD sector, /* Sector address in LBA */
UINT count /* Number of sectors to write */
) {
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60b9      	str	r1, [r7, #8]
 80063bc:	607a      	str	r2, [r7, #4]
 80063be:	603b      	str	r3, [r7, #0]
 80063c0:	4603      	mov	r3, r0
 80063c2:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 80063c4:	7bf8      	ldrb	r0, [r7, #15]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	68b9      	ldr	r1, [r7, #8]
 80063cc:	f000 fb0c 	bl	80069e8 <USER_SPI_write>
 80063d0:	4603      	mov	r3, r0
	/* USER CODE END WRITE */
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <USER_ioctl>:
 */
#if _USE_IOCTL == 1
DRESULT USER_ioctl(BYTE pdrv, /* Physical drive nmuber (0..) */
BYTE cmd, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 80063da:	b580      	push	{r7, lr}
 80063dc:	b082      	sub	sp, #8
 80063de:	af00      	add	r7, sp, #0
 80063e0:	4603      	mov	r3, r0
 80063e2:	603a      	str	r2, [r7, #0]
 80063e4:	71fb      	strb	r3, [r7, #7]
 80063e6:	460b      	mov	r3, r1
 80063e8:	71bb      	strb	r3, [r7, #6]
	/* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80063ea:	79b9      	ldrb	r1, [r7, #6]
 80063ec:	79fb      	ldrb	r3, [r7, #7]
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f000 fb75 	bl	8006ae0 <USER_SPI_ioctl>
 80063f6:	4603      	mov	r3, r0
	/* USER CODE END IOCTL */
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <SPI_Timer_On>:
static BYTE CardType; /* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
	spiTimerTickStart = HAL_GetTick();
 8006408:	f7fb fd54 	bl	8001eb4 <HAL_GetTick>
 800640c:	4603      	mov	r3, r0
 800640e:	4a04      	ldr	r2, [pc, #16]	@ (8006420 <SPI_Timer_On+0x20>)
 8006410:	6013      	str	r3, [r2, #0]
	spiTimerTickDelay = waitTicks;
 8006412:	4a04      	ldr	r2, [pc, #16]	@ (8006424 <SPI_Timer_On+0x24>)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6013      	str	r3, [r2, #0]
}
 8006418:	bf00      	nop
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	200009a0 	.word	0x200009a0
 8006424:	200009a4 	.word	0x200009a4

08006428 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
	return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800642c:	f7fb fd42 	bl	8001eb4 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	4b06      	ldr	r3, [pc, #24]	@ (800644c <SPI_Timer_Status+0x24>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	1ad2      	subs	r2, r2, r3
 8006438:	4b05      	ldr	r3, [pc, #20]	@ (8006450 <SPI_Timer_Status+0x28>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	429a      	cmp	r2, r3
 800643e:	bf34      	ite	cc
 8006440:	2301      	movcc	r3, #1
 8006442:	2300      	movcs	r3, #0
 8006444:	b2db      	uxtb	r3, r3
}
 8006446:	4618      	mov	r0, r3
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	200009a0 	.word	0x200009a0
 8006450:	200009a4 	.word	0x200009a4

08006454 <xchg_spi>:
/* SPI controls (Platform dependent)                                     */
/*-----------------------------------------------------------------------*/

/* Exchange a byte */
static BYTE xchg_spi(BYTE dat /* Data to send */
) {
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af02      	add	r7, sp, #8
 800645a:	4603      	mov	r3, r0
 800645c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
	HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800645e:	f107 020f 	add.w	r2, r7, #15
 8006462:	1df9      	adds	r1, r7, #7
 8006464:	2332      	movs	r3, #50	@ 0x32
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	2301      	movs	r3, #1
 800646a:	4804      	ldr	r0, [pc, #16]	@ (800647c <xchg_spi+0x28>)
 800646c:	f7fd fdbf 	bl	8003fee <HAL_SPI_TransmitReceive>
	return rxDat;
 8006470:	7bfb      	ldrb	r3, [r7, #15]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	2000029c 	.word	0x2000029c

08006480 <rcvr_spi_multi>:

/* Receive multiple byte */
static
void rcvr_spi_multi(BYTE *buff, /* Pointer to data buffer */
UINT btr /* Number of bytes to receive (even number) */
) {
 8006480:	b590      	push	{r4, r7, lr}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
	for (UINT i = 0; i < btr; i++) {
 800648a:	2300      	movs	r3, #0
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	e00a      	b.n	80064a6 <rcvr_spi_multi+0x26>
		*(buff + i) = xchg_spi(0xFF);
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	18d4      	adds	r4, r2, r3
 8006496:	20ff      	movs	r0, #255	@ 0xff
 8006498:	f7ff ffdc 	bl	8006454 <xchg_spi>
 800649c:	4603      	mov	r3, r0
 800649e:	7023      	strb	r3, [r4, #0]
	for (UINT i = 0; i < btr; i++) {
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	3301      	adds	r3, #1
 80064a4:	60fb      	str	r3, [r7, #12]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d3f0      	bcc.n	8006490 <rcvr_spi_multi+0x10>
	}
}
 80064ae:	bf00      	nop
 80064b0:	bf00      	nop
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd90      	pop	{r4, r7, pc}

080064b8 <xmit_spi_multi>:
#if _USE_WRITE
/* Send multiple byte */
static
void xmit_spi_multi(const BYTE *buff, /* Pointer to the data */
UINT btx /* Number of bytes to send (even number) */
) {
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, (uint8_t*) buff, btx, HAL_MAX_DELAY);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80064ca:	6879      	ldr	r1, [r7, #4]
 80064cc:	4803      	ldr	r0, [pc, #12]	@ (80064dc <xmit_spi_multi+0x24>)
 80064ce:	f7fd fbf7 	bl	8003cc0 <HAL_SPI_Transmit>
}
 80064d2:	bf00      	nop
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	2000029c 	.word	0x2000029c

080064e0 <wait_ready>:
/*-----------------------------------------------------------------------*/

static
int wait_ready( /* 1:Ready, 0:Timeout */
UINT wt /* Timeout [ms] */
) {
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80064e8:	f7fb fce4 	bl	8001eb4 <HAL_GetTick>
 80064ec:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t) wt;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80064f2:	20ff      	movs	r0, #255	@ 0xff
 80064f4:	f7ff ffae 	bl	8006454 <xchg_spi>
 80064f8:	4603      	mov	r3, r0
 80064fa:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF
			&& ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay)); /* Wait for card goes ready or timeout */
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
 80064fe:	2bff      	cmp	r3, #255	@ 0xff
 8006500:	d007      	beq.n	8006512 <wait_ready+0x32>
 8006502:	f7fb fcd7 	bl	8001eb4 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	429a      	cmp	r2, r3
 8006510:	d8ef      	bhi.n	80064f2 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006512:	7bfb      	ldrb	r3, [r7, #15]
 8006514:	2bff      	cmp	r3, #255	@ 0xff
 8006516:	bf0c      	ite	eq
 8006518:	2301      	moveq	r3, #1
 800651a:	2300      	movne	r3, #0
 800651c:	b2db      	uxtb	r3, r3
}
 800651e:	4618      	mov	r0, r3
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <despiselect>:
/*-----------------------------------------------------------------------*/
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect(void) {
 8006526:	b580      	push	{r7, lr}
 8006528:	af00      	add	r7, sp, #0
	CS_HIGH(); /* Set CS# high */
 800652a:	2201      	movs	r2, #1
 800652c:	2110      	movs	r1, #16
 800652e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006532:	f7fb fff1 	bl	8002518 <HAL_GPIO_WritePin>
	xchg_spi(0xFF); /* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006536:	20ff      	movs	r0, #255	@ 0xff
 8006538:	f7ff ff8c 	bl	8006454 <xchg_spi>

}
 800653c:	bf00      	nop
 800653e:	bd80      	pop	{r7, pc}

08006540 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect(void) /* 1:OK, 0:Timeout */
{
 8006540:	b580      	push	{r7, lr}
 8006542:	af00      	add	r7, sp, #0
	CS_LOW(); /* Set CS# low */
 8006544:	2200      	movs	r2, #0
 8006546:	2110      	movs	r1, #16
 8006548:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800654c:	f7fb ffe4 	bl	8002518 <HAL_GPIO_WritePin>
	xchg_spi(0xFF); /* Dummy clock (force DO enabled) */
 8006550:	20ff      	movs	r0, #255	@ 0xff
 8006552:	f7ff ff7f 	bl	8006454 <xchg_spi>
	if (wait_ready(500))
 8006556:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800655a:	f7ff ffc1 	bl	80064e0 <wait_ready>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <spiselect+0x28>
		return 1; /* Wait for card ready */
 8006564:	2301      	movs	r3, #1
 8006566:	e002      	b.n	800656e <spiselect+0x2e>

	despiselect();
 8006568:	f7ff ffdd 	bl	8006526 <despiselect>
	return 0; /* Timeout */
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	bd80      	pop	{r7, pc}

08006572 <rcvr_datablock>:

static
int rcvr_datablock( /* 1:OK, 0:Error */
BYTE *buff, /* Data buffer */
UINT btr /* Data block length (byte) */
) {
 8006572:	b580      	push	{r7, lr}
 8006574:	b084      	sub	sp, #16
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	6039      	str	r1, [r7, #0]
	BYTE token;

	SPI_Timer_On(200);
 800657c:	20c8      	movs	r0, #200	@ 0xc8
 800657e:	f7ff ff3f 	bl	8006400 <SPI_Timer_On>
	do { /* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006582:	20ff      	movs	r0, #255	@ 0xff
 8006584:	f7ff ff66 	bl	8006454 <xchg_spi>
 8006588:	4603      	mov	r3, r0
 800658a:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800658c:	7bfb      	ldrb	r3, [r7, #15]
 800658e:	2bff      	cmp	r3, #255	@ 0xff
 8006590:	d104      	bne.n	800659c <rcvr_datablock+0x2a>
 8006592:	f7ff ff49 	bl	8006428 <SPI_Timer_Status>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1f2      	bne.n	8006582 <rcvr_datablock+0x10>
	if (token != 0xFE)
 800659c:	7bfb      	ldrb	r3, [r7, #15]
 800659e:	2bfe      	cmp	r3, #254	@ 0xfe
 80065a0:	d001      	beq.n	80065a6 <rcvr_datablock+0x34>
		return 0; /* Function fails if invalid DataStart token or timeout */
 80065a2:	2300      	movs	r3, #0
 80065a4:	e00a      	b.n	80065bc <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr); /* Store trailing data to the buffer */
 80065a6:	6839      	ldr	r1, [r7, #0]
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7ff ff69 	bl	8006480 <rcvr_spi_multi>
	xchg_spi(0xFF);
 80065ae:	20ff      	movs	r0, #255	@ 0xff
 80065b0:	f7ff ff50 	bl	8006454 <xchg_spi>
	xchg_spi(0xFF); /* Discard CRC */
 80065b4:	20ff      	movs	r0, #255	@ 0xff
 80065b6:	f7ff ff4d 	bl	8006454 <xchg_spi>

	return 1; /* Function succeeded */
 80065ba:	2301      	movs	r3, #1
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <xmit_datablock>:
#if _USE_WRITE
static
int xmit_datablock( /* 1:OK, 0:Failed */
const BYTE *buff, /* Ponter to 512 byte data to be sent */
BYTE token /* Token */
) {
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	460b      	mov	r3, r1
 80065ce:	70fb      	strb	r3, [r7, #3]
	BYTE resp;

	if (!wait_ready(500))
 80065d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80065d4:	f7ff ff84 	bl	80064e0 <wait_ready>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <xmit_datablock+0x1e>
		return 0; /* Wait for card ready */
 80065de:	2300      	movs	r3, #0
 80065e0:	e01e      	b.n	8006620 <xmit_datablock+0x5c>

	xchg_spi(token); /* Send token */
 80065e2:	78fb      	ldrb	r3, [r7, #3]
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7ff ff35 	bl	8006454 <xchg_spi>
	if (token != 0xFD) { /* Send data if token is other than StopTran */
 80065ea:	78fb      	ldrb	r3, [r7, #3]
 80065ec:	2bfd      	cmp	r3, #253	@ 0xfd
 80065ee:	d016      	beq.n	800661e <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512); /* Data */
 80065f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f7ff ff5f 	bl	80064b8 <xmit_spi_multi>
		xchg_spi(0xFF);
 80065fa:	20ff      	movs	r0, #255	@ 0xff
 80065fc:	f7ff ff2a 	bl	8006454 <xchg_spi>
		xchg_spi(0xFF); /* Dummy CRC */
 8006600:	20ff      	movs	r0, #255	@ 0xff
 8006602:	f7ff ff27 	bl	8006454 <xchg_spi>

		resp = xchg_spi(0xFF); /* Receive data resp */
 8006606:	20ff      	movs	r0, #255	@ 0xff
 8006608:	f7ff ff24 	bl	8006454 <xchg_spi>
 800660c:	4603      	mov	r3, r0
 800660e:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05)
 8006610:	7bfb      	ldrb	r3, [r7, #15]
 8006612:	f003 031f 	and.w	r3, r3, #31
 8006616:	2b05      	cmp	r3, #5
 8006618:	d001      	beq.n	800661e <xmit_datablock+0x5a>
			return 0; /* Function fails if the data packet was not accepted */
 800661a:	2300      	movs	r3, #0
 800661c:	e000      	b.n	8006620 <xmit_datablock+0x5c>
	}
	return 1;
 800661e:	2301      	movs	r3, #1
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <send_cmd>:
/*-----------------------------------------------------------------------*/

static BYTE send_cmd( /* Return value: R1 resp (bit7==1:Failed to send) */
BYTE cmd, /* Command index */
DWORD arg /* Argument */
) {
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	4603      	mov	r3, r0
 8006630:	6039      	str	r1, [r7, #0]
 8006632:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (cmd & 0x80) { /* Send a CMD55 prior to ACMD<n> */
 8006634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006638:	2b00      	cmp	r3, #0
 800663a:	da0e      	bge.n	800665a <send_cmd+0x32>
		cmd &= 0x7F;
 800663c:	79fb      	ldrb	r3, [r7, #7]
 800663e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006642:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006644:	2100      	movs	r1, #0
 8006646:	2037      	movs	r0, #55	@ 0x37
 8006648:	f7ff ffee 	bl	8006628 <send_cmd>
 800664c:	4603      	mov	r3, r0
 800664e:	73bb      	strb	r3, [r7, #14]
		if (res > 1)
 8006650:	7bbb      	ldrb	r3, [r7, #14]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d901      	bls.n	800665a <send_cmd+0x32>
			return res;
 8006656:	7bbb      	ldrb	r3, [r7, #14]
 8006658:	e051      	b.n	80066fe <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800665a:	79fb      	ldrb	r3, [r7, #7]
 800665c:	2b0c      	cmp	r3, #12
 800665e:	d008      	beq.n	8006672 <send_cmd+0x4a>
		despiselect();
 8006660:	f7ff ff61 	bl	8006526 <despiselect>
		if (!spiselect())
 8006664:	f7ff ff6c 	bl	8006540 <spiselect>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <send_cmd+0x4a>
			return 0xFF;
 800666e:	23ff      	movs	r3, #255	@ 0xff
 8006670:	e045      	b.n	80066fe <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd); /* Start + command index */
 8006672:	79fb      	ldrb	r3, [r7, #7]
 8006674:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006678:	b2db      	uxtb	r3, r3
 800667a:	4618      	mov	r0, r3
 800667c:	f7ff feea 	bl	8006454 <xchg_spi>
	xchg_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	0e1b      	lsrs	r3, r3, #24
 8006684:	b2db      	uxtb	r3, r3
 8006686:	4618      	mov	r0, r3
 8006688:	f7ff fee4 	bl	8006454 <xchg_spi>
	xchg_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	0c1b      	lsrs	r3, r3, #16
 8006690:	b2db      	uxtb	r3, r3
 8006692:	4618      	mov	r0, r3
 8006694:	f7ff fede 	bl	8006454 <xchg_spi>
	xchg_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	0a1b      	lsrs	r3, r3, #8
 800669c:	b2db      	uxtb	r3, r3
 800669e:	4618      	mov	r0, r3
 80066a0:	f7ff fed8 	bl	8006454 <xchg_spi>
	xchg_spi((BYTE) arg); /* Argument[7..0] */
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff fed3 	bl	8006454 <xchg_spi>
	n = 0x01; /* Dummy CRC + Stop */
 80066ae:	2301      	movs	r3, #1
 80066b0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 80066b2:	79fb      	ldrb	r3, [r7, #7]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <send_cmd+0x94>
		n = 0x95; /* Valid CRC for CMD0(0) */
 80066b8:	2395      	movs	r3, #149	@ 0x95
 80066ba:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 80066bc:	79fb      	ldrb	r3, [r7, #7]
 80066be:	2b08      	cmp	r3, #8
 80066c0:	d101      	bne.n	80066c6 <send_cmd+0x9e>
		n = 0x87; /* Valid CRC for CMD8(0x1AA) */
 80066c2:	2387      	movs	r3, #135	@ 0x87
 80066c4:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7ff fec3 	bl	8006454 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12)
 80066ce:	79fb      	ldrb	r3, [r7, #7]
 80066d0:	2b0c      	cmp	r3, #12
 80066d2:	d102      	bne.n	80066da <send_cmd+0xb2>
		xchg_spi(0xFF); /* Diacard following one byte when CMD12 */
 80066d4:	20ff      	movs	r0, #255	@ 0xff
 80066d6:	f7ff febd 	bl	8006454 <xchg_spi>
	n = 10; /* Wait for response (10 bytes max) */
 80066da:	230a      	movs	r3, #10
 80066dc:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80066de:	20ff      	movs	r0, #255	@ 0xff
 80066e0:	f7ff feb8 	bl	8006454 <xchg_spi>
 80066e4:	4603      	mov	r3, r0
 80066e6:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80066e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	da05      	bge.n	80066fc <send_cmd+0xd4>
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
 80066f2:	3b01      	subs	r3, #1
 80066f4:	73fb      	strb	r3, [r7, #15]
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1f0      	bne.n	80066de <send_cmd+0xb6>

	return res; /* Return received response */
 80066fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
	...

08006708 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize disk drive                                                 */
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize(BYTE drv /* Physical drive number (0) */
) {
 8006708:	b590      	push	{r4, r7, lr}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	4603      	mov	r3, r0
 8006710:	71fb      	strb	r3, [r7, #7]
	myprintf("USER_SPI_initialize started\r\n");
 8006712:	4874      	ldr	r0, [pc, #464]	@ (80068e4 <USER_SPI_initialize+0x1dc>)
 8006714:	f7fa ff12 	bl	800153c <myprintf>

	BYTE n, cmd, ty, ocr[4];

	if (drv != 0)
 8006718:	79fb      	ldrb	r3, [r7, #7]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <USER_SPI_initialize+0x1a>
		return STA_NOINIT; /* Supports only drive 0 */
 800671e:	2301      	movs	r3, #1
 8006720:	e0dc      	b.n	80068dc <USER_SPI_initialize+0x1d4>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK)
 8006722:	4b71      	ldr	r3, [pc, #452]	@ (80068e8 <USER_SPI_initialize+0x1e0>)
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	b2db      	uxtb	r3, r3
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <USER_SPI_initialize+0x30>
		return Stat; /* Is card existing in the soket? */
 8006730:	4b6d      	ldr	r3, [pc, #436]	@ (80068e8 <USER_SPI_initialize+0x1e0>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	b2db      	uxtb	r3, r3
 8006736:	e0d1      	b.n	80068dc <USER_SPI_initialize+0x1d4>

	FCLK_SLOW();
 8006738:	4b6c      	ldr	r3, [pc, #432]	@ (80068ec <USER_SPI_initialize+0x1e4>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8006742:	4b6a      	ldr	r3, [pc, #424]	@ (80068ec <USER_SPI_initialize+0x1e4>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800674a:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--)
 800674c:	230a      	movs	r3, #10
 800674e:	73fb      	strb	r3, [r7, #15]
 8006750:	e005      	b.n	800675e <USER_SPI_initialize+0x56>
		xchg_spi(0xFF); /* Send 80 dummy clocks */
 8006752:	20ff      	movs	r0, #255	@ 0xff
 8006754:	f7ff fe7e 	bl	8006454 <xchg_spi>
	for (n = 10; n; n--)
 8006758:	7bfb      	ldrb	r3, [r7, #15]
 800675a:	3b01      	subs	r3, #1
 800675c:	73fb      	strb	r3, [r7, #15]
 800675e:	7bfb      	ldrb	r3, [r7, #15]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1f6      	bne.n	8006752 <USER_SPI_initialize+0x4a>

	ty = 0;
 8006764:	2300      	movs	r3, #0
 8006766:	737b      	strb	r3, [r7, #13]

	BYTE resp = send_cmd(CMD0, 0);
 8006768:	2100      	movs	r1, #0
 800676a:	2000      	movs	r0, #0
 800676c:	f7ff ff5c 	bl	8006628 <send_cmd>
 8006770:	4603      	mov	r3, r0
 8006772:	733b      	strb	r3, [r7, #12]
	if (send_cmd(CMD0, 0) == 1) { /* Put the card SPI/Idle state */
 8006774:	2100      	movs	r1, #0
 8006776:	2000      	movs	r0, #0
 8006778:	f7ff ff56 	bl	8006628 <send_cmd>
 800677c:	4603      	mov	r3, r0
 800677e:	2b01      	cmp	r3, #1
 8006780:	f040 808b 	bne.w	800689a <USER_SPI_initialize+0x192>
		SPI_Timer_On(1000); /* Initialization timeout = 1 sec */
 8006784:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006788:	f7ff fe3a 	bl	8006400 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2? */
 800678c:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8006790:	2008      	movs	r0, #8
 8006792:	f7ff ff49 	bl	8006628 <send_cmd>
 8006796:	4603      	mov	r3, r0
 8006798:	2b01      	cmp	r3, #1
 800679a:	d151      	bne.n	8006840 <USER_SPI_initialize+0x138>
			for (n = 0; n < 4; n++)
 800679c:	2300      	movs	r3, #0
 800679e:	73fb      	strb	r3, [r7, #15]
 80067a0:	e00d      	b.n	80067be <USER_SPI_initialize+0xb6>
				ocr[n] = xchg_spi(0xFF); /* Get 32 bit return value of R7 resp */
 80067a2:	7bfc      	ldrb	r4, [r7, #15]
 80067a4:	20ff      	movs	r0, #255	@ 0xff
 80067a6:	f7ff fe55 	bl	8006454 <xchg_spi>
 80067aa:	4603      	mov	r3, r0
 80067ac:	461a      	mov	r2, r3
 80067ae:	f104 0310 	add.w	r3, r4, #16
 80067b2:	443b      	add	r3, r7
 80067b4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
 80067ba:	3301      	adds	r3, #1
 80067bc:	73fb      	strb	r3, [r7, #15]
 80067be:	7bfb      	ldrb	r3, [r7, #15]
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	d9ee      	bls.n	80067a2 <USER_SPI_initialize+0x9a>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* Is the card supports vcc of 2.7-3.6V? */
 80067c4:	7abb      	ldrb	r3, [r7, #10]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d167      	bne.n	800689a <USER_SPI_initialize+0x192>
 80067ca:	7afb      	ldrb	r3, [r7, #11]
 80067cc:	2baa      	cmp	r3, #170	@ 0xaa
 80067ce:	d164      	bne.n	800689a <USER_SPI_initialize+0x192>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30))
 80067d0:	bf00      	nop
 80067d2:	f7ff fe29 	bl	8006428 <SPI_Timer_Status>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d007      	beq.n	80067ec <USER_SPI_initialize+0xe4>
 80067dc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80067e0:	20a9      	movs	r0, #169	@ 0xa9
 80067e2:	f7ff ff21 	bl	8006628 <send_cmd>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1f2      	bne.n	80067d2 <USER_SPI_initialize+0xca>
					; /* Wait for end of initialization with ACMD41(HCS) */
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
 80067ec:	f7ff fe1c 	bl	8006428 <SPI_Timer_Status>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d051      	beq.n	800689a <USER_SPI_initialize+0x192>
 80067f6:	2100      	movs	r1, #0
 80067f8:	203a      	movs	r0, #58	@ 0x3a
 80067fa:	f7ff ff15 	bl	8006628 <send_cmd>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d14a      	bne.n	800689a <USER_SPI_initialize+0x192>
					for (n = 0; n < 4; n++)
 8006804:	2300      	movs	r3, #0
 8006806:	73fb      	strb	r3, [r7, #15]
 8006808:	e00d      	b.n	8006826 <USER_SPI_initialize+0x11e>
						ocr[n] = xchg_spi(0xFF);
 800680a:	7bfc      	ldrb	r4, [r7, #15]
 800680c:	20ff      	movs	r0, #255	@ 0xff
 800680e:	f7ff fe21 	bl	8006454 <xchg_spi>
 8006812:	4603      	mov	r3, r0
 8006814:	461a      	mov	r2, r3
 8006816:	f104 0310 	add.w	r3, r4, #16
 800681a:	443b      	add	r3, r7
 800681c:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8006820:	7bfb      	ldrb	r3, [r7, #15]
 8006822:	3301      	adds	r3, #1
 8006824:	73fb      	strb	r3, [r7, #15]
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	2b03      	cmp	r3, #3
 800682a:	d9ee      	bls.n	800680a <USER_SPI_initialize+0x102>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; /* Card id SDv2 */
 800682c:	7a3b      	ldrb	r3, [r7, #8]
 800682e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <USER_SPI_initialize+0x132>
 8006836:	230c      	movs	r3, #12
 8006838:	e000      	b.n	800683c <USER_SPI_initialize+0x134>
 800683a:	2304      	movs	r3, #4
 800683c:	737b      	strb	r3, [r7, #13]
 800683e:	e02c      	b.n	800689a <USER_SPI_initialize+0x192>
				}
			}
		} else { /* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) { /* SDv1 or MMC? */
 8006840:	2100      	movs	r1, #0
 8006842:	20a9      	movs	r0, #169	@ 0xa9
 8006844:	f7ff fef0 	bl	8006628 <send_cmd>
 8006848:	4603      	mov	r3, r0
 800684a:	2b01      	cmp	r3, #1
 800684c:	d804      	bhi.n	8006858 <USER_SPI_initialize+0x150>
				ty = CT_SD1;
 800684e:	2302      	movs	r3, #2
 8006850:	737b      	strb	r3, [r7, #13]
				cmd = ACMD41; /* SDv1 (ACMD41(0)) */
 8006852:	23a9      	movs	r3, #169	@ 0xa9
 8006854:	73bb      	strb	r3, [r7, #14]
 8006856:	e003      	b.n	8006860 <USER_SPI_initialize+0x158>
			} else {
				ty = CT_MMC;
 8006858:	2301      	movs	r3, #1
 800685a:	737b      	strb	r3, [r7, #13]
				cmd = CMD1; /* MMCv3 (CMD1(0)) */
 800685c:	2301      	movs	r3, #1
 800685e:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0))
 8006860:	bf00      	nop
 8006862:	f7ff fde1 	bl	8006428 <SPI_Timer_Status>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d007      	beq.n	800687c <USER_SPI_initialize+0x174>
 800686c:	7bbb      	ldrb	r3, [r7, #14]
 800686e:	2100      	movs	r1, #0
 8006870:	4618      	mov	r0, r3
 8006872:	f7ff fed9 	bl	8006628 <send_cmd>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1f2      	bne.n	8006862 <USER_SPI_initialize+0x15a>
				; /* Wait for end of initialization */
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0) /* Set block length: 512 */
 800687c:	f7ff fdd4 	bl	8006428 <SPI_Timer_Status>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d007      	beq.n	8006896 <USER_SPI_initialize+0x18e>
 8006886:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800688a:	2010      	movs	r0, #16
 800688c:	f7ff fecc 	bl	8006628 <send_cmd>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <USER_SPI_initialize+0x192>
				ty = 0;
 8006896:	2300      	movs	r3, #0
 8006898:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty; /* Card type */
 800689a:	4a15      	ldr	r2, [pc, #84]	@ (80068f0 <USER_SPI_initialize+0x1e8>)
 800689c:	7b7b      	ldrb	r3, [r7, #13]
 800689e:	7013      	strb	r3, [r2, #0]
	despiselect();
 80068a0:	f7ff fe41 	bl	8006526 <despiselect>

	if (ty) { /* OK */
 80068a4:	7b7b      	ldrb	r3, [r7, #13]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d012      	beq.n	80068d0 <USER_SPI_initialize+0x1c8>
		FCLK_FAST(); /* Set fast clock */
 80068aa:	4b10      	ldr	r3, [pc, #64]	@ (80068ec <USER_SPI_initialize+0x1e4>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80068b4:	4b0d      	ldr	r3, [pc, #52]	@ (80068ec <USER_SPI_initialize+0x1e4>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f042 0210 	orr.w	r2, r2, #16
 80068bc:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT flag */
 80068be:	4b0a      	ldr	r3, [pc, #40]	@ (80068e8 <USER_SPI_initialize+0x1e0>)
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	f023 0301 	bic.w	r3, r3, #1
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	4b07      	ldr	r3, [pc, #28]	@ (80068e8 <USER_SPI_initialize+0x1e0>)
 80068cc:	701a      	strb	r2, [r3, #0]
 80068ce:	e002      	b.n	80068d6 <USER_SPI_initialize+0x1ce>
	} else { /* Failed */
		Stat = STA_NOINIT;
 80068d0:	4b05      	ldr	r3, [pc, #20]	@ (80068e8 <USER_SPI_initialize+0x1e0>)
 80068d2:	2201      	movs	r2, #1
 80068d4:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80068d6:	4b04      	ldr	r3, [pc, #16]	@ (80068e8 <USER_SPI_initialize+0x1e0>)
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	b2db      	uxtb	r3, r3
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd90      	pop	{r4, r7, pc}
 80068e4:	0800bf8c 	.word	0x0800bf8c
 80068e8:	20000020 	.word	0x20000020
 80068ec:	2000029c 	.word	0x2000029c
 80068f0:	2000099d 	.word	0x2000099d

080068f4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/
/* Get disk status                                                       */
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status(BYTE drv /* Physical drive number (0) */
) {
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	4603      	mov	r3, r0
 80068fc:	71fb      	strb	r3, [r7, #7]
	if (drv)
 80068fe:	79fb      	ldrb	r3, [r7, #7]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d001      	beq.n	8006908 <USER_SPI_status+0x14>
		return STA_NOINIT; /* Supports only drive 0 */
 8006904:	2301      	movs	r3, #1
 8006906:	e002      	b.n	800690e <USER_SPI_status+0x1a>

	return Stat; /* Return disk status */
 8006908:	4b03      	ldr	r3, [pc, #12]	@ (8006918 <USER_SPI_status+0x24>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	b2db      	uxtb	r3, r3
}
 800690e:	4618      	mov	r0, r3
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	bc80      	pop	{r7}
 8006916:	4770      	bx	lr
 8006918:	20000020 	.word	0x20000020

0800691c <USER_SPI_read>:

inline DRESULT USER_SPI_read(BYTE drv, /* Physical drive number (0) */
BYTE *buff, /* Pointer to the data buffer to store read data */
DWORD sector, /* Start sector number (LBA) */
UINT count /* Number of sectors to read (1..128) */
) {
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	60b9      	str	r1, [r7, #8]
 8006924:	607a      	str	r2, [r7, #4]
 8006926:	603b      	str	r3, [r7, #0]
 8006928:	4603      	mov	r3, r0
 800692a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count)
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d102      	bne.n	8006938 <USER_SPI_read+0x1c>
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <USER_SPI_read+0x20>
		return RES_PARERR; /* Check parameter */
 8006938:	2304      	movs	r3, #4
 800693a:	e04d      	b.n	80069d8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT)
 800693c:	4b28      	ldr	r3, [pc, #160]	@ (80069e0 <USER_SPI_read+0xc4>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	b2db      	uxtb	r3, r3
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <USER_SPI_read+0x32>
		return RES_NOTRDY; /* Check if drive is ready */
 800694a:	2303      	movs	r3, #3
 800694c:	e044      	b.n	80069d8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK))
 800694e:	4b25      	ldr	r3, [pc, #148]	@ (80069e4 <USER_SPI_read+0xc8>)
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	f003 0308 	and.w	r3, r3, #8
 8006956:	2b00      	cmp	r3, #0
 8006958:	d102      	bne.n	8006960 <USER_SPI_read+0x44>
		sector *= 512; /* LBA ot BA conversion (byte addressing cards) */
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	025b      	lsls	r3, r3, #9
 800695e:	607b      	str	r3, [r7, #4]

	if (count == 1) { /* Single sector read */
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d111      	bne.n	800698a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	2011      	movs	r0, #17
 800696a:	f7ff fe5d 	bl	8006628 <send_cmd>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d129      	bne.n	80069c8 <USER_SPI_read+0xac>
		&& rcvr_datablock(buff, 512)) {
 8006974:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006978:	68b8      	ldr	r0, [r7, #8]
 800697a:	f7ff fdfa 	bl	8006572 <rcvr_datablock>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d021      	beq.n	80069c8 <USER_SPI_read+0xac>
			count = 0;
 8006984:	2300      	movs	r3, #0
 8006986:	603b      	str	r3, [r7, #0]
 8006988:	e01e      	b.n	80069c8 <USER_SPI_read+0xac>
		}
	} else { /* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 800698a:	6879      	ldr	r1, [r7, #4]
 800698c:	2012      	movs	r0, #18
 800698e:	f7ff fe4b 	bl	8006628 <send_cmd>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d117      	bne.n	80069c8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512))
 8006998:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800699c:	68b8      	ldr	r0, [r7, #8]
 800699e:	f7ff fde8 	bl	8006572 <rcvr_datablock>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00a      	beq.n	80069be <USER_SPI_read+0xa2>
					break;
				buff += 512;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80069ae:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	603b      	str	r3, [r7, #0]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1ed      	bne.n	8006998 <USER_SPI_read+0x7c>
 80069bc:	e000      	b.n	80069c0 <USER_SPI_read+0xa4>
					break;
 80069be:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 80069c0:	2100      	movs	r1, #0
 80069c2:	200c      	movs	r0, #12
 80069c4:	f7ff fe30 	bl	8006628 <send_cmd>
		}
	}
	despiselect();
 80069c8:	f7ff fdad 	bl	8006526 <despiselect>

	return count ? RES_ERROR : RES_OK; /* Return result */
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	bf14      	ite	ne
 80069d2:	2301      	movne	r3, #1
 80069d4:	2300      	moveq	r3, #0
 80069d6:	b2db      	uxtb	r3, r3
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	20000020 	.word	0x20000020
 80069e4:	2000099d 	.word	0x2000099d

080069e8 <USER_SPI_write>:
#if _USE_WRITE
inline DRESULT USER_SPI_write(BYTE drv, /* Physical drive number (0) */
const BYTE *buff, /* Ponter to the data to write */
DWORD sector, /* Start sector number (LBA) */
UINT count /* Number of sectors to write (1..128) */
) {
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60b9      	str	r1, [r7, #8]
 80069f0:	607a      	str	r2, [r7, #4]
 80069f2:	603b      	str	r3, [r7, #0]
 80069f4:	4603      	mov	r3, r0
 80069f6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count)
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d102      	bne.n	8006a04 <USER_SPI_write+0x1c>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <USER_SPI_write+0x20>
		return RES_PARERR; /* Check parameter */
 8006a04:	2304      	movs	r3, #4
 8006a06:	e063      	b.n	8006ad0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT)
 8006a08:	4b33      	ldr	r3, [pc, #204]	@ (8006ad8 <USER_SPI_write+0xf0>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <USER_SPI_write+0x32>
		return RES_NOTRDY; /* Check drive status */
 8006a16:	2303      	movs	r3, #3
 8006a18:	e05a      	b.n	8006ad0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT)
 8006a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8006ad8 <USER_SPI_write+0xf0>)
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	f003 0304 	and.w	r3, r3, #4
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <USER_SPI_write+0x44>
		return RES_WRPRT; /* Check write protect */
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e051      	b.n	8006ad0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK))
 8006a2c:	4b2b      	ldr	r3, [pc, #172]	@ (8006adc <USER_SPI_write+0xf4>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	f003 0308 	and.w	r3, r3, #8
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d102      	bne.n	8006a3e <USER_SPI_write+0x56>
		sector *= 512; /* LBA ==> BA conversion (byte addressing cards) */
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	025b      	lsls	r3, r3, #9
 8006a3c:	607b      	str	r3, [r7, #4]

	if (count == 1) { /* Single sector write */
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d110      	bne.n	8006a66 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8006a44:	6879      	ldr	r1, [r7, #4]
 8006a46:	2018      	movs	r0, #24
 8006a48:	f7ff fdee 	bl	8006628 <send_cmd>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d136      	bne.n	8006ac0 <USER_SPI_write+0xd8>
		&& xmit_datablock(buff, 0xFE)) {
 8006a52:	21fe      	movs	r1, #254	@ 0xfe
 8006a54:	68b8      	ldr	r0, [r7, #8]
 8006a56:	f7ff fdb5 	bl	80065c4 <xmit_datablock>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d02f      	beq.n	8006ac0 <USER_SPI_write+0xd8>
			count = 0;
 8006a60:	2300      	movs	r3, #0
 8006a62:	603b      	str	r3, [r7, #0]
 8006a64:	e02c      	b.n	8006ac0 <USER_SPI_write+0xd8>
		}
	} else { /* Multiple sector write */
		if (CardType & CT_SDC)
 8006a66:	4b1d      	ldr	r3, [pc, #116]	@ (8006adc <USER_SPI_write+0xf4>)
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	f003 0306 	and.w	r3, r3, #6
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <USER_SPI_write+0x92>
			send_cmd(ACMD23, count); /* Predefine number of sectors */
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	2097      	movs	r0, #151	@ 0x97
 8006a76:	f7ff fdd7 	bl	8006628 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 8006a7a:	6879      	ldr	r1, [r7, #4]
 8006a7c:	2019      	movs	r0, #25
 8006a7e:	f7ff fdd3 	bl	8006628 <send_cmd>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d11b      	bne.n	8006ac0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8006a88:	21fc      	movs	r1, #252	@ 0xfc
 8006a8a:	68b8      	ldr	r0, [r7, #8]
 8006a8c:	f7ff fd9a 	bl	80065c4 <xmit_datablock>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00a      	beq.n	8006aac <USER_SPI_write+0xc4>
					break;
				buff += 512;
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006a9c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	603b      	str	r3, [r7, #0]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1ee      	bne.n	8006a88 <USER_SPI_write+0xa0>
 8006aaa:	e000      	b.n	8006aae <USER_SPI_write+0xc6>
					break;
 8006aac:	bf00      	nop
			if (!xmit_datablock(0, 0xFD))
 8006aae:	21fd      	movs	r1, #253	@ 0xfd
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	f7ff fd87 	bl	80065c4 <xmit_datablock>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <USER_SPI_write+0xd8>
				count = 1; /* STOP_TRAN token */
 8006abc:	2301      	movs	r3, #1
 8006abe:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006ac0:	f7ff fd31 	bl	8006526 <despiselect>

	return count ? RES_ERROR : RES_OK; /* Return result */
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	bf14      	ite	ne
 8006aca:	2301      	movne	r3, #1
 8006acc:	2300      	moveq	r3, #0
 8006ace:	b2db      	uxtb	r3, r3
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	20000020 	.word	0x20000020
 8006adc:	2000099d 	.word	0x2000099d

08006ae0 <USER_SPI_ioctl>:

#if _USE_IOCTL
inline DRESULT USER_SPI_ioctl(BYTE drv, /* Physical drive number (0) */
BYTE cmd, /* Control command code */
void *buff /* Pointer to the conrtol data */
) {
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b08c      	sub	sp, #48	@ 0x30
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	603a      	str	r2, [r7, #0]
 8006aea:	71fb      	strb	r3, [r7, #7]
 8006aec:	460b      	mov	r3, r1
 8006aee:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;

	if (drv)
 8006af0:	79fb      	ldrb	r3, [r7, #7]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <USER_SPI_ioctl+0x1a>
		return RES_PARERR; /* Check parameter */
 8006af6:	2304      	movs	r3, #4
 8006af8:	e15a      	b.n	8006db0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT)
 8006afa:	4baf      	ldr	r3, [pc, #700]	@ (8006db8 <USER_SPI_ioctl+0x2d8>)
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <USER_SPI_ioctl+0x2c>
		return RES_NOTRDY; /* Check if drive is ready */
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e151      	b.n	8006db0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8006b12:	79bb      	ldrb	r3, [r7, #6]
 8006b14:	2b04      	cmp	r3, #4
 8006b16:	f200 8136 	bhi.w	8006d86 <USER_SPI_ioctl+0x2a6>
 8006b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b20 <USER_SPI_ioctl+0x40>)
 8006b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b20:	08006b35 	.word	0x08006b35
 8006b24:	08006b49 	.word	0x08006b49
 8006b28:	08006d87 	.word	0x08006d87
 8006b2c:	08006bf5 	.word	0x08006bf5
 8006b30:	08006ceb 	.word	0x08006ceb
	case CTRL_SYNC: /* Wait for end of internal write process of the drive */
		if (spiselect())
 8006b34:	f7ff fd04 	bl	8006540 <spiselect>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 8127 	beq.w	8006d8e <USER_SPI_ioctl+0x2ae>
			res = RES_OK;
 8006b40:	2300      	movs	r3, #0
 8006b42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8006b46:	e122      	b.n	8006d8e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT: /* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006b48:	2100      	movs	r1, #0
 8006b4a:	2009      	movs	r0, #9
 8006b4c:	f7ff fd6c 	bl	8006628 <send_cmd>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f040 811d 	bne.w	8006d92 <USER_SPI_ioctl+0x2b2>
 8006b58:	f107 030c 	add.w	r3, r7, #12
 8006b5c:	2110      	movs	r1, #16
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7ff fd07 	bl	8006572 <rcvr_datablock>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 8113 	beq.w	8006d92 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8006b6c:	7b3b      	ldrb	r3, [r7, #12]
 8006b6e:	099b      	lsrs	r3, r3, #6
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d111      	bne.n	8006b9a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD) csd[8] << 8)
 8006b76:	7d7b      	ldrb	r3, [r7, #21]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	7d3b      	ldrb	r3, [r7, #20]
 8006b7c:	021b      	lsls	r3, r3, #8
 8006b7e:	4413      	add	r3, r2
 8006b80:	461a      	mov	r2, r3
						+ ((DWORD) (csd[7] & 63) << 16) + 1;
 8006b82:	7cfb      	ldrb	r3, [r7, #19]
 8006b84:	041b      	lsls	r3, r3, #16
 8006b86:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8006b8a:	4413      	add	r3, r2
				csize = csd[9] + ((WORD) csd[8] << 8)
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	61fb      	str	r3, [r7, #28]
				*(DWORD*) buff = csize << 10;
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	029a      	lsls	r2, r3, #10
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	601a      	str	r2, [r3, #0]
 8006b98:	e028      	b.n	8006bec <USER_SPI_ioctl+0x10c>
			} else { /* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1)
 8006b9a:	7c7b      	ldrb	r3, [r7, #17]
 8006b9c:	f003 030f 	and.w	r3, r3, #15
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	7dbb      	ldrb	r3, [r7, #22]
 8006ba4:	09db      	lsrs	r3, r3, #7
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	4413      	add	r3, r2
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	7d7b      	ldrb	r3, [r7, #21]
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	f003 0306 	and.w	r3, r3, #6
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	4413      	add	r3, r2
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	3302      	adds	r3, #2
 8006bbe:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
						+ 2;
				csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8006bc2:	7d3b      	ldrb	r3, [r7, #20]
 8006bc4:	099b      	lsrs	r3, r3, #6
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	461a      	mov	r2, r3
 8006bca:	7cfb      	ldrb	r3, [r7, #19]
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	441a      	add	r2, r3
						+ ((WORD) (csd[6] & 3) << 10) + 1;
 8006bd0:	7cbb      	ldrb	r3, [r7, #18]
 8006bd2:	029b      	lsls	r3, r3, #10
 8006bd4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006bd8:	4413      	add	r3, r2
 8006bda:	3301      	adds	r3, #1
				csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8006bdc:	61fb      	str	r3, [r7, #28]
				*(DWORD*) buff = csize << (n - 9);
 8006bde:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006be2:	3b09      	subs	r3, #9
 8006be4:	69fa      	ldr	r2, [r7, #28]
 8006be6:	409a      	lsls	r2, r3
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8006bf2:	e0ce      	b.n	8006d92 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE: /* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) { /* SDC ver 2.00 */
 8006bf4:	4b71      	ldr	r3, [pc, #452]	@ (8006dbc <USER_SPI_ioctl+0x2dc>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d031      	beq.n	8006c64 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) { /* Read SD status */
 8006c00:	2100      	movs	r1, #0
 8006c02:	208d      	movs	r0, #141	@ 0x8d
 8006c04:	f7ff fd10 	bl	8006628 <send_cmd>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f040 80c3 	bne.w	8006d96 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006c10:	20ff      	movs	r0, #255	@ 0xff
 8006c12:	f7ff fc1f 	bl	8006454 <xchg_spi>
				if (rcvr_datablock(csd, 16)) { /* Read partial block */
 8006c16:	f107 030c 	add.w	r3, r7, #12
 8006c1a:	2110      	movs	r1, #16
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7ff fca8 	bl	8006572 <rcvr_datablock>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 80b6 	beq.w	8006d96 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--)
 8006c2a:	2330      	movs	r3, #48	@ 0x30
 8006c2c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006c30:	e007      	b.n	8006c42 <USER_SPI_ioctl+0x162>
						xchg_spi(0xFF); /* Purge trailing data */
 8006c32:	20ff      	movs	r0, #255	@ 0xff
 8006c34:	f7ff fc0e 	bl	8006454 <xchg_spi>
					for (n = 64 - 16; n; n--)
 8006c38:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8006c42:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1f3      	bne.n	8006c32 <USER_SPI_ioctl+0x152>
					*(DWORD*) buff = 16UL << (csd[10] >> 4);
 8006c4a:	7dbb      	ldrb	r3, [r7, #22]
 8006c4c:	091b      	lsrs	r3, r3, #4
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	461a      	mov	r2, r3
 8006c52:	2310      	movs	r3, #16
 8006c54:	fa03 f202 	lsl.w	r2, r3, r2
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
											+ ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006c62:	e098      	b.n	8006d96 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) { /* Read CSD */
 8006c64:	2100      	movs	r1, #0
 8006c66:	2009      	movs	r0, #9
 8006c68:	f7ff fcde 	bl	8006628 <send_cmd>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f040 8091 	bne.w	8006d96 <USER_SPI_ioctl+0x2b6>
 8006c74:	f107 030c 	add.w	r3, r7, #12
 8006c78:	2110      	movs	r1, #16
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7ff fc79 	bl	8006572 <rcvr_datablock>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 8087 	beq.w	8006d96 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) { /* SDC ver 1.XX */
 8006c88:	4b4c      	ldr	r3, [pc, #304]	@ (8006dbc <USER_SPI_ioctl+0x2dc>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d012      	beq.n	8006cba <USER_SPI_ioctl+0x1da>
					*(DWORD*) buff = (((csd[10] & 63) << 1)
 8006c94:	7dbb      	ldrb	r3, [r7, #22]
 8006c96:	005b      	lsls	r3, r3, #1
 8006c98:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
							+ ((WORD) (csd[11] & 128) >> 7) + 1)
 8006c9c:	7dfa      	ldrb	r2, [r7, #23]
 8006c9e:	09d2      	lsrs	r2, r2, #7
 8006ca0:	b2d2      	uxtb	r2, r2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	1c5a      	adds	r2, r3, #1
							<< ((csd[13] >> 6) - 1);
 8006ca6:	7e7b      	ldrb	r3, [r7, #25]
 8006ca8:	099b      	lsrs	r3, r3, #6
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	3b01      	subs	r3, #1
 8006cae:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb2:	461a      	mov	r2, r3
					*(DWORD*) buff = (((csd[10] & 63) << 1)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	e013      	b.n	8006ce2 <USER_SPI_ioctl+0x202>
							((WORD) ((csd[10] & 124) >> 2) + 1)
 8006cba:	7dbb      	ldrb	r3, [r7, #22]
 8006cbc:	109b      	asrs	r3, r3, #2
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	f003 031f 	and.w	r3, r3, #31
 8006cc4:	3301      	adds	r3, #1
									* (((csd[11] & 3) << 3)
 8006cc6:	7dfa      	ldrb	r2, [r7, #23]
 8006cc8:	00d2      	lsls	r2, r2, #3
 8006cca:	f002 0218 	and.w	r2, r2, #24
											+ ((csd[11] & 224) >> 5) + 1);
 8006cce:	7df9      	ldrb	r1, [r7, #23]
 8006cd0:	0949      	lsrs	r1, r1, #5
 8006cd2:	b2c9      	uxtb	r1, r1
 8006cd4:	440a      	add	r2, r1
 8006cd6:	3201      	adds	r2, #1
									* (((csd[11] & 3) << 3)
 8006cd8:	fb02 f303 	mul.w	r3, r2, r3
 8006cdc:	461a      	mov	r2, r3
					*(DWORD*) buff =
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8006ce8:	e055      	b.n	8006d96 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM: /* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC))
 8006cea:	4b34      	ldr	r3, [pc, #208]	@ (8006dbc <USER_SPI_ioctl+0x2dc>)
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	f003 0306 	and.w	r3, r3, #6
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d051      	beq.n	8006d9a <USER_SPI_ioctl+0x2ba>
			break; /* Check if the card is SDC */
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd))
 8006cf6:	f107 020c 	add.w	r2, r7, #12
 8006cfa:	79fb      	ldrb	r3, [r7, #7]
 8006cfc:	210b      	movs	r1, #11
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7ff feee 	bl	8006ae0 <USER_SPI_ioctl>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d149      	bne.n	8006d9e <USER_SPI_ioctl+0x2be>
			break; /* Get CSD */
		if (!(csd[0] >> 6) && !(csd[10] & 0x40))
 8006d0a:	7b3b      	ldrb	r3, [r7, #12]
 8006d0c:	099b      	lsrs	r3, r3, #6
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d104      	bne.n	8006d1e <USER_SPI_ioctl+0x23e>
 8006d14:	7dbb      	ldrb	r3, [r7, #22]
 8006d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d041      	beq.n	8006da2 <USER_SPI_ioctl+0x2c2>
			break; /* Check if sector erase can be applied to the card */
		dp = buff;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	623b      	str	r3, [r7, #32]
		st = dp[0];
 8006d22:	6a3b      	ldr	r3, [r7, #32]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	62bb      	str	r3, [r7, #40]	@ 0x28
		ed = dp[1]; /* Load sector block */
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8006d2e:	4b23      	ldr	r3, [pc, #140]	@ (8006dbc <USER_SPI_ioctl+0x2dc>)
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	f003 0308 	and.w	r3, r3, #8
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d105      	bne.n	8006d46 <USER_SPI_ioctl+0x266>
			st *= 512;
 8006d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d3c:	025b      	lsls	r3, r3, #9
 8006d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
			ed *= 512;
 8006d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d42:	025b      	lsls	r3, r3, #9
 8006d44:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0
 8006d46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d48:	2020      	movs	r0, #32
 8006d4a:	f7ff fc6d 	bl	8006628 <send_cmd>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d128      	bne.n	8006da6 <USER_SPI_ioctl+0x2c6>
 8006d54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d56:	2021      	movs	r0, #33	@ 0x21
 8006d58:	f7ff fc66 	bl	8006628 <send_cmd>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d121      	bne.n	8006da6 <USER_SPI_ioctl+0x2c6>
				&& send_cmd(CMD38, 0) == 0 && wait_ready(30000)) { /* Erase sector block */
 8006d62:	2100      	movs	r1, #0
 8006d64:	2026      	movs	r0, #38	@ 0x26
 8006d66:	f7ff fc5f 	bl	8006628 <send_cmd>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d11a      	bne.n	8006da6 <USER_SPI_ioctl+0x2c6>
 8006d70:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006d74:	f7ff fbb4 	bl	80064e0 <wait_ready>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d013      	beq.n	8006da6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK; /* FatFs does not check result of this command */
 8006d7e:	2300      	movs	r3, #0
 8006d80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8006d84:	e00f      	b.n	8006da6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8006d86:	2304      	movs	r3, #4
 8006d88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006d8c:	e00c      	b.n	8006da8 <USER_SPI_ioctl+0x2c8>
		break;
 8006d8e:	bf00      	nop
 8006d90:	e00a      	b.n	8006da8 <USER_SPI_ioctl+0x2c8>
		break;
 8006d92:	bf00      	nop
 8006d94:	e008      	b.n	8006da8 <USER_SPI_ioctl+0x2c8>
		break;
 8006d96:	bf00      	nop
 8006d98:	e006      	b.n	8006da8 <USER_SPI_ioctl+0x2c8>
			break; /* Check if the card is SDC */
 8006d9a:	bf00      	nop
 8006d9c:	e004      	b.n	8006da8 <USER_SPI_ioctl+0x2c8>
			break; /* Get CSD */
 8006d9e:	bf00      	nop
 8006da0:	e002      	b.n	8006da8 <USER_SPI_ioctl+0x2c8>
			break; /* Check if sector erase can be applied to the card */
 8006da2:	bf00      	nop
 8006da4:	e000      	b.n	8006da8 <USER_SPI_ioctl+0x2c8>
		break;
 8006da6:	bf00      	nop
	}

	despiselect();
 8006da8:	f7ff fbbd 	bl	8006526 <despiselect>

	return res;
 8006dac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3730      	adds	r7, #48	@ 0x30
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	20000020 	.word	0x20000020
 8006dbc:	2000099d 	.word	0x2000099d

08006dc0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006dca:	79fb      	ldrb	r3, [r7, #7]
 8006dcc:	4a08      	ldr	r2, [pc, #32]	@ (8006df0 <disk_status+0x30>)
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	79fa      	ldrb	r2, [r7, #7]
 8006dd8:	4905      	ldr	r1, [pc, #20]	@ (8006df0 <disk_status+0x30>)
 8006dda:	440a      	add	r2, r1
 8006ddc:	7a12      	ldrb	r2, [r2, #8]
 8006dde:	4610      	mov	r0, r2
 8006de0:	4798      	blx	r3
 8006de2:	4603      	mov	r3, r0
 8006de4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	200009d0 	.word	0x200009d0

08006df4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006e02:	79fb      	ldrb	r3, [r7, #7]
 8006e04:	4a0d      	ldr	r2, [pc, #52]	@ (8006e3c <disk_initialize+0x48>)
 8006e06:	5cd3      	ldrb	r3, [r2, r3]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d111      	bne.n	8006e30 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006e0c:	79fb      	ldrb	r3, [r7, #7]
 8006e0e:	4a0b      	ldr	r2, [pc, #44]	@ (8006e3c <disk_initialize+0x48>)
 8006e10:	2101      	movs	r1, #1
 8006e12:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006e14:	79fb      	ldrb	r3, [r7, #7]
 8006e16:	4a09      	ldr	r2, [pc, #36]	@ (8006e3c <disk_initialize+0x48>)
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	79fa      	ldrb	r2, [r7, #7]
 8006e22:	4906      	ldr	r1, [pc, #24]	@ (8006e3c <disk_initialize+0x48>)
 8006e24:	440a      	add	r2, r1
 8006e26:	7a12      	ldrb	r2, [r2, #8]
 8006e28:	4610      	mov	r0, r2
 8006e2a:	4798      	blx	r3
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	200009d0 	.word	0x200009d0

08006e40 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006e40:	b590      	push	{r4, r7, lr}
 8006e42:	b087      	sub	sp, #28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	607a      	str	r2, [r7, #4]
 8006e4a:	603b      	str	r3, [r7, #0]
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006e50:	7bfb      	ldrb	r3, [r7, #15]
 8006e52:	4a0a      	ldr	r2, [pc, #40]	@ (8006e7c <disk_read+0x3c>)
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	689c      	ldr	r4, [r3, #8]
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
 8006e5e:	4a07      	ldr	r2, [pc, #28]	@ (8006e7c <disk_read+0x3c>)
 8006e60:	4413      	add	r3, r2
 8006e62:	7a18      	ldrb	r0, [r3, #8]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	68b9      	ldr	r1, [r7, #8]
 8006e6a:	47a0      	blx	r4
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	371c      	adds	r7, #28
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd90      	pop	{r4, r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	200009d0 	.word	0x200009d0

08006e80 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006e80:	b590      	push	{r4, r7, lr}
 8006e82:	b087      	sub	sp, #28
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60b9      	str	r1, [r7, #8]
 8006e88:	607a      	str	r2, [r7, #4]
 8006e8a:	603b      	str	r3, [r7, #0]
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	4a0a      	ldr	r2, [pc, #40]	@ (8006ebc <disk_write+0x3c>)
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	68dc      	ldr	r4, [r3, #12]
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	4a07      	ldr	r2, [pc, #28]	@ (8006ebc <disk_write+0x3c>)
 8006ea0:	4413      	add	r3, r2
 8006ea2:	7a18      	ldrb	r0, [r3, #8]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	68b9      	ldr	r1, [r7, #8]
 8006eaa:	47a0      	blx	r4
 8006eac:	4603      	mov	r3, r0
 8006eae:	75fb      	strb	r3, [r7, #23]
  return res;
 8006eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	371c      	adds	r7, #28
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd90      	pop	{r4, r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	200009d0 	.word	0x200009d0

08006ec0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	603a      	str	r2, [r7, #0]
 8006eca:	71fb      	strb	r3, [r7, #7]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006ed0:	79fb      	ldrb	r3, [r7, #7]
 8006ed2:	4a09      	ldr	r2, [pc, #36]	@ (8006ef8 <disk_ioctl+0x38>)
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	79fa      	ldrb	r2, [r7, #7]
 8006ede:	4906      	ldr	r1, [pc, #24]	@ (8006ef8 <disk_ioctl+0x38>)
 8006ee0:	440a      	add	r2, r1
 8006ee2:	7a10      	ldrb	r0, [r2, #8]
 8006ee4:	79b9      	ldrb	r1, [r7, #6]
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	4798      	blx	r3
 8006eea:	4603      	mov	r3, r0
 8006eec:	73fb      	strb	r3, [r7, #15]
  return res;
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	200009d0 	.word	0x200009d0

08006efc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3301      	adds	r3, #1
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006f0c:	89fb      	ldrh	r3, [r7, #14]
 8006f0e:	021b      	lsls	r3, r3, #8
 8006f10:	b21a      	sxth	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	b21b      	sxth	r3, r3
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	b21b      	sxth	r3, r3
 8006f1c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006f1e:	89fb      	ldrh	r3, [r7, #14]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bc80      	pop	{r7}
 8006f28:	4770      	bx	lr

08006f2a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b085      	sub	sp, #20
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	3303      	adds	r3, #3
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	021b      	lsls	r3, r3, #8
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	3202      	adds	r2, #2
 8006f42:	7812      	ldrb	r2, [r2, #0]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	021b      	lsls	r3, r3, #8
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	3201      	adds	r2, #1
 8006f50:	7812      	ldrb	r2, [r2, #0]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	021b      	lsls	r3, r3, #8
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	7812      	ldrb	r2, [r2, #0]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	60fb      	str	r3, [r7, #12]
	return rv;
 8006f62:	68fb      	ldr	r3, [r7, #12]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3714      	adds	r7, #20
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bc80      	pop	{r7}
 8006f6c:	4770      	bx	lr

08006f6e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b083      	sub	sp, #12
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	460b      	mov	r3, r1
 8006f78:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	1c5a      	adds	r2, r3, #1
 8006f7e:	607a      	str	r2, [r7, #4]
 8006f80:	887a      	ldrh	r2, [r7, #2]
 8006f82:	b2d2      	uxtb	r2, r2
 8006f84:	701a      	strb	r2, [r3, #0]
 8006f86:	887b      	ldrh	r3, [r7, #2]
 8006f88:	0a1b      	lsrs	r3, r3, #8
 8006f8a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	1c5a      	adds	r2, r3, #1
 8006f90:	607a      	str	r2, [r7, #4]
 8006f92:	887a      	ldrh	r2, [r7, #2]
 8006f94:	b2d2      	uxtb	r2, r2
 8006f96:	701a      	strb	r2, [r3, #0]
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bc80      	pop	{r7}
 8006fa0:	4770      	bx	lr

08006fa2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	1c5a      	adds	r2, r3, #1
 8006fb0:	607a      	str	r2, [r7, #4]
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	b2d2      	uxtb	r2, r2
 8006fb6:	701a      	strb	r2, [r3, #0]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	0a1b      	lsrs	r3, r3, #8
 8006fbc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	1c5a      	adds	r2, r3, #1
 8006fc2:	607a      	str	r2, [r7, #4]
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	b2d2      	uxtb	r2, r2
 8006fc8:	701a      	strb	r2, [r3, #0]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	0a1b      	lsrs	r3, r3, #8
 8006fce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	1c5a      	adds	r2, r3, #1
 8006fd4:	607a      	str	r2, [r7, #4]
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	b2d2      	uxtb	r2, r2
 8006fda:	701a      	strb	r2, [r3, #0]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	0a1b      	lsrs	r3, r3, #8
 8006fe0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	1c5a      	adds	r2, r3, #1
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	b2d2      	uxtb	r2, r2
 8006fec:	701a      	strb	r2, [r3, #0]
}
 8006fee:	bf00      	nop
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bc80      	pop	{r7}
 8006ff6:	4770      	bx	lr

08006ff8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00d      	beq.n	800702e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	1c53      	adds	r3, r2, #1
 8007016:	613b      	str	r3, [r7, #16]
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	1c59      	adds	r1, r3, #1
 800701c:	6179      	str	r1, [r7, #20]
 800701e:	7812      	ldrb	r2, [r2, #0]
 8007020:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	3b01      	subs	r3, #1
 8007026:	607b      	str	r3, [r7, #4]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1f1      	bne.n	8007012 <mem_cpy+0x1a>
	}
}
 800702e:	bf00      	nop
 8007030:	371c      	adds	r7, #28
 8007032:	46bd      	mov	sp, r7
 8007034:	bc80      	pop	{r7}
 8007036:	4770      	bx	lr

08007038 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	1c5a      	adds	r2, r3, #1
 800704c:	617a      	str	r2, [r7, #20]
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	b2d2      	uxtb	r2, r2
 8007052:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	3b01      	subs	r3, #1
 8007058:	607b      	str	r3, [r7, #4]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1f3      	bne.n	8007048 <mem_set+0x10>
}
 8007060:	bf00      	nop
 8007062:	bf00      	nop
 8007064:	371c      	adds	r7, #28
 8007066:	46bd      	mov	sp, r7
 8007068:	bc80      	pop	{r7}
 800706a:	4770      	bx	lr

0800706c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800706c:	b480      	push	{r7}
 800706e:	b089      	sub	sp, #36	@ 0x24
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	61fb      	str	r3, [r7, #28]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007080:	2300      	movs	r3, #0
 8007082:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	61fa      	str	r2, [r7, #28]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	4619      	mov	r1, r3
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	1c5a      	adds	r2, r3, #1
 8007092:	61ba      	str	r2, [r7, #24]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	1acb      	subs	r3, r1, r3
 8007098:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	3b01      	subs	r3, #1
 800709e:	607b      	str	r3, [r7, #4]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d002      	beq.n	80070ac <mem_cmp+0x40>
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d0eb      	beq.n	8007084 <mem_cmp+0x18>

	return r;
 80070ac:	697b      	ldr	r3, [r7, #20]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3724      	adds	r7, #36	@ 0x24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bc80      	pop	{r7}
 80070b6:	4770      	bx	lr

080070b8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80070c2:	e002      	b.n	80070ca <chk_chr+0x12>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	3301      	adds	r3, #1
 80070c8:	607b      	str	r3, [r7, #4]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d005      	beq.n	80070de <chk_chr+0x26>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	461a      	mov	r2, r3
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	4293      	cmp	r3, r2
 80070dc:	d1f2      	bne.n	80070c4 <chk_chr+0xc>
	return *str;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	781b      	ldrb	r3, [r3, #0]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bc80      	pop	{r7}
 80070ea:	4770      	bx	lr

080070ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80070f6:	2300      	movs	r3, #0
 80070f8:	60bb      	str	r3, [r7, #8]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	e029      	b.n	8007154 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007100:	4a26      	ldr	r2, [pc, #152]	@ (800719c <chk_lock+0xb0>)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	011b      	lsls	r3, r3, #4
 8007106:	4413      	add	r3, r2
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d01d      	beq.n	800714a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800710e:	4a23      	ldr	r2, [pc, #140]	@ (800719c <chk_lock+0xb0>)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	011b      	lsls	r3, r3, #4
 8007114:	4413      	add	r3, r2
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	429a      	cmp	r2, r3
 800711e:	d116      	bne.n	800714e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007120:	4a1e      	ldr	r2, [pc, #120]	@ (800719c <chk_lock+0xb0>)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	011b      	lsls	r3, r3, #4
 8007126:	4413      	add	r3, r2
 8007128:	3304      	adds	r3, #4
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007130:	429a      	cmp	r2, r3
 8007132:	d10c      	bne.n	800714e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007134:	4a19      	ldr	r2, [pc, #100]	@ (800719c <chk_lock+0xb0>)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	011b      	lsls	r3, r3, #4
 800713a:	4413      	add	r3, r2
 800713c:	3308      	adds	r3, #8
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007144:	429a      	cmp	r2, r3
 8007146:	d102      	bne.n	800714e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007148:	e007      	b.n	800715a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800714a:	2301      	movs	r3, #1
 800714c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	3301      	adds	r3, #1
 8007152:	60fb      	str	r3, [r7, #12]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d9d2      	bls.n	8007100 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b02      	cmp	r3, #2
 800715e:	d109      	bne.n	8007174 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d102      	bne.n	800716c <chk_lock+0x80>
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b02      	cmp	r3, #2
 800716a:	d101      	bne.n	8007170 <chk_lock+0x84>
 800716c:	2300      	movs	r3, #0
 800716e:	e010      	b.n	8007192 <chk_lock+0xa6>
 8007170:	2312      	movs	r3, #18
 8007172:	e00e      	b.n	8007192 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d108      	bne.n	800718c <chk_lock+0xa0>
 800717a:	4a08      	ldr	r2, [pc, #32]	@ (800719c <chk_lock+0xb0>)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	011b      	lsls	r3, r3, #4
 8007180:	4413      	add	r3, r2
 8007182:	330c      	adds	r3, #12
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800718a:	d101      	bne.n	8007190 <chk_lock+0xa4>
 800718c:	2310      	movs	r3, #16
 800718e:	e000      	b.n	8007192 <chk_lock+0xa6>
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	bc80      	pop	{r7}
 800719a:	4770      	bx	lr
 800719c:	200009b0 	.word	0x200009b0

080071a0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80071a6:	2300      	movs	r3, #0
 80071a8:	607b      	str	r3, [r7, #4]
 80071aa:	e002      	b.n	80071b2 <enq_lock+0x12>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	3301      	adds	r3, #1
 80071b0:	607b      	str	r3, [r7, #4]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d806      	bhi.n	80071c6 <enq_lock+0x26>
 80071b8:	4a08      	ldr	r2, [pc, #32]	@ (80071dc <enq_lock+0x3c>)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	011b      	lsls	r3, r3, #4
 80071be:	4413      	add	r3, r2
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1f2      	bne.n	80071ac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	bf14      	ite	ne
 80071cc:	2301      	movne	r3, #1
 80071ce:	2300      	moveq	r3, #0
 80071d0:	b2db      	uxtb	r3, r3
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bc80      	pop	{r7}
 80071da:	4770      	bx	lr
 80071dc:	200009b0 	.word	0x200009b0

080071e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80071ea:	2300      	movs	r3, #0
 80071ec:	60fb      	str	r3, [r7, #12]
 80071ee:	e01f      	b.n	8007230 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80071f0:	4a41      	ldr	r2, [pc, #260]	@ (80072f8 <inc_lock+0x118>)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	011b      	lsls	r3, r3, #4
 80071f6:	4413      	add	r3, r2
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d113      	bne.n	800722a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007202:	4a3d      	ldr	r2, [pc, #244]	@ (80072f8 <inc_lock+0x118>)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	011b      	lsls	r3, r3, #4
 8007208:	4413      	add	r3, r2
 800720a:	3304      	adds	r3, #4
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007212:	429a      	cmp	r2, r3
 8007214:	d109      	bne.n	800722a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007216:	4a38      	ldr	r2, [pc, #224]	@ (80072f8 <inc_lock+0x118>)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	011b      	lsls	r3, r3, #4
 800721c:	4413      	add	r3, r2
 800721e:	3308      	adds	r3, #8
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007226:	429a      	cmp	r2, r3
 8007228:	d006      	beq.n	8007238 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	3301      	adds	r3, #1
 800722e:	60fb      	str	r3, [r7, #12]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d9dc      	bls.n	80071f0 <inc_lock+0x10>
 8007236:	e000      	b.n	800723a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007238:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2b02      	cmp	r3, #2
 800723e:	d132      	bne.n	80072a6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007240:	2300      	movs	r3, #0
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	e002      	b.n	800724c <inc_lock+0x6c>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	3301      	adds	r3, #1
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d806      	bhi.n	8007260 <inc_lock+0x80>
 8007252:	4a29      	ldr	r2, [pc, #164]	@ (80072f8 <inc_lock+0x118>)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	011b      	lsls	r3, r3, #4
 8007258:	4413      	add	r3, r2
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1f2      	bne.n	8007246 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d101      	bne.n	800726a <inc_lock+0x8a>
 8007266:	2300      	movs	r3, #0
 8007268:	e040      	b.n	80072ec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	4922      	ldr	r1, [pc, #136]	@ (80072f8 <inc_lock+0x118>)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	011b      	lsls	r3, r3, #4
 8007274:	440b      	add	r3, r1
 8007276:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	491e      	ldr	r1, [pc, #120]	@ (80072f8 <inc_lock+0x118>)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	011b      	lsls	r3, r3, #4
 8007282:	440b      	add	r3, r1
 8007284:	3304      	adds	r3, #4
 8007286:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	695a      	ldr	r2, [r3, #20]
 800728c:	491a      	ldr	r1, [pc, #104]	@ (80072f8 <inc_lock+0x118>)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	011b      	lsls	r3, r3, #4
 8007292:	440b      	add	r3, r1
 8007294:	3308      	adds	r3, #8
 8007296:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007298:	4a17      	ldr	r2, [pc, #92]	@ (80072f8 <inc_lock+0x118>)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	011b      	lsls	r3, r3, #4
 800729e:	4413      	add	r3, r2
 80072a0:	330c      	adds	r3, #12
 80072a2:	2200      	movs	r2, #0
 80072a4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d009      	beq.n	80072c0 <inc_lock+0xe0>
 80072ac:	4a12      	ldr	r2, [pc, #72]	@ (80072f8 <inc_lock+0x118>)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	011b      	lsls	r3, r3, #4
 80072b2:	4413      	add	r3, r2
 80072b4:	330c      	adds	r3, #12
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <inc_lock+0xe0>
 80072bc:	2300      	movs	r3, #0
 80072be:	e015      	b.n	80072ec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d108      	bne.n	80072d8 <inc_lock+0xf8>
 80072c6:	4a0c      	ldr	r2, [pc, #48]	@ (80072f8 <inc_lock+0x118>)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	011b      	lsls	r3, r3, #4
 80072cc:	4413      	add	r3, r2
 80072ce:	330c      	adds	r3, #12
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	3301      	adds	r3, #1
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	e001      	b.n	80072dc <inc_lock+0xfc>
 80072d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80072dc:	4906      	ldr	r1, [pc, #24]	@ (80072f8 <inc_lock+0x118>)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	011b      	lsls	r3, r3, #4
 80072e2:	440b      	add	r3, r1
 80072e4:	330c      	adds	r3, #12
 80072e6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	3301      	adds	r3, #1
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3714      	adds	r7, #20
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bc80      	pop	{r7}
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	200009b0 	.word	0x200009b0

080072fc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3b01      	subs	r3, #1
 8007308:	607b      	str	r3, [r7, #4]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d825      	bhi.n	800735c <dec_lock+0x60>
		n = Files[i].ctr;
 8007310:	4a16      	ldr	r2, [pc, #88]	@ (800736c <dec_lock+0x70>)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	011b      	lsls	r3, r3, #4
 8007316:	4413      	add	r3, r2
 8007318:	330c      	adds	r3, #12
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800731e:	89fb      	ldrh	r3, [r7, #14]
 8007320:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007324:	d101      	bne.n	800732a <dec_lock+0x2e>
 8007326:	2300      	movs	r3, #0
 8007328:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800732a:	89fb      	ldrh	r3, [r7, #14]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <dec_lock+0x3a>
 8007330:	89fb      	ldrh	r3, [r7, #14]
 8007332:	3b01      	subs	r3, #1
 8007334:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007336:	4a0d      	ldr	r2, [pc, #52]	@ (800736c <dec_lock+0x70>)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	011b      	lsls	r3, r3, #4
 800733c:	4413      	add	r3, r2
 800733e:	330c      	adds	r3, #12
 8007340:	89fa      	ldrh	r2, [r7, #14]
 8007342:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007344:	89fb      	ldrh	r3, [r7, #14]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d105      	bne.n	8007356 <dec_lock+0x5a>
 800734a:	4a08      	ldr	r2, [pc, #32]	@ (800736c <dec_lock+0x70>)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	011b      	lsls	r3, r3, #4
 8007350:	4413      	add	r3, r2
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	737b      	strb	r3, [r7, #13]
 800735a:	e001      	b.n	8007360 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800735c:	2302      	movs	r3, #2
 800735e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007360:	7b7b      	ldrb	r3, [r7, #13]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	bc80      	pop	{r7}
 800736a:	4770      	bx	lr
 800736c:	200009b0 	.word	0x200009b0

08007370 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007378:	2300      	movs	r3, #0
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	e010      	b.n	80073a0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800737e:	4a0d      	ldr	r2, [pc, #52]	@ (80073b4 <clear_lock+0x44>)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	011b      	lsls	r3, r3, #4
 8007384:	4413      	add	r3, r2
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	429a      	cmp	r2, r3
 800738c:	d105      	bne.n	800739a <clear_lock+0x2a>
 800738e:	4a09      	ldr	r2, [pc, #36]	@ (80073b4 <clear_lock+0x44>)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	011b      	lsls	r3, r3, #4
 8007394:	4413      	add	r3, r2
 8007396:	2200      	movs	r2, #0
 8007398:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3301      	adds	r3, #1
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d9eb      	bls.n	800737e <clear_lock+0xe>
	}
}
 80073a6:	bf00      	nop
 80073a8:	bf00      	nop
 80073aa:	3714      	adds	r7, #20
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bc80      	pop	{r7}
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	200009b0 	.word	0x200009b0

080073b8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	78db      	ldrb	r3, [r3, #3]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d034      	beq.n	8007436 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	7858      	ldrb	r0, [r3, #1]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80073dc:	2301      	movs	r3, #1
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	f7ff fd4e 	bl	8006e80 <disk_write>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d002      	beq.n	80073f0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	73fb      	strb	r3, [r7, #15]
 80073ee:	e022      	b.n	8007436 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	1ad2      	subs	r2, r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	429a      	cmp	r2, r3
 8007404:	d217      	bcs.n	8007436 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	789b      	ldrb	r3, [r3, #2]
 800740a:	613b      	str	r3, [r7, #16]
 800740c:	e010      	b.n	8007430 <sync_window+0x78>
					wsect += fs->fsize;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	4413      	add	r3, r2
 8007416:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	7858      	ldrb	r0, [r3, #1]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007422:	2301      	movs	r3, #1
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	f7ff fd2b 	bl	8006e80 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	3b01      	subs	r3, #1
 800742e:	613b      	str	r3, [r7, #16]
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d8eb      	bhi.n	800740e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007436:	7bfb      	ldrb	r3, [r7, #15]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3718      	adds	r7, #24
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	429a      	cmp	r2, r3
 8007456:	d01b      	beq.n	8007490 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f7ff ffad 	bl	80073b8 <sync_window>
 800745e:	4603      	mov	r3, r0
 8007460:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007462:	7bfb      	ldrb	r3, [r7, #15]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d113      	bne.n	8007490 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	7858      	ldrb	r0, [r3, #1]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007472:	2301      	movs	r3, #1
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	f7ff fce3 	bl	8006e40 <disk_read>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d004      	beq.n	800748a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007480:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007484:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007486:	2301      	movs	r3, #1
 8007488:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8007490:	7bfb      	ldrb	r3, [r7, #15]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
	...

0800749c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7ff ff87 	bl	80073b8 <sync_window>
 80074aa:	4603      	mov	r3, r0
 80074ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80074ae:	7bfb      	ldrb	r3, [r7, #15]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d158      	bne.n	8007566 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	2b03      	cmp	r3, #3
 80074ba:	d148      	bne.n	800754e <sync_fs+0xb2>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	791b      	ldrb	r3, [r3, #4]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d144      	bne.n	800754e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	3330      	adds	r3, #48	@ 0x30
 80074c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074cc:	2100      	movs	r1, #0
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7ff fdb2 	bl	8007038 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3330      	adds	r3, #48	@ 0x30
 80074d8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80074dc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff fd44 	bl	8006f6e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	3330      	adds	r3, #48	@ 0x30
 80074ea:	4921      	ldr	r1, [pc, #132]	@ (8007570 <sync_fs+0xd4>)
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7ff fd58 	bl	8006fa2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	3330      	adds	r3, #48	@ 0x30
 80074f6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80074fa:	491e      	ldr	r1, [pc, #120]	@ (8007574 <sync_fs+0xd8>)
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7ff fd50 	bl	8006fa2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	3330      	adds	r3, #48	@ 0x30
 8007506:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	4619      	mov	r1, r3
 8007510:	4610      	mov	r0, r2
 8007512:	f7ff fd46 	bl	8006fa2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	3330      	adds	r3, #48	@ 0x30
 800751a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	4619      	mov	r1, r3
 8007524:	4610      	mov	r0, r2
 8007526:	f7ff fd3c 	bl	8006fa2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	69db      	ldr	r3, [r3, #28]
 800752e:	1c5a      	adds	r2, r3, #1
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	7858      	ldrb	r0, [r3, #1]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007542:	2301      	movs	r3, #1
 8007544:	f7ff fc9c 	bl	8006e80 <disk_write>
			fs->fsi_flag = 0;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	785b      	ldrb	r3, [r3, #1]
 8007552:	2200      	movs	r2, #0
 8007554:	2100      	movs	r1, #0
 8007556:	4618      	mov	r0, r3
 8007558:	f7ff fcb2 	bl	8006ec0 <disk_ioctl>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d001      	beq.n	8007566 <sync_fs+0xca>
 8007562:	2301      	movs	r3, #1
 8007564:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007566:	7bfb      	ldrb	r3, [r7, #15]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	41615252 	.word	0x41615252
 8007574:	61417272 	.word	0x61417272

08007578 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	3b02      	subs	r3, #2
 8007586:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	3b02      	subs	r3, #2
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	429a      	cmp	r2, r3
 8007592:	d301      	bcc.n	8007598 <clust2sect+0x20>
 8007594:	2300      	movs	r3, #0
 8007596:	e008      	b.n	80075aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	895b      	ldrh	r3, [r3, #10]
 800759c:	461a      	mov	r2, r3
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	fb03 f202 	mul.w	r2, r3, r2
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a8:	4413      	add	r3, r2
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bc80      	pop	{r7}
 80075b2:	4770      	bx	lr

080075b4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d904      	bls.n	80075d4 <get_fat+0x20>
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d302      	bcc.n	80075da <get_fat+0x26>
		val = 1;	/* Internal error */
 80075d4:	2301      	movs	r3, #1
 80075d6:	617b      	str	r3, [r7, #20]
 80075d8:	e08e      	b.n	80076f8 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80075da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80075de:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d061      	beq.n	80076ac <get_fat+0xf8>
 80075e8:	2b03      	cmp	r3, #3
 80075ea:	dc7b      	bgt.n	80076e4 <get_fat+0x130>
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d002      	beq.n	80075f6 <get_fat+0x42>
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d041      	beq.n	8007678 <get_fat+0xc4>
 80075f4:	e076      	b.n	80076e4 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	60fb      	str	r3, [r7, #12]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	085b      	lsrs	r3, r3, #1
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	4413      	add	r3, r2
 8007602:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	6a1a      	ldr	r2, [r3, #32]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	0a5b      	lsrs	r3, r3, #9
 800760c:	4413      	add	r3, r2
 800760e:	4619      	mov	r1, r3
 8007610:	6938      	ldr	r0, [r7, #16]
 8007612:	f7ff ff15 	bl	8007440 <move_window>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d166      	bne.n	80076ea <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	1c5a      	adds	r2, r3, #1
 8007620:	60fa      	str	r2, [r7, #12]
 8007622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	4413      	add	r3, r2
 800762a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800762e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	6a1a      	ldr	r2, [r3, #32]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	0a5b      	lsrs	r3, r3, #9
 8007638:	4413      	add	r3, r2
 800763a:	4619      	mov	r1, r3
 800763c:	6938      	ldr	r0, [r7, #16]
 800763e:	f7ff feff 	bl	8007440 <move_window>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d152      	bne.n	80076ee <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	4413      	add	r3, r2
 8007652:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007656:	021b      	lsls	r3, r3, #8
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	4313      	orrs	r3, r2
 800765c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	f003 0301 	and.w	r3, r3, #1
 8007664:	2b00      	cmp	r3, #0
 8007666:	d002      	beq.n	800766e <get_fat+0xba>
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	091b      	lsrs	r3, r3, #4
 800766c:	e002      	b.n	8007674 <get_fat+0xc0>
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007674:	617b      	str	r3, [r7, #20]
			break;
 8007676:	e03f      	b.n	80076f8 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	6a1a      	ldr	r2, [r3, #32]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	0a1b      	lsrs	r3, r3, #8
 8007680:	4413      	add	r3, r2
 8007682:	4619      	mov	r1, r3
 8007684:	6938      	ldr	r0, [r7, #16]
 8007686:	f7ff fedb 	bl	8007440 <move_window>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d130      	bne.n	80076f2 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	005b      	lsls	r3, r3, #1
 800769a:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800769e:	4413      	add	r3, r2
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7ff fc2b 	bl	8006efc <ld_word>
 80076a6:	4603      	mov	r3, r0
 80076a8:	617b      	str	r3, [r7, #20]
			break;
 80076aa:	e025      	b.n	80076f8 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	6a1a      	ldr	r2, [r3, #32]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	09db      	lsrs	r3, r3, #7
 80076b4:	4413      	add	r3, r2
 80076b6:	4619      	mov	r1, r3
 80076b8:	6938      	ldr	r0, [r7, #16]
 80076ba:	f7ff fec1 	bl	8007440 <move_window>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d118      	bne.n	80076f6 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80076d2:	4413      	add	r3, r2
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7ff fc28 	bl	8006f2a <ld_dword>
 80076da:	4603      	mov	r3, r0
 80076dc:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80076e0:	617b      	str	r3, [r7, #20]
			break;
 80076e2:	e009      	b.n	80076f8 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80076e4:	2301      	movs	r3, #1
 80076e6:	617b      	str	r3, [r7, #20]
 80076e8:	e006      	b.n	80076f8 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80076ea:	bf00      	nop
 80076ec:	e004      	b.n	80076f8 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80076ee:	bf00      	nop
 80076f0:	e002      	b.n	80076f8 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80076f2:	bf00      	nop
 80076f4:	e000      	b.n	80076f8 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80076f6:	bf00      	nop
		}
	}

	return val;
 80076f8:	697b      	ldr	r3, [r7, #20]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3718      	adds	r7, #24
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007702:	b590      	push	{r4, r7, lr}
 8007704:	b089      	sub	sp, #36	@ 0x24
 8007706:	af00      	add	r7, sp, #0
 8007708:	60f8      	str	r0, [r7, #12]
 800770a:	60b9      	str	r1, [r7, #8]
 800770c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800770e:	2302      	movs	r3, #2
 8007710:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	2b01      	cmp	r3, #1
 8007716:	f240 80d9 	bls.w	80078cc <put_fat+0x1ca>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	429a      	cmp	r2, r3
 8007722:	f080 80d3 	bcs.w	80078cc <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	2b03      	cmp	r3, #3
 800772c:	f000 8096 	beq.w	800785c <put_fat+0x15a>
 8007730:	2b03      	cmp	r3, #3
 8007732:	f300 80cb 	bgt.w	80078cc <put_fat+0x1ca>
 8007736:	2b01      	cmp	r3, #1
 8007738:	d002      	beq.n	8007740 <put_fat+0x3e>
 800773a:	2b02      	cmp	r3, #2
 800773c:	d06e      	beq.n	800781c <put_fat+0x11a>
 800773e:	e0c5      	b.n	80078cc <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	61bb      	str	r3, [r7, #24]
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	085b      	lsrs	r3, r3, #1
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	4413      	add	r3, r2
 800774c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6a1a      	ldr	r2, [r3, #32]
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	0a5b      	lsrs	r3, r3, #9
 8007756:	4413      	add	r3, r2
 8007758:	4619      	mov	r1, r3
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f7ff fe70 	bl	8007440 <move_window>
 8007760:	4603      	mov	r3, r0
 8007762:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007764:	7ffb      	ldrb	r3, [r7, #31]
 8007766:	2b00      	cmp	r3, #0
 8007768:	f040 80a9 	bne.w	80078be <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	1c59      	adds	r1, r3, #1
 8007776:	61b9      	str	r1, [r7, #24]
 8007778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800777c:	4413      	add	r3, r2
 800777e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00d      	beq.n	80077a6 <put_fat+0xa4>
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	b25b      	sxtb	r3, r3
 8007790:	f003 030f 	and.w	r3, r3, #15
 8007794:	b25a      	sxtb	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	b2db      	uxtb	r3, r3
 800779a:	011b      	lsls	r3, r3, #4
 800779c:	b25b      	sxtb	r3, r3
 800779e:	4313      	orrs	r3, r2
 80077a0:	b25b      	sxtb	r3, r3
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	e001      	b.n	80077aa <put_fat+0xa8>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2201      	movs	r2, #1
 80077b2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6a1a      	ldr	r2, [r3, #32]
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	0a5b      	lsrs	r3, r3, #9
 80077bc:	4413      	add	r3, r2
 80077be:	4619      	mov	r1, r3
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f7ff fe3d 	bl	8007440 <move_window>
 80077c6:	4603      	mov	r3, r0
 80077c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80077ca:	7ffb      	ldrb	r3, [r7, #31]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d178      	bne.n	80078c2 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077dc:	4413      	add	r3, r2
 80077de:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d003      	beq.n	80077f2 <put_fat+0xf0>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	091b      	lsrs	r3, r3, #4
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	e00e      	b.n	8007810 <put_fat+0x10e>
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	b25b      	sxtb	r3, r3
 80077f8:	f023 030f 	bic.w	r3, r3, #15
 80077fc:	b25a      	sxtb	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	0a1b      	lsrs	r3, r3, #8
 8007802:	b25b      	sxtb	r3, r3
 8007804:	f003 030f 	and.w	r3, r3, #15
 8007808:	b25b      	sxtb	r3, r3
 800780a:	4313      	orrs	r3, r2
 800780c:	b25b      	sxtb	r3, r3
 800780e:	b2db      	uxtb	r3, r3
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2201      	movs	r2, #1
 8007818:	70da      	strb	r2, [r3, #3]
			break;
 800781a:	e057      	b.n	80078cc <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6a1a      	ldr	r2, [r3, #32]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	0a1b      	lsrs	r3, r3, #8
 8007824:	4413      	add	r3, r2
 8007826:	4619      	mov	r1, r3
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f7ff fe09 	bl	8007440 <move_window>
 800782e:	4603      	mov	r3, r0
 8007830:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007832:	7ffb      	ldrb	r3, [r7, #31]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d146      	bne.n	80078c6 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	005b      	lsls	r3, r3, #1
 8007842:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007846:	4413      	add	r3, r2
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	b292      	uxth	r2, r2
 800784c:	4611      	mov	r1, r2
 800784e:	4618      	mov	r0, r3
 8007850:	f7ff fb8d 	bl	8006f6e <st_word>
			fs->wflag = 1;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2201      	movs	r2, #1
 8007858:	70da      	strb	r2, [r3, #3]
			break;
 800785a:	e037      	b.n	80078cc <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6a1a      	ldr	r2, [r3, #32]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	09db      	lsrs	r3, r3, #7
 8007864:	4413      	add	r3, r2
 8007866:	4619      	mov	r1, r3
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f7ff fde9 	bl	8007440 <move_window>
 800786e:	4603      	mov	r3, r0
 8007870:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007872:	7ffb      	ldrb	r3, [r7, #31]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d128      	bne.n	80078ca <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800788c:	4413      	add	r3, r2
 800788e:	4618      	mov	r0, r3
 8007890:	f7ff fb4b 	bl	8006f2a <ld_dword>
 8007894:	4603      	mov	r3, r0
 8007896:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800789a:	4323      	orrs	r3, r4
 800789c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80078ac:	4413      	add	r3, r2
 80078ae:	6879      	ldr	r1, [r7, #4]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7ff fb76 	bl	8006fa2 <st_dword>
			fs->wflag = 1;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2201      	movs	r2, #1
 80078ba:	70da      	strb	r2, [r3, #3]
			break;
 80078bc:	e006      	b.n	80078cc <put_fat+0x1ca>
			if (res != FR_OK) break;
 80078be:	bf00      	nop
 80078c0:	e004      	b.n	80078cc <put_fat+0x1ca>
			if (res != FR_OK) break;
 80078c2:	bf00      	nop
 80078c4:	e002      	b.n	80078cc <put_fat+0x1ca>
			if (res != FR_OK) break;
 80078c6:	bf00      	nop
 80078c8:	e000      	b.n	80078cc <put_fat+0x1ca>
			if (res != FR_OK) break;
 80078ca:	bf00      	nop
		}
	}
	return res;
 80078cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3724      	adds	r7, #36	@ 0x24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd90      	pop	{r4, r7, pc}

080078d6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b088      	sub	sp, #32
 80078da:	af00      	add	r7, sp, #0
 80078dc:	60f8      	str	r0, [r7, #12]
 80078de:	60b9      	str	r1, [r7, #8]
 80078e0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d904      	bls.n	80078fc <remove_chain+0x26>
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d301      	bcc.n	8007900 <remove_chain+0x2a>
 80078fc:	2302      	movs	r3, #2
 80078fe:	e04b      	b.n	8007998 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00c      	beq.n	8007920 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007906:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800790a:	6879      	ldr	r1, [r7, #4]
 800790c:	69b8      	ldr	r0, [r7, #24]
 800790e:	f7ff fef8 	bl	8007702 <put_fat>
 8007912:	4603      	mov	r3, r0
 8007914:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007916:	7ffb      	ldrb	r3, [r7, #31]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <remove_chain+0x4a>
 800791c:	7ffb      	ldrb	r3, [r7, #31]
 800791e:	e03b      	b.n	8007998 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007920:	68b9      	ldr	r1, [r7, #8]
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f7ff fe46 	bl	80075b4 <get_fat>
 8007928:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d031      	beq.n	8007994 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d101      	bne.n	800793a <remove_chain+0x64>
 8007936:	2302      	movs	r3, #2
 8007938:	e02e      	b.n	8007998 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007940:	d101      	bne.n	8007946 <remove_chain+0x70>
 8007942:	2301      	movs	r3, #1
 8007944:	e028      	b.n	8007998 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007946:	2200      	movs	r2, #0
 8007948:	68b9      	ldr	r1, [r7, #8]
 800794a:	69b8      	ldr	r0, [r7, #24]
 800794c:	f7ff fed9 	bl	8007702 <put_fat>
 8007950:	4603      	mov	r3, r0
 8007952:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007954:	7ffb      	ldrb	r3, [r7, #31]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d001      	beq.n	800795e <remove_chain+0x88>
 800795a:	7ffb      	ldrb	r3, [r7, #31]
 800795c:	e01c      	b.n	8007998 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	691a      	ldr	r2, [r3, #16]
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	3b02      	subs	r3, #2
 8007968:	429a      	cmp	r2, r3
 800796a:	d20b      	bcs.n	8007984 <remove_chain+0xae>
			fs->free_clst++;
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	1c5a      	adds	r2, r3, #1
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	791b      	ldrb	r3, [r3, #4]
 800797a:	f043 0301 	orr.w	r3, r3, #1
 800797e:	b2da      	uxtb	r2, r3
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	695b      	ldr	r3, [r3, #20]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	429a      	cmp	r2, r3
 8007990:	d3c6      	bcc.n	8007920 <remove_chain+0x4a>
 8007992:	e000      	b.n	8007996 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007994:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3720      	adds	r7, #32
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b088      	sub	sp, #32
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10d      	bne.n	80079d2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d004      	beq.n	80079cc <create_chain+0x2c>
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d31b      	bcc.n	8007a04 <create_chain+0x64>
 80079cc:	2301      	movs	r3, #1
 80079ce:	61bb      	str	r3, [r7, #24]
 80079d0:	e018      	b.n	8007a04 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7ff fded 	bl	80075b4 <get_fat>
 80079da:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d801      	bhi.n	80079e6 <create_chain+0x46>
 80079e2:	2301      	movs	r3, #1
 80079e4:	e070      	b.n	8007ac8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079ec:	d101      	bne.n	80079f2 <create_chain+0x52>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	e06a      	b.n	8007ac8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d201      	bcs.n	8007a00 <create_chain+0x60>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	e063      	b.n	8007ac8 <create_chain+0x128>
		scl = clst;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	69fa      	ldr	r2, [r7, #28]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d307      	bcc.n	8007a28 <create_chain+0x88>
				ncl = 2;
 8007a18:	2302      	movs	r3, #2
 8007a1a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007a1c:	69fa      	ldr	r2, [r7, #28]
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d901      	bls.n	8007a28 <create_chain+0x88>
 8007a24:	2300      	movs	r3, #0
 8007a26:	e04f      	b.n	8007ac8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007a28:	69f9      	ldr	r1, [r7, #28]
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7ff fdc2 	bl	80075b4 <get_fat>
 8007a30:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00e      	beq.n	8007a56 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d003      	beq.n	8007a46 <create_chain+0xa6>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a44:	d101      	bne.n	8007a4a <create_chain+0xaa>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	e03e      	b.n	8007ac8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007a4a:	69fa      	ldr	r2, [r7, #28]
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d1da      	bne.n	8007a08 <create_chain+0x68>
 8007a52:	2300      	movs	r3, #0
 8007a54:	e038      	b.n	8007ac8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007a56:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007a58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a5c:	69f9      	ldr	r1, [r7, #28]
 8007a5e:	6938      	ldr	r0, [r7, #16]
 8007a60:	f7ff fe4f 	bl	8007702 <put_fat>
 8007a64:	4603      	mov	r3, r0
 8007a66:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007a68:	7dfb      	ldrb	r3, [r7, #23]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d109      	bne.n	8007a82 <create_chain+0xe2>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d006      	beq.n	8007a82 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007a74:	69fa      	ldr	r2, [r7, #28]
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	6938      	ldr	r0, [r7, #16]
 8007a7a:	f7ff fe42 	bl	8007702 <put_fat>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007a82:	7dfb      	ldrb	r3, [r7, #23]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d116      	bne.n	8007ab6 <create_chain+0x116>
		fs->last_clst = ncl;
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	69fa      	ldr	r2, [r7, #28]
 8007a8c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	691a      	ldr	r2, [r3, #16]
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	3b02      	subs	r3, #2
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d804      	bhi.n	8007aa6 <create_chain+0x106>
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	1e5a      	subs	r2, r3, #1
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	791b      	ldrb	r3, [r3, #4]
 8007aaa:	f043 0301 	orr.w	r3, r3, #1
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	711a      	strb	r2, [r3, #4]
 8007ab4:	e007      	b.n	8007ac6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d102      	bne.n	8007ac2 <create_chain+0x122>
 8007abc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ac0:	e000      	b.n	8007ac4 <create_chain+0x124>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007ac6:	69fb      	ldr	r3, [r7, #28]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3720      	adds	r7, #32
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b087      	sub	sp, #28
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	0a5b      	lsrs	r3, r3, #9
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	8952      	ldrh	r2, [r2, #10]
 8007af0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007af4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	1d1a      	adds	r2, r3, #4
 8007afa:	613a      	str	r2, [r7, #16]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <clmt_clust+0x3a>
 8007b06:	2300      	movs	r3, #0
 8007b08:	e010      	b.n	8007b2c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d307      	bcc.n	8007b22 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	617b      	str	r3, [r7, #20]
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007b20:	e7e9      	b.n	8007af6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007b22:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	4413      	add	r3, r2
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	371c      	adds	r7, #28
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bc80      	pop	{r7}
 8007b34:	4770      	bx	lr

08007b36 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b086      	sub	sp, #24
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b4c:	d204      	bcs.n	8007b58 <dir_sdi+0x22>
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	f003 031f 	and.w	r3, r3, #31
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d001      	beq.n	8007b5c <dir_sdi+0x26>
		return FR_INT_ERR;
 8007b58:	2302      	movs	r3, #2
 8007b5a:	e063      	b.n	8007c24 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d106      	bne.n	8007b7c <dir_sdi+0x46>
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d902      	bls.n	8007b7c <dir_sdi+0x46>
		clst = fs->dirbase;
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b7a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10c      	bne.n	8007b9c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	095b      	lsrs	r3, r3, #5
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	8912      	ldrh	r2, [r2, #8]
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d301      	bcc.n	8007b92 <dir_sdi+0x5c>
 8007b8e:	2302      	movs	r3, #2
 8007b90:	e048      	b.n	8007c24 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	61da      	str	r2, [r3, #28]
 8007b9a:	e029      	b.n	8007bf0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	895b      	ldrh	r3, [r3, #10]
 8007ba0:	025b      	lsls	r3, r3, #9
 8007ba2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007ba4:	e019      	b.n	8007bda <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6979      	ldr	r1, [r7, #20]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7ff fd02 	bl	80075b4 <get_fat>
 8007bb0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bb8:	d101      	bne.n	8007bbe <dir_sdi+0x88>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e032      	b.n	8007c24 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d904      	bls.n	8007bce <dir_sdi+0x98>
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d301      	bcc.n	8007bd2 <dir_sdi+0x9c>
 8007bce:	2302      	movs	r3, #2
 8007bd0:	e028      	b.n	8007c24 <dir_sdi+0xee>
			ofs -= csz;
 8007bd2:	683a      	ldr	r2, [r7, #0]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007bda:	683a      	ldr	r2, [r7, #0]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d2e1      	bcs.n	8007ba6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007be2:	6979      	ldr	r1, [r7, #20]
 8007be4:	6938      	ldr	r0, [r7, #16]
 8007be6:	f7ff fcc7 	bl	8007578 <clust2sect>
 8007bea:	4602      	mov	r2, r0
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d101      	bne.n	8007c02 <dir_sdi+0xcc>
 8007bfe:	2302      	movs	r3, #2
 8007c00:	e010      	b.n	8007c24 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	69da      	ldr	r2, [r3, #28]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	0a5b      	lsrs	r3, r3, #9
 8007c0a:	441a      	add	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c1c:	441a      	add	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3718      	adds	r7, #24
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	695b      	ldr	r3, [r3, #20]
 8007c40:	3320      	adds	r3, #32
 8007c42:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	69db      	ldr	r3, [r3, #28]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <dir_next+0x28>
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c52:	d301      	bcc.n	8007c58 <dir_next+0x2c>
 8007c54:	2304      	movs	r3, #4
 8007c56:	e0aa      	b.n	8007dae <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f040 8098 	bne.w	8007d94 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	69db      	ldr	r3, [r3, #28]
 8007c68:	1c5a      	adds	r2, r3, #1
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10b      	bne.n	8007c8e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	095b      	lsrs	r3, r3, #5
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	8912      	ldrh	r2, [r2, #8]
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	f0c0 8088 	bcc.w	8007d94 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	61da      	str	r2, [r3, #28]
 8007c8a:	2304      	movs	r3, #4
 8007c8c:	e08f      	b.n	8007dae <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	0a5b      	lsrs	r3, r3, #9
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	8952      	ldrh	r2, [r2, #10]
 8007c96:	3a01      	subs	r2, #1
 8007c98:	4013      	ands	r3, r2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d17a      	bne.n	8007d94 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	4610      	mov	r0, r2
 8007ca8:	f7ff fc84 	bl	80075b4 <get_fat>
 8007cac:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d801      	bhi.n	8007cb8 <dir_next+0x8c>
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	e07a      	b.n	8007dae <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cbe:	d101      	bne.n	8007cc4 <dir_next+0x98>
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e074      	b.n	8007dae <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	695b      	ldr	r3, [r3, #20]
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d358      	bcc.n	8007d80 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d104      	bne.n	8007cde <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	61da      	str	r2, [r3, #28]
 8007cda:	2304      	movs	r3, #4
 8007cdc:	e067      	b.n	8007dae <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	4610      	mov	r0, r2
 8007ce8:	f7ff fe5a 	bl	80079a0 <create_chain>
 8007cec:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <dir_next+0xcc>
 8007cf4:	2307      	movs	r3, #7
 8007cf6:	e05a      	b.n	8007dae <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d101      	bne.n	8007d02 <dir_next+0xd6>
 8007cfe:	2302      	movs	r3, #2
 8007d00:	e055      	b.n	8007dae <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d08:	d101      	bne.n	8007d0e <dir_next+0xe2>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e04f      	b.n	8007dae <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f7ff fb52 	bl	80073b8 <sync_window>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <dir_next+0xf2>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e047      	b.n	8007dae <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	3330      	adds	r3, #48	@ 0x30
 8007d22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d26:	2100      	movs	r1, #0
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7ff f985 	bl	8007038 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007d2e:	2300      	movs	r3, #0
 8007d30:	613b      	str	r3, [r7, #16]
 8007d32:	6979      	ldr	r1, [r7, #20]
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f7ff fc1f 	bl	8007578 <clust2sect>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007d40:	e012      	b.n	8007d68 <dir_next+0x13c>
						fs->wflag = 1;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2201      	movs	r2, #1
 8007d46:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f7ff fb35 	bl	80073b8 <sync_window>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <dir_next+0x12c>
 8007d54:	2301      	movs	r3, #1
 8007d56:	e02a      	b.n	8007dae <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	613b      	str	r3, [r7, #16]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d62:	1c5a      	adds	r2, r3, #1
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	895b      	ldrh	r3, [r3, #10]
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d3e6      	bcc.n	8007d42 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	1ad2      	subs	r2, r2, r3
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007d86:	6979      	ldr	r1, [r7, #20]
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f7ff fbf5 	bl	8007578 <clust2sect>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da6:	441a      	add	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3718      	adds	r7, #24
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b086      	sub	sp, #24
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f7ff feb4 	bl	8007b36 <dir_sdi>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007dd2:	7dfb      	ldrb	r3, [r7, #23]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d12b      	bne.n	8007e30 <dir_alloc+0x7a>
		n = 0;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	69db      	ldr	r3, [r3, #28]
 8007de0:	4619      	mov	r1, r3
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f7ff fb2c 	bl	8007440 <move_window>
 8007de8:	4603      	mov	r3, r0
 8007dea:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007dec:	7dfb      	ldrb	r3, [r7, #23]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d11d      	bne.n	8007e2e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	2be5      	cmp	r3, #229	@ 0xe5
 8007dfa:	d004      	beq.n	8007e06 <dir_alloc+0x50>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a1b      	ldr	r3, [r3, #32]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d107      	bne.n	8007e16 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	613b      	str	r3, [r7, #16]
 8007e0c:	693a      	ldr	r2, [r7, #16]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d102      	bne.n	8007e1a <dir_alloc+0x64>
 8007e14:	e00c      	b.n	8007e30 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007e16:	2300      	movs	r3, #0
 8007e18:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007e1a:	2101      	movs	r1, #1
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f7ff ff05 	bl	8007c2c <dir_next>
 8007e22:	4603      	mov	r3, r0
 8007e24:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007e26:	7dfb      	ldrb	r3, [r7, #23]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d0d7      	beq.n	8007ddc <dir_alloc+0x26>
 8007e2c:	e000      	b.n	8007e30 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007e2e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007e30:	7dfb      	ldrb	r3, [r7, #23]
 8007e32:	2b04      	cmp	r3, #4
 8007e34:	d101      	bne.n	8007e3a <dir_alloc+0x84>
 8007e36:	2307      	movs	r3, #7
 8007e38:	75fb      	strb	r3, [r7, #23]
	return res;
 8007e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3718      	adds	r7, #24
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	331a      	adds	r3, #26
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7ff f852 	bl	8006efc <ld_word>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	2b03      	cmp	r3, #3
 8007e62:	d109      	bne.n	8007e78 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	3314      	adds	r3, #20
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7ff f847 	bl	8006efc <ld_word>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	041b      	lsls	r3, r3, #16
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007e78:	68fb      	ldr	r3, [r7, #12]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	60f8      	str	r0, [r7, #12]
 8007e8a:	60b9      	str	r1, [r7, #8]
 8007e8c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	331a      	adds	r3, #26
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	b292      	uxth	r2, r2
 8007e96:	4611      	mov	r1, r2
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7ff f868 	bl	8006f6e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	2b03      	cmp	r3, #3
 8007ea4:	d109      	bne.n	8007eba <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	f103 0214 	add.w	r2, r3, #20
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	0c1b      	lsrs	r3, r3, #16
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	f7ff f85a 	bl	8006f6e <st_word>
	}
}
 8007eba:	bf00      	nop
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b086      	sub	sp, #24
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7ff fe2f 	bl	8007b36 <dir_sdi>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007edc:	7dfb      	ldrb	r3, [r7, #23]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <dir_find+0x24>
 8007ee2:	7dfb      	ldrb	r3, [r7, #23]
 8007ee4:	e03e      	b.n	8007f64 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	4619      	mov	r1, r3
 8007eec:	6938      	ldr	r0, [r7, #16]
 8007eee:	f7ff faa7 	bl	8007440 <move_window>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007ef6:	7dfb      	ldrb	r3, [r7, #23]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d12f      	bne.n	8007f5c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a1b      	ldr	r3, [r3, #32]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007f04:	7bfb      	ldrb	r3, [r7, #15]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d102      	bne.n	8007f10 <dir_find+0x4e>
 8007f0a:	2304      	movs	r3, #4
 8007f0c:	75fb      	strb	r3, [r7, #23]
 8007f0e:	e028      	b.n	8007f62 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a1b      	ldr	r3, [r3, #32]
 8007f14:	330b      	adds	r3, #11
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	330b      	adds	r3, #11
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	f003 0308 	and.w	r3, r3, #8
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10a      	bne.n	8007f48 <dir_find+0x86>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a18      	ldr	r0, [r3, #32]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	3324      	adds	r3, #36	@ 0x24
 8007f3a:	220b      	movs	r2, #11
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	f7ff f895 	bl	800706c <mem_cmp>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00b      	beq.n	8007f60 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007f48:	2100      	movs	r1, #0
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7ff fe6e 	bl	8007c2c <dir_next>
 8007f50:	4603      	mov	r3, r0
 8007f52:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007f54:	7dfb      	ldrb	r3, [r7, #23]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d0c5      	beq.n	8007ee6 <dir_find+0x24>
 8007f5a:	e002      	b.n	8007f62 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007f5c:	bf00      	nop
 8007f5e:	e000      	b.n	8007f62 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007f60:	bf00      	nop

	return res;
 8007f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3718      	adds	r7, #24
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007f7a:	2101      	movs	r1, #1
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7ff ff1a 	bl	8007db6 <dir_alloc>
 8007f82:	4603      	mov	r3, r0
 8007f84:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d11c      	bne.n	8007fc6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	69db      	ldr	r3, [r3, #28]
 8007f90:	4619      	mov	r1, r3
 8007f92:	68b8      	ldr	r0, [r7, #8]
 8007f94:	f7ff fa54 	bl	8007440 <move_window>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d111      	bne.n	8007fc6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	2220      	movs	r2, #32
 8007fa8:	2100      	movs	r1, #0
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7ff f844 	bl	8007038 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a18      	ldr	r0, [r3, #32]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	3324      	adds	r3, #36	@ 0x24
 8007fb8:	220b      	movs	r2, #11
 8007fba:	4619      	mov	r1, r3
 8007fbc:	f7ff f81c 	bl	8006ff8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b088      	sub	sp, #32
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	3324      	adds	r3, #36	@ 0x24
 8007fe4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007fe6:	220b      	movs	r2, #11
 8007fe8:	2120      	movs	r1, #32
 8007fea:	68b8      	ldr	r0, [r7, #8]
 8007fec:	f7ff f824 	bl	8007038 <mem_set>
	si = i = 0; ni = 8;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	613b      	str	r3, [r7, #16]
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	61fb      	str	r3, [r7, #28]
 8007ff8:	2308      	movs	r3, #8
 8007ffa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	61fa      	str	r2, [r7, #28]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	4413      	add	r3, r2
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800800a:	7efb      	ldrb	r3, [r7, #27]
 800800c:	2b20      	cmp	r3, #32
 800800e:	d94e      	bls.n	80080ae <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008010:	7efb      	ldrb	r3, [r7, #27]
 8008012:	2b2f      	cmp	r3, #47	@ 0x2f
 8008014:	d006      	beq.n	8008024 <create_name+0x54>
 8008016:	7efb      	ldrb	r3, [r7, #27]
 8008018:	2b5c      	cmp	r3, #92	@ 0x5c
 800801a:	d110      	bne.n	800803e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800801c:	e002      	b.n	8008024 <create_name+0x54>
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	3301      	adds	r3, #1
 8008022:	61fb      	str	r3, [r7, #28]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	4413      	add	r3, r2
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	2b2f      	cmp	r3, #47	@ 0x2f
 800802e:	d0f6      	beq.n	800801e <create_name+0x4e>
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	4413      	add	r3, r2
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2b5c      	cmp	r3, #92	@ 0x5c
 800803a:	d0f0      	beq.n	800801e <create_name+0x4e>
			break;
 800803c:	e038      	b.n	80080b0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800803e:	7efb      	ldrb	r3, [r7, #27]
 8008040:	2b2e      	cmp	r3, #46	@ 0x2e
 8008042:	d003      	beq.n	800804c <create_name+0x7c>
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	429a      	cmp	r2, r3
 800804a:	d30c      	bcc.n	8008066 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	2b0b      	cmp	r3, #11
 8008050:	d002      	beq.n	8008058 <create_name+0x88>
 8008052:	7efb      	ldrb	r3, [r7, #27]
 8008054:	2b2e      	cmp	r3, #46	@ 0x2e
 8008056:	d001      	beq.n	800805c <create_name+0x8c>
 8008058:	2306      	movs	r3, #6
 800805a:	e044      	b.n	80080e6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800805c:	2308      	movs	r3, #8
 800805e:	613b      	str	r3, [r7, #16]
 8008060:	230b      	movs	r3, #11
 8008062:	617b      	str	r3, [r7, #20]
			continue;
 8008064:	e022      	b.n	80080ac <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008066:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800806a:	2b00      	cmp	r3, #0
 800806c:	da04      	bge.n	8008078 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800806e:	7efb      	ldrb	r3, [r7, #27]
 8008070:	3b80      	subs	r3, #128	@ 0x80
 8008072:	4a1f      	ldr	r2, [pc, #124]	@ (80080f0 <create_name+0x120>)
 8008074:	5cd3      	ldrb	r3, [r2, r3]
 8008076:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008078:	7efb      	ldrb	r3, [r7, #27]
 800807a:	4619      	mov	r1, r3
 800807c:	481d      	ldr	r0, [pc, #116]	@ (80080f4 <create_name+0x124>)
 800807e:	f7ff f81b 	bl	80070b8 <chk_chr>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <create_name+0xbc>
 8008088:	2306      	movs	r3, #6
 800808a:	e02c      	b.n	80080e6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800808c:	7efb      	ldrb	r3, [r7, #27]
 800808e:	2b60      	cmp	r3, #96	@ 0x60
 8008090:	d905      	bls.n	800809e <create_name+0xce>
 8008092:	7efb      	ldrb	r3, [r7, #27]
 8008094:	2b7a      	cmp	r3, #122	@ 0x7a
 8008096:	d802      	bhi.n	800809e <create_name+0xce>
 8008098:	7efb      	ldrb	r3, [r7, #27]
 800809a:	3b20      	subs	r3, #32
 800809c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	1c5a      	adds	r2, r3, #1
 80080a2:	613a      	str	r2, [r7, #16]
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	4413      	add	r3, r2
 80080a8:	7efa      	ldrb	r2, [r7, #27]
 80080aa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80080ac:	e7a6      	b.n	8007ffc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80080ae:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	441a      	add	r2, r3
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d101      	bne.n	80080c4 <create_name+0xf4>
 80080c0:	2306      	movs	r3, #6
 80080c2:	e010      	b.n	80080e6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	2be5      	cmp	r3, #229	@ 0xe5
 80080ca:	d102      	bne.n	80080d2 <create_name+0x102>
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	2205      	movs	r2, #5
 80080d0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80080d2:	7efb      	ldrb	r3, [r7, #27]
 80080d4:	2b20      	cmp	r3, #32
 80080d6:	d801      	bhi.n	80080dc <create_name+0x10c>
 80080d8:	2204      	movs	r2, #4
 80080da:	e000      	b.n	80080de <create_name+0x10e>
 80080dc:	2200      	movs	r2, #0
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	330b      	adds	r3, #11
 80080e2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80080e4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3720      	adds	r7, #32
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	0800c0b8 	.word	0x0800c0b8
 80080f4:	0800bfac 	.word	0x0800bfac

080080f8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800810c:	e002      	b.n	8008114 <follow_path+0x1c>
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	3301      	adds	r3, #1
 8008112:	603b      	str	r3, [r7, #0]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	2b2f      	cmp	r3, #47	@ 0x2f
 800811a:	d0f8      	beq.n	800810e <follow_path+0x16>
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	2b5c      	cmp	r3, #92	@ 0x5c
 8008122:	d0f4      	beq.n	800810e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	2200      	movs	r2, #0
 8008128:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	2b1f      	cmp	r3, #31
 8008130:	d80a      	bhi.n	8008148 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2280      	movs	r2, #128	@ 0x80
 8008136:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800813a:	2100      	movs	r1, #0
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f7ff fcfa 	bl	8007b36 <dir_sdi>
 8008142:	4603      	mov	r3, r0
 8008144:	75fb      	strb	r3, [r7, #23]
 8008146:	e043      	b.n	80081d0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008148:	463b      	mov	r3, r7
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7ff ff3f 	bl	8007fd0 <create_name>
 8008152:	4603      	mov	r3, r0
 8008154:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008156:	7dfb      	ldrb	r3, [r7, #23]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d134      	bne.n	80081c6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f7ff feb0 	bl	8007ec2 <dir_find>
 8008162:	4603      	mov	r3, r0
 8008164:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800816c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800816e:	7dfb      	ldrb	r3, [r7, #23]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00a      	beq.n	800818a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008174:	7dfb      	ldrb	r3, [r7, #23]
 8008176:	2b04      	cmp	r3, #4
 8008178:	d127      	bne.n	80081ca <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800817a:	7afb      	ldrb	r3, [r7, #11]
 800817c:	f003 0304 	and.w	r3, r3, #4
 8008180:	2b00      	cmp	r3, #0
 8008182:	d122      	bne.n	80081ca <follow_path+0xd2>
 8008184:	2305      	movs	r3, #5
 8008186:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008188:	e01f      	b.n	80081ca <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800818a:	7afb      	ldrb	r3, [r7, #11]
 800818c:	f003 0304 	and.w	r3, r3, #4
 8008190:	2b00      	cmp	r3, #0
 8008192:	d11c      	bne.n	80081ce <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	799b      	ldrb	r3, [r3, #6]
 8008198:	f003 0310 	and.w	r3, r3, #16
 800819c:	2b00      	cmp	r3, #0
 800819e:	d102      	bne.n	80081a6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80081a0:	2305      	movs	r3, #5
 80081a2:	75fb      	strb	r3, [r7, #23]
 80081a4:	e014      	b.n	80081d0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	695b      	ldr	r3, [r3, #20]
 80081b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b4:	4413      	add	r3, r2
 80081b6:	4619      	mov	r1, r3
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f7ff fe43 	bl	8007e44 <ld_clust>
 80081be:	4602      	mov	r2, r0
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80081c4:	e7c0      	b.n	8008148 <follow_path+0x50>
			if (res != FR_OK) break;
 80081c6:	bf00      	nop
 80081c8:	e002      	b.n	80081d0 <follow_path+0xd8>
				break;
 80081ca:	bf00      	nop
 80081cc:	e000      	b.n	80081d0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80081ce:	bf00      	nop
			}
		}
	}

	return res;
 80081d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3718      	adds	r7, #24
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80081da:	b480      	push	{r7}
 80081dc:	b087      	sub	sp, #28
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80081e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80081e6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d031      	beq.n	8008254 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	617b      	str	r3, [r7, #20]
 80081f6:	e002      	b.n	80081fe <get_ldnumber+0x24>
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	3301      	adds	r3, #1
 80081fc:	617b      	str	r3, [r7, #20]
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	2b20      	cmp	r3, #32
 8008204:	d903      	bls.n	800820e <get_ldnumber+0x34>
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	2b3a      	cmp	r3, #58	@ 0x3a
 800820c:	d1f4      	bne.n	80081f8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	2b3a      	cmp	r3, #58	@ 0x3a
 8008214:	d11c      	bne.n	8008250 <get_ldnumber+0x76>
			tp = *path;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	1c5a      	adds	r2, r3, #1
 8008220:	60fa      	str	r2, [r7, #12]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	3b30      	subs	r3, #48	@ 0x30
 8008226:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2b09      	cmp	r3, #9
 800822c:	d80e      	bhi.n	800824c <get_ldnumber+0x72>
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	429a      	cmp	r2, r3
 8008234:	d10a      	bne.n	800824c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d107      	bne.n	800824c <get_ldnumber+0x72>
					vol = (int)i;
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	3301      	adds	r3, #1
 8008244:	617b      	str	r3, [r7, #20]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	e002      	b.n	8008256 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008250:	2300      	movs	r3, #0
 8008252:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008254:	693b      	ldr	r3, [r7, #16]
}
 8008256:	4618      	mov	r0, r3
 8008258:	371c      	adds	r7, #28
 800825a:	46bd      	mov	sp, r7
 800825c:	bc80      	pop	{r7}
 800825e:	4770      	bx	lr

08008260 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	70da      	strb	r2, [r3, #3]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008276:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7ff f8e0 	bl	8007440 <move_window>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <check_fs+0x2a>
 8008286:	2304      	movs	r3, #4
 8008288:	e038      	b.n	80082fc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	3330      	adds	r3, #48	@ 0x30
 800828e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008292:	4618      	mov	r0, r3
 8008294:	f7fe fe32 	bl	8006efc <ld_word>
 8008298:	4603      	mov	r3, r0
 800829a:	461a      	mov	r2, r3
 800829c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d001      	beq.n	80082a8 <check_fs+0x48>
 80082a4:	2303      	movs	r3, #3
 80082a6:	e029      	b.n	80082fc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80082ae:	2be9      	cmp	r3, #233	@ 0xe9
 80082b0:	d009      	beq.n	80082c6 <check_fs+0x66>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80082b8:	2beb      	cmp	r3, #235	@ 0xeb
 80082ba:	d11e      	bne.n	80082fa <check_fs+0x9a>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80082c2:	2b90      	cmp	r3, #144	@ 0x90
 80082c4:	d119      	bne.n	80082fa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	3330      	adds	r3, #48	@ 0x30
 80082ca:	3336      	adds	r3, #54	@ 0x36
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fe fe2c 	bl	8006f2a <ld_dword>
 80082d2:	4603      	mov	r3, r0
 80082d4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80082d8:	4a0a      	ldr	r2, [pc, #40]	@ (8008304 <check_fs+0xa4>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d101      	bne.n	80082e2 <check_fs+0x82>
 80082de:	2300      	movs	r3, #0
 80082e0:	e00c      	b.n	80082fc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	3330      	adds	r3, #48	@ 0x30
 80082e6:	3352      	adds	r3, #82	@ 0x52
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fe fe1e 	bl	8006f2a <ld_dword>
 80082ee:	4603      	mov	r3, r0
 80082f0:	4a05      	ldr	r2, [pc, #20]	@ (8008308 <check_fs+0xa8>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d101      	bne.n	80082fa <check_fs+0x9a>
 80082f6:	2300      	movs	r3, #0
 80082f8:	e000      	b.n	80082fc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80082fa:	2302      	movs	r3, #2
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	00544146 	.word	0x00544146
 8008308:	33544146 	.word	0x33544146

0800830c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b096      	sub	sp, #88	@ 0x58
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	4613      	mov	r3, r2
 8008318:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	2200      	movs	r2, #0
 800831e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f7ff ff5a 	bl	80081da <get_ldnumber>
 8008326:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800832a:	2b00      	cmp	r3, #0
 800832c:	da01      	bge.n	8008332 <find_volume+0x26>
 800832e:	230b      	movs	r3, #11
 8008330:	e22d      	b.n	800878e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008332:	4aa1      	ldr	r2, [pc, #644]	@ (80085b8 <find_volume+0x2ac>)
 8008334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800833a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800833c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800833e:	2b00      	cmp	r3, #0
 8008340:	d101      	bne.n	8008346 <find_volume+0x3a>
 8008342:	230c      	movs	r3, #12
 8008344:	e223      	b.n	800878e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800834a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800834c:	79fb      	ldrb	r3, [r7, #7]
 800834e:	f023 0301 	bic.w	r3, r3, #1
 8008352:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d01a      	beq.n	8008392 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800835c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835e:	785b      	ldrb	r3, [r3, #1]
 8008360:	4618      	mov	r0, r3
 8008362:	f7fe fd2d 	bl	8006dc0 <disk_status>
 8008366:	4603      	mov	r3, r0
 8008368:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800836c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008370:	f003 0301 	and.w	r3, r3, #1
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10c      	bne.n	8008392 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008378:	79fb      	ldrb	r3, [r7, #7]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d007      	beq.n	800838e <find_volume+0x82>
 800837e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008382:	f003 0304 	and.w	r3, r3, #4
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800838a:	230a      	movs	r3, #10
 800838c:	e1ff      	b.n	800878e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800838e:	2300      	movs	r3, #0
 8008390:	e1fd      	b.n	800878e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008394:	2200      	movs	r2, #0
 8008396:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800839a:	b2da      	uxtb	r2, r3
 800839c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800839e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80083a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a2:	785b      	ldrb	r3, [r3, #1]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fe fd25 	bl	8006df4 <disk_initialize>
 80083aa:	4603      	mov	r3, r0
 80083ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80083b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80083b4:	f003 0301 	and.w	r3, r3, #1
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d001      	beq.n	80083c0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80083bc:	2303      	movs	r3, #3
 80083be:	e1e6      	b.n	800878e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80083c0:	79fb      	ldrb	r3, [r7, #7]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d007      	beq.n	80083d6 <find_volume+0xca>
 80083c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80083ca:	f003 0304 	and.w	r3, r3, #4
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80083d2:	230a      	movs	r3, #10
 80083d4:	e1db      	b.n	800878e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80083d6:	2300      	movs	r3, #0
 80083d8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80083da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80083dc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80083de:	f7ff ff3f 	bl	8008260 <check_fs>
 80083e2:	4603      	mov	r3, r0
 80083e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80083e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d149      	bne.n	8008484 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80083f0:	2300      	movs	r3, #0
 80083f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80083f4:	e01e      	b.n	8008434 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80083f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80083fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083fe:	011b      	lsls	r3, r3, #4
 8008400:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008404:	4413      	add	r3, r2
 8008406:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840a:	3304      	adds	r3, #4
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d006      	beq.n	8008420 <find_volume+0x114>
 8008412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008414:	3308      	adds	r3, #8
 8008416:	4618      	mov	r0, r3
 8008418:	f7fe fd87 	bl	8006f2a <ld_dword>
 800841c:	4602      	mov	r2, r0
 800841e:	e000      	b.n	8008422 <find_volume+0x116>
 8008420:	2200      	movs	r2, #0
 8008422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	3358      	adds	r3, #88	@ 0x58
 8008428:	443b      	add	r3, r7
 800842a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800842e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008430:	3301      	adds	r3, #1
 8008432:	643b      	str	r3, [r7, #64]	@ 0x40
 8008434:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008436:	2b03      	cmp	r3, #3
 8008438:	d9dd      	bls.n	80083f6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800843a:	2300      	movs	r3, #0
 800843c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800843e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008440:	2b00      	cmp	r3, #0
 8008442:	d002      	beq.n	800844a <find_volume+0x13e>
 8008444:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008446:	3b01      	subs	r3, #1
 8008448:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800844a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	3358      	adds	r3, #88	@ 0x58
 8008450:	443b      	add	r3, r7
 8008452:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008456:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008458:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800845a:	2b00      	cmp	r3, #0
 800845c:	d005      	beq.n	800846a <find_volume+0x15e>
 800845e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008460:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008462:	f7ff fefd 	bl	8008260 <check_fs>
 8008466:	4603      	mov	r3, r0
 8008468:	e000      	b.n	800846c <find_volume+0x160>
 800846a:	2303      	movs	r3, #3
 800846c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008470:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008474:	2b01      	cmp	r3, #1
 8008476:	d905      	bls.n	8008484 <find_volume+0x178>
 8008478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800847a:	3301      	adds	r3, #1
 800847c:	643b      	str	r3, [r7, #64]	@ 0x40
 800847e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008480:	2b03      	cmp	r3, #3
 8008482:	d9e2      	bls.n	800844a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008484:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008488:	2b04      	cmp	r3, #4
 800848a:	d101      	bne.n	8008490 <find_volume+0x184>
 800848c:	2301      	movs	r3, #1
 800848e:	e17e      	b.n	800878e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008490:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008494:	2b01      	cmp	r3, #1
 8008496:	d901      	bls.n	800849c <find_volume+0x190>
 8008498:	230d      	movs	r3, #13
 800849a:	e178      	b.n	800878e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800849c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849e:	3330      	adds	r3, #48	@ 0x30
 80084a0:	330b      	adds	r3, #11
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fe fd2a 	bl	8006efc <ld_word>
 80084a8:	4603      	mov	r3, r0
 80084aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084ae:	d001      	beq.n	80084b4 <find_volume+0x1a8>
 80084b0:	230d      	movs	r3, #13
 80084b2:	e16c      	b.n	800878e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80084b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b6:	3330      	adds	r3, #48	@ 0x30
 80084b8:	3316      	adds	r3, #22
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fe fd1e 	bl	8006efc <ld_word>
 80084c0:	4603      	mov	r3, r0
 80084c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80084c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d106      	bne.n	80084d8 <find_volume+0x1cc>
 80084ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084cc:	3330      	adds	r3, #48	@ 0x30
 80084ce:	3324      	adds	r3, #36	@ 0x24
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7fe fd2a 	bl	8006f2a <ld_dword>
 80084d6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80084d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80084dc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80084de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80084e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80084e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ea:	789b      	ldrb	r3, [r3, #2]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d005      	beq.n	80084fc <find_volume+0x1f0>
 80084f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f2:	789b      	ldrb	r3, [r3, #2]
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d001      	beq.n	80084fc <find_volume+0x1f0>
 80084f8:	230d      	movs	r3, #13
 80084fa:	e148      	b.n	800878e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80084fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084fe:	789b      	ldrb	r3, [r3, #2]
 8008500:	461a      	mov	r2, r3
 8008502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008504:	fb02 f303 	mul.w	r3, r2, r3
 8008508:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800850a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800850c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008510:	461a      	mov	r2, r3
 8008512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008514:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008518:	895b      	ldrh	r3, [r3, #10]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d008      	beq.n	8008530 <find_volume+0x224>
 800851e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008520:	895b      	ldrh	r3, [r3, #10]
 8008522:	461a      	mov	r2, r3
 8008524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008526:	895b      	ldrh	r3, [r3, #10]
 8008528:	3b01      	subs	r3, #1
 800852a:	4013      	ands	r3, r2
 800852c:	2b00      	cmp	r3, #0
 800852e:	d001      	beq.n	8008534 <find_volume+0x228>
 8008530:	230d      	movs	r3, #13
 8008532:	e12c      	b.n	800878e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008536:	3330      	adds	r3, #48	@ 0x30
 8008538:	3311      	adds	r3, #17
 800853a:	4618      	mov	r0, r3
 800853c:	f7fe fcde 	bl	8006efc <ld_word>
 8008540:	4603      	mov	r3, r0
 8008542:	461a      	mov	r2, r3
 8008544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008546:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800854a:	891b      	ldrh	r3, [r3, #8]
 800854c:	f003 030f 	and.w	r3, r3, #15
 8008550:	b29b      	uxth	r3, r3
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <find_volume+0x24e>
 8008556:	230d      	movs	r3, #13
 8008558:	e119      	b.n	800878e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800855a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800855c:	3330      	adds	r3, #48	@ 0x30
 800855e:	3313      	adds	r3, #19
 8008560:	4618      	mov	r0, r3
 8008562:	f7fe fccb 	bl	8006efc <ld_word>
 8008566:	4603      	mov	r3, r0
 8008568:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800856a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800856c:	2b00      	cmp	r3, #0
 800856e:	d106      	bne.n	800857e <find_volume+0x272>
 8008570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008572:	3330      	adds	r3, #48	@ 0x30
 8008574:	3320      	adds	r3, #32
 8008576:	4618      	mov	r0, r3
 8008578:	f7fe fcd7 	bl	8006f2a <ld_dword>
 800857c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800857e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008580:	3330      	adds	r3, #48	@ 0x30
 8008582:	330e      	adds	r3, #14
 8008584:	4618      	mov	r0, r3
 8008586:	f7fe fcb9 	bl	8006efc <ld_word>
 800858a:	4603      	mov	r3, r0
 800858c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800858e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008590:	2b00      	cmp	r3, #0
 8008592:	d101      	bne.n	8008598 <find_volume+0x28c>
 8008594:	230d      	movs	r3, #13
 8008596:	e0fa      	b.n	800878e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008598:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800859a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800859c:	4413      	add	r3, r2
 800859e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80085a0:	8912      	ldrh	r2, [r2, #8]
 80085a2:	0912      	lsrs	r2, r2, #4
 80085a4:	b292      	uxth	r2, r2
 80085a6:	4413      	add	r3, r2
 80085a8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80085aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d204      	bcs.n	80085bc <find_volume+0x2b0>
 80085b2:	230d      	movs	r3, #13
 80085b4:	e0eb      	b.n	800878e <find_volume+0x482>
 80085b6:	bf00      	nop
 80085b8:	200009a8 	.word	0x200009a8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80085bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80085c4:	8952      	ldrh	r2, [r2, #10]
 80085c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80085ca:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80085cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d101      	bne.n	80085d6 <find_volume+0x2ca>
 80085d2:	230d      	movs	r3, #13
 80085d4:	e0db      	b.n	800878e <find_volume+0x482>
		fmt = FS_FAT32;
 80085d6:	2303      	movs	r3, #3
 80085d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80085dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085de:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d802      	bhi.n	80085ec <find_volume+0x2e0>
 80085e6:	2302      	movs	r3, #2
 80085e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80085ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ee:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d802      	bhi.n	80085fc <find_volume+0x2f0>
 80085f6:	2301      	movs	r3, #1
 80085f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80085fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fe:	1c9a      	adds	r2, r3, #2
 8008600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008602:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008606:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008608:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800860a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800860c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800860e:	441a      	add	r2, r3
 8008610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008612:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008614:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008618:	441a      	add	r2, r3
 800861a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800861c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800861e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008622:	2b03      	cmp	r3, #3
 8008624:	d11e      	bne.n	8008664 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008628:	3330      	adds	r3, #48	@ 0x30
 800862a:	332a      	adds	r3, #42	@ 0x2a
 800862c:	4618      	mov	r0, r3
 800862e:	f7fe fc65 	bl	8006efc <ld_word>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <find_volume+0x330>
 8008638:	230d      	movs	r3, #13
 800863a:	e0a8      	b.n	800878e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800863c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863e:	891b      	ldrh	r3, [r3, #8]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <find_volume+0x33c>
 8008644:	230d      	movs	r3, #13
 8008646:	e0a2      	b.n	800878e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800864a:	3330      	adds	r3, #48	@ 0x30
 800864c:	332c      	adds	r3, #44	@ 0x2c
 800864e:	4618      	mov	r0, r3
 8008650:	f7fe fc6b 	bl	8006f2a <ld_dword>
 8008654:	4602      	mov	r2, r0
 8008656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008658:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800865a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800865c:	695b      	ldr	r3, [r3, #20]
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	647b      	str	r3, [r7, #68]	@ 0x44
 8008662:	e01f      	b.n	80086a4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008666:	891b      	ldrh	r3, [r3, #8]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d101      	bne.n	8008670 <find_volume+0x364>
 800866c:	230d      	movs	r3, #13
 800866e:	e08e      	b.n	800878e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008672:	6a1a      	ldr	r2, [r3, #32]
 8008674:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008676:	441a      	add	r2, r3
 8008678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800867a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800867c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008680:	2b02      	cmp	r3, #2
 8008682:	d103      	bne.n	800868c <find_volume+0x380>
 8008684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008686:	695b      	ldr	r3, [r3, #20]
 8008688:	005b      	lsls	r3, r3, #1
 800868a:	e00a      	b.n	80086a2 <find_volume+0x396>
 800868c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800868e:	695a      	ldr	r2, [r3, #20]
 8008690:	4613      	mov	r3, r2
 8008692:	005b      	lsls	r3, r3, #1
 8008694:	4413      	add	r3, r2
 8008696:	085a      	lsrs	r2, r3, #1
 8008698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	f003 0301 	and.w	r3, r3, #1
 80086a0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80086a2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80086a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a6:	699a      	ldr	r2, [r3, #24]
 80086a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086aa:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80086ae:	0a5b      	lsrs	r3, r3, #9
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d201      	bcs.n	80086b8 <find_volume+0x3ac>
 80086b4:	230d      	movs	r3, #13
 80086b6:	e06a      	b.n	800878e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80086b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80086be:	611a      	str	r2, [r3, #16]
 80086c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c2:	691a      	ldr	r2, [r3, #16]
 80086c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80086c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ca:	2280      	movs	r2, #128	@ 0x80
 80086cc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80086ce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80086d2:	2b03      	cmp	r3, #3
 80086d4:	d149      	bne.n	800876a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80086d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d8:	3330      	adds	r3, #48	@ 0x30
 80086da:	3330      	adds	r3, #48	@ 0x30
 80086dc:	4618      	mov	r0, r3
 80086de:	f7fe fc0d 	bl	8006efc <ld_word>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d140      	bne.n	800876a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80086e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086ea:	3301      	adds	r3, #1
 80086ec:	4619      	mov	r1, r3
 80086ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80086f0:	f7fe fea6 	bl	8007440 <move_window>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d137      	bne.n	800876a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80086fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086fc:	2200      	movs	r2, #0
 80086fe:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008702:	3330      	adds	r3, #48	@ 0x30
 8008704:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008708:	4618      	mov	r0, r3
 800870a:	f7fe fbf7 	bl	8006efc <ld_word>
 800870e:	4603      	mov	r3, r0
 8008710:	461a      	mov	r2, r3
 8008712:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008716:	429a      	cmp	r2, r3
 8008718:	d127      	bne.n	800876a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800871a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800871c:	3330      	adds	r3, #48	@ 0x30
 800871e:	4618      	mov	r0, r3
 8008720:	f7fe fc03 	bl	8006f2a <ld_dword>
 8008724:	4603      	mov	r3, r0
 8008726:	4a1c      	ldr	r2, [pc, #112]	@ (8008798 <find_volume+0x48c>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d11e      	bne.n	800876a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800872c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872e:	3330      	adds	r3, #48	@ 0x30
 8008730:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008734:	4618      	mov	r0, r3
 8008736:	f7fe fbf8 	bl	8006f2a <ld_dword>
 800873a:	4603      	mov	r3, r0
 800873c:	4a17      	ldr	r2, [pc, #92]	@ (800879c <find_volume+0x490>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d113      	bne.n	800876a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008744:	3330      	adds	r3, #48	@ 0x30
 8008746:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800874a:	4618      	mov	r0, r3
 800874c:	f7fe fbed 	bl	8006f2a <ld_dword>
 8008750:	4602      	mov	r2, r0
 8008752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008754:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008758:	3330      	adds	r3, #48	@ 0x30
 800875a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800875e:	4618      	mov	r0, r3
 8008760:	f7fe fbe3 	bl	8006f2a <ld_dword>
 8008764:	4602      	mov	r2, r0
 8008766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008768:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800876a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800876c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008770:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008772:	4b0b      	ldr	r3, [pc, #44]	@ (80087a0 <find_volume+0x494>)
 8008774:	881b      	ldrh	r3, [r3, #0]
 8008776:	3301      	adds	r3, #1
 8008778:	b29a      	uxth	r2, r3
 800877a:	4b09      	ldr	r3, [pc, #36]	@ (80087a0 <find_volume+0x494>)
 800877c:	801a      	strh	r2, [r3, #0]
 800877e:	4b08      	ldr	r3, [pc, #32]	@ (80087a0 <find_volume+0x494>)
 8008780:	881a      	ldrh	r2, [r3, #0]
 8008782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008784:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008786:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008788:	f7fe fdf2 	bl	8007370 <clear_lock>
#endif
	return FR_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3758      	adds	r7, #88	@ 0x58
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	41615252 	.word	0x41615252
 800879c:	61417272 	.word	0x61417272
 80087a0:	200009ac 	.word	0x200009ac

080087a4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80087ae:	2309      	movs	r3, #9
 80087b0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d01c      	beq.n	80087f2 <validate+0x4e>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d018      	beq.n	80087f2 <validate+0x4e>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d013      	beq.n	80087f2 <validate+0x4e>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	889a      	ldrh	r2, [r3, #4]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	88db      	ldrh	r3, [r3, #6]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d10c      	bne.n	80087f2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	785b      	ldrb	r3, [r3, #1]
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fe faee 	bl	8006dc0 <disk_status>
 80087e4:	4603      	mov	r3, r0
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d101      	bne.n	80087f2 <validate+0x4e>
			res = FR_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80087f2:	7bfb      	ldrb	r3, [r7, #15]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d102      	bne.n	80087fe <validate+0x5a>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	e000      	b.n	8008800 <validate+0x5c>
 80087fe:	2300      	movs	r3, #0
 8008800:	683a      	ldr	r2, [r7, #0]
 8008802:	6013      	str	r3, [r2, #0]
	return res;
 8008804:	7bfb      	ldrb	r3, [r7, #15]
}
 8008806:	4618      	mov	r0, r3
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
	...

08008810 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b088      	sub	sp, #32
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	4613      	mov	r3, r2
 800881c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008822:	f107 0310 	add.w	r3, r7, #16
 8008826:	4618      	mov	r0, r3
 8008828:	f7ff fcd7 	bl	80081da <get_ldnumber>
 800882c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	2b00      	cmp	r3, #0
 8008832:	da01      	bge.n	8008838 <f_mount+0x28>
 8008834:	230b      	movs	r3, #11
 8008836:	e02b      	b.n	8008890 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008838:	4a17      	ldr	r2, [pc, #92]	@ (8008898 <f_mount+0x88>)
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008840:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d005      	beq.n	8008854 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008848:	69b8      	ldr	r0, [r7, #24]
 800884a:	f7fe fd91 	bl	8007370 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	2200      	movs	r2, #0
 8008852:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d002      	beq.n	8008860 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	490d      	ldr	r1, [pc, #52]	@ (8008898 <f_mount+0x88>)
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d002      	beq.n	8008876 <f_mount+0x66>
 8008870:	79fb      	ldrb	r3, [r7, #7]
 8008872:	2b01      	cmp	r3, #1
 8008874:	d001      	beq.n	800887a <f_mount+0x6a>
 8008876:	2300      	movs	r3, #0
 8008878:	e00a      	b.n	8008890 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800887a:	f107 010c 	add.w	r1, r7, #12
 800887e:	f107 0308 	add.w	r3, r7, #8
 8008882:	2200      	movs	r2, #0
 8008884:	4618      	mov	r0, r3
 8008886:	f7ff fd41 	bl	800830c <find_volume>
 800888a:	4603      	mov	r3, r0
 800888c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800888e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008890:	4618      	mov	r0, r3
 8008892:	3720      	adds	r7, #32
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	200009a8 	.word	0x200009a8

0800889c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b098      	sub	sp, #96	@ 0x60
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	4613      	mov	r3, r2
 80088a8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <f_open+0x18>
 80088b0:	2309      	movs	r3, #9
 80088b2:	e1a9      	b.n	8008c08 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80088b4:	79fb      	ldrb	r3, [r7, #7]
 80088b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088ba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80088bc:	79fa      	ldrb	r2, [r7, #7]
 80088be:	f107 0110 	add.w	r1, r7, #16
 80088c2:	f107 0308 	add.w	r3, r7, #8
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7ff fd20 	bl	800830c <find_volume>
 80088cc:	4603      	mov	r3, r0
 80088ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80088d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	f040 818d 	bne.w	8008bf6 <f_open+0x35a>
		dj.obj.fs = fs;
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	f107 0314 	add.w	r3, r7, #20
 80088e6:	4611      	mov	r1, r2
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7ff fc05 	bl	80080f8 <follow_path>
 80088ee:	4603      	mov	r3, r0
 80088f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80088f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d118      	bne.n	800892e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80088fc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008900:	b25b      	sxtb	r3, r3
 8008902:	2b00      	cmp	r3, #0
 8008904:	da03      	bge.n	800890e <f_open+0x72>
				res = FR_INVALID_NAME;
 8008906:	2306      	movs	r3, #6
 8008908:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800890c:	e00f      	b.n	800892e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800890e:	79fb      	ldrb	r3, [r7, #7]
 8008910:	2b01      	cmp	r3, #1
 8008912:	bf8c      	ite	hi
 8008914:	2301      	movhi	r3, #1
 8008916:	2300      	movls	r3, #0
 8008918:	b2db      	uxtb	r3, r3
 800891a:	461a      	mov	r2, r3
 800891c:	f107 0314 	add.w	r3, r7, #20
 8008920:	4611      	mov	r1, r2
 8008922:	4618      	mov	r0, r3
 8008924:	f7fe fbe2 	bl	80070ec <chk_lock>
 8008928:	4603      	mov	r3, r0
 800892a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800892e:	79fb      	ldrb	r3, [r7, #7]
 8008930:	f003 031c 	and.w	r3, r3, #28
 8008934:	2b00      	cmp	r3, #0
 8008936:	d07f      	beq.n	8008a38 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8008938:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800893c:	2b00      	cmp	r3, #0
 800893e:	d017      	beq.n	8008970 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008940:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008944:	2b04      	cmp	r3, #4
 8008946:	d10e      	bne.n	8008966 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008948:	f7fe fc2a 	bl	80071a0 <enq_lock>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d006      	beq.n	8008960 <f_open+0xc4>
 8008952:	f107 0314 	add.w	r3, r7, #20
 8008956:	4618      	mov	r0, r3
 8008958:	f7ff fb08 	bl	8007f6c <dir_register>
 800895c:	4603      	mov	r3, r0
 800895e:	e000      	b.n	8008962 <f_open+0xc6>
 8008960:	2312      	movs	r3, #18
 8008962:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008966:	79fb      	ldrb	r3, [r7, #7]
 8008968:	f043 0308 	orr.w	r3, r3, #8
 800896c:	71fb      	strb	r3, [r7, #7]
 800896e:	e010      	b.n	8008992 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008970:	7ebb      	ldrb	r3, [r7, #26]
 8008972:	f003 0311 	and.w	r3, r3, #17
 8008976:	2b00      	cmp	r3, #0
 8008978:	d003      	beq.n	8008982 <f_open+0xe6>
					res = FR_DENIED;
 800897a:	2307      	movs	r3, #7
 800897c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008980:	e007      	b.n	8008992 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008982:	79fb      	ldrb	r3, [r7, #7]
 8008984:	f003 0304 	and.w	r3, r3, #4
 8008988:	2b00      	cmp	r3, #0
 800898a:	d002      	beq.n	8008992 <f_open+0xf6>
 800898c:	2308      	movs	r3, #8
 800898e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008992:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008996:	2b00      	cmp	r3, #0
 8008998:	d168      	bne.n	8008a6c <f_open+0x1d0>
 800899a:	79fb      	ldrb	r3, [r7, #7]
 800899c:	f003 0308 	and.w	r3, r3, #8
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d063      	beq.n	8008a6c <f_open+0x1d0>
				dw = GET_FATTIME();
 80089a4:	f7fd fcd0 	bl	8006348 <get_fattime>
 80089a8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80089aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ac:	330e      	adds	r3, #14
 80089ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fe faf6 	bl	8006fa2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80089b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089b8:	3316      	adds	r3, #22
 80089ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fe faf0 	bl	8006fa2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80089c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089c4:	330b      	adds	r3, #11
 80089c6:	2220      	movs	r2, #32
 80089c8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089ce:	4611      	mov	r1, r2
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7ff fa37 	bl	8007e44 <ld_clust>
 80089d6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80089dc:	2200      	movs	r2, #0
 80089de:	4618      	mov	r0, r3
 80089e0:	f7ff fa4f 	bl	8007e82 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80089e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089e6:	331c      	adds	r3, #28
 80089e8:	2100      	movs	r1, #0
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fe fad9 	bl	8006fa2 <st_dword>
					fs->wflag = 1;
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	2201      	movs	r2, #1
 80089f4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80089f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d037      	beq.n	8008a6c <f_open+0x1d0>
						dw = fs->winsect;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a00:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008a02:	f107 0314 	add.w	r3, r7, #20
 8008a06:	2200      	movs	r2, #0
 8008a08:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fe ff63 	bl	80078d6 <remove_chain>
 8008a10:	4603      	mov	r3, r0
 8008a12:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8008a16:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d126      	bne.n	8008a6c <f_open+0x1d0>
							res = move_window(fs, dw);
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fe fd0c 	bl	8007440 <move_window>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008a32:	3a01      	subs	r2, #1
 8008a34:	60da      	str	r2, [r3, #12]
 8008a36:	e019      	b.n	8008a6c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008a38:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d115      	bne.n	8008a6c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008a40:	7ebb      	ldrb	r3, [r7, #26]
 8008a42:	f003 0310 	and.w	r3, r3, #16
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d003      	beq.n	8008a52 <f_open+0x1b6>
					res = FR_NO_FILE;
 8008a4a:	2304      	movs	r3, #4
 8008a4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008a50:	e00c      	b.n	8008a6c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008a52:	79fb      	ldrb	r3, [r7, #7]
 8008a54:	f003 0302 	and.w	r3, r3, #2
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d007      	beq.n	8008a6c <f_open+0x1d0>
 8008a5c:	7ebb      	ldrb	r3, [r7, #26]
 8008a5e:	f003 0301 	and.w	r3, r3, #1
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d002      	beq.n	8008a6c <f_open+0x1d0>
						res = FR_DENIED;
 8008a66:	2307      	movs	r3, #7
 8008a68:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008a6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d126      	bne.n	8008ac2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008a74:	79fb      	ldrb	r3, [r7, #7]
 8008a76:	f003 0308 	and.w	r3, r3, #8
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d003      	beq.n	8008a86 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8008a7e:	79fb      	ldrb	r3, [r7, #7]
 8008a80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a84:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008a8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008a94:	79fb      	ldrb	r3, [r7, #7]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	bf8c      	ite	hi
 8008a9a:	2301      	movhi	r3, #1
 8008a9c:	2300      	movls	r3, #0
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	f107 0314 	add.w	r3, r7, #20
 8008aa6:	4611      	mov	r1, r2
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7fe fb99 	bl	80071e0 <inc_lock>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d102      	bne.n	8008ac2 <f_open+0x226>
 8008abc:	2302      	movs	r3, #2
 8008abe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008ac2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f040 8095 	bne.w	8008bf6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7ff f9b6 	bl	8007e44 <ld_clust>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ae0:	331c      	adds	r3, #28
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7fe fa21 	bl	8006f2a <ld_dword>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2200      	movs	r2, #0
 8008af2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	88da      	ldrh	r2, [r3, #6]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	79fa      	ldrb	r2, [r7, #7]
 8008b06:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2200      	movs	r2, #0
 8008b18:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	3330      	adds	r3, #48	@ 0x30
 8008b1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b22:	2100      	movs	r1, #0
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7fe fa87 	bl	8007038 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
 8008b2c:	f003 0320 	and.w	r3, r3, #32
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d060      	beq.n	8008bf6 <f_open+0x35a>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d05c      	beq.n	8008bf6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	68da      	ldr	r2, [r3, #12]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	895b      	ldrh	r3, [r3, #10]
 8008b48:	025b      	lsls	r3, r3, #9
 8008b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b58:	e016      	b.n	8008b88 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fe fd28 	bl	80075b4 <get_fat>
 8008b64:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008b66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d802      	bhi.n	8008b72 <f_open+0x2d6>
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008b72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b78:	d102      	bne.n	8008b80 <f_open+0x2e4>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008b80:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b88:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d103      	bne.n	8008b98 <f_open+0x2fc>
 8008b90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008b92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d8e0      	bhi.n	8008b5a <f_open+0x2be>
				}
				fp->clust = clst;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b9c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008b9e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d127      	bne.n	8008bf6 <f_open+0x35a>
 8008ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d022      	beq.n	8008bf6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fe fcdf 	bl	8007578 <clust2sect>
 8008bba:	6478      	str	r0, [r7, #68]	@ 0x44
 8008bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d103      	bne.n	8008bca <f_open+0x32e>
						res = FR_INT_ERR;
 8008bc2:	2302      	movs	r3, #2
 8008bc4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008bc8:	e015      	b.n	8008bf6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bcc:	0a5a      	lsrs	r2, r3, #9
 8008bce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bd0:	441a      	add	r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	7858      	ldrb	r0, [r3, #1]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6a1a      	ldr	r2, [r3, #32]
 8008be4:	2301      	movs	r3, #1
 8008be6:	f7fe f92b 	bl	8006e40 <disk_read>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d002      	beq.n	8008bf6 <f_open+0x35a>
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008bf6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d002      	beq.n	8008c04 <f_open+0x368>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2200      	movs	r2, #0
 8008c02:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008c04:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3760      	adds	r7, #96	@ 0x60
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b08c      	sub	sp, #48	@ 0x30
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
 8008c1c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	2200      	movs	r2, #0
 8008c26:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f107 0210 	add.w	r2, r7, #16
 8008c2e:	4611      	mov	r1, r2
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7ff fdb7 	bl	80087a4 <validate>
 8008c36:	4603      	mov	r3, r0
 8008c38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008c3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d107      	bne.n	8008c54 <f_write+0x44>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	7d5b      	ldrb	r3, [r3, #21]
 8008c48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008c4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d002      	beq.n	8008c5a <f_write+0x4a>
 8008c54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c58:	e14b      	b.n	8008ef2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	7d1b      	ldrb	r3, [r3, #20]
 8008c5e:	f003 0302 	and.w	r3, r3, #2
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d101      	bne.n	8008c6a <f_write+0x5a>
 8008c66:	2307      	movs	r3, #7
 8008c68:	e143      	b.n	8008ef2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	699a      	ldr	r2, [r3, #24]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	441a      	add	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	699b      	ldr	r3, [r3, #24]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	f080 812d 	bcs.w	8008ed6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	43db      	mvns	r3, r3
 8008c82:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008c84:	e127      	b.n	8008ed6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f040 80e3 	bne.w	8008e5a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	699b      	ldr	r3, [r3, #24]
 8008c98:	0a5b      	lsrs	r3, r3, #9
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	8952      	ldrh	r2, [r2, #10]
 8008c9e:	3a01      	subs	r2, #1
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d143      	bne.n	8008d32 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10c      	bne.n	8008ccc <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d11a      	bne.n	8008cf4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fe fe6c 	bl	80079a0 <create_chain>
 8008cc8:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008cca:	e013      	b.n	8008cf4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d007      	beq.n	8008ce4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	4619      	mov	r1, r3
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f7fe fef8 	bl	8007ad0 <clmt_clust>
 8008ce0:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008ce2:	e007      	b.n	8008cf4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	69db      	ldr	r3, [r3, #28]
 8008cea:	4619      	mov	r1, r3
 8008cec:	4610      	mov	r0, r2
 8008cee:	f7fe fe57 	bl	80079a0 <create_chain>
 8008cf2:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f000 80f2 	beq.w	8008ee0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d104      	bne.n	8008d0c <f_write+0xfc>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2202      	movs	r2, #2
 8008d06:	755a      	strb	r2, [r3, #21]
 8008d08:	2302      	movs	r3, #2
 8008d0a:	e0f2      	b.n	8008ef2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d12:	d104      	bne.n	8008d1e <f_write+0x10e>
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2201      	movs	r2, #1
 8008d18:	755a      	strb	r2, [r3, #21]
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e0e9      	b.n	8008ef2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d22:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d102      	bne.n	8008d32 <f_write+0x122>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d30:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	7d1b      	ldrb	r3, [r3, #20]
 8008d36:	b25b      	sxtb	r3, r3
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	da18      	bge.n	8008d6e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	7858      	ldrb	r0, [r3, #1]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6a1a      	ldr	r2, [r3, #32]
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	f7fe f898 	bl	8006e80 <disk_write>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d004      	beq.n	8008d60 <f_write+0x150>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	755a      	strb	r2, [r3, #21]
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e0c8      	b.n	8008ef2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	7d1b      	ldrb	r3, [r3, #20]
 8008d64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d68:	b2da      	uxtb	r2, r3
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008d6e:	693a      	ldr	r2, [r7, #16]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	69db      	ldr	r3, [r3, #28]
 8008d74:	4619      	mov	r1, r3
 8008d76:	4610      	mov	r0, r2
 8008d78:	f7fe fbfe 	bl	8007578 <clust2sect>
 8008d7c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d104      	bne.n	8008d8e <f_write+0x17e>
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2202      	movs	r2, #2
 8008d88:	755a      	strb	r2, [r3, #21]
 8008d8a:	2302      	movs	r3, #2
 8008d8c:	e0b1      	b.n	8008ef2 <f_write+0x2e2>
			sect += csect;
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	4413      	add	r3, r2
 8008d94:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	0a5b      	lsrs	r3, r3, #9
 8008d9a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008d9c:	6a3b      	ldr	r3, [r7, #32]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d03c      	beq.n	8008e1c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008da2:	69ba      	ldr	r2, [r7, #24]
 8008da4:	6a3b      	ldr	r3, [r7, #32]
 8008da6:	4413      	add	r3, r2
 8008da8:	693a      	ldr	r2, [r7, #16]
 8008daa:	8952      	ldrh	r2, [r2, #10]
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d905      	bls.n	8008dbc <f_write+0x1ac>
					cc = fs->csize - csect;
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	895b      	ldrh	r3, [r3, #10]
 8008db4:	461a      	mov	r2, r3
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	1ad3      	subs	r3, r2, r3
 8008dba:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	7858      	ldrb	r0, [r3, #1]
 8008dc0:	6a3b      	ldr	r3, [r7, #32]
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	69f9      	ldr	r1, [r7, #28]
 8008dc6:	f7fe f85b 	bl	8006e80 <disk_write>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d004      	beq.n	8008dda <f_write+0x1ca>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	755a      	strb	r2, [r3, #21]
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e08b      	b.n	8008ef2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6a1a      	ldr	r2, [r3, #32]
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	6a3a      	ldr	r2, [r7, #32]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d915      	bls.n	8008e14 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6a1a      	ldr	r2, [r3, #32]
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	1ad3      	subs	r3, r2, r3
 8008df6:	025b      	lsls	r3, r3, #9
 8008df8:	69fa      	ldr	r2, [r7, #28]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e00:	4619      	mov	r1, r3
 8008e02:	f7fe f8f9 	bl	8006ff8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	7d1b      	ldrb	r3, [r3, #20]
 8008e0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008e14:	6a3b      	ldr	r3, [r7, #32]
 8008e16:	025b      	lsls	r3, r3, #9
 8008e18:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008e1a:	e03f      	b.n	8008e9c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6a1b      	ldr	r3, [r3, #32]
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d016      	beq.n	8008e54 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	699a      	ldr	r2, [r3, #24]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d210      	bcs.n	8008e54 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	7858      	ldrb	r0, [r3, #1]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	697a      	ldr	r2, [r7, #20]
 8008e40:	f7fd fffe 	bl	8006e40 <disk_read>
 8008e44:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d004      	beq.n	8008e54 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	755a      	strb	r2, [r3, #21]
 8008e50:	2301      	movs	r3, #1
 8008e52:	e04e      	b.n	8008ef2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e62:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8008e66:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d901      	bls.n	8008e74 <f_write+0x264>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	699b      	ldr	r3, [r3, #24]
 8008e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e82:	4413      	add	r3, r2
 8008e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e86:	69f9      	ldr	r1, [r7, #28]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7fe f8b5 	bl	8006ff8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	7d1b      	ldrb	r3, [r3, #20]
 8008e92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008e96:	b2da      	uxtb	r2, r3
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008e9c:	69fa      	ldr	r2, [r7, #28]
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea0:	4413      	add	r3, r2
 8008ea2:	61fb      	str	r3, [r7, #28]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	699a      	ldr	r2, [r3, #24]
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eaa:	441a      	add	r2, r3
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	619a      	str	r2, [r3, #24]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	68da      	ldr	r2, [r3, #12]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	bf38      	it	cc
 8008ebc:	461a      	movcc	r2, r3
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	60da      	str	r2, [r3, #12]
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec8:	441a      	add	r2, r3
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	601a      	str	r2, [r3, #0]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed2:	1ad3      	subs	r3, r2, r3
 8008ed4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f47f aed4 	bne.w	8008c86 <f_write+0x76>
 8008ede:	e000      	b.n	8008ee2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008ee0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	7d1b      	ldrb	r3, [r3, #20]
 8008ee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008eea:	b2da      	uxtb	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3730      	adds	r7, #48	@ 0x30
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b086      	sub	sp, #24
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f107 0208 	add.w	r2, r7, #8
 8008f08:	4611      	mov	r1, r2
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7ff fc4a 	bl	80087a4 <validate>
 8008f10:	4603      	mov	r3, r0
 8008f12:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008f14:	7dfb      	ldrb	r3, [r7, #23]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d168      	bne.n	8008fec <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	7d1b      	ldrb	r3, [r3, #20]
 8008f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d062      	beq.n	8008fec <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	7d1b      	ldrb	r3, [r3, #20]
 8008f2a:	b25b      	sxtb	r3, r3
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	da15      	bge.n	8008f5c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	7858      	ldrb	r0, [r3, #1]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a1a      	ldr	r2, [r3, #32]
 8008f3e:	2301      	movs	r3, #1
 8008f40:	f7fd ff9e 	bl	8006e80 <disk_write>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d001      	beq.n	8008f4e <f_sync+0x54>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e04f      	b.n	8008fee <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	7d1b      	ldrb	r3, [r3, #20]
 8008f52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f56:	b2da      	uxtb	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008f5c:	f7fd f9f4 	bl	8006348 <get_fattime>
 8008f60:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f68:	4619      	mov	r1, r3
 8008f6a:	4610      	mov	r0, r2
 8008f6c:	f7fe fa68 	bl	8007440 <move_window>
 8008f70:	4603      	mov	r3, r0
 8008f72:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008f74:	7dfb      	ldrb	r3, [r7, #23]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d138      	bne.n	8008fec <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f7e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	330b      	adds	r3, #11
 8008f84:	781a      	ldrb	r2, [r3, #0]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	330b      	adds	r3, #11
 8008f8a:	f042 0220 	orr.w	r2, r2, #32
 8008f8e:	b2d2      	uxtb	r2, r2
 8008f90:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6818      	ldr	r0, [r3, #0]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	68f9      	ldr	r1, [r7, #12]
 8008f9e:	f7fe ff70 	bl	8007e82 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f103 021c 	add.w	r2, r3, #28
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	4619      	mov	r1, r3
 8008fae:	4610      	mov	r0, r2
 8008fb0:	f7fd fff7 	bl	8006fa2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	3316      	adds	r3, #22
 8008fb8:	6939      	ldr	r1, [r7, #16]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fd fff1 	bl	8006fa2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	3312      	adds	r3, #18
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fd ffd1 	bl	8006f6e <st_word>
					fs->wflag = 1;
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7fe fa61 	bl	800749c <sync_fs>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	7d1b      	ldrb	r3, [r3, #20]
 8008fe2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fe6:	b2da      	uxtb	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3718      	adds	r7, #24
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b084      	sub	sp, #16
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f7ff ff7b 	bl	8008efa <f_sync>
 8009004:	4603      	mov	r3, r0
 8009006:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009008:	7bfb      	ldrb	r3, [r7, #15]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d118      	bne.n	8009040 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f107 0208 	add.w	r2, r7, #8
 8009014:	4611      	mov	r1, r2
 8009016:	4618      	mov	r0, r3
 8009018:	f7ff fbc4 	bl	80087a4 <validate>
 800901c:	4603      	mov	r3, r0
 800901e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009020:	7bfb      	ldrb	r3, [r7, #15]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10c      	bne.n	8009040 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	4618      	mov	r0, r3
 800902c:	f7fe f966 	bl	80072fc <dec_lock>
 8009030:	4603      	mov	r3, r0
 8009032:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009034:	7bfb      	ldrb	r3, [r7, #15]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d102      	bne.n	8009040 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009040:	7bfb      	ldrb	r3, [r7, #15]
}
 8009042:	4618      	mov	r0, r3
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
	...

0800904c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800904c:	b480      	push	{r7}
 800904e:	b087      	sub	sp, #28
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	4613      	mov	r3, r2
 8009058:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800905a:	2301      	movs	r3, #1
 800905c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009062:	4b1e      	ldr	r3, [pc, #120]	@ (80090dc <FATFS_LinkDriverEx+0x90>)
 8009064:	7a5b      	ldrb	r3, [r3, #9]
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b00      	cmp	r3, #0
 800906a:	d131      	bne.n	80090d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800906c:	4b1b      	ldr	r3, [pc, #108]	@ (80090dc <FATFS_LinkDriverEx+0x90>)
 800906e:	7a5b      	ldrb	r3, [r3, #9]
 8009070:	b2db      	uxtb	r3, r3
 8009072:	461a      	mov	r2, r3
 8009074:	4b19      	ldr	r3, [pc, #100]	@ (80090dc <FATFS_LinkDriverEx+0x90>)
 8009076:	2100      	movs	r1, #0
 8009078:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800907a:	4b18      	ldr	r3, [pc, #96]	@ (80090dc <FATFS_LinkDriverEx+0x90>)
 800907c:	7a5b      	ldrb	r3, [r3, #9]
 800907e:	b2db      	uxtb	r3, r3
 8009080:	4a16      	ldr	r2, [pc, #88]	@ (80090dc <FATFS_LinkDriverEx+0x90>)
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	4413      	add	r3, r2
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800908a:	4b14      	ldr	r3, [pc, #80]	@ (80090dc <FATFS_LinkDriverEx+0x90>)
 800908c:	7a5b      	ldrb	r3, [r3, #9]
 800908e:	b2db      	uxtb	r3, r3
 8009090:	461a      	mov	r2, r3
 8009092:	4b12      	ldr	r3, [pc, #72]	@ (80090dc <FATFS_LinkDriverEx+0x90>)
 8009094:	4413      	add	r3, r2
 8009096:	79fa      	ldrb	r2, [r7, #7]
 8009098:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800909a:	4b10      	ldr	r3, [pc, #64]	@ (80090dc <FATFS_LinkDriverEx+0x90>)
 800909c:	7a5b      	ldrb	r3, [r3, #9]
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	1c5a      	adds	r2, r3, #1
 80090a2:	b2d1      	uxtb	r1, r2
 80090a4:	4a0d      	ldr	r2, [pc, #52]	@ (80090dc <FATFS_LinkDriverEx+0x90>)
 80090a6:	7251      	strb	r1, [r2, #9]
 80090a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80090aa:	7dbb      	ldrb	r3, [r7, #22]
 80090ac:	3330      	adds	r3, #48	@ 0x30
 80090ae:	b2da      	uxtb	r2, r3
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	3301      	adds	r3, #1
 80090b8:	223a      	movs	r2, #58	@ 0x3a
 80090ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	3302      	adds	r3, #2
 80090c0:	222f      	movs	r2, #47	@ 0x2f
 80090c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	3303      	adds	r3, #3
 80090c8:	2200      	movs	r2, #0
 80090ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80090cc:	2300      	movs	r3, #0
 80090ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80090d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	371c      	adds	r7, #28
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bc80      	pop	{r7}
 80090da:	4770      	bx	lr
 80090dc:	200009d0 	.word	0x200009d0

080090e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80090ea:	2200      	movs	r2, #0
 80090ec:	6839      	ldr	r1, [r7, #0]
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7ff ffac 	bl	800904c <FATFS_LinkDriverEx>
 80090f4:	4603      	mov	r3, r0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <__cvt>:
 80090fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009102:	b088      	sub	sp, #32
 8009104:	2b00      	cmp	r3, #0
 8009106:	461d      	mov	r5, r3
 8009108:	4614      	mov	r4, r2
 800910a:	bfbc      	itt	lt
 800910c:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8009110:	4614      	movlt	r4, r2
 8009112:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009114:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009116:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800911a:	bfb6      	itet	lt
 800911c:	461d      	movlt	r5, r3
 800911e:	2300      	movge	r3, #0
 8009120:	232d      	movlt	r3, #45	@ 0x2d
 8009122:	7013      	strb	r3, [r2, #0]
 8009124:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009126:	f023 0820 	bic.w	r8, r3, #32
 800912a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800912e:	d005      	beq.n	800913c <__cvt+0x3e>
 8009130:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009134:	d100      	bne.n	8009138 <__cvt+0x3a>
 8009136:	3601      	adds	r6, #1
 8009138:	2302      	movs	r3, #2
 800913a:	e000      	b.n	800913e <__cvt+0x40>
 800913c:	2303      	movs	r3, #3
 800913e:	aa07      	add	r2, sp, #28
 8009140:	9204      	str	r2, [sp, #16]
 8009142:	aa06      	add	r2, sp, #24
 8009144:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009148:	e9cd 3600 	strd	r3, r6, [sp]
 800914c:	4622      	mov	r2, r4
 800914e:	462b      	mov	r3, r5
 8009150:	f000 fe2e 	bl	8009db0 <_dtoa_r>
 8009154:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009158:	4607      	mov	r7, r0
 800915a:	d119      	bne.n	8009190 <__cvt+0x92>
 800915c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800915e:	07db      	lsls	r3, r3, #31
 8009160:	d50e      	bpl.n	8009180 <__cvt+0x82>
 8009162:	eb00 0906 	add.w	r9, r0, r6
 8009166:	2200      	movs	r2, #0
 8009168:	2300      	movs	r3, #0
 800916a:	4620      	mov	r0, r4
 800916c:	4629      	mov	r1, r5
 800916e:	f7f7 fc83 	bl	8000a78 <__aeabi_dcmpeq>
 8009172:	b108      	cbz	r0, 8009178 <__cvt+0x7a>
 8009174:	f8cd 901c 	str.w	r9, [sp, #28]
 8009178:	2230      	movs	r2, #48	@ 0x30
 800917a:	9b07      	ldr	r3, [sp, #28]
 800917c:	454b      	cmp	r3, r9
 800917e:	d31e      	bcc.n	80091be <__cvt+0xc0>
 8009180:	9b07      	ldr	r3, [sp, #28]
 8009182:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009184:	1bdb      	subs	r3, r3, r7
 8009186:	4638      	mov	r0, r7
 8009188:	6013      	str	r3, [r2, #0]
 800918a:	b008      	add	sp, #32
 800918c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009190:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009194:	eb00 0906 	add.w	r9, r0, r6
 8009198:	d1e5      	bne.n	8009166 <__cvt+0x68>
 800919a:	7803      	ldrb	r3, [r0, #0]
 800919c:	2b30      	cmp	r3, #48	@ 0x30
 800919e:	d10a      	bne.n	80091b6 <__cvt+0xb8>
 80091a0:	2200      	movs	r2, #0
 80091a2:	2300      	movs	r3, #0
 80091a4:	4620      	mov	r0, r4
 80091a6:	4629      	mov	r1, r5
 80091a8:	f7f7 fc66 	bl	8000a78 <__aeabi_dcmpeq>
 80091ac:	b918      	cbnz	r0, 80091b6 <__cvt+0xb8>
 80091ae:	f1c6 0601 	rsb	r6, r6, #1
 80091b2:	f8ca 6000 	str.w	r6, [sl]
 80091b6:	f8da 3000 	ldr.w	r3, [sl]
 80091ba:	4499      	add	r9, r3
 80091bc:	e7d3      	b.n	8009166 <__cvt+0x68>
 80091be:	1c59      	adds	r1, r3, #1
 80091c0:	9107      	str	r1, [sp, #28]
 80091c2:	701a      	strb	r2, [r3, #0]
 80091c4:	e7d9      	b.n	800917a <__cvt+0x7c>

080091c6 <__exponent>:
 80091c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091c8:	2900      	cmp	r1, #0
 80091ca:	bfba      	itte	lt
 80091cc:	4249      	neglt	r1, r1
 80091ce:	232d      	movlt	r3, #45	@ 0x2d
 80091d0:	232b      	movge	r3, #43	@ 0x2b
 80091d2:	2909      	cmp	r1, #9
 80091d4:	7002      	strb	r2, [r0, #0]
 80091d6:	7043      	strb	r3, [r0, #1]
 80091d8:	dd29      	ble.n	800922e <__exponent+0x68>
 80091da:	f10d 0307 	add.w	r3, sp, #7
 80091de:	461d      	mov	r5, r3
 80091e0:	270a      	movs	r7, #10
 80091e2:	461a      	mov	r2, r3
 80091e4:	fbb1 f6f7 	udiv	r6, r1, r7
 80091e8:	fb07 1416 	mls	r4, r7, r6, r1
 80091ec:	3430      	adds	r4, #48	@ 0x30
 80091ee:	f802 4c01 	strb.w	r4, [r2, #-1]
 80091f2:	460c      	mov	r4, r1
 80091f4:	2c63      	cmp	r4, #99	@ 0x63
 80091f6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80091fa:	4631      	mov	r1, r6
 80091fc:	dcf1      	bgt.n	80091e2 <__exponent+0x1c>
 80091fe:	3130      	adds	r1, #48	@ 0x30
 8009200:	1e94      	subs	r4, r2, #2
 8009202:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009206:	1c41      	adds	r1, r0, #1
 8009208:	4623      	mov	r3, r4
 800920a:	42ab      	cmp	r3, r5
 800920c:	d30a      	bcc.n	8009224 <__exponent+0x5e>
 800920e:	f10d 0309 	add.w	r3, sp, #9
 8009212:	1a9b      	subs	r3, r3, r2
 8009214:	42ac      	cmp	r4, r5
 8009216:	bf88      	it	hi
 8009218:	2300      	movhi	r3, #0
 800921a:	3302      	adds	r3, #2
 800921c:	4403      	add	r3, r0
 800921e:	1a18      	subs	r0, r3, r0
 8009220:	b003      	add	sp, #12
 8009222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009224:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009228:	f801 6f01 	strb.w	r6, [r1, #1]!
 800922c:	e7ed      	b.n	800920a <__exponent+0x44>
 800922e:	2330      	movs	r3, #48	@ 0x30
 8009230:	3130      	adds	r1, #48	@ 0x30
 8009232:	7083      	strb	r3, [r0, #2]
 8009234:	70c1      	strb	r1, [r0, #3]
 8009236:	1d03      	adds	r3, r0, #4
 8009238:	e7f1      	b.n	800921e <__exponent+0x58>
	...

0800923c <_printf_float>:
 800923c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009240:	b091      	sub	sp, #68	@ 0x44
 8009242:	460c      	mov	r4, r1
 8009244:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8009248:	4616      	mov	r6, r2
 800924a:	461f      	mov	r7, r3
 800924c:	4605      	mov	r5, r0
 800924e:	f000 fce7 	bl	8009c20 <_localeconv_r>
 8009252:	6803      	ldr	r3, [r0, #0]
 8009254:	9308      	str	r3, [sp, #32]
 8009256:	4618      	mov	r0, r3
 8009258:	f7f6 ffe2 	bl	8000220 <strlen>
 800925c:	2300      	movs	r3, #0
 800925e:	930e      	str	r3, [sp, #56]	@ 0x38
 8009260:	f8d8 3000 	ldr.w	r3, [r8]
 8009264:	9009      	str	r0, [sp, #36]	@ 0x24
 8009266:	3307      	adds	r3, #7
 8009268:	f023 0307 	bic.w	r3, r3, #7
 800926c:	f103 0208 	add.w	r2, r3, #8
 8009270:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009274:	f8d4 b000 	ldr.w	fp, [r4]
 8009278:	f8c8 2000 	str.w	r2, [r8]
 800927c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009280:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009284:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009286:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800928a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800928e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009292:	4b9d      	ldr	r3, [pc, #628]	@ (8009508 <_printf_float+0x2cc>)
 8009294:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009298:	f7f7 fc20 	bl	8000adc <__aeabi_dcmpun>
 800929c:	bb70      	cbnz	r0, 80092fc <_printf_float+0xc0>
 800929e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80092a2:	4b99      	ldr	r3, [pc, #612]	@ (8009508 <_printf_float+0x2cc>)
 80092a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80092a8:	f7f7 fbfa 	bl	8000aa0 <__aeabi_dcmple>
 80092ac:	bb30      	cbnz	r0, 80092fc <_printf_float+0xc0>
 80092ae:	2200      	movs	r2, #0
 80092b0:	2300      	movs	r3, #0
 80092b2:	4640      	mov	r0, r8
 80092b4:	4649      	mov	r1, r9
 80092b6:	f7f7 fbe9 	bl	8000a8c <__aeabi_dcmplt>
 80092ba:	b110      	cbz	r0, 80092c2 <_printf_float+0x86>
 80092bc:	232d      	movs	r3, #45	@ 0x2d
 80092be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092c2:	4a92      	ldr	r2, [pc, #584]	@ (800950c <_printf_float+0x2d0>)
 80092c4:	4b92      	ldr	r3, [pc, #584]	@ (8009510 <_printf_float+0x2d4>)
 80092c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80092ca:	bf94      	ite	ls
 80092cc:	4690      	movls	r8, r2
 80092ce:	4698      	movhi	r8, r3
 80092d0:	2303      	movs	r3, #3
 80092d2:	6123      	str	r3, [r4, #16]
 80092d4:	f02b 0304 	bic.w	r3, fp, #4
 80092d8:	6023      	str	r3, [r4, #0]
 80092da:	f04f 0900 	mov.w	r9, #0
 80092de:	9700      	str	r7, [sp, #0]
 80092e0:	4633      	mov	r3, r6
 80092e2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80092e4:	4621      	mov	r1, r4
 80092e6:	4628      	mov	r0, r5
 80092e8:	f000 f9d4 	bl	8009694 <_printf_common>
 80092ec:	3001      	adds	r0, #1
 80092ee:	f040 808f 	bne.w	8009410 <_printf_float+0x1d4>
 80092f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092f6:	b011      	add	sp, #68	@ 0x44
 80092f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092fc:	4642      	mov	r2, r8
 80092fe:	464b      	mov	r3, r9
 8009300:	4640      	mov	r0, r8
 8009302:	4649      	mov	r1, r9
 8009304:	f7f7 fbea 	bl	8000adc <__aeabi_dcmpun>
 8009308:	b140      	cbz	r0, 800931c <_printf_float+0xe0>
 800930a:	464b      	mov	r3, r9
 800930c:	2b00      	cmp	r3, #0
 800930e:	bfbc      	itt	lt
 8009310:	232d      	movlt	r3, #45	@ 0x2d
 8009312:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009316:	4a7f      	ldr	r2, [pc, #508]	@ (8009514 <_printf_float+0x2d8>)
 8009318:	4b7f      	ldr	r3, [pc, #508]	@ (8009518 <_printf_float+0x2dc>)
 800931a:	e7d4      	b.n	80092c6 <_printf_float+0x8a>
 800931c:	6863      	ldr	r3, [r4, #4]
 800931e:	1c5a      	adds	r2, r3, #1
 8009320:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009324:	d13f      	bne.n	80093a6 <_printf_float+0x16a>
 8009326:	2306      	movs	r3, #6
 8009328:	6063      	str	r3, [r4, #4]
 800932a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800932e:	2200      	movs	r2, #0
 8009330:	6023      	str	r3, [r4, #0]
 8009332:	9206      	str	r2, [sp, #24]
 8009334:	aa0e      	add	r2, sp, #56	@ 0x38
 8009336:	e9cd a204 	strd	sl, r2, [sp, #16]
 800933a:	aa0d      	add	r2, sp, #52	@ 0x34
 800933c:	9203      	str	r2, [sp, #12]
 800933e:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009342:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009346:	6863      	ldr	r3, [r4, #4]
 8009348:	9300      	str	r3, [sp, #0]
 800934a:	4642      	mov	r2, r8
 800934c:	464b      	mov	r3, r9
 800934e:	4628      	mov	r0, r5
 8009350:	910a      	str	r1, [sp, #40]	@ 0x28
 8009352:	f7ff fed4 	bl	80090fe <__cvt>
 8009356:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009358:	2947      	cmp	r1, #71	@ 0x47
 800935a:	4680      	mov	r8, r0
 800935c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800935e:	d128      	bne.n	80093b2 <_printf_float+0x176>
 8009360:	1cc8      	adds	r0, r1, #3
 8009362:	db02      	blt.n	800936a <_printf_float+0x12e>
 8009364:	6863      	ldr	r3, [r4, #4]
 8009366:	4299      	cmp	r1, r3
 8009368:	dd40      	ble.n	80093ec <_printf_float+0x1b0>
 800936a:	f1aa 0a02 	sub.w	sl, sl, #2
 800936e:	fa5f fa8a 	uxtb.w	sl, sl
 8009372:	3901      	subs	r1, #1
 8009374:	4652      	mov	r2, sl
 8009376:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800937a:	910d      	str	r1, [sp, #52]	@ 0x34
 800937c:	f7ff ff23 	bl	80091c6 <__exponent>
 8009380:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009382:	1813      	adds	r3, r2, r0
 8009384:	2a01      	cmp	r2, #1
 8009386:	4681      	mov	r9, r0
 8009388:	6123      	str	r3, [r4, #16]
 800938a:	dc02      	bgt.n	8009392 <_printf_float+0x156>
 800938c:	6822      	ldr	r2, [r4, #0]
 800938e:	07d2      	lsls	r2, r2, #31
 8009390:	d501      	bpl.n	8009396 <_printf_float+0x15a>
 8009392:	3301      	adds	r3, #1
 8009394:	6123      	str	r3, [r4, #16]
 8009396:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800939a:	2b00      	cmp	r3, #0
 800939c:	d09f      	beq.n	80092de <_printf_float+0xa2>
 800939e:	232d      	movs	r3, #45	@ 0x2d
 80093a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093a4:	e79b      	b.n	80092de <_printf_float+0xa2>
 80093a6:	2947      	cmp	r1, #71	@ 0x47
 80093a8:	d1bf      	bne.n	800932a <_printf_float+0xee>
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d1bd      	bne.n	800932a <_printf_float+0xee>
 80093ae:	2301      	movs	r3, #1
 80093b0:	e7ba      	b.n	8009328 <_printf_float+0xec>
 80093b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80093b6:	d9dc      	bls.n	8009372 <_printf_float+0x136>
 80093b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80093bc:	d118      	bne.n	80093f0 <_printf_float+0x1b4>
 80093be:	2900      	cmp	r1, #0
 80093c0:	6863      	ldr	r3, [r4, #4]
 80093c2:	dd0b      	ble.n	80093dc <_printf_float+0x1a0>
 80093c4:	6121      	str	r1, [r4, #16]
 80093c6:	b913      	cbnz	r3, 80093ce <_printf_float+0x192>
 80093c8:	6822      	ldr	r2, [r4, #0]
 80093ca:	07d0      	lsls	r0, r2, #31
 80093cc:	d502      	bpl.n	80093d4 <_printf_float+0x198>
 80093ce:	3301      	adds	r3, #1
 80093d0:	440b      	add	r3, r1
 80093d2:	6123      	str	r3, [r4, #16]
 80093d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80093d6:	f04f 0900 	mov.w	r9, #0
 80093da:	e7dc      	b.n	8009396 <_printf_float+0x15a>
 80093dc:	b913      	cbnz	r3, 80093e4 <_printf_float+0x1a8>
 80093de:	6822      	ldr	r2, [r4, #0]
 80093e0:	07d2      	lsls	r2, r2, #31
 80093e2:	d501      	bpl.n	80093e8 <_printf_float+0x1ac>
 80093e4:	3302      	adds	r3, #2
 80093e6:	e7f4      	b.n	80093d2 <_printf_float+0x196>
 80093e8:	2301      	movs	r3, #1
 80093ea:	e7f2      	b.n	80093d2 <_printf_float+0x196>
 80093ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80093f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093f2:	4299      	cmp	r1, r3
 80093f4:	db05      	blt.n	8009402 <_printf_float+0x1c6>
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	6121      	str	r1, [r4, #16]
 80093fa:	07d8      	lsls	r0, r3, #31
 80093fc:	d5ea      	bpl.n	80093d4 <_printf_float+0x198>
 80093fe:	1c4b      	adds	r3, r1, #1
 8009400:	e7e7      	b.n	80093d2 <_printf_float+0x196>
 8009402:	2900      	cmp	r1, #0
 8009404:	bfd4      	ite	le
 8009406:	f1c1 0202 	rsble	r2, r1, #2
 800940a:	2201      	movgt	r2, #1
 800940c:	4413      	add	r3, r2
 800940e:	e7e0      	b.n	80093d2 <_printf_float+0x196>
 8009410:	6823      	ldr	r3, [r4, #0]
 8009412:	055a      	lsls	r2, r3, #21
 8009414:	d407      	bmi.n	8009426 <_printf_float+0x1ea>
 8009416:	6923      	ldr	r3, [r4, #16]
 8009418:	4642      	mov	r2, r8
 800941a:	4631      	mov	r1, r6
 800941c:	4628      	mov	r0, r5
 800941e:	47b8      	blx	r7
 8009420:	3001      	adds	r0, #1
 8009422:	d12b      	bne.n	800947c <_printf_float+0x240>
 8009424:	e765      	b.n	80092f2 <_printf_float+0xb6>
 8009426:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800942a:	f240 80dd 	bls.w	80095e8 <_printf_float+0x3ac>
 800942e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009432:	2200      	movs	r2, #0
 8009434:	2300      	movs	r3, #0
 8009436:	f7f7 fb1f 	bl	8000a78 <__aeabi_dcmpeq>
 800943a:	2800      	cmp	r0, #0
 800943c:	d033      	beq.n	80094a6 <_printf_float+0x26a>
 800943e:	4a37      	ldr	r2, [pc, #220]	@ (800951c <_printf_float+0x2e0>)
 8009440:	2301      	movs	r3, #1
 8009442:	4631      	mov	r1, r6
 8009444:	4628      	mov	r0, r5
 8009446:	47b8      	blx	r7
 8009448:	3001      	adds	r0, #1
 800944a:	f43f af52 	beq.w	80092f2 <_printf_float+0xb6>
 800944e:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009452:	4543      	cmp	r3, r8
 8009454:	db02      	blt.n	800945c <_printf_float+0x220>
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	07d8      	lsls	r0, r3, #31
 800945a:	d50f      	bpl.n	800947c <_printf_float+0x240>
 800945c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009460:	4631      	mov	r1, r6
 8009462:	4628      	mov	r0, r5
 8009464:	47b8      	blx	r7
 8009466:	3001      	adds	r0, #1
 8009468:	f43f af43 	beq.w	80092f2 <_printf_float+0xb6>
 800946c:	f04f 0900 	mov.w	r9, #0
 8009470:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009474:	f104 0a1a 	add.w	sl, r4, #26
 8009478:	45c8      	cmp	r8, r9
 800947a:	dc09      	bgt.n	8009490 <_printf_float+0x254>
 800947c:	6823      	ldr	r3, [r4, #0]
 800947e:	079b      	lsls	r3, r3, #30
 8009480:	f100 8103 	bmi.w	800968a <_printf_float+0x44e>
 8009484:	68e0      	ldr	r0, [r4, #12]
 8009486:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009488:	4298      	cmp	r0, r3
 800948a:	bfb8      	it	lt
 800948c:	4618      	movlt	r0, r3
 800948e:	e732      	b.n	80092f6 <_printf_float+0xba>
 8009490:	2301      	movs	r3, #1
 8009492:	4652      	mov	r2, sl
 8009494:	4631      	mov	r1, r6
 8009496:	4628      	mov	r0, r5
 8009498:	47b8      	blx	r7
 800949a:	3001      	adds	r0, #1
 800949c:	f43f af29 	beq.w	80092f2 <_printf_float+0xb6>
 80094a0:	f109 0901 	add.w	r9, r9, #1
 80094a4:	e7e8      	b.n	8009478 <_printf_float+0x23c>
 80094a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	dc39      	bgt.n	8009520 <_printf_float+0x2e4>
 80094ac:	4a1b      	ldr	r2, [pc, #108]	@ (800951c <_printf_float+0x2e0>)
 80094ae:	2301      	movs	r3, #1
 80094b0:	4631      	mov	r1, r6
 80094b2:	4628      	mov	r0, r5
 80094b4:	47b8      	blx	r7
 80094b6:	3001      	adds	r0, #1
 80094b8:	f43f af1b 	beq.w	80092f2 <_printf_float+0xb6>
 80094bc:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80094c0:	ea59 0303 	orrs.w	r3, r9, r3
 80094c4:	d102      	bne.n	80094cc <_printf_float+0x290>
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	07d9      	lsls	r1, r3, #31
 80094ca:	d5d7      	bpl.n	800947c <_printf_float+0x240>
 80094cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80094d0:	4631      	mov	r1, r6
 80094d2:	4628      	mov	r0, r5
 80094d4:	47b8      	blx	r7
 80094d6:	3001      	adds	r0, #1
 80094d8:	f43f af0b 	beq.w	80092f2 <_printf_float+0xb6>
 80094dc:	f04f 0a00 	mov.w	sl, #0
 80094e0:	f104 0b1a 	add.w	fp, r4, #26
 80094e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094e6:	425b      	negs	r3, r3
 80094e8:	4553      	cmp	r3, sl
 80094ea:	dc01      	bgt.n	80094f0 <_printf_float+0x2b4>
 80094ec:	464b      	mov	r3, r9
 80094ee:	e793      	b.n	8009418 <_printf_float+0x1dc>
 80094f0:	2301      	movs	r3, #1
 80094f2:	465a      	mov	r2, fp
 80094f4:	4631      	mov	r1, r6
 80094f6:	4628      	mov	r0, r5
 80094f8:	47b8      	blx	r7
 80094fa:	3001      	adds	r0, #1
 80094fc:	f43f aef9 	beq.w	80092f2 <_printf_float+0xb6>
 8009500:	f10a 0a01 	add.w	sl, sl, #1
 8009504:	e7ee      	b.n	80094e4 <_printf_float+0x2a8>
 8009506:	bf00      	nop
 8009508:	7fefffff 	.word	0x7fefffff
 800950c:	0800c138 	.word	0x0800c138
 8009510:	0800c13c 	.word	0x0800c13c
 8009514:	0800c140 	.word	0x0800c140
 8009518:	0800c144 	.word	0x0800c144
 800951c:	0800c148 	.word	0x0800c148
 8009520:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009522:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009526:	4553      	cmp	r3, sl
 8009528:	bfa8      	it	ge
 800952a:	4653      	movge	r3, sl
 800952c:	2b00      	cmp	r3, #0
 800952e:	4699      	mov	r9, r3
 8009530:	dc36      	bgt.n	80095a0 <_printf_float+0x364>
 8009532:	f04f 0b00 	mov.w	fp, #0
 8009536:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800953a:	f104 021a 	add.w	r2, r4, #26
 800953e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009540:	930a      	str	r3, [sp, #40]	@ 0x28
 8009542:	eba3 0309 	sub.w	r3, r3, r9
 8009546:	455b      	cmp	r3, fp
 8009548:	dc31      	bgt.n	80095ae <_printf_float+0x372>
 800954a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800954c:	459a      	cmp	sl, r3
 800954e:	dc3a      	bgt.n	80095c6 <_printf_float+0x38a>
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	07da      	lsls	r2, r3, #31
 8009554:	d437      	bmi.n	80095c6 <_printf_float+0x38a>
 8009556:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009558:	ebaa 0903 	sub.w	r9, sl, r3
 800955c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800955e:	ebaa 0303 	sub.w	r3, sl, r3
 8009562:	4599      	cmp	r9, r3
 8009564:	bfa8      	it	ge
 8009566:	4699      	movge	r9, r3
 8009568:	f1b9 0f00 	cmp.w	r9, #0
 800956c:	dc33      	bgt.n	80095d6 <_printf_float+0x39a>
 800956e:	f04f 0800 	mov.w	r8, #0
 8009572:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009576:	f104 0b1a 	add.w	fp, r4, #26
 800957a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800957c:	ebaa 0303 	sub.w	r3, sl, r3
 8009580:	eba3 0309 	sub.w	r3, r3, r9
 8009584:	4543      	cmp	r3, r8
 8009586:	f77f af79 	ble.w	800947c <_printf_float+0x240>
 800958a:	2301      	movs	r3, #1
 800958c:	465a      	mov	r2, fp
 800958e:	4631      	mov	r1, r6
 8009590:	4628      	mov	r0, r5
 8009592:	47b8      	blx	r7
 8009594:	3001      	adds	r0, #1
 8009596:	f43f aeac 	beq.w	80092f2 <_printf_float+0xb6>
 800959a:	f108 0801 	add.w	r8, r8, #1
 800959e:	e7ec      	b.n	800957a <_printf_float+0x33e>
 80095a0:	4642      	mov	r2, r8
 80095a2:	4631      	mov	r1, r6
 80095a4:	4628      	mov	r0, r5
 80095a6:	47b8      	blx	r7
 80095a8:	3001      	adds	r0, #1
 80095aa:	d1c2      	bne.n	8009532 <_printf_float+0x2f6>
 80095ac:	e6a1      	b.n	80092f2 <_printf_float+0xb6>
 80095ae:	2301      	movs	r3, #1
 80095b0:	4631      	mov	r1, r6
 80095b2:	4628      	mov	r0, r5
 80095b4:	920a      	str	r2, [sp, #40]	@ 0x28
 80095b6:	47b8      	blx	r7
 80095b8:	3001      	adds	r0, #1
 80095ba:	f43f ae9a 	beq.w	80092f2 <_printf_float+0xb6>
 80095be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80095c0:	f10b 0b01 	add.w	fp, fp, #1
 80095c4:	e7bb      	b.n	800953e <_printf_float+0x302>
 80095c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80095ca:	4631      	mov	r1, r6
 80095cc:	4628      	mov	r0, r5
 80095ce:	47b8      	blx	r7
 80095d0:	3001      	adds	r0, #1
 80095d2:	d1c0      	bne.n	8009556 <_printf_float+0x31a>
 80095d4:	e68d      	b.n	80092f2 <_printf_float+0xb6>
 80095d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80095d8:	464b      	mov	r3, r9
 80095da:	4442      	add	r2, r8
 80095dc:	4631      	mov	r1, r6
 80095de:	4628      	mov	r0, r5
 80095e0:	47b8      	blx	r7
 80095e2:	3001      	adds	r0, #1
 80095e4:	d1c3      	bne.n	800956e <_printf_float+0x332>
 80095e6:	e684      	b.n	80092f2 <_printf_float+0xb6>
 80095e8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80095ec:	f1ba 0f01 	cmp.w	sl, #1
 80095f0:	dc01      	bgt.n	80095f6 <_printf_float+0x3ba>
 80095f2:	07db      	lsls	r3, r3, #31
 80095f4:	d536      	bpl.n	8009664 <_printf_float+0x428>
 80095f6:	2301      	movs	r3, #1
 80095f8:	4642      	mov	r2, r8
 80095fa:	4631      	mov	r1, r6
 80095fc:	4628      	mov	r0, r5
 80095fe:	47b8      	blx	r7
 8009600:	3001      	adds	r0, #1
 8009602:	f43f ae76 	beq.w	80092f2 <_printf_float+0xb6>
 8009606:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800960a:	4631      	mov	r1, r6
 800960c:	4628      	mov	r0, r5
 800960e:	47b8      	blx	r7
 8009610:	3001      	adds	r0, #1
 8009612:	f43f ae6e 	beq.w	80092f2 <_printf_float+0xb6>
 8009616:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800961a:	2200      	movs	r2, #0
 800961c:	2300      	movs	r3, #0
 800961e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009622:	f7f7 fa29 	bl	8000a78 <__aeabi_dcmpeq>
 8009626:	b9c0      	cbnz	r0, 800965a <_printf_float+0x41e>
 8009628:	4653      	mov	r3, sl
 800962a:	f108 0201 	add.w	r2, r8, #1
 800962e:	4631      	mov	r1, r6
 8009630:	4628      	mov	r0, r5
 8009632:	47b8      	blx	r7
 8009634:	3001      	adds	r0, #1
 8009636:	d10c      	bne.n	8009652 <_printf_float+0x416>
 8009638:	e65b      	b.n	80092f2 <_printf_float+0xb6>
 800963a:	2301      	movs	r3, #1
 800963c:	465a      	mov	r2, fp
 800963e:	4631      	mov	r1, r6
 8009640:	4628      	mov	r0, r5
 8009642:	47b8      	blx	r7
 8009644:	3001      	adds	r0, #1
 8009646:	f43f ae54 	beq.w	80092f2 <_printf_float+0xb6>
 800964a:	f108 0801 	add.w	r8, r8, #1
 800964e:	45d0      	cmp	r8, sl
 8009650:	dbf3      	blt.n	800963a <_printf_float+0x3fe>
 8009652:	464b      	mov	r3, r9
 8009654:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009658:	e6df      	b.n	800941a <_printf_float+0x1de>
 800965a:	f04f 0800 	mov.w	r8, #0
 800965e:	f104 0b1a 	add.w	fp, r4, #26
 8009662:	e7f4      	b.n	800964e <_printf_float+0x412>
 8009664:	2301      	movs	r3, #1
 8009666:	4642      	mov	r2, r8
 8009668:	e7e1      	b.n	800962e <_printf_float+0x3f2>
 800966a:	2301      	movs	r3, #1
 800966c:	464a      	mov	r2, r9
 800966e:	4631      	mov	r1, r6
 8009670:	4628      	mov	r0, r5
 8009672:	47b8      	blx	r7
 8009674:	3001      	adds	r0, #1
 8009676:	f43f ae3c 	beq.w	80092f2 <_printf_float+0xb6>
 800967a:	f108 0801 	add.w	r8, r8, #1
 800967e:	68e3      	ldr	r3, [r4, #12]
 8009680:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009682:	1a5b      	subs	r3, r3, r1
 8009684:	4543      	cmp	r3, r8
 8009686:	dcf0      	bgt.n	800966a <_printf_float+0x42e>
 8009688:	e6fc      	b.n	8009484 <_printf_float+0x248>
 800968a:	f04f 0800 	mov.w	r8, #0
 800968e:	f104 0919 	add.w	r9, r4, #25
 8009692:	e7f4      	b.n	800967e <_printf_float+0x442>

08009694 <_printf_common>:
 8009694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009698:	4616      	mov	r6, r2
 800969a:	4698      	mov	r8, r3
 800969c:	688a      	ldr	r2, [r1, #8]
 800969e:	690b      	ldr	r3, [r1, #16]
 80096a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80096a4:	4293      	cmp	r3, r2
 80096a6:	bfb8      	it	lt
 80096a8:	4613      	movlt	r3, r2
 80096aa:	6033      	str	r3, [r6, #0]
 80096ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80096b0:	4607      	mov	r7, r0
 80096b2:	460c      	mov	r4, r1
 80096b4:	b10a      	cbz	r2, 80096ba <_printf_common+0x26>
 80096b6:	3301      	adds	r3, #1
 80096b8:	6033      	str	r3, [r6, #0]
 80096ba:	6823      	ldr	r3, [r4, #0]
 80096bc:	0699      	lsls	r1, r3, #26
 80096be:	bf42      	ittt	mi
 80096c0:	6833      	ldrmi	r3, [r6, #0]
 80096c2:	3302      	addmi	r3, #2
 80096c4:	6033      	strmi	r3, [r6, #0]
 80096c6:	6825      	ldr	r5, [r4, #0]
 80096c8:	f015 0506 	ands.w	r5, r5, #6
 80096cc:	d106      	bne.n	80096dc <_printf_common+0x48>
 80096ce:	f104 0a19 	add.w	sl, r4, #25
 80096d2:	68e3      	ldr	r3, [r4, #12]
 80096d4:	6832      	ldr	r2, [r6, #0]
 80096d6:	1a9b      	subs	r3, r3, r2
 80096d8:	42ab      	cmp	r3, r5
 80096da:	dc26      	bgt.n	800972a <_printf_common+0x96>
 80096dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80096e0:	6822      	ldr	r2, [r4, #0]
 80096e2:	3b00      	subs	r3, #0
 80096e4:	bf18      	it	ne
 80096e6:	2301      	movne	r3, #1
 80096e8:	0692      	lsls	r2, r2, #26
 80096ea:	d42b      	bmi.n	8009744 <_printf_common+0xb0>
 80096ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80096f0:	4641      	mov	r1, r8
 80096f2:	4638      	mov	r0, r7
 80096f4:	47c8      	blx	r9
 80096f6:	3001      	adds	r0, #1
 80096f8:	d01e      	beq.n	8009738 <_printf_common+0xa4>
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	6922      	ldr	r2, [r4, #16]
 80096fe:	f003 0306 	and.w	r3, r3, #6
 8009702:	2b04      	cmp	r3, #4
 8009704:	bf02      	ittt	eq
 8009706:	68e5      	ldreq	r5, [r4, #12]
 8009708:	6833      	ldreq	r3, [r6, #0]
 800970a:	1aed      	subeq	r5, r5, r3
 800970c:	68a3      	ldr	r3, [r4, #8]
 800970e:	bf0c      	ite	eq
 8009710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009714:	2500      	movne	r5, #0
 8009716:	4293      	cmp	r3, r2
 8009718:	bfc4      	itt	gt
 800971a:	1a9b      	subgt	r3, r3, r2
 800971c:	18ed      	addgt	r5, r5, r3
 800971e:	2600      	movs	r6, #0
 8009720:	341a      	adds	r4, #26
 8009722:	42b5      	cmp	r5, r6
 8009724:	d11a      	bne.n	800975c <_printf_common+0xc8>
 8009726:	2000      	movs	r0, #0
 8009728:	e008      	b.n	800973c <_printf_common+0xa8>
 800972a:	2301      	movs	r3, #1
 800972c:	4652      	mov	r2, sl
 800972e:	4641      	mov	r1, r8
 8009730:	4638      	mov	r0, r7
 8009732:	47c8      	blx	r9
 8009734:	3001      	adds	r0, #1
 8009736:	d103      	bne.n	8009740 <_printf_common+0xac>
 8009738:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800973c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009740:	3501      	adds	r5, #1
 8009742:	e7c6      	b.n	80096d2 <_printf_common+0x3e>
 8009744:	18e1      	adds	r1, r4, r3
 8009746:	1c5a      	adds	r2, r3, #1
 8009748:	2030      	movs	r0, #48	@ 0x30
 800974a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800974e:	4422      	add	r2, r4
 8009750:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009754:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009758:	3302      	adds	r3, #2
 800975a:	e7c7      	b.n	80096ec <_printf_common+0x58>
 800975c:	2301      	movs	r3, #1
 800975e:	4622      	mov	r2, r4
 8009760:	4641      	mov	r1, r8
 8009762:	4638      	mov	r0, r7
 8009764:	47c8      	blx	r9
 8009766:	3001      	adds	r0, #1
 8009768:	d0e6      	beq.n	8009738 <_printf_common+0xa4>
 800976a:	3601      	adds	r6, #1
 800976c:	e7d9      	b.n	8009722 <_printf_common+0x8e>
	...

08009770 <_printf_i>:
 8009770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009774:	7e0f      	ldrb	r7, [r1, #24]
 8009776:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009778:	2f78      	cmp	r7, #120	@ 0x78
 800977a:	4691      	mov	r9, r2
 800977c:	4680      	mov	r8, r0
 800977e:	460c      	mov	r4, r1
 8009780:	469a      	mov	sl, r3
 8009782:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009786:	d807      	bhi.n	8009798 <_printf_i+0x28>
 8009788:	2f62      	cmp	r7, #98	@ 0x62
 800978a:	d80a      	bhi.n	80097a2 <_printf_i+0x32>
 800978c:	2f00      	cmp	r7, #0
 800978e:	f000 80d2 	beq.w	8009936 <_printf_i+0x1c6>
 8009792:	2f58      	cmp	r7, #88	@ 0x58
 8009794:	f000 80b9 	beq.w	800990a <_printf_i+0x19a>
 8009798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800979c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80097a0:	e03a      	b.n	8009818 <_printf_i+0xa8>
 80097a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80097a6:	2b15      	cmp	r3, #21
 80097a8:	d8f6      	bhi.n	8009798 <_printf_i+0x28>
 80097aa:	a101      	add	r1, pc, #4	@ (adr r1, 80097b0 <_printf_i+0x40>)
 80097ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097b0:	08009809 	.word	0x08009809
 80097b4:	0800981d 	.word	0x0800981d
 80097b8:	08009799 	.word	0x08009799
 80097bc:	08009799 	.word	0x08009799
 80097c0:	08009799 	.word	0x08009799
 80097c4:	08009799 	.word	0x08009799
 80097c8:	0800981d 	.word	0x0800981d
 80097cc:	08009799 	.word	0x08009799
 80097d0:	08009799 	.word	0x08009799
 80097d4:	08009799 	.word	0x08009799
 80097d8:	08009799 	.word	0x08009799
 80097dc:	0800991d 	.word	0x0800991d
 80097e0:	08009847 	.word	0x08009847
 80097e4:	080098d7 	.word	0x080098d7
 80097e8:	08009799 	.word	0x08009799
 80097ec:	08009799 	.word	0x08009799
 80097f0:	0800993f 	.word	0x0800993f
 80097f4:	08009799 	.word	0x08009799
 80097f8:	08009847 	.word	0x08009847
 80097fc:	08009799 	.word	0x08009799
 8009800:	08009799 	.word	0x08009799
 8009804:	080098df 	.word	0x080098df
 8009808:	6833      	ldr	r3, [r6, #0]
 800980a:	1d1a      	adds	r2, r3, #4
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	6032      	str	r2, [r6, #0]
 8009810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009814:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009818:	2301      	movs	r3, #1
 800981a:	e09d      	b.n	8009958 <_printf_i+0x1e8>
 800981c:	6833      	ldr	r3, [r6, #0]
 800981e:	6820      	ldr	r0, [r4, #0]
 8009820:	1d19      	adds	r1, r3, #4
 8009822:	6031      	str	r1, [r6, #0]
 8009824:	0606      	lsls	r6, r0, #24
 8009826:	d501      	bpl.n	800982c <_printf_i+0xbc>
 8009828:	681d      	ldr	r5, [r3, #0]
 800982a:	e003      	b.n	8009834 <_printf_i+0xc4>
 800982c:	0645      	lsls	r5, r0, #25
 800982e:	d5fb      	bpl.n	8009828 <_printf_i+0xb8>
 8009830:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009834:	2d00      	cmp	r5, #0
 8009836:	da03      	bge.n	8009840 <_printf_i+0xd0>
 8009838:	232d      	movs	r3, #45	@ 0x2d
 800983a:	426d      	negs	r5, r5
 800983c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009840:	4859      	ldr	r0, [pc, #356]	@ (80099a8 <_printf_i+0x238>)
 8009842:	230a      	movs	r3, #10
 8009844:	e011      	b.n	800986a <_printf_i+0xfa>
 8009846:	6821      	ldr	r1, [r4, #0]
 8009848:	6833      	ldr	r3, [r6, #0]
 800984a:	0608      	lsls	r0, r1, #24
 800984c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009850:	d402      	bmi.n	8009858 <_printf_i+0xe8>
 8009852:	0649      	lsls	r1, r1, #25
 8009854:	bf48      	it	mi
 8009856:	b2ad      	uxthmi	r5, r5
 8009858:	2f6f      	cmp	r7, #111	@ 0x6f
 800985a:	4853      	ldr	r0, [pc, #332]	@ (80099a8 <_printf_i+0x238>)
 800985c:	6033      	str	r3, [r6, #0]
 800985e:	bf14      	ite	ne
 8009860:	230a      	movne	r3, #10
 8009862:	2308      	moveq	r3, #8
 8009864:	2100      	movs	r1, #0
 8009866:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800986a:	6866      	ldr	r6, [r4, #4]
 800986c:	60a6      	str	r6, [r4, #8]
 800986e:	2e00      	cmp	r6, #0
 8009870:	bfa2      	ittt	ge
 8009872:	6821      	ldrge	r1, [r4, #0]
 8009874:	f021 0104 	bicge.w	r1, r1, #4
 8009878:	6021      	strge	r1, [r4, #0]
 800987a:	b90d      	cbnz	r5, 8009880 <_printf_i+0x110>
 800987c:	2e00      	cmp	r6, #0
 800987e:	d04b      	beq.n	8009918 <_printf_i+0x1a8>
 8009880:	4616      	mov	r6, r2
 8009882:	fbb5 f1f3 	udiv	r1, r5, r3
 8009886:	fb03 5711 	mls	r7, r3, r1, r5
 800988a:	5dc7      	ldrb	r7, [r0, r7]
 800988c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009890:	462f      	mov	r7, r5
 8009892:	42bb      	cmp	r3, r7
 8009894:	460d      	mov	r5, r1
 8009896:	d9f4      	bls.n	8009882 <_printf_i+0x112>
 8009898:	2b08      	cmp	r3, #8
 800989a:	d10b      	bne.n	80098b4 <_printf_i+0x144>
 800989c:	6823      	ldr	r3, [r4, #0]
 800989e:	07df      	lsls	r7, r3, #31
 80098a0:	d508      	bpl.n	80098b4 <_printf_i+0x144>
 80098a2:	6923      	ldr	r3, [r4, #16]
 80098a4:	6861      	ldr	r1, [r4, #4]
 80098a6:	4299      	cmp	r1, r3
 80098a8:	bfde      	ittt	le
 80098aa:	2330      	movle	r3, #48	@ 0x30
 80098ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80098b0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80098b4:	1b92      	subs	r2, r2, r6
 80098b6:	6122      	str	r2, [r4, #16]
 80098b8:	f8cd a000 	str.w	sl, [sp]
 80098bc:	464b      	mov	r3, r9
 80098be:	aa03      	add	r2, sp, #12
 80098c0:	4621      	mov	r1, r4
 80098c2:	4640      	mov	r0, r8
 80098c4:	f7ff fee6 	bl	8009694 <_printf_common>
 80098c8:	3001      	adds	r0, #1
 80098ca:	d14a      	bne.n	8009962 <_printf_i+0x1f2>
 80098cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098d0:	b004      	add	sp, #16
 80098d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098d6:	6823      	ldr	r3, [r4, #0]
 80098d8:	f043 0320 	orr.w	r3, r3, #32
 80098dc:	6023      	str	r3, [r4, #0]
 80098de:	4833      	ldr	r0, [pc, #204]	@ (80099ac <_printf_i+0x23c>)
 80098e0:	2778      	movs	r7, #120	@ 0x78
 80098e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	6831      	ldr	r1, [r6, #0]
 80098ea:	061f      	lsls	r7, r3, #24
 80098ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80098f0:	d402      	bmi.n	80098f8 <_printf_i+0x188>
 80098f2:	065f      	lsls	r7, r3, #25
 80098f4:	bf48      	it	mi
 80098f6:	b2ad      	uxthmi	r5, r5
 80098f8:	6031      	str	r1, [r6, #0]
 80098fa:	07d9      	lsls	r1, r3, #31
 80098fc:	bf44      	itt	mi
 80098fe:	f043 0320 	orrmi.w	r3, r3, #32
 8009902:	6023      	strmi	r3, [r4, #0]
 8009904:	b11d      	cbz	r5, 800990e <_printf_i+0x19e>
 8009906:	2310      	movs	r3, #16
 8009908:	e7ac      	b.n	8009864 <_printf_i+0xf4>
 800990a:	4827      	ldr	r0, [pc, #156]	@ (80099a8 <_printf_i+0x238>)
 800990c:	e7e9      	b.n	80098e2 <_printf_i+0x172>
 800990e:	6823      	ldr	r3, [r4, #0]
 8009910:	f023 0320 	bic.w	r3, r3, #32
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	e7f6      	b.n	8009906 <_printf_i+0x196>
 8009918:	4616      	mov	r6, r2
 800991a:	e7bd      	b.n	8009898 <_printf_i+0x128>
 800991c:	6833      	ldr	r3, [r6, #0]
 800991e:	6825      	ldr	r5, [r4, #0]
 8009920:	6961      	ldr	r1, [r4, #20]
 8009922:	1d18      	adds	r0, r3, #4
 8009924:	6030      	str	r0, [r6, #0]
 8009926:	062e      	lsls	r6, r5, #24
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	d501      	bpl.n	8009930 <_printf_i+0x1c0>
 800992c:	6019      	str	r1, [r3, #0]
 800992e:	e002      	b.n	8009936 <_printf_i+0x1c6>
 8009930:	0668      	lsls	r0, r5, #25
 8009932:	d5fb      	bpl.n	800992c <_printf_i+0x1bc>
 8009934:	8019      	strh	r1, [r3, #0]
 8009936:	2300      	movs	r3, #0
 8009938:	6123      	str	r3, [r4, #16]
 800993a:	4616      	mov	r6, r2
 800993c:	e7bc      	b.n	80098b8 <_printf_i+0x148>
 800993e:	6833      	ldr	r3, [r6, #0]
 8009940:	1d1a      	adds	r2, r3, #4
 8009942:	6032      	str	r2, [r6, #0]
 8009944:	681e      	ldr	r6, [r3, #0]
 8009946:	6862      	ldr	r2, [r4, #4]
 8009948:	2100      	movs	r1, #0
 800994a:	4630      	mov	r0, r6
 800994c:	f7f6 fc18 	bl	8000180 <memchr>
 8009950:	b108      	cbz	r0, 8009956 <_printf_i+0x1e6>
 8009952:	1b80      	subs	r0, r0, r6
 8009954:	6060      	str	r0, [r4, #4]
 8009956:	6863      	ldr	r3, [r4, #4]
 8009958:	6123      	str	r3, [r4, #16]
 800995a:	2300      	movs	r3, #0
 800995c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009960:	e7aa      	b.n	80098b8 <_printf_i+0x148>
 8009962:	6923      	ldr	r3, [r4, #16]
 8009964:	4632      	mov	r2, r6
 8009966:	4649      	mov	r1, r9
 8009968:	4640      	mov	r0, r8
 800996a:	47d0      	blx	sl
 800996c:	3001      	adds	r0, #1
 800996e:	d0ad      	beq.n	80098cc <_printf_i+0x15c>
 8009970:	6823      	ldr	r3, [r4, #0]
 8009972:	079b      	lsls	r3, r3, #30
 8009974:	d413      	bmi.n	800999e <_printf_i+0x22e>
 8009976:	68e0      	ldr	r0, [r4, #12]
 8009978:	9b03      	ldr	r3, [sp, #12]
 800997a:	4298      	cmp	r0, r3
 800997c:	bfb8      	it	lt
 800997e:	4618      	movlt	r0, r3
 8009980:	e7a6      	b.n	80098d0 <_printf_i+0x160>
 8009982:	2301      	movs	r3, #1
 8009984:	4632      	mov	r2, r6
 8009986:	4649      	mov	r1, r9
 8009988:	4640      	mov	r0, r8
 800998a:	47d0      	blx	sl
 800998c:	3001      	adds	r0, #1
 800998e:	d09d      	beq.n	80098cc <_printf_i+0x15c>
 8009990:	3501      	adds	r5, #1
 8009992:	68e3      	ldr	r3, [r4, #12]
 8009994:	9903      	ldr	r1, [sp, #12]
 8009996:	1a5b      	subs	r3, r3, r1
 8009998:	42ab      	cmp	r3, r5
 800999a:	dcf2      	bgt.n	8009982 <_printf_i+0x212>
 800999c:	e7eb      	b.n	8009976 <_printf_i+0x206>
 800999e:	2500      	movs	r5, #0
 80099a0:	f104 0619 	add.w	r6, r4, #25
 80099a4:	e7f5      	b.n	8009992 <_printf_i+0x222>
 80099a6:	bf00      	nop
 80099a8:	0800c14a 	.word	0x0800c14a
 80099ac:	0800c15b 	.word	0x0800c15b

080099b0 <sniprintf>:
 80099b0:	b40c      	push	{r2, r3}
 80099b2:	b530      	push	{r4, r5, lr}
 80099b4:	4b17      	ldr	r3, [pc, #92]	@ (8009a14 <sniprintf+0x64>)
 80099b6:	1e0c      	subs	r4, r1, #0
 80099b8:	681d      	ldr	r5, [r3, #0]
 80099ba:	b09d      	sub	sp, #116	@ 0x74
 80099bc:	da08      	bge.n	80099d0 <sniprintf+0x20>
 80099be:	238b      	movs	r3, #139	@ 0x8b
 80099c0:	602b      	str	r3, [r5, #0]
 80099c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099c6:	b01d      	add	sp, #116	@ 0x74
 80099c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099cc:	b002      	add	sp, #8
 80099ce:	4770      	bx	lr
 80099d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80099d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80099d8:	bf14      	ite	ne
 80099da:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80099de:	4623      	moveq	r3, r4
 80099e0:	9304      	str	r3, [sp, #16]
 80099e2:	9307      	str	r3, [sp, #28]
 80099e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80099e8:	9002      	str	r0, [sp, #8]
 80099ea:	9006      	str	r0, [sp, #24]
 80099ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80099f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80099f2:	ab21      	add	r3, sp, #132	@ 0x84
 80099f4:	a902      	add	r1, sp, #8
 80099f6:	4628      	mov	r0, r5
 80099f8:	9301      	str	r3, [sp, #4]
 80099fa:	f000 fffd 	bl	800a9f8 <_svfiprintf_r>
 80099fe:	1c43      	adds	r3, r0, #1
 8009a00:	bfbc      	itt	lt
 8009a02:	238b      	movlt	r3, #139	@ 0x8b
 8009a04:	602b      	strlt	r3, [r5, #0]
 8009a06:	2c00      	cmp	r4, #0
 8009a08:	d0dd      	beq.n	80099c6 <sniprintf+0x16>
 8009a0a:	9b02      	ldr	r3, [sp, #8]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	701a      	strb	r2, [r3, #0]
 8009a10:	e7d9      	b.n	80099c6 <sniprintf+0x16>
 8009a12:	bf00      	nop
 8009a14:	20000030 	.word	0x20000030

08009a18 <std>:
 8009a18:	2300      	movs	r3, #0
 8009a1a:	b510      	push	{r4, lr}
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	e9c0 3300 	strd	r3, r3, [r0]
 8009a22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a26:	6083      	str	r3, [r0, #8]
 8009a28:	8181      	strh	r1, [r0, #12]
 8009a2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009a2c:	81c2      	strh	r2, [r0, #14]
 8009a2e:	6183      	str	r3, [r0, #24]
 8009a30:	4619      	mov	r1, r3
 8009a32:	2208      	movs	r2, #8
 8009a34:	305c      	adds	r0, #92	@ 0x5c
 8009a36:	f000 f8eb 	bl	8009c10 <memset>
 8009a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009a70 <std+0x58>)
 8009a3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8009a74 <std+0x5c>)
 8009a40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009a42:	4b0d      	ldr	r3, [pc, #52]	@ (8009a78 <std+0x60>)
 8009a44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009a46:	4b0d      	ldr	r3, [pc, #52]	@ (8009a7c <std+0x64>)
 8009a48:	6323      	str	r3, [r4, #48]	@ 0x30
 8009a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8009a80 <std+0x68>)
 8009a4c:	6224      	str	r4, [r4, #32]
 8009a4e:	429c      	cmp	r4, r3
 8009a50:	d006      	beq.n	8009a60 <std+0x48>
 8009a52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009a56:	4294      	cmp	r4, r2
 8009a58:	d002      	beq.n	8009a60 <std+0x48>
 8009a5a:	33d0      	adds	r3, #208	@ 0xd0
 8009a5c:	429c      	cmp	r4, r3
 8009a5e:	d105      	bne.n	8009a6c <std+0x54>
 8009a60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a68:	f000 b908 	b.w	8009c7c <__retarget_lock_init_recursive>
 8009a6c:	bd10      	pop	{r4, pc}
 8009a6e:	bf00      	nop
 8009a70:	0800b5ad 	.word	0x0800b5ad
 8009a74:	0800b5cf 	.word	0x0800b5cf
 8009a78:	0800b607 	.word	0x0800b607
 8009a7c:	0800b62b 	.word	0x0800b62b
 8009a80:	200009dc 	.word	0x200009dc

08009a84 <stdio_exit_handler>:
 8009a84:	4a02      	ldr	r2, [pc, #8]	@ (8009a90 <stdio_exit_handler+0xc>)
 8009a86:	4903      	ldr	r1, [pc, #12]	@ (8009a94 <stdio_exit_handler+0x10>)
 8009a88:	4803      	ldr	r0, [pc, #12]	@ (8009a98 <stdio_exit_handler+0x14>)
 8009a8a:	f000 b869 	b.w	8009b60 <_fwalk_sglue>
 8009a8e:	bf00      	nop
 8009a90:	20000024 	.word	0x20000024
 8009a94:	0800ae45 	.word	0x0800ae45
 8009a98:	20000034 	.word	0x20000034

08009a9c <cleanup_stdio>:
 8009a9c:	6841      	ldr	r1, [r0, #4]
 8009a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8009ad0 <cleanup_stdio+0x34>)
 8009aa0:	4299      	cmp	r1, r3
 8009aa2:	b510      	push	{r4, lr}
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	d001      	beq.n	8009aac <cleanup_stdio+0x10>
 8009aa8:	f001 f9cc 	bl	800ae44 <_fflush_r>
 8009aac:	68a1      	ldr	r1, [r4, #8]
 8009aae:	4b09      	ldr	r3, [pc, #36]	@ (8009ad4 <cleanup_stdio+0x38>)
 8009ab0:	4299      	cmp	r1, r3
 8009ab2:	d002      	beq.n	8009aba <cleanup_stdio+0x1e>
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	f001 f9c5 	bl	800ae44 <_fflush_r>
 8009aba:	68e1      	ldr	r1, [r4, #12]
 8009abc:	4b06      	ldr	r3, [pc, #24]	@ (8009ad8 <cleanup_stdio+0x3c>)
 8009abe:	4299      	cmp	r1, r3
 8009ac0:	d004      	beq.n	8009acc <cleanup_stdio+0x30>
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ac8:	f001 b9bc 	b.w	800ae44 <_fflush_r>
 8009acc:	bd10      	pop	{r4, pc}
 8009ace:	bf00      	nop
 8009ad0:	200009dc 	.word	0x200009dc
 8009ad4:	20000a44 	.word	0x20000a44
 8009ad8:	20000aac 	.word	0x20000aac

08009adc <global_stdio_init.part.0>:
 8009adc:	b510      	push	{r4, lr}
 8009ade:	4b0b      	ldr	r3, [pc, #44]	@ (8009b0c <global_stdio_init.part.0+0x30>)
 8009ae0:	4c0b      	ldr	r4, [pc, #44]	@ (8009b10 <global_stdio_init.part.0+0x34>)
 8009ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8009b14 <global_stdio_init.part.0+0x38>)
 8009ae4:	601a      	str	r2, [r3, #0]
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	2200      	movs	r2, #0
 8009aea:	2104      	movs	r1, #4
 8009aec:	f7ff ff94 	bl	8009a18 <std>
 8009af0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009af4:	2201      	movs	r2, #1
 8009af6:	2109      	movs	r1, #9
 8009af8:	f7ff ff8e 	bl	8009a18 <std>
 8009afc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009b00:	2202      	movs	r2, #2
 8009b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b06:	2112      	movs	r1, #18
 8009b08:	f7ff bf86 	b.w	8009a18 <std>
 8009b0c:	20000b14 	.word	0x20000b14
 8009b10:	200009dc 	.word	0x200009dc
 8009b14:	08009a85 	.word	0x08009a85

08009b18 <__sfp_lock_acquire>:
 8009b18:	4801      	ldr	r0, [pc, #4]	@ (8009b20 <__sfp_lock_acquire+0x8>)
 8009b1a:	f000 b8b0 	b.w	8009c7e <__retarget_lock_acquire_recursive>
 8009b1e:	bf00      	nop
 8009b20:	20000b19 	.word	0x20000b19

08009b24 <__sfp_lock_release>:
 8009b24:	4801      	ldr	r0, [pc, #4]	@ (8009b2c <__sfp_lock_release+0x8>)
 8009b26:	f000 b8ab 	b.w	8009c80 <__retarget_lock_release_recursive>
 8009b2a:	bf00      	nop
 8009b2c:	20000b19 	.word	0x20000b19

08009b30 <__sinit>:
 8009b30:	b510      	push	{r4, lr}
 8009b32:	4604      	mov	r4, r0
 8009b34:	f7ff fff0 	bl	8009b18 <__sfp_lock_acquire>
 8009b38:	6a23      	ldr	r3, [r4, #32]
 8009b3a:	b11b      	cbz	r3, 8009b44 <__sinit+0x14>
 8009b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b40:	f7ff bff0 	b.w	8009b24 <__sfp_lock_release>
 8009b44:	4b04      	ldr	r3, [pc, #16]	@ (8009b58 <__sinit+0x28>)
 8009b46:	6223      	str	r3, [r4, #32]
 8009b48:	4b04      	ldr	r3, [pc, #16]	@ (8009b5c <__sinit+0x2c>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1f5      	bne.n	8009b3c <__sinit+0xc>
 8009b50:	f7ff ffc4 	bl	8009adc <global_stdio_init.part.0>
 8009b54:	e7f2      	b.n	8009b3c <__sinit+0xc>
 8009b56:	bf00      	nop
 8009b58:	08009a9d 	.word	0x08009a9d
 8009b5c:	20000b14 	.word	0x20000b14

08009b60 <_fwalk_sglue>:
 8009b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b64:	4607      	mov	r7, r0
 8009b66:	4688      	mov	r8, r1
 8009b68:	4614      	mov	r4, r2
 8009b6a:	2600      	movs	r6, #0
 8009b6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b70:	f1b9 0901 	subs.w	r9, r9, #1
 8009b74:	d505      	bpl.n	8009b82 <_fwalk_sglue+0x22>
 8009b76:	6824      	ldr	r4, [r4, #0]
 8009b78:	2c00      	cmp	r4, #0
 8009b7a:	d1f7      	bne.n	8009b6c <_fwalk_sglue+0xc>
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b82:	89ab      	ldrh	r3, [r5, #12]
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d907      	bls.n	8009b98 <_fwalk_sglue+0x38>
 8009b88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	d003      	beq.n	8009b98 <_fwalk_sglue+0x38>
 8009b90:	4629      	mov	r1, r5
 8009b92:	4638      	mov	r0, r7
 8009b94:	47c0      	blx	r8
 8009b96:	4306      	orrs	r6, r0
 8009b98:	3568      	adds	r5, #104	@ 0x68
 8009b9a:	e7e9      	b.n	8009b70 <_fwalk_sglue+0x10>

08009b9c <_vsniprintf_r>:
 8009b9c:	b530      	push	{r4, r5, lr}
 8009b9e:	4614      	mov	r4, r2
 8009ba0:	2c00      	cmp	r4, #0
 8009ba2:	b09b      	sub	sp, #108	@ 0x6c
 8009ba4:	4605      	mov	r5, r0
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	da05      	bge.n	8009bb6 <_vsniprintf_r+0x1a>
 8009baa:	238b      	movs	r3, #139	@ 0x8b
 8009bac:	6003      	str	r3, [r0, #0]
 8009bae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009bb2:	b01b      	add	sp, #108	@ 0x6c
 8009bb4:	bd30      	pop	{r4, r5, pc}
 8009bb6:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009bba:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009bbe:	bf14      	ite	ne
 8009bc0:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8009bc4:	4623      	moveq	r3, r4
 8009bc6:	9302      	str	r3, [sp, #8]
 8009bc8:	9305      	str	r3, [sp, #20]
 8009bca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009bce:	9100      	str	r1, [sp, #0]
 8009bd0:	9104      	str	r1, [sp, #16]
 8009bd2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009bd6:	4669      	mov	r1, sp
 8009bd8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009bda:	f000 ff0d 	bl	800a9f8 <_svfiprintf_r>
 8009bde:	1c43      	adds	r3, r0, #1
 8009be0:	bfbc      	itt	lt
 8009be2:	238b      	movlt	r3, #139	@ 0x8b
 8009be4:	602b      	strlt	r3, [r5, #0]
 8009be6:	2c00      	cmp	r4, #0
 8009be8:	d0e3      	beq.n	8009bb2 <_vsniprintf_r+0x16>
 8009bea:	9b00      	ldr	r3, [sp, #0]
 8009bec:	2200      	movs	r2, #0
 8009bee:	701a      	strb	r2, [r3, #0]
 8009bf0:	e7df      	b.n	8009bb2 <_vsniprintf_r+0x16>
	...

08009bf4 <vsniprintf>:
 8009bf4:	b507      	push	{r0, r1, r2, lr}
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	460a      	mov	r2, r1
 8009bfc:	4601      	mov	r1, r0
 8009bfe:	4803      	ldr	r0, [pc, #12]	@ (8009c0c <vsniprintf+0x18>)
 8009c00:	6800      	ldr	r0, [r0, #0]
 8009c02:	f7ff ffcb 	bl	8009b9c <_vsniprintf_r>
 8009c06:	b003      	add	sp, #12
 8009c08:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c0c:	20000030 	.word	0x20000030

08009c10 <memset>:
 8009c10:	4402      	add	r2, r0
 8009c12:	4603      	mov	r3, r0
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d100      	bne.n	8009c1a <memset+0xa>
 8009c18:	4770      	bx	lr
 8009c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8009c1e:	e7f9      	b.n	8009c14 <memset+0x4>

08009c20 <_localeconv_r>:
 8009c20:	4800      	ldr	r0, [pc, #0]	@ (8009c24 <_localeconv_r+0x4>)
 8009c22:	4770      	bx	lr
 8009c24:	20000170 	.word	0x20000170

08009c28 <__errno>:
 8009c28:	4b01      	ldr	r3, [pc, #4]	@ (8009c30 <__errno+0x8>)
 8009c2a:	6818      	ldr	r0, [r3, #0]
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	20000030 	.word	0x20000030

08009c34 <__libc_init_array>:
 8009c34:	b570      	push	{r4, r5, r6, lr}
 8009c36:	4d0d      	ldr	r5, [pc, #52]	@ (8009c6c <__libc_init_array+0x38>)
 8009c38:	4c0d      	ldr	r4, [pc, #52]	@ (8009c70 <__libc_init_array+0x3c>)
 8009c3a:	1b64      	subs	r4, r4, r5
 8009c3c:	10a4      	asrs	r4, r4, #2
 8009c3e:	2600      	movs	r6, #0
 8009c40:	42a6      	cmp	r6, r4
 8009c42:	d109      	bne.n	8009c58 <__libc_init_array+0x24>
 8009c44:	4d0b      	ldr	r5, [pc, #44]	@ (8009c74 <__libc_init_array+0x40>)
 8009c46:	4c0c      	ldr	r4, [pc, #48]	@ (8009c78 <__libc_init_array+0x44>)
 8009c48:	f002 f8ea 	bl	800be20 <_init>
 8009c4c:	1b64      	subs	r4, r4, r5
 8009c4e:	10a4      	asrs	r4, r4, #2
 8009c50:	2600      	movs	r6, #0
 8009c52:	42a6      	cmp	r6, r4
 8009c54:	d105      	bne.n	8009c62 <__libc_init_array+0x2e>
 8009c56:	bd70      	pop	{r4, r5, r6, pc}
 8009c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c5c:	4798      	blx	r3
 8009c5e:	3601      	adds	r6, #1
 8009c60:	e7ee      	b.n	8009c40 <__libc_init_array+0xc>
 8009c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c66:	4798      	blx	r3
 8009c68:	3601      	adds	r6, #1
 8009c6a:	e7f2      	b.n	8009c52 <__libc_init_array+0x1e>
 8009c6c:	0800c4b0 	.word	0x0800c4b0
 8009c70:	0800c4b0 	.word	0x0800c4b0
 8009c74:	0800c4b0 	.word	0x0800c4b0
 8009c78:	0800c4b4 	.word	0x0800c4b4

08009c7c <__retarget_lock_init_recursive>:
 8009c7c:	4770      	bx	lr

08009c7e <__retarget_lock_acquire_recursive>:
 8009c7e:	4770      	bx	lr

08009c80 <__retarget_lock_release_recursive>:
 8009c80:	4770      	bx	lr

08009c82 <memcpy>:
 8009c82:	440a      	add	r2, r1
 8009c84:	4291      	cmp	r1, r2
 8009c86:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009c8a:	d100      	bne.n	8009c8e <memcpy+0xc>
 8009c8c:	4770      	bx	lr
 8009c8e:	b510      	push	{r4, lr}
 8009c90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c98:	4291      	cmp	r1, r2
 8009c9a:	d1f9      	bne.n	8009c90 <memcpy+0xe>
 8009c9c:	bd10      	pop	{r4, pc}

08009c9e <quorem>:
 8009c9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca2:	6903      	ldr	r3, [r0, #16]
 8009ca4:	690c      	ldr	r4, [r1, #16]
 8009ca6:	42a3      	cmp	r3, r4
 8009ca8:	4607      	mov	r7, r0
 8009caa:	db7e      	blt.n	8009daa <quorem+0x10c>
 8009cac:	3c01      	subs	r4, #1
 8009cae:	f101 0814 	add.w	r8, r1, #20
 8009cb2:	00a3      	lsls	r3, r4, #2
 8009cb4:	f100 0514 	add.w	r5, r0, #20
 8009cb8:	9300      	str	r3, [sp, #0]
 8009cba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cbe:	9301      	str	r3, [sp, #4]
 8009cc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009cc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009cd0:	fbb2 f6f3 	udiv	r6, r2, r3
 8009cd4:	d32e      	bcc.n	8009d34 <quorem+0x96>
 8009cd6:	f04f 0a00 	mov.w	sl, #0
 8009cda:	46c4      	mov	ip, r8
 8009cdc:	46ae      	mov	lr, r5
 8009cde:	46d3      	mov	fp, sl
 8009ce0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009ce4:	b298      	uxth	r0, r3
 8009ce6:	fb06 a000 	mla	r0, r6, r0, sl
 8009cea:	0c02      	lsrs	r2, r0, #16
 8009cec:	0c1b      	lsrs	r3, r3, #16
 8009cee:	fb06 2303 	mla	r3, r6, r3, r2
 8009cf2:	f8de 2000 	ldr.w	r2, [lr]
 8009cf6:	b280      	uxth	r0, r0
 8009cf8:	b292      	uxth	r2, r2
 8009cfa:	1a12      	subs	r2, r2, r0
 8009cfc:	445a      	add	r2, fp
 8009cfe:	f8de 0000 	ldr.w	r0, [lr]
 8009d02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009d0c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009d10:	b292      	uxth	r2, r2
 8009d12:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009d16:	45e1      	cmp	r9, ip
 8009d18:	f84e 2b04 	str.w	r2, [lr], #4
 8009d1c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009d20:	d2de      	bcs.n	8009ce0 <quorem+0x42>
 8009d22:	9b00      	ldr	r3, [sp, #0]
 8009d24:	58eb      	ldr	r3, [r5, r3]
 8009d26:	b92b      	cbnz	r3, 8009d34 <quorem+0x96>
 8009d28:	9b01      	ldr	r3, [sp, #4]
 8009d2a:	3b04      	subs	r3, #4
 8009d2c:	429d      	cmp	r5, r3
 8009d2e:	461a      	mov	r2, r3
 8009d30:	d32f      	bcc.n	8009d92 <quorem+0xf4>
 8009d32:	613c      	str	r4, [r7, #16]
 8009d34:	4638      	mov	r0, r7
 8009d36:	f001 fb33 	bl	800b3a0 <__mcmp>
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	db25      	blt.n	8009d8a <quorem+0xec>
 8009d3e:	4629      	mov	r1, r5
 8009d40:	2000      	movs	r0, #0
 8009d42:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d46:	f8d1 c000 	ldr.w	ip, [r1]
 8009d4a:	fa1f fe82 	uxth.w	lr, r2
 8009d4e:	fa1f f38c 	uxth.w	r3, ip
 8009d52:	eba3 030e 	sub.w	r3, r3, lr
 8009d56:	4403      	add	r3, r0
 8009d58:	0c12      	lsrs	r2, r2, #16
 8009d5a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009d5e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d68:	45c1      	cmp	r9, r8
 8009d6a:	f841 3b04 	str.w	r3, [r1], #4
 8009d6e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009d72:	d2e6      	bcs.n	8009d42 <quorem+0xa4>
 8009d74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d7c:	b922      	cbnz	r2, 8009d88 <quorem+0xea>
 8009d7e:	3b04      	subs	r3, #4
 8009d80:	429d      	cmp	r5, r3
 8009d82:	461a      	mov	r2, r3
 8009d84:	d30b      	bcc.n	8009d9e <quorem+0x100>
 8009d86:	613c      	str	r4, [r7, #16]
 8009d88:	3601      	adds	r6, #1
 8009d8a:	4630      	mov	r0, r6
 8009d8c:	b003      	add	sp, #12
 8009d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d92:	6812      	ldr	r2, [r2, #0]
 8009d94:	3b04      	subs	r3, #4
 8009d96:	2a00      	cmp	r2, #0
 8009d98:	d1cb      	bne.n	8009d32 <quorem+0x94>
 8009d9a:	3c01      	subs	r4, #1
 8009d9c:	e7c6      	b.n	8009d2c <quorem+0x8e>
 8009d9e:	6812      	ldr	r2, [r2, #0]
 8009da0:	3b04      	subs	r3, #4
 8009da2:	2a00      	cmp	r2, #0
 8009da4:	d1ef      	bne.n	8009d86 <quorem+0xe8>
 8009da6:	3c01      	subs	r4, #1
 8009da8:	e7ea      	b.n	8009d80 <quorem+0xe2>
 8009daa:	2000      	movs	r0, #0
 8009dac:	e7ee      	b.n	8009d8c <quorem+0xee>
	...

08009db0 <_dtoa_r>:
 8009db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db4:	69c7      	ldr	r7, [r0, #28]
 8009db6:	b097      	sub	sp, #92	@ 0x5c
 8009db8:	4614      	mov	r4, r2
 8009dba:	461d      	mov	r5, r3
 8009dbc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009dc0:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009dc2:	4683      	mov	fp, r0
 8009dc4:	b97f      	cbnz	r7, 8009de6 <_dtoa_r+0x36>
 8009dc6:	2010      	movs	r0, #16
 8009dc8:	f000 ff12 	bl	800abf0 <malloc>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	f8cb 001c 	str.w	r0, [fp, #28]
 8009dd2:	b920      	cbnz	r0, 8009dde <_dtoa_r+0x2e>
 8009dd4:	4ba8      	ldr	r3, [pc, #672]	@ (800a078 <_dtoa_r+0x2c8>)
 8009dd6:	21ef      	movs	r1, #239	@ 0xef
 8009dd8:	48a8      	ldr	r0, [pc, #672]	@ (800a07c <_dtoa_r+0x2cc>)
 8009dda:	f001 fcc9 	bl	800b770 <__assert_func>
 8009dde:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009de2:	6007      	str	r7, [r0, #0]
 8009de4:	60c7      	str	r7, [r0, #12]
 8009de6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009dea:	6819      	ldr	r1, [r3, #0]
 8009dec:	b159      	cbz	r1, 8009e06 <_dtoa_r+0x56>
 8009dee:	685a      	ldr	r2, [r3, #4]
 8009df0:	604a      	str	r2, [r1, #4]
 8009df2:	2301      	movs	r3, #1
 8009df4:	4093      	lsls	r3, r2
 8009df6:	608b      	str	r3, [r1, #8]
 8009df8:	4658      	mov	r0, fp
 8009dfa:	f001 f897 	bl	800af2c <_Bfree>
 8009dfe:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009e02:	2200      	movs	r2, #0
 8009e04:	601a      	str	r2, [r3, #0]
 8009e06:	1e2b      	subs	r3, r5, #0
 8009e08:	bfb9      	ittee	lt
 8009e0a:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009e0e:	9303      	strlt	r3, [sp, #12]
 8009e10:	2300      	movge	r3, #0
 8009e12:	6033      	strge	r3, [r6, #0]
 8009e14:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009e18:	4b99      	ldr	r3, [pc, #612]	@ (800a080 <_dtoa_r+0x2d0>)
 8009e1a:	bfbc      	itt	lt
 8009e1c:	2201      	movlt	r2, #1
 8009e1e:	6032      	strlt	r2, [r6, #0]
 8009e20:	ea33 0308 	bics.w	r3, r3, r8
 8009e24:	d112      	bne.n	8009e4c <_dtoa_r+0x9c>
 8009e26:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009e28:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009e2c:	6013      	str	r3, [r2, #0]
 8009e2e:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009e32:	4323      	orrs	r3, r4
 8009e34:	f000 8551 	beq.w	800a8da <_dtoa_r+0xb2a>
 8009e38:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009e3a:	f8df a248 	ldr.w	sl, [pc, #584]	@ 800a084 <_dtoa_r+0x2d4>
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	f000 8553 	beq.w	800a8ea <_dtoa_r+0xb3a>
 8009e44:	f10a 0303 	add.w	r3, sl, #3
 8009e48:	f000 bd4d 	b.w	800a8e6 <_dtoa_r+0xb36>
 8009e4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e50:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009e54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e58:	2200      	movs	r2, #0
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	f7f6 fe0c 	bl	8000a78 <__aeabi_dcmpeq>
 8009e60:	4607      	mov	r7, r0
 8009e62:	b158      	cbz	r0, 8009e7c <_dtoa_r+0xcc>
 8009e64:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009e66:	2301      	movs	r3, #1
 8009e68:	6013      	str	r3, [r2, #0]
 8009e6a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009e6c:	b113      	cbz	r3, 8009e74 <_dtoa_r+0xc4>
 8009e6e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009e70:	4b85      	ldr	r3, [pc, #532]	@ (800a088 <_dtoa_r+0x2d8>)
 8009e72:	6013      	str	r3, [r2, #0]
 8009e74:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800a08c <_dtoa_r+0x2dc>
 8009e78:	f000 bd37 	b.w	800a8ea <_dtoa_r+0xb3a>
 8009e7c:	ab14      	add	r3, sp, #80	@ 0x50
 8009e7e:	9301      	str	r3, [sp, #4]
 8009e80:	ab15      	add	r3, sp, #84	@ 0x54
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	4658      	mov	r0, fp
 8009e86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009e8a:	f001 fb37 	bl	800b4fc <__d2b>
 8009e8e:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8009e92:	4681      	mov	r9, r0
 8009e94:	2e00      	cmp	r6, #0
 8009e96:	d076      	beq.n	8009f86 <_dtoa_r+0x1d6>
 8009e98:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e9a:	9712      	str	r7, [sp, #72]	@ 0x48
 8009e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ea0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ea4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009ea8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009eac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	4b76      	ldr	r3, [pc, #472]	@ (800a090 <_dtoa_r+0x2e0>)
 8009eb6:	f7f6 f9bf 	bl	8000238 <__aeabi_dsub>
 8009eba:	a369      	add	r3, pc, #420	@ (adr r3, 800a060 <_dtoa_r+0x2b0>)
 8009ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec0:	f7f6 fb72 	bl	80005a8 <__aeabi_dmul>
 8009ec4:	a368      	add	r3, pc, #416	@ (adr r3, 800a068 <_dtoa_r+0x2b8>)
 8009ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eca:	f7f6 f9b7 	bl	800023c <__adddf3>
 8009ece:	4604      	mov	r4, r0
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	460d      	mov	r5, r1
 8009ed4:	f7f6 fafe 	bl	80004d4 <__aeabi_i2d>
 8009ed8:	a365      	add	r3, pc, #404	@ (adr r3, 800a070 <_dtoa_r+0x2c0>)
 8009eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ede:	f7f6 fb63 	bl	80005a8 <__aeabi_dmul>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	4629      	mov	r1, r5
 8009eea:	f7f6 f9a7 	bl	800023c <__adddf3>
 8009eee:	4604      	mov	r4, r0
 8009ef0:	460d      	mov	r5, r1
 8009ef2:	f7f6 fe09 	bl	8000b08 <__aeabi_d2iz>
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	4607      	mov	r7, r0
 8009efa:	2300      	movs	r3, #0
 8009efc:	4620      	mov	r0, r4
 8009efe:	4629      	mov	r1, r5
 8009f00:	f7f6 fdc4 	bl	8000a8c <__aeabi_dcmplt>
 8009f04:	b140      	cbz	r0, 8009f18 <_dtoa_r+0x168>
 8009f06:	4638      	mov	r0, r7
 8009f08:	f7f6 fae4 	bl	80004d4 <__aeabi_i2d>
 8009f0c:	4622      	mov	r2, r4
 8009f0e:	462b      	mov	r3, r5
 8009f10:	f7f6 fdb2 	bl	8000a78 <__aeabi_dcmpeq>
 8009f14:	b900      	cbnz	r0, 8009f18 <_dtoa_r+0x168>
 8009f16:	3f01      	subs	r7, #1
 8009f18:	2f16      	cmp	r7, #22
 8009f1a:	d852      	bhi.n	8009fc2 <_dtoa_r+0x212>
 8009f1c:	4b5d      	ldr	r3, [pc, #372]	@ (800a094 <_dtoa_r+0x2e4>)
 8009f1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f2a:	f7f6 fdaf 	bl	8000a8c <__aeabi_dcmplt>
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	d049      	beq.n	8009fc6 <_dtoa_r+0x216>
 8009f32:	3f01      	subs	r7, #1
 8009f34:	2300      	movs	r3, #0
 8009f36:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f38:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009f3a:	1b9b      	subs	r3, r3, r6
 8009f3c:	1e5a      	subs	r2, r3, #1
 8009f3e:	bf44      	itt	mi
 8009f40:	f1c3 0801 	rsbmi	r8, r3, #1
 8009f44:	2300      	movmi	r3, #0
 8009f46:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f48:	bf54      	ite	pl
 8009f4a:	f04f 0800 	movpl.w	r8, #0
 8009f4e:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8009f50:	2f00      	cmp	r7, #0
 8009f52:	db3a      	blt.n	8009fca <_dtoa_r+0x21a>
 8009f54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f56:	970e      	str	r7, [sp, #56]	@ 0x38
 8009f58:	443b      	add	r3, r7
 8009f5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f60:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009f62:	2b09      	cmp	r3, #9
 8009f64:	d865      	bhi.n	800a032 <_dtoa_r+0x282>
 8009f66:	2b05      	cmp	r3, #5
 8009f68:	bfc4      	itt	gt
 8009f6a:	3b04      	subgt	r3, #4
 8009f6c:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009f6e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009f70:	f1a3 0302 	sub.w	r3, r3, #2
 8009f74:	bfcc      	ite	gt
 8009f76:	2400      	movgt	r4, #0
 8009f78:	2401      	movle	r4, #1
 8009f7a:	2b03      	cmp	r3, #3
 8009f7c:	d864      	bhi.n	800a048 <_dtoa_r+0x298>
 8009f7e:	e8df f003 	tbb	[pc, r3]
 8009f82:	382b      	.short	0x382b
 8009f84:	5636      	.short	0x5636
 8009f86:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009f8a:	441e      	add	r6, r3
 8009f8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009f90:	2b20      	cmp	r3, #32
 8009f92:	bfc1      	itttt	gt
 8009f94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009f98:	fa08 f803 	lslgt.w	r8, r8, r3
 8009f9c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009fa0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009fa4:	bfd6      	itet	le
 8009fa6:	f1c3 0320 	rsble	r3, r3, #32
 8009faa:	ea48 0003 	orrgt.w	r0, r8, r3
 8009fae:	fa04 f003 	lslle.w	r0, r4, r3
 8009fb2:	f7f6 fa7f 	bl	80004b4 <__aeabi_ui2d>
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009fbc:	3e01      	subs	r6, #1
 8009fbe:	9212      	str	r2, [sp, #72]	@ 0x48
 8009fc0:	e776      	b.n	8009eb0 <_dtoa_r+0x100>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e7b7      	b.n	8009f36 <_dtoa_r+0x186>
 8009fc6:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009fc8:	e7b6      	b.n	8009f38 <_dtoa_r+0x188>
 8009fca:	427b      	negs	r3, r7
 8009fcc:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fce:	2300      	movs	r3, #0
 8009fd0:	eba8 0807 	sub.w	r8, r8, r7
 8009fd4:	930e      	str	r3, [sp, #56]	@ 0x38
 8009fd6:	e7c3      	b.n	8009f60 <_dtoa_r+0x1b0>
 8009fd8:	2300      	movs	r3, #0
 8009fda:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fdc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	dc35      	bgt.n	800a04e <_dtoa_r+0x29e>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	9221      	str	r2, [sp, #132]	@ 0x84
 8009fec:	e00b      	b.n	800a006 <_dtoa_r+0x256>
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e7f3      	b.n	8009fda <_dtoa_r+0x22a>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ff6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009ff8:	18fb      	adds	r3, r7, r3
 8009ffa:	9308      	str	r3, [sp, #32]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	9307      	str	r3, [sp, #28]
 800a002:	bfb8      	it	lt
 800a004:	2301      	movlt	r3, #1
 800a006:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a00a:	2100      	movs	r1, #0
 800a00c:	2204      	movs	r2, #4
 800a00e:	f102 0514 	add.w	r5, r2, #20
 800a012:	429d      	cmp	r5, r3
 800a014:	d91f      	bls.n	800a056 <_dtoa_r+0x2a6>
 800a016:	6041      	str	r1, [r0, #4]
 800a018:	4658      	mov	r0, fp
 800a01a:	f000 ff47 	bl	800aeac <_Balloc>
 800a01e:	4682      	mov	sl, r0
 800a020:	2800      	cmp	r0, #0
 800a022:	d13b      	bne.n	800a09c <_dtoa_r+0x2ec>
 800a024:	4b1c      	ldr	r3, [pc, #112]	@ (800a098 <_dtoa_r+0x2e8>)
 800a026:	4602      	mov	r2, r0
 800a028:	f240 11af 	movw	r1, #431	@ 0x1af
 800a02c:	e6d4      	b.n	8009dd8 <_dtoa_r+0x28>
 800a02e:	2301      	movs	r3, #1
 800a030:	e7e0      	b.n	8009ff4 <_dtoa_r+0x244>
 800a032:	2401      	movs	r4, #1
 800a034:	2300      	movs	r3, #0
 800a036:	9320      	str	r3, [sp, #128]	@ 0x80
 800a038:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a03a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a03e:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a042:	2200      	movs	r2, #0
 800a044:	2312      	movs	r3, #18
 800a046:	e7d0      	b.n	8009fea <_dtoa_r+0x23a>
 800a048:	2301      	movs	r3, #1
 800a04a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a04c:	e7f5      	b.n	800a03a <_dtoa_r+0x28a>
 800a04e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a050:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a054:	e7d7      	b.n	800a006 <_dtoa_r+0x256>
 800a056:	3101      	adds	r1, #1
 800a058:	0052      	lsls	r2, r2, #1
 800a05a:	e7d8      	b.n	800a00e <_dtoa_r+0x25e>
 800a05c:	f3af 8000 	nop.w
 800a060:	636f4361 	.word	0x636f4361
 800a064:	3fd287a7 	.word	0x3fd287a7
 800a068:	8b60c8b3 	.word	0x8b60c8b3
 800a06c:	3fc68a28 	.word	0x3fc68a28
 800a070:	509f79fb 	.word	0x509f79fb
 800a074:	3fd34413 	.word	0x3fd34413
 800a078:	0800c179 	.word	0x0800c179
 800a07c:	0800c190 	.word	0x0800c190
 800a080:	7ff00000 	.word	0x7ff00000
 800a084:	0800c175 	.word	0x0800c175
 800a088:	0800c149 	.word	0x0800c149
 800a08c:	0800c148 	.word	0x0800c148
 800a090:	3ff80000 	.word	0x3ff80000
 800a094:	0800c298 	.word	0x0800c298
 800a098:	0800c1e8 	.word	0x0800c1e8
 800a09c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a0a0:	6018      	str	r0, [r3, #0]
 800a0a2:	9b07      	ldr	r3, [sp, #28]
 800a0a4:	2b0e      	cmp	r3, #14
 800a0a6:	f200 80a4 	bhi.w	800a1f2 <_dtoa_r+0x442>
 800a0aa:	2c00      	cmp	r4, #0
 800a0ac:	f000 80a1 	beq.w	800a1f2 <_dtoa_r+0x442>
 800a0b0:	2f00      	cmp	r7, #0
 800a0b2:	dd33      	ble.n	800a11c <_dtoa_r+0x36c>
 800a0b4:	4b86      	ldr	r3, [pc, #536]	@ (800a2d0 <_dtoa_r+0x520>)
 800a0b6:	f007 020f 	and.w	r2, r7, #15
 800a0ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0be:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a0c2:	05f8      	lsls	r0, r7, #23
 800a0c4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a0c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a0cc:	d516      	bpl.n	800a0fc <_dtoa_r+0x34c>
 800a0ce:	4b81      	ldr	r3, [pc, #516]	@ (800a2d4 <_dtoa_r+0x524>)
 800a0d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a0d8:	f7f6 fb90 	bl	80007fc <__aeabi_ddiv>
 800a0dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0e0:	f004 040f 	and.w	r4, r4, #15
 800a0e4:	2603      	movs	r6, #3
 800a0e6:	4d7b      	ldr	r5, [pc, #492]	@ (800a2d4 <_dtoa_r+0x524>)
 800a0e8:	b954      	cbnz	r4, 800a100 <_dtoa_r+0x350>
 800a0ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0f2:	f7f6 fb83 	bl	80007fc <__aeabi_ddiv>
 800a0f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0fa:	e028      	b.n	800a14e <_dtoa_r+0x39e>
 800a0fc:	2602      	movs	r6, #2
 800a0fe:	e7f2      	b.n	800a0e6 <_dtoa_r+0x336>
 800a100:	07e1      	lsls	r1, r4, #31
 800a102:	d508      	bpl.n	800a116 <_dtoa_r+0x366>
 800a104:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a108:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a10c:	f7f6 fa4c 	bl	80005a8 <__aeabi_dmul>
 800a110:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a114:	3601      	adds	r6, #1
 800a116:	1064      	asrs	r4, r4, #1
 800a118:	3508      	adds	r5, #8
 800a11a:	e7e5      	b.n	800a0e8 <_dtoa_r+0x338>
 800a11c:	f000 80d2 	beq.w	800a2c4 <_dtoa_r+0x514>
 800a120:	427c      	negs	r4, r7
 800a122:	4b6b      	ldr	r3, [pc, #428]	@ (800a2d0 <_dtoa_r+0x520>)
 800a124:	4d6b      	ldr	r5, [pc, #428]	@ (800a2d4 <_dtoa_r+0x524>)
 800a126:	f004 020f 	and.w	r2, r4, #15
 800a12a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a132:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a136:	f7f6 fa37 	bl	80005a8 <__aeabi_dmul>
 800a13a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a13e:	1124      	asrs	r4, r4, #4
 800a140:	2300      	movs	r3, #0
 800a142:	2602      	movs	r6, #2
 800a144:	2c00      	cmp	r4, #0
 800a146:	f040 80b2 	bne.w	800a2ae <_dtoa_r+0x4fe>
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1d3      	bne.n	800a0f6 <_dtoa_r+0x346>
 800a14e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a150:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a154:	2b00      	cmp	r3, #0
 800a156:	f000 80b7 	beq.w	800a2c8 <_dtoa_r+0x518>
 800a15a:	4b5f      	ldr	r3, [pc, #380]	@ (800a2d8 <_dtoa_r+0x528>)
 800a15c:	2200      	movs	r2, #0
 800a15e:	4620      	mov	r0, r4
 800a160:	4629      	mov	r1, r5
 800a162:	f7f6 fc93 	bl	8000a8c <__aeabi_dcmplt>
 800a166:	2800      	cmp	r0, #0
 800a168:	f000 80ae 	beq.w	800a2c8 <_dtoa_r+0x518>
 800a16c:	9b07      	ldr	r3, [sp, #28]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	f000 80aa 	beq.w	800a2c8 <_dtoa_r+0x518>
 800a174:	9b08      	ldr	r3, [sp, #32]
 800a176:	2b00      	cmp	r3, #0
 800a178:	dd37      	ble.n	800a1ea <_dtoa_r+0x43a>
 800a17a:	1e7b      	subs	r3, r7, #1
 800a17c:	9304      	str	r3, [sp, #16]
 800a17e:	4620      	mov	r0, r4
 800a180:	4b56      	ldr	r3, [pc, #344]	@ (800a2dc <_dtoa_r+0x52c>)
 800a182:	2200      	movs	r2, #0
 800a184:	4629      	mov	r1, r5
 800a186:	f7f6 fa0f 	bl	80005a8 <__aeabi_dmul>
 800a18a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a18e:	9c08      	ldr	r4, [sp, #32]
 800a190:	3601      	adds	r6, #1
 800a192:	4630      	mov	r0, r6
 800a194:	f7f6 f99e 	bl	80004d4 <__aeabi_i2d>
 800a198:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a19c:	f7f6 fa04 	bl	80005a8 <__aeabi_dmul>
 800a1a0:	4b4f      	ldr	r3, [pc, #316]	@ (800a2e0 <_dtoa_r+0x530>)
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f7f6 f84a 	bl	800023c <__adddf3>
 800a1a8:	4605      	mov	r5, r0
 800a1aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a1ae:	2c00      	cmp	r4, #0
 800a1b0:	f040 809a 	bne.w	800a2e8 <_dtoa_r+0x538>
 800a1b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1b8:	4b4a      	ldr	r3, [pc, #296]	@ (800a2e4 <_dtoa_r+0x534>)
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f7f6 f83c 	bl	8000238 <__aeabi_dsub>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a1c8:	462a      	mov	r2, r5
 800a1ca:	4633      	mov	r3, r6
 800a1cc:	f7f6 fc7c 	bl	8000ac8 <__aeabi_dcmpgt>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	f040 828e 	bne.w	800a6f2 <_dtoa_r+0x942>
 800a1d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1da:	462a      	mov	r2, r5
 800a1dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a1e0:	f7f6 fc54 	bl	8000a8c <__aeabi_dcmplt>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	f040 8127 	bne.w	800a438 <_dtoa_r+0x688>
 800a1ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a1ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a1f2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f2c0 8163 	blt.w	800a4c0 <_dtoa_r+0x710>
 800a1fa:	2f0e      	cmp	r7, #14
 800a1fc:	f300 8160 	bgt.w	800a4c0 <_dtoa_r+0x710>
 800a200:	4b33      	ldr	r3, [pc, #204]	@ (800a2d0 <_dtoa_r+0x520>)
 800a202:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a206:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a20a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a20e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a210:	2b00      	cmp	r3, #0
 800a212:	da03      	bge.n	800a21c <_dtoa_r+0x46c>
 800a214:	9b07      	ldr	r3, [sp, #28]
 800a216:	2b00      	cmp	r3, #0
 800a218:	f340 8100 	ble.w	800a41c <_dtoa_r+0x66c>
 800a21c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a220:	4656      	mov	r6, sl
 800a222:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a226:	4620      	mov	r0, r4
 800a228:	4629      	mov	r1, r5
 800a22a:	f7f6 fae7 	bl	80007fc <__aeabi_ddiv>
 800a22e:	f7f6 fc6b 	bl	8000b08 <__aeabi_d2iz>
 800a232:	4680      	mov	r8, r0
 800a234:	f7f6 f94e 	bl	80004d4 <__aeabi_i2d>
 800a238:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a23c:	f7f6 f9b4 	bl	80005a8 <__aeabi_dmul>
 800a240:	4602      	mov	r2, r0
 800a242:	460b      	mov	r3, r1
 800a244:	4620      	mov	r0, r4
 800a246:	4629      	mov	r1, r5
 800a248:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a24c:	f7f5 fff4 	bl	8000238 <__aeabi_dsub>
 800a250:	f806 4b01 	strb.w	r4, [r6], #1
 800a254:	9d07      	ldr	r5, [sp, #28]
 800a256:	eba6 040a 	sub.w	r4, r6, sl
 800a25a:	42a5      	cmp	r5, r4
 800a25c:	4602      	mov	r2, r0
 800a25e:	460b      	mov	r3, r1
 800a260:	f040 8116 	bne.w	800a490 <_dtoa_r+0x6e0>
 800a264:	f7f5 ffea 	bl	800023c <__adddf3>
 800a268:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a26c:	4604      	mov	r4, r0
 800a26e:	460d      	mov	r5, r1
 800a270:	f7f6 fc2a 	bl	8000ac8 <__aeabi_dcmpgt>
 800a274:	2800      	cmp	r0, #0
 800a276:	f040 80f8 	bne.w	800a46a <_dtoa_r+0x6ba>
 800a27a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a27e:	4620      	mov	r0, r4
 800a280:	4629      	mov	r1, r5
 800a282:	f7f6 fbf9 	bl	8000a78 <__aeabi_dcmpeq>
 800a286:	b118      	cbz	r0, 800a290 <_dtoa_r+0x4e0>
 800a288:	f018 0f01 	tst.w	r8, #1
 800a28c:	f040 80ed 	bne.w	800a46a <_dtoa_r+0x6ba>
 800a290:	4649      	mov	r1, r9
 800a292:	4658      	mov	r0, fp
 800a294:	f000 fe4a 	bl	800af2c <_Bfree>
 800a298:	2300      	movs	r3, #0
 800a29a:	7033      	strb	r3, [r6, #0]
 800a29c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a29e:	3701      	adds	r7, #1
 800a2a0:	601f      	str	r7, [r3, #0]
 800a2a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f000 8320 	beq.w	800a8ea <_dtoa_r+0xb3a>
 800a2aa:	601e      	str	r6, [r3, #0]
 800a2ac:	e31d      	b.n	800a8ea <_dtoa_r+0xb3a>
 800a2ae:	07e2      	lsls	r2, r4, #31
 800a2b0:	d505      	bpl.n	800a2be <_dtoa_r+0x50e>
 800a2b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a2b6:	f7f6 f977 	bl	80005a8 <__aeabi_dmul>
 800a2ba:	3601      	adds	r6, #1
 800a2bc:	2301      	movs	r3, #1
 800a2be:	1064      	asrs	r4, r4, #1
 800a2c0:	3508      	adds	r5, #8
 800a2c2:	e73f      	b.n	800a144 <_dtoa_r+0x394>
 800a2c4:	2602      	movs	r6, #2
 800a2c6:	e742      	b.n	800a14e <_dtoa_r+0x39e>
 800a2c8:	9c07      	ldr	r4, [sp, #28]
 800a2ca:	9704      	str	r7, [sp, #16]
 800a2cc:	e761      	b.n	800a192 <_dtoa_r+0x3e2>
 800a2ce:	bf00      	nop
 800a2d0:	0800c298 	.word	0x0800c298
 800a2d4:	0800c270 	.word	0x0800c270
 800a2d8:	3ff00000 	.word	0x3ff00000
 800a2dc:	40240000 	.word	0x40240000
 800a2e0:	401c0000 	.word	0x401c0000
 800a2e4:	40140000 	.word	0x40140000
 800a2e8:	4b70      	ldr	r3, [pc, #448]	@ (800a4ac <_dtoa_r+0x6fc>)
 800a2ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a2ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a2f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a2f4:	4454      	add	r4, sl
 800a2f6:	2900      	cmp	r1, #0
 800a2f8:	d045      	beq.n	800a386 <_dtoa_r+0x5d6>
 800a2fa:	496d      	ldr	r1, [pc, #436]	@ (800a4b0 <_dtoa_r+0x700>)
 800a2fc:	2000      	movs	r0, #0
 800a2fe:	f7f6 fa7d 	bl	80007fc <__aeabi_ddiv>
 800a302:	4633      	mov	r3, r6
 800a304:	462a      	mov	r2, r5
 800a306:	f7f5 ff97 	bl	8000238 <__aeabi_dsub>
 800a30a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a30e:	4656      	mov	r6, sl
 800a310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a314:	f7f6 fbf8 	bl	8000b08 <__aeabi_d2iz>
 800a318:	4605      	mov	r5, r0
 800a31a:	f7f6 f8db 	bl	80004d4 <__aeabi_i2d>
 800a31e:	4602      	mov	r2, r0
 800a320:	460b      	mov	r3, r1
 800a322:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a326:	f7f5 ff87 	bl	8000238 <__aeabi_dsub>
 800a32a:	3530      	adds	r5, #48	@ 0x30
 800a32c:	4602      	mov	r2, r0
 800a32e:	460b      	mov	r3, r1
 800a330:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a334:	f806 5b01 	strb.w	r5, [r6], #1
 800a338:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a33c:	f7f6 fba6 	bl	8000a8c <__aeabi_dcmplt>
 800a340:	2800      	cmp	r0, #0
 800a342:	d163      	bne.n	800a40c <_dtoa_r+0x65c>
 800a344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a348:	495a      	ldr	r1, [pc, #360]	@ (800a4b4 <_dtoa_r+0x704>)
 800a34a:	2000      	movs	r0, #0
 800a34c:	f7f5 ff74 	bl	8000238 <__aeabi_dsub>
 800a350:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a354:	f7f6 fb9a 	bl	8000a8c <__aeabi_dcmplt>
 800a358:	2800      	cmp	r0, #0
 800a35a:	f040 8087 	bne.w	800a46c <_dtoa_r+0x6bc>
 800a35e:	42a6      	cmp	r6, r4
 800a360:	f43f af43 	beq.w	800a1ea <_dtoa_r+0x43a>
 800a364:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a368:	4b53      	ldr	r3, [pc, #332]	@ (800a4b8 <_dtoa_r+0x708>)
 800a36a:	2200      	movs	r2, #0
 800a36c:	f7f6 f91c 	bl	80005a8 <__aeabi_dmul>
 800a370:	4b51      	ldr	r3, [pc, #324]	@ (800a4b8 <_dtoa_r+0x708>)
 800a372:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a376:	2200      	movs	r2, #0
 800a378:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a37c:	f7f6 f914 	bl	80005a8 <__aeabi_dmul>
 800a380:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a384:	e7c4      	b.n	800a310 <_dtoa_r+0x560>
 800a386:	4631      	mov	r1, r6
 800a388:	4628      	mov	r0, r5
 800a38a:	f7f6 f90d 	bl	80005a8 <__aeabi_dmul>
 800a38e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a392:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a394:	4656      	mov	r6, sl
 800a396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a39a:	f7f6 fbb5 	bl	8000b08 <__aeabi_d2iz>
 800a39e:	4605      	mov	r5, r0
 800a3a0:	f7f6 f898 	bl	80004d4 <__aeabi_i2d>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3ac:	f7f5 ff44 	bl	8000238 <__aeabi_dsub>
 800a3b0:	3530      	adds	r5, #48	@ 0x30
 800a3b2:	f806 5b01 	strb.w	r5, [r6], #1
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	42a6      	cmp	r6, r4
 800a3bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a3c0:	f04f 0200 	mov.w	r2, #0
 800a3c4:	d124      	bne.n	800a410 <_dtoa_r+0x660>
 800a3c6:	4b3a      	ldr	r3, [pc, #232]	@ (800a4b0 <_dtoa_r+0x700>)
 800a3c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a3cc:	f7f5 ff36 	bl	800023c <__adddf3>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3d8:	f7f6 fb76 	bl	8000ac8 <__aeabi_dcmpgt>
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	d145      	bne.n	800a46c <_dtoa_r+0x6bc>
 800a3e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a3e4:	4932      	ldr	r1, [pc, #200]	@ (800a4b0 <_dtoa_r+0x700>)
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	f7f5 ff26 	bl	8000238 <__aeabi_dsub>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3f4:	f7f6 fb4a 	bl	8000a8c <__aeabi_dcmplt>
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	f43f aef6 	beq.w	800a1ea <_dtoa_r+0x43a>
 800a3fe:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a400:	1e73      	subs	r3, r6, #1
 800a402:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a404:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a408:	2b30      	cmp	r3, #48	@ 0x30
 800a40a:	d0f8      	beq.n	800a3fe <_dtoa_r+0x64e>
 800a40c:	9f04      	ldr	r7, [sp, #16]
 800a40e:	e73f      	b.n	800a290 <_dtoa_r+0x4e0>
 800a410:	4b29      	ldr	r3, [pc, #164]	@ (800a4b8 <_dtoa_r+0x708>)
 800a412:	f7f6 f8c9 	bl	80005a8 <__aeabi_dmul>
 800a416:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a41a:	e7bc      	b.n	800a396 <_dtoa_r+0x5e6>
 800a41c:	d10c      	bne.n	800a438 <_dtoa_r+0x688>
 800a41e:	4b27      	ldr	r3, [pc, #156]	@ (800a4bc <_dtoa_r+0x70c>)
 800a420:	2200      	movs	r2, #0
 800a422:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a426:	f7f6 f8bf 	bl	80005a8 <__aeabi_dmul>
 800a42a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a42e:	f7f6 fb41 	bl	8000ab4 <__aeabi_dcmpge>
 800a432:	2800      	cmp	r0, #0
 800a434:	f000 815b 	beq.w	800a6ee <_dtoa_r+0x93e>
 800a438:	2400      	movs	r4, #0
 800a43a:	4625      	mov	r5, r4
 800a43c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a43e:	43db      	mvns	r3, r3
 800a440:	9304      	str	r3, [sp, #16]
 800a442:	4656      	mov	r6, sl
 800a444:	2700      	movs	r7, #0
 800a446:	4621      	mov	r1, r4
 800a448:	4658      	mov	r0, fp
 800a44a:	f000 fd6f 	bl	800af2c <_Bfree>
 800a44e:	2d00      	cmp	r5, #0
 800a450:	d0dc      	beq.n	800a40c <_dtoa_r+0x65c>
 800a452:	b12f      	cbz	r7, 800a460 <_dtoa_r+0x6b0>
 800a454:	42af      	cmp	r7, r5
 800a456:	d003      	beq.n	800a460 <_dtoa_r+0x6b0>
 800a458:	4639      	mov	r1, r7
 800a45a:	4658      	mov	r0, fp
 800a45c:	f000 fd66 	bl	800af2c <_Bfree>
 800a460:	4629      	mov	r1, r5
 800a462:	4658      	mov	r0, fp
 800a464:	f000 fd62 	bl	800af2c <_Bfree>
 800a468:	e7d0      	b.n	800a40c <_dtoa_r+0x65c>
 800a46a:	9704      	str	r7, [sp, #16]
 800a46c:	4633      	mov	r3, r6
 800a46e:	461e      	mov	r6, r3
 800a470:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a474:	2a39      	cmp	r2, #57	@ 0x39
 800a476:	d107      	bne.n	800a488 <_dtoa_r+0x6d8>
 800a478:	459a      	cmp	sl, r3
 800a47a:	d1f8      	bne.n	800a46e <_dtoa_r+0x6be>
 800a47c:	9a04      	ldr	r2, [sp, #16]
 800a47e:	3201      	adds	r2, #1
 800a480:	9204      	str	r2, [sp, #16]
 800a482:	2230      	movs	r2, #48	@ 0x30
 800a484:	f88a 2000 	strb.w	r2, [sl]
 800a488:	781a      	ldrb	r2, [r3, #0]
 800a48a:	3201      	adds	r2, #1
 800a48c:	701a      	strb	r2, [r3, #0]
 800a48e:	e7bd      	b.n	800a40c <_dtoa_r+0x65c>
 800a490:	4b09      	ldr	r3, [pc, #36]	@ (800a4b8 <_dtoa_r+0x708>)
 800a492:	2200      	movs	r2, #0
 800a494:	f7f6 f888 	bl	80005a8 <__aeabi_dmul>
 800a498:	2200      	movs	r2, #0
 800a49a:	2300      	movs	r3, #0
 800a49c:	4604      	mov	r4, r0
 800a49e:	460d      	mov	r5, r1
 800a4a0:	f7f6 faea 	bl	8000a78 <__aeabi_dcmpeq>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	f43f aebc 	beq.w	800a222 <_dtoa_r+0x472>
 800a4aa:	e6f1      	b.n	800a290 <_dtoa_r+0x4e0>
 800a4ac:	0800c298 	.word	0x0800c298
 800a4b0:	3fe00000 	.word	0x3fe00000
 800a4b4:	3ff00000 	.word	0x3ff00000
 800a4b8:	40240000 	.word	0x40240000
 800a4bc:	40140000 	.word	0x40140000
 800a4c0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a4c2:	2a00      	cmp	r2, #0
 800a4c4:	f000 80db 	beq.w	800a67e <_dtoa_r+0x8ce>
 800a4c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a4ca:	2a01      	cmp	r2, #1
 800a4cc:	f300 80bf 	bgt.w	800a64e <_dtoa_r+0x89e>
 800a4d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a4d2:	2a00      	cmp	r2, #0
 800a4d4:	f000 80b7 	beq.w	800a646 <_dtoa_r+0x896>
 800a4d8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a4dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a4de:	4646      	mov	r6, r8
 800a4e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4e2:	2101      	movs	r1, #1
 800a4e4:	441a      	add	r2, r3
 800a4e6:	4658      	mov	r0, fp
 800a4e8:	4498      	add	r8, r3
 800a4ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4ec:	f000 fdd2 	bl	800b094 <__i2b>
 800a4f0:	4605      	mov	r5, r0
 800a4f2:	b15e      	cbz	r6, 800a50c <_dtoa_r+0x75c>
 800a4f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	dd08      	ble.n	800a50c <_dtoa_r+0x75c>
 800a4fa:	42b3      	cmp	r3, r6
 800a4fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4fe:	bfa8      	it	ge
 800a500:	4633      	movge	r3, r6
 800a502:	eba8 0803 	sub.w	r8, r8, r3
 800a506:	1af6      	subs	r6, r6, r3
 800a508:	1ad3      	subs	r3, r2, r3
 800a50a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a50c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a50e:	b1f3      	cbz	r3, 800a54e <_dtoa_r+0x79e>
 800a510:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a512:	2b00      	cmp	r3, #0
 800a514:	f000 80b7 	beq.w	800a686 <_dtoa_r+0x8d6>
 800a518:	b18c      	cbz	r4, 800a53e <_dtoa_r+0x78e>
 800a51a:	4629      	mov	r1, r5
 800a51c:	4622      	mov	r2, r4
 800a51e:	4658      	mov	r0, fp
 800a520:	f000 fe78 	bl	800b214 <__pow5mult>
 800a524:	464a      	mov	r2, r9
 800a526:	4601      	mov	r1, r0
 800a528:	4605      	mov	r5, r0
 800a52a:	4658      	mov	r0, fp
 800a52c:	f000 fdc8 	bl	800b0c0 <__multiply>
 800a530:	4649      	mov	r1, r9
 800a532:	9004      	str	r0, [sp, #16]
 800a534:	4658      	mov	r0, fp
 800a536:	f000 fcf9 	bl	800af2c <_Bfree>
 800a53a:	9b04      	ldr	r3, [sp, #16]
 800a53c:	4699      	mov	r9, r3
 800a53e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a540:	1b1a      	subs	r2, r3, r4
 800a542:	d004      	beq.n	800a54e <_dtoa_r+0x79e>
 800a544:	4649      	mov	r1, r9
 800a546:	4658      	mov	r0, fp
 800a548:	f000 fe64 	bl	800b214 <__pow5mult>
 800a54c:	4681      	mov	r9, r0
 800a54e:	2101      	movs	r1, #1
 800a550:	4658      	mov	r0, fp
 800a552:	f000 fd9f 	bl	800b094 <__i2b>
 800a556:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a558:	4604      	mov	r4, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	f000 81c9 	beq.w	800a8f2 <_dtoa_r+0xb42>
 800a560:	461a      	mov	r2, r3
 800a562:	4601      	mov	r1, r0
 800a564:	4658      	mov	r0, fp
 800a566:	f000 fe55 	bl	800b214 <__pow5mult>
 800a56a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	4604      	mov	r4, r0
 800a570:	f300 808f 	bgt.w	800a692 <_dtoa_r+0x8e2>
 800a574:	9b02      	ldr	r3, [sp, #8]
 800a576:	2b00      	cmp	r3, #0
 800a578:	f040 8087 	bne.w	800a68a <_dtoa_r+0x8da>
 800a57c:	9b03      	ldr	r3, [sp, #12]
 800a57e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a582:	2b00      	cmp	r3, #0
 800a584:	f040 8083 	bne.w	800a68e <_dtoa_r+0x8de>
 800a588:	9b03      	ldr	r3, [sp, #12]
 800a58a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a58e:	0d1b      	lsrs	r3, r3, #20
 800a590:	051b      	lsls	r3, r3, #20
 800a592:	b12b      	cbz	r3, 800a5a0 <_dtoa_r+0x7f0>
 800a594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a596:	3301      	adds	r3, #1
 800a598:	9309      	str	r3, [sp, #36]	@ 0x24
 800a59a:	f108 0801 	add.w	r8, r8, #1
 800a59e:	2301      	movs	r3, #1
 800a5a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f000 81aa 	beq.w	800a8fe <_dtoa_r+0xb4e>
 800a5aa:	6923      	ldr	r3, [r4, #16]
 800a5ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a5b0:	6918      	ldr	r0, [r3, #16]
 800a5b2:	f000 fd23 	bl	800affc <__hi0bits>
 800a5b6:	f1c0 0020 	rsb	r0, r0, #32
 800a5ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5bc:	4418      	add	r0, r3
 800a5be:	f010 001f 	ands.w	r0, r0, #31
 800a5c2:	d071      	beq.n	800a6a8 <_dtoa_r+0x8f8>
 800a5c4:	f1c0 0320 	rsb	r3, r0, #32
 800a5c8:	2b04      	cmp	r3, #4
 800a5ca:	dd65      	ble.n	800a698 <_dtoa_r+0x8e8>
 800a5cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5ce:	f1c0 001c 	rsb	r0, r0, #28
 800a5d2:	4403      	add	r3, r0
 800a5d4:	4480      	add	r8, r0
 800a5d6:	4406      	add	r6, r0
 800a5d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5da:	f1b8 0f00 	cmp.w	r8, #0
 800a5de:	dd05      	ble.n	800a5ec <_dtoa_r+0x83c>
 800a5e0:	4649      	mov	r1, r9
 800a5e2:	4642      	mov	r2, r8
 800a5e4:	4658      	mov	r0, fp
 800a5e6:	f000 fe6f 	bl	800b2c8 <__lshift>
 800a5ea:	4681      	mov	r9, r0
 800a5ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	dd05      	ble.n	800a5fe <_dtoa_r+0x84e>
 800a5f2:	4621      	mov	r1, r4
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	4658      	mov	r0, fp
 800a5f8:	f000 fe66 	bl	800b2c8 <__lshift>
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a600:	2b00      	cmp	r3, #0
 800a602:	d053      	beq.n	800a6ac <_dtoa_r+0x8fc>
 800a604:	4621      	mov	r1, r4
 800a606:	4648      	mov	r0, r9
 800a608:	f000 feca 	bl	800b3a0 <__mcmp>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	da4d      	bge.n	800a6ac <_dtoa_r+0x8fc>
 800a610:	1e7b      	subs	r3, r7, #1
 800a612:	9304      	str	r3, [sp, #16]
 800a614:	4649      	mov	r1, r9
 800a616:	2300      	movs	r3, #0
 800a618:	220a      	movs	r2, #10
 800a61a:	4658      	mov	r0, fp
 800a61c:	f000 fca8 	bl	800af70 <__multadd>
 800a620:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a622:	4681      	mov	r9, r0
 800a624:	2b00      	cmp	r3, #0
 800a626:	f000 816c 	beq.w	800a902 <_dtoa_r+0xb52>
 800a62a:	2300      	movs	r3, #0
 800a62c:	4629      	mov	r1, r5
 800a62e:	220a      	movs	r2, #10
 800a630:	4658      	mov	r0, fp
 800a632:	f000 fc9d 	bl	800af70 <__multadd>
 800a636:	9b08      	ldr	r3, [sp, #32]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	4605      	mov	r5, r0
 800a63c:	dc61      	bgt.n	800a702 <_dtoa_r+0x952>
 800a63e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a640:	2b02      	cmp	r3, #2
 800a642:	dc3b      	bgt.n	800a6bc <_dtoa_r+0x90c>
 800a644:	e05d      	b.n	800a702 <_dtoa_r+0x952>
 800a646:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a648:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a64c:	e746      	b.n	800a4dc <_dtoa_r+0x72c>
 800a64e:	9b07      	ldr	r3, [sp, #28]
 800a650:	1e5c      	subs	r4, r3, #1
 800a652:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a654:	42a3      	cmp	r3, r4
 800a656:	bfbf      	itttt	lt
 800a658:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a65a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800a65c:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a65e:	1ae3      	sublt	r3, r4, r3
 800a660:	bfb4      	ite	lt
 800a662:	18d2      	addlt	r2, r2, r3
 800a664:	1b1c      	subge	r4, r3, r4
 800a666:	9b07      	ldr	r3, [sp, #28]
 800a668:	bfbc      	itt	lt
 800a66a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800a66c:	2400      	movlt	r4, #0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	bfb5      	itete	lt
 800a672:	eba8 0603 	sublt.w	r6, r8, r3
 800a676:	9b07      	ldrge	r3, [sp, #28]
 800a678:	2300      	movlt	r3, #0
 800a67a:	4646      	movge	r6, r8
 800a67c:	e730      	b.n	800a4e0 <_dtoa_r+0x730>
 800a67e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a680:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a682:	4646      	mov	r6, r8
 800a684:	e735      	b.n	800a4f2 <_dtoa_r+0x742>
 800a686:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a688:	e75c      	b.n	800a544 <_dtoa_r+0x794>
 800a68a:	2300      	movs	r3, #0
 800a68c:	e788      	b.n	800a5a0 <_dtoa_r+0x7f0>
 800a68e:	9b02      	ldr	r3, [sp, #8]
 800a690:	e786      	b.n	800a5a0 <_dtoa_r+0x7f0>
 800a692:	2300      	movs	r3, #0
 800a694:	930a      	str	r3, [sp, #40]	@ 0x28
 800a696:	e788      	b.n	800a5aa <_dtoa_r+0x7fa>
 800a698:	d09f      	beq.n	800a5da <_dtoa_r+0x82a>
 800a69a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a69c:	331c      	adds	r3, #28
 800a69e:	441a      	add	r2, r3
 800a6a0:	4498      	add	r8, r3
 800a6a2:	441e      	add	r6, r3
 800a6a4:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6a6:	e798      	b.n	800a5da <_dtoa_r+0x82a>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	e7f6      	b.n	800a69a <_dtoa_r+0x8ea>
 800a6ac:	9b07      	ldr	r3, [sp, #28]
 800a6ae:	9704      	str	r7, [sp, #16]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	dc20      	bgt.n	800a6f6 <_dtoa_r+0x946>
 800a6b4:	9308      	str	r3, [sp, #32]
 800a6b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a6b8:	2b02      	cmp	r3, #2
 800a6ba:	dd1e      	ble.n	800a6fa <_dtoa_r+0x94a>
 800a6bc:	9b08      	ldr	r3, [sp, #32]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f47f aebc 	bne.w	800a43c <_dtoa_r+0x68c>
 800a6c4:	4621      	mov	r1, r4
 800a6c6:	2205      	movs	r2, #5
 800a6c8:	4658      	mov	r0, fp
 800a6ca:	f000 fc51 	bl	800af70 <__multadd>
 800a6ce:	4601      	mov	r1, r0
 800a6d0:	4604      	mov	r4, r0
 800a6d2:	4648      	mov	r0, r9
 800a6d4:	f000 fe64 	bl	800b3a0 <__mcmp>
 800a6d8:	2800      	cmp	r0, #0
 800a6da:	f77f aeaf 	ble.w	800a43c <_dtoa_r+0x68c>
 800a6de:	4656      	mov	r6, sl
 800a6e0:	2331      	movs	r3, #49	@ 0x31
 800a6e2:	f806 3b01 	strb.w	r3, [r6], #1
 800a6e6:	9b04      	ldr	r3, [sp, #16]
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	9304      	str	r3, [sp, #16]
 800a6ec:	e6aa      	b.n	800a444 <_dtoa_r+0x694>
 800a6ee:	9c07      	ldr	r4, [sp, #28]
 800a6f0:	9704      	str	r7, [sp, #16]
 800a6f2:	4625      	mov	r5, r4
 800a6f4:	e7f3      	b.n	800a6de <_dtoa_r+0x92e>
 800a6f6:	9b07      	ldr	r3, [sp, #28]
 800a6f8:	9308      	str	r3, [sp, #32]
 800a6fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f000 8104 	beq.w	800a90a <_dtoa_r+0xb5a>
 800a702:	2e00      	cmp	r6, #0
 800a704:	dd05      	ble.n	800a712 <_dtoa_r+0x962>
 800a706:	4629      	mov	r1, r5
 800a708:	4632      	mov	r2, r6
 800a70a:	4658      	mov	r0, fp
 800a70c:	f000 fddc 	bl	800b2c8 <__lshift>
 800a710:	4605      	mov	r5, r0
 800a712:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a714:	2b00      	cmp	r3, #0
 800a716:	d05a      	beq.n	800a7ce <_dtoa_r+0xa1e>
 800a718:	6869      	ldr	r1, [r5, #4]
 800a71a:	4658      	mov	r0, fp
 800a71c:	f000 fbc6 	bl	800aeac <_Balloc>
 800a720:	4606      	mov	r6, r0
 800a722:	b928      	cbnz	r0, 800a730 <_dtoa_r+0x980>
 800a724:	4b84      	ldr	r3, [pc, #528]	@ (800a938 <_dtoa_r+0xb88>)
 800a726:	4602      	mov	r2, r0
 800a728:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a72c:	f7ff bb54 	b.w	8009dd8 <_dtoa_r+0x28>
 800a730:	692a      	ldr	r2, [r5, #16]
 800a732:	3202      	adds	r2, #2
 800a734:	0092      	lsls	r2, r2, #2
 800a736:	f105 010c 	add.w	r1, r5, #12
 800a73a:	300c      	adds	r0, #12
 800a73c:	f7ff faa1 	bl	8009c82 <memcpy>
 800a740:	2201      	movs	r2, #1
 800a742:	4631      	mov	r1, r6
 800a744:	4658      	mov	r0, fp
 800a746:	f000 fdbf 	bl	800b2c8 <__lshift>
 800a74a:	f10a 0301 	add.w	r3, sl, #1
 800a74e:	9307      	str	r3, [sp, #28]
 800a750:	9b08      	ldr	r3, [sp, #32]
 800a752:	4453      	add	r3, sl
 800a754:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a756:	9b02      	ldr	r3, [sp, #8]
 800a758:	f003 0301 	and.w	r3, r3, #1
 800a75c:	462f      	mov	r7, r5
 800a75e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a760:	4605      	mov	r5, r0
 800a762:	9b07      	ldr	r3, [sp, #28]
 800a764:	4621      	mov	r1, r4
 800a766:	3b01      	subs	r3, #1
 800a768:	4648      	mov	r0, r9
 800a76a:	9302      	str	r3, [sp, #8]
 800a76c:	f7ff fa97 	bl	8009c9e <quorem>
 800a770:	4639      	mov	r1, r7
 800a772:	9008      	str	r0, [sp, #32]
 800a774:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a778:	4648      	mov	r0, r9
 800a77a:	f000 fe11 	bl	800b3a0 <__mcmp>
 800a77e:	462a      	mov	r2, r5
 800a780:	9009      	str	r0, [sp, #36]	@ 0x24
 800a782:	4621      	mov	r1, r4
 800a784:	4658      	mov	r0, fp
 800a786:	f000 fe27 	bl	800b3d8 <__mdiff>
 800a78a:	68c2      	ldr	r2, [r0, #12]
 800a78c:	4606      	mov	r6, r0
 800a78e:	bb02      	cbnz	r2, 800a7d2 <_dtoa_r+0xa22>
 800a790:	4601      	mov	r1, r0
 800a792:	4648      	mov	r0, r9
 800a794:	f000 fe04 	bl	800b3a0 <__mcmp>
 800a798:	4602      	mov	r2, r0
 800a79a:	4631      	mov	r1, r6
 800a79c:	4658      	mov	r0, fp
 800a79e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a7a0:	f000 fbc4 	bl	800af2c <_Bfree>
 800a7a4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a7a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a7a8:	9e07      	ldr	r6, [sp, #28]
 800a7aa:	ea43 0102 	orr.w	r1, r3, r2
 800a7ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7b0:	4319      	orrs	r1, r3
 800a7b2:	d110      	bne.n	800a7d6 <_dtoa_r+0xa26>
 800a7b4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a7b8:	d029      	beq.n	800a80e <_dtoa_r+0xa5e>
 800a7ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	dd02      	ble.n	800a7c6 <_dtoa_r+0xa16>
 800a7c0:	9b08      	ldr	r3, [sp, #32]
 800a7c2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a7c6:	9b02      	ldr	r3, [sp, #8]
 800a7c8:	f883 8000 	strb.w	r8, [r3]
 800a7cc:	e63b      	b.n	800a446 <_dtoa_r+0x696>
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	e7bb      	b.n	800a74a <_dtoa_r+0x99a>
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	e7e1      	b.n	800a79a <_dtoa_r+0x9ea>
 800a7d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	db04      	blt.n	800a7e6 <_dtoa_r+0xa36>
 800a7dc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800a7de:	430b      	orrs	r3, r1
 800a7e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a7e2:	430b      	orrs	r3, r1
 800a7e4:	d120      	bne.n	800a828 <_dtoa_r+0xa78>
 800a7e6:	2a00      	cmp	r2, #0
 800a7e8:	dded      	ble.n	800a7c6 <_dtoa_r+0xa16>
 800a7ea:	4649      	mov	r1, r9
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	4658      	mov	r0, fp
 800a7f0:	f000 fd6a 	bl	800b2c8 <__lshift>
 800a7f4:	4621      	mov	r1, r4
 800a7f6:	4681      	mov	r9, r0
 800a7f8:	f000 fdd2 	bl	800b3a0 <__mcmp>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	dc03      	bgt.n	800a808 <_dtoa_r+0xa58>
 800a800:	d1e1      	bne.n	800a7c6 <_dtoa_r+0xa16>
 800a802:	f018 0f01 	tst.w	r8, #1
 800a806:	d0de      	beq.n	800a7c6 <_dtoa_r+0xa16>
 800a808:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a80c:	d1d8      	bne.n	800a7c0 <_dtoa_r+0xa10>
 800a80e:	9a02      	ldr	r2, [sp, #8]
 800a810:	2339      	movs	r3, #57	@ 0x39
 800a812:	7013      	strb	r3, [r2, #0]
 800a814:	4633      	mov	r3, r6
 800a816:	461e      	mov	r6, r3
 800a818:	3b01      	subs	r3, #1
 800a81a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a81e:	2a39      	cmp	r2, #57	@ 0x39
 800a820:	d052      	beq.n	800a8c8 <_dtoa_r+0xb18>
 800a822:	3201      	adds	r2, #1
 800a824:	701a      	strb	r2, [r3, #0]
 800a826:	e60e      	b.n	800a446 <_dtoa_r+0x696>
 800a828:	2a00      	cmp	r2, #0
 800a82a:	dd07      	ble.n	800a83c <_dtoa_r+0xa8c>
 800a82c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a830:	d0ed      	beq.n	800a80e <_dtoa_r+0xa5e>
 800a832:	9a02      	ldr	r2, [sp, #8]
 800a834:	f108 0301 	add.w	r3, r8, #1
 800a838:	7013      	strb	r3, [r2, #0]
 800a83a:	e604      	b.n	800a446 <_dtoa_r+0x696>
 800a83c:	9b07      	ldr	r3, [sp, #28]
 800a83e:	9a07      	ldr	r2, [sp, #28]
 800a840:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a844:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a846:	4293      	cmp	r3, r2
 800a848:	d028      	beq.n	800a89c <_dtoa_r+0xaec>
 800a84a:	4649      	mov	r1, r9
 800a84c:	2300      	movs	r3, #0
 800a84e:	220a      	movs	r2, #10
 800a850:	4658      	mov	r0, fp
 800a852:	f000 fb8d 	bl	800af70 <__multadd>
 800a856:	42af      	cmp	r7, r5
 800a858:	4681      	mov	r9, r0
 800a85a:	f04f 0300 	mov.w	r3, #0
 800a85e:	f04f 020a 	mov.w	r2, #10
 800a862:	4639      	mov	r1, r7
 800a864:	4658      	mov	r0, fp
 800a866:	d107      	bne.n	800a878 <_dtoa_r+0xac8>
 800a868:	f000 fb82 	bl	800af70 <__multadd>
 800a86c:	4607      	mov	r7, r0
 800a86e:	4605      	mov	r5, r0
 800a870:	9b07      	ldr	r3, [sp, #28]
 800a872:	3301      	adds	r3, #1
 800a874:	9307      	str	r3, [sp, #28]
 800a876:	e774      	b.n	800a762 <_dtoa_r+0x9b2>
 800a878:	f000 fb7a 	bl	800af70 <__multadd>
 800a87c:	4629      	mov	r1, r5
 800a87e:	4607      	mov	r7, r0
 800a880:	2300      	movs	r3, #0
 800a882:	220a      	movs	r2, #10
 800a884:	4658      	mov	r0, fp
 800a886:	f000 fb73 	bl	800af70 <__multadd>
 800a88a:	4605      	mov	r5, r0
 800a88c:	e7f0      	b.n	800a870 <_dtoa_r+0xac0>
 800a88e:	9b08      	ldr	r3, [sp, #32]
 800a890:	2b00      	cmp	r3, #0
 800a892:	bfcc      	ite	gt
 800a894:	461e      	movgt	r6, r3
 800a896:	2601      	movle	r6, #1
 800a898:	4456      	add	r6, sl
 800a89a:	2700      	movs	r7, #0
 800a89c:	4649      	mov	r1, r9
 800a89e:	2201      	movs	r2, #1
 800a8a0:	4658      	mov	r0, fp
 800a8a2:	f000 fd11 	bl	800b2c8 <__lshift>
 800a8a6:	4621      	mov	r1, r4
 800a8a8:	4681      	mov	r9, r0
 800a8aa:	f000 fd79 	bl	800b3a0 <__mcmp>
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	dcb0      	bgt.n	800a814 <_dtoa_r+0xa64>
 800a8b2:	d102      	bne.n	800a8ba <_dtoa_r+0xb0a>
 800a8b4:	f018 0f01 	tst.w	r8, #1
 800a8b8:	d1ac      	bne.n	800a814 <_dtoa_r+0xa64>
 800a8ba:	4633      	mov	r3, r6
 800a8bc:	461e      	mov	r6, r3
 800a8be:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8c2:	2a30      	cmp	r2, #48	@ 0x30
 800a8c4:	d0fa      	beq.n	800a8bc <_dtoa_r+0xb0c>
 800a8c6:	e5be      	b.n	800a446 <_dtoa_r+0x696>
 800a8c8:	459a      	cmp	sl, r3
 800a8ca:	d1a4      	bne.n	800a816 <_dtoa_r+0xa66>
 800a8cc:	9b04      	ldr	r3, [sp, #16]
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	9304      	str	r3, [sp, #16]
 800a8d2:	2331      	movs	r3, #49	@ 0x31
 800a8d4:	f88a 3000 	strb.w	r3, [sl]
 800a8d8:	e5b5      	b.n	800a446 <_dtoa_r+0x696>
 800a8da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a8dc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a93c <_dtoa_r+0xb8c>
 800a8e0:	b11b      	cbz	r3, 800a8ea <_dtoa_r+0xb3a>
 800a8e2:	f10a 0308 	add.w	r3, sl, #8
 800a8e6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a8e8:	6013      	str	r3, [r2, #0]
 800a8ea:	4650      	mov	r0, sl
 800a8ec:	b017      	add	sp, #92	@ 0x5c
 800a8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	f77f ae3d 	ble.w	800a574 <_dtoa_r+0x7c4>
 800a8fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8fc:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8fe:	2001      	movs	r0, #1
 800a900:	e65b      	b.n	800a5ba <_dtoa_r+0x80a>
 800a902:	9b08      	ldr	r3, [sp, #32]
 800a904:	2b00      	cmp	r3, #0
 800a906:	f77f aed6 	ble.w	800a6b6 <_dtoa_r+0x906>
 800a90a:	4656      	mov	r6, sl
 800a90c:	4621      	mov	r1, r4
 800a90e:	4648      	mov	r0, r9
 800a910:	f7ff f9c5 	bl	8009c9e <quorem>
 800a914:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a918:	f806 8b01 	strb.w	r8, [r6], #1
 800a91c:	9b08      	ldr	r3, [sp, #32]
 800a91e:	eba6 020a 	sub.w	r2, r6, sl
 800a922:	4293      	cmp	r3, r2
 800a924:	ddb3      	ble.n	800a88e <_dtoa_r+0xade>
 800a926:	4649      	mov	r1, r9
 800a928:	2300      	movs	r3, #0
 800a92a:	220a      	movs	r2, #10
 800a92c:	4658      	mov	r0, fp
 800a92e:	f000 fb1f 	bl	800af70 <__multadd>
 800a932:	4681      	mov	r9, r0
 800a934:	e7ea      	b.n	800a90c <_dtoa_r+0xb5c>
 800a936:	bf00      	nop
 800a938:	0800c1e8 	.word	0x0800c1e8
 800a93c:	0800c16c 	.word	0x0800c16c

0800a940 <__ssputs_r>:
 800a940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a944:	688e      	ldr	r6, [r1, #8]
 800a946:	461f      	mov	r7, r3
 800a948:	42be      	cmp	r6, r7
 800a94a:	680b      	ldr	r3, [r1, #0]
 800a94c:	4682      	mov	sl, r0
 800a94e:	460c      	mov	r4, r1
 800a950:	4690      	mov	r8, r2
 800a952:	d82d      	bhi.n	800a9b0 <__ssputs_r+0x70>
 800a954:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a958:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a95c:	d026      	beq.n	800a9ac <__ssputs_r+0x6c>
 800a95e:	6965      	ldr	r5, [r4, #20]
 800a960:	6909      	ldr	r1, [r1, #16]
 800a962:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a966:	eba3 0901 	sub.w	r9, r3, r1
 800a96a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a96e:	1c7b      	adds	r3, r7, #1
 800a970:	444b      	add	r3, r9
 800a972:	106d      	asrs	r5, r5, #1
 800a974:	429d      	cmp	r5, r3
 800a976:	bf38      	it	cc
 800a978:	461d      	movcc	r5, r3
 800a97a:	0553      	lsls	r3, r2, #21
 800a97c:	d527      	bpl.n	800a9ce <__ssputs_r+0x8e>
 800a97e:	4629      	mov	r1, r5
 800a980:	f000 f960 	bl	800ac44 <_malloc_r>
 800a984:	4606      	mov	r6, r0
 800a986:	b360      	cbz	r0, 800a9e2 <__ssputs_r+0xa2>
 800a988:	6921      	ldr	r1, [r4, #16]
 800a98a:	464a      	mov	r2, r9
 800a98c:	f7ff f979 	bl	8009c82 <memcpy>
 800a990:	89a3      	ldrh	r3, [r4, #12]
 800a992:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a996:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a99a:	81a3      	strh	r3, [r4, #12]
 800a99c:	6126      	str	r6, [r4, #16]
 800a99e:	6165      	str	r5, [r4, #20]
 800a9a0:	444e      	add	r6, r9
 800a9a2:	eba5 0509 	sub.w	r5, r5, r9
 800a9a6:	6026      	str	r6, [r4, #0]
 800a9a8:	60a5      	str	r5, [r4, #8]
 800a9aa:	463e      	mov	r6, r7
 800a9ac:	42be      	cmp	r6, r7
 800a9ae:	d900      	bls.n	800a9b2 <__ssputs_r+0x72>
 800a9b0:	463e      	mov	r6, r7
 800a9b2:	6820      	ldr	r0, [r4, #0]
 800a9b4:	4632      	mov	r2, r6
 800a9b6:	4641      	mov	r1, r8
 800a9b8:	f000 fe69 	bl	800b68e <memmove>
 800a9bc:	68a3      	ldr	r3, [r4, #8]
 800a9be:	1b9b      	subs	r3, r3, r6
 800a9c0:	60a3      	str	r3, [r4, #8]
 800a9c2:	6823      	ldr	r3, [r4, #0]
 800a9c4:	4433      	add	r3, r6
 800a9c6:	6023      	str	r3, [r4, #0]
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ce:	462a      	mov	r2, r5
 800a9d0:	f000 fe2f 	bl	800b632 <_realloc_r>
 800a9d4:	4606      	mov	r6, r0
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	d1e0      	bne.n	800a99c <__ssputs_r+0x5c>
 800a9da:	6921      	ldr	r1, [r4, #16]
 800a9dc:	4650      	mov	r0, sl
 800a9de:	f000 fef9 	bl	800b7d4 <_free_r>
 800a9e2:	230c      	movs	r3, #12
 800a9e4:	f8ca 3000 	str.w	r3, [sl]
 800a9e8:	89a3      	ldrh	r3, [r4, #12]
 800a9ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9ee:	81a3      	strh	r3, [r4, #12]
 800a9f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9f4:	e7e9      	b.n	800a9ca <__ssputs_r+0x8a>
	...

0800a9f8 <_svfiprintf_r>:
 800a9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9fc:	4698      	mov	r8, r3
 800a9fe:	898b      	ldrh	r3, [r1, #12]
 800aa00:	061b      	lsls	r3, r3, #24
 800aa02:	b09d      	sub	sp, #116	@ 0x74
 800aa04:	4607      	mov	r7, r0
 800aa06:	460d      	mov	r5, r1
 800aa08:	4614      	mov	r4, r2
 800aa0a:	d510      	bpl.n	800aa2e <_svfiprintf_r+0x36>
 800aa0c:	690b      	ldr	r3, [r1, #16]
 800aa0e:	b973      	cbnz	r3, 800aa2e <_svfiprintf_r+0x36>
 800aa10:	2140      	movs	r1, #64	@ 0x40
 800aa12:	f000 f917 	bl	800ac44 <_malloc_r>
 800aa16:	6028      	str	r0, [r5, #0]
 800aa18:	6128      	str	r0, [r5, #16]
 800aa1a:	b930      	cbnz	r0, 800aa2a <_svfiprintf_r+0x32>
 800aa1c:	230c      	movs	r3, #12
 800aa1e:	603b      	str	r3, [r7, #0]
 800aa20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa24:	b01d      	add	sp, #116	@ 0x74
 800aa26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa2a:	2340      	movs	r3, #64	@ 0x40
 800aa2c:	616b      	str	r3, [r5, #20]
 800aa2e:	2300      	movs	r3, #0
 800aa30:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa32:	2320      	movs	r3, #32
 800aa34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa38:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa3c:	2330      	movs	r3, #48	@ 0x30
 800aa3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800abdc <_svfiprintf_r+0x1e4>
 800aa42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa46:	f04f 0901 	mov.w	r9, #1
 800aa4a:	4623      	mov	r3, r4
 800aa4c:	469a      	mov	sl, r3
 800aa4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa52:	b10a      	cbz	r2, 800aa58 <_svfiprintf_r+0x60>
 800aa54:	2a25      	cmp	r2, #37	@ 0x25
 800aa56:	d1f9      	bne.n	800aa4c <_svfiprintf_r+0x54>
 800aa58:	ebba 0b04 	subs.w	fp, sl, r4
 800aa5c:	d00b      	beq.n	800aa76 <_svfiprintf_r+0x7e>
 800aa5e:	465b      	mov	r3, fp
 800aa60:	4622      	mov	r2, r4
 800aa62:	4629      	mov	r1, r5
 800aa64:	4638      	mov	r0, r7
 800aa66:	f7ff ff6b 	bl	800a940 <__ssputs_r>
 800aa6a:	3001      	adds	r0, #1
 800aa6c:	f000 80a7 	beq.w	800abbe <_svfiprintf_r+0x1c6>
 800aa70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa72:	445a      	add	r2, fp
 800aa74:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa76:	f89a 3000 	ldrb.w	r3, [sl]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	f000 809f 	beq.w	800abbe <_svfiprintf_r+0x1c6>
 800aa80:	2300      	movs	r3, #0
 800aa82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa8a:	f10a 0a01 	add.w	sl, sl, #1
 800aa8e:	9304      	str	r3, [sp, #16]
 800aa90:	9307      	str	r3, [sp, #28]
 800aa92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa96:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa98:	4654      	mov	r4, sl
 800aa9a:	2205      	movs	r2, #5
 800aa9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaa0:	484e      	ldr	r0, [pc, #312]	@ (800abdc <_svfiprintf_r+0x1e4>)
 800aaa2:	f7f5 fb6d 	bl	8000180 <memchr>
 800aaa6:	9a04      	ldr	r2, [sp, #16]
 800aaa8:	b9d8      	cbnz	r0, 800aae2 <_svfiprintf_r+0xea>
 800aaaa:	06d0      	lsls	r0, r2, #27
 800aaac:	bf44      	itt	mi
 800aaae:	2320      	movmi	r3, #32
 800aab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aab4:	0711      	lsls	r1, r2, #28
 800aab6:	bf44      	itt	mi
 800aab8:	232b      	movmi	r3, #43	@ 0x2b
 800aaba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aabe:	f89a 3000 	ldrb.w	r3, [sl]
 800aac2:	2b2a      	cmp	r3, #42	@ 0x2a
 800aac4:	d015      	beq.n	800aaf2 <_svfiprintf_r+0xfa>
 800aac6:	9a07      	ldr	r2, [sp, #28]
 800aac8:	4654      	mov	r4, sl
 800aaca:	2000      	movs	r0, #0
 800aacc:	f04f 0c0a 	mov.w	ip, #10
 800aad0:	4621      	mov	r1, r4
 800aad2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aad6:	3b30      	subs	r3, #48	@ 0x30
 800aad8:	2b09      	cmp	r3, #9
 800aada:	d94b      	bls.n	800ab74 <_svfiprintf_r+0x17c>
 800aadc:	b1b0      	cbz	r0, 800ab0c <_svfiprintf_r+0x114>
 800aade:	9207      	str	r2, [sp, #28]
 800aae0:	e014      	b.n	800ab0c <_svfiprintf_r+0x114>
 800aae2:	eba0 0308 	sub.w	r3, r0, r8
 800aae6:	fa09 f303 	lsl.w	r3, r9, r3
 800aaea:	4313      	orrs	r3, r2
 800aaec:	9304      	str	r3, [sp, #16]
 800aaee:	46a2      	mov	sl, r4
 800aaf0:	e7d2      	b.n	800aa98 <_svfiprintf_r+0xa0>
 800aaf2:	9b03      	ldr	r3, [sp, #12]
 800aaf4:	1d19      	adds	r1, r3, #4
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	9103      	str	r1, [sp, #12]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	bfbb      	ittet	lt
 800aafe:	425b      	neglt	r3, r3
 800ab00:	f042 0202 	orrlt.w	r2, r2, #2
 800ab04:	9307      	strge	r3, [sp, #28]
 800ab06:	9307      	strlt	r3, [sp, #28]
 800ab08:	bfb8      	it	lt
 800ab0a:	9204      	strlt	r2, [sp, #16]
 800ab0c:	7823      	ldrb	r3, [r4, #0]
 800ab0e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab10:	d10a      	bne.n	800ab28 <_svfiprintf_r+0x130>
 800ab12:	7863      	ldrb	r3, [r4, #1]
 800ab14:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab16:	d132      	bne.n	800ab7e <_svfiprintf_r+0x186>
 800ab18:	9b03      	ldr	r3, [sp, #12]
 800ab1a:	1d1a      	adds	r2, r3, #4
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	9203      	str	r2, [sp, #12]
 800ab20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab24:	3402      	adds	r4, #2
 800ab26:	9305      	str	r3, [sp, #20]
 800ab28:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800abe0 <_svfiprintf_r+0x1e8>
 800ab2c:	7821      	ldrb	r1, [r4, #0]
 800ab2e:	2203      	movs	r2, #3
 800ab30:	4650      	mov	r0, sl
 800ab32:	f7f5 fb25 	bl	8000180 <memchr>
 800ab36:	b138      	cbz	r0, 800ab48 <_svfiprintf_r+0x150>
 800ab38:	9b04      	ldr	r3, [sp, #16]
 800ab3a:	eba0 000a 	sub.w	r0, r0, sl
 800ab3e:	2240      	movs	r2, #64	@ 0x40
 800ab40:	4082      	lsls	r2, r0
 800ab42:	4313      	orrs	r3, r2
 800ab44:	3401      	adds	r4, #1
 800ab46:	9304      	str	r3, [sp, #16]
 800ab48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab4c:	4825      	ldr	r0, [pc, #148]	@ (800abe4 <_svfiprintf_r+0x1ec>)
 800ab4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab52:	2206      	movs	r2, #6
 800ab54:	f7f5 fb14 	bl	8000180 <memchr>
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	d036      	beq.n	800abca <_svfiprintf_r+0x1d2>
 800ab5c:	4b22      	ldr	r3, [pc, #136]	@ (800abe8 <_svfiprintf_r+0x1f0>)
 800ab5e:	bb1b      	cbnz	r3, 800aba8 <_svfiprintf_r+0x1b0>
 800ab60:	9b03      	ldr	r3, [sp, #12]
 800ab62:	3307      	adds	r3, #7
 800ab64:	f023 0307 	bic.w	r3, r3, #7
 800ab68:	3308      	adds	r3, #8
 800ab6a:	9303      	str	r3, [sp, #12]
 800ab6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab6e:	4433      	add	r3, r6
 800ab70:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab72:	e76a      	b.n	800aa4a <_svfiprintf_r+0x52>
 800ab74:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab78:	460c      	mov	r4, r1
 800ab7a:	2001      	movs	r0, #1
 800ab7c:	e7a8      	b.n	800aad0 <_svfiprintf_r+0xd8>
 800ab7e:	2300      	movs	r3, #0
 800ab80:	3401      	adds	r4, #1
 800ab82:	9305      	str	r3, [sp, #20]
 800ab84:	4619      	mov	r1, r3
 800ab86:	f04f 0c0a 	mov.w	ip, #10
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab90:	3a30      	subs	r2, #48	@ 0x30
 800ab92:	2a09      	cmp	r2, #9
 800ab94:	d903      	bls.n	800ab9e <_svfiprintf_r+0x1a6>
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d0c6      	beq.n	800ab28 <_svfiprintf_r+0x130>
 800ab9a:	9105      	str	r1, [sp, #20]
 800ab9c:	e7c4      	b.n	800ab28 <_svfiprintf_r+0x130>
 800ab9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800aba2:	4604      	mov	r4, r0
 800aba4:	2301      	movs	r3, #1
 800aba6:	e7f0      	b.n	800ab8a <_svfiprintf_r+0x192>
 800aba8:	ab03      	add	r3, sp, #12
 800abaa:	9300      	str	r3, [sp, #0]
 800abac:	462a      	mov	r2, r5
 800abae:	4b0f      	ldr	r3, [pc, #60]	@ (800abec <_svfiprintf_r+0x1f4>)
 800abb0:	a904      	add	r1, sp, #16
 800abb2:	4638      	mov	r0, r7
 800abb4:	f7fe fb42 	bl	800923c <_printf_float>
 800abb8:	1c42      	adds	r2, r0, #1
 800abba:	4606      	mov	r6, r0
 800abbc:	d1d6      	bne.n	800ab6c <_svfiprintf_r+0x174>
 800abbe:	89ab      	ldrh	r3, [r5, #12]
 800abc0:	065b      	lsls	r3, r3, #25
 800abc2:	f53f af2d 	bmi.w	800aa20 <_svfiprintf_r+0x28>
 800abc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abc8:	e72c      	b.n	800aa24 <_svfiprintf_r+0x2c>
 800abca:	ab03      	add	r3, sp, #12
 800abcc:	9300      	str	r3, [sp, #0]
 800abce:	462a      	mov	r2, r5
 800abd0:	4b06      	ldr	r3, [pc, #24]	@ (800abec <_svfiprintf_r+0x1f4>)
 800abd2:	a904      	add	r1, sp, #16
 800abd4:	4638      	mov	r0, r7
 800abd6:	f7fe fdcb 	bl	8009770 <_printf_i>
 800abda:	e7ed      	b.n	800abb8 <_svfiprintf_r+0x1c0>
 800abdc:	0800c1f9 	.word	0x0800c1f9
 800abe0:	0800c1ff 	.word	0x0800c1ff
 800abe4:	0800c203 	.word	0x0800c203
 800abe8:	0800923d 	.word	0x0800923d
 800abec:	0800a941 	.word	0x0800a941

0800abf0 <malloc>:
 800abf0:	4b02      	ldr	r3, [pc, #8]	@ (800abfc <malloc+0xc>)
 800abf2:	4601      	mov	r1, r0
 800abf4:	6818      	ldr	r0, [r3, #0]
 800abf6:	f000 b825 	b.w	800ac44 <_malloc_r>
 800abfa:	bf00      	nop
 800abfc:	20000030 	.word	0x20000030

0800ac00 <sbrk_aligned>:
 800ac00:	b570      	push	{r4, r5, r6, lr}
 800ac02:	4e0f      	ldr	r6, [pc, #60]	@ (800ac40 <sbrk_aligned+0x40>)
 800ac04:	460c      	mov	r4, r1
 800ac06:	6831      	ldr	r1, [r6, #0]
 800ac08:	4605      	mov	r5, r0
 800ac0a:	b911      	cbnz	r1, 800ac12 <sbrk_aligned+0x12>
 800ac0c:	f000 fd8e 	bl	800b72c <_sbrk_r>
 800ac10:	6030      	str	r0, [r6, #0]
 800ac12:	4621      	mov	r1, r4
 800ac14:	4628      	mov	r0, r5
 800ac16:	f000 fd89 	bl	800b72c <_sbrk_r>
 800ac1a:	1c43      	adds	r3, r0, #1
 800ac1c:	d103      	bne.n	800ac26 <sbrk_aligned+0x26>
 800ac1e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ac22:	4620      	mov	r0, r4
 800ac24:	bd70      	pop	{r4, r5, r6, pc}
 800ac26:	1cc4      	adds	r4, r0, #3
 800ac28:	f024 0403 	bic.w	r4, r4, #3
 800ac2c:	42a0      	cmp	r0, r4
 800ac2e:	d0f8      	beq.n	800ac22 <sbrk_aligned+0x22>
 800ac30:	1a21      	subs	r1, r4, r0
 800ac32:	4628      	mov	r0, r5
 800ac34:	f000 fd7a 	bl	800b72c <_sbrk_r>
 800ac38:	3001      	adds	r0, #1
 800ac3a:	d1f2      	bne.n	800ac22 <sbrk_aligned+0x22>
 800ac3c:	e7ef      	b.n	800ac1e <sbrk_aligned+0x1e>
 800ac3e:	bf00      	nop
 800ac40:	20000b1c 	.word	0x20000b1c

0800ac44 <_malloc_r>:
 800ac44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac48:	1ccd      	adds	r5, r1, #3
 800ac4a:	f025 0503 	bic.w	r5, r5, #3
 800ac4e:	3508      	adds	r5, #8
 800ac50:	2d0c      	cmp	r5, #12
 800ac52:	bf38      	it	cc
 800ac54:	250c      	movcc	r5, #12
 800ac56:	2d00      	cmp	r5, #0
 800ac58:	4606      	mov	r6, r0
 800ac5a:	db01      	blt.n	800ac60 <_malloc_r+0x1c>
 800ac5c:	42a9      	cmp	r1, r5
 800ac5e:	d904      	bls.n	800ac6a <_malloc_r+0x26>
 800ac60:	230c      	movs	r3, #12
 800ac62:	6033      	str	r3, [r6, #0]
 800ac64:	2000      	movs	r0, #0
 800ac66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad40 <_malloc_r+0xfc>
 800ac6e:	f000 f911 	bl	800ae94 <__malloc_lock>
 800ac72:	f8d8 3000 	ldr.w	r3, [r8]
 800ac76:	461c      	mov	r4, r3
 800ac78:	bb44      	cbnz	r4, 800accc <_malloc_r+0x88>
 800ac7a:	4629      	mov	r1, r5
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	f7ff ffbf 	bl	800ac00 <sbrk_aligned>
 800ac82:	1c43      	adds	r3, r0, #1
 800ac84:	4604      	mov	r4, r0
 800ac86:	d158      	bne.n	800ad3a <_malloc_r+0xf6>
 800ac88:	f8d8 4000 	ldr.w	r4, [r8]
 800ac8c:	4627      	mov	r7, r4
 800ac8e:	2f00      	cmp	r7, #0
 800ac90:	d143      	bne.n	800ad1a <_malloc_r+0xd6>
 800ac92:	2c00      	cmp	r4, #0
 800ac94:	d04b      	beq.n	800ad2e <_malloc_r+0xea>
 800ac96:	6823      	ldr	r3, [r4, #0]
 800ac98:	4639      	mov	r1, r7
 800ac9a:	4630      	mov	r0, r6
 800ac9c:	eb04 0903 	add.w	r9, r4, r3
 800aca0:	f000 fd44 	bl	800b72c <_sbrk_r>
 800aca4:	4581      	cmp	r9, r0
 800aca6:	d142      	bne.n	800ad2e <_malloc_r+0xea>
 800aca8:	6821      	ldr	r1, [r4, #0]
 800acaa:	1a6d      	subs	r5, r5, r1
 800acac:	4629      	mov	r1, r5
 800acae:	4630      	mov	r0, r6
 800acb0:	f7ff ffa6 	bl	800ac00 <sbrk_aligned>
 800acb4:	3001      	adds	r0, #1
 800acb6:	d03a      	beq.n	800ad2e <_malloc_r+0xea>
 800acb8:	6823      	ldr	r3, [r4, #0]
 800acba:	442b      	add	r3, r5
 800acbc:	6023      	str	r3, [r4, #0]
 800acbe:	f8d8 3000 	ldr.w	r3, [r8]
 800acc2:	685a      	ldr	r2, [r3, #4]
 800acc4:	bb62      	cbnz	r2, 800ad20 <_malloc_r+0xdc>
 800acc6:	f8c8 7000 	str.w	r7, [r8]
 800acca:	e00f      	b.n	800acec <_malloc_r+0xa8>
 800accc:	6822      	ldr	r2, [r4, #0]
 800acce:	1b52      	subs	r2, r2, r5
 800acd0:	d420      	bmi.n	800ad14 <_malloc_r+0xd0>
 800acd2:	2a0b      	cmp	r2, #11
 800acd4:	d917      	bls.n	800ad06 <_malloc_r+0xc2>
 800acd6:	1961      	adds	r1, r4, r5
 800acd8:	42a3      	cmp	r3, r4
 800acda:	6025      	str	r5, [r4, #0]
 800acdc:	bf18      	it	ne
 800acde:	6059      	strne	r1, [r3, #4]
 800ace0:	6863      	ldr	r3, [r4, #4]
 800ace2:	bf08      	it	eq
 800ace4:	f8c8 1000 	streq.w	r1, [r8]
 800ace8:	5162      	str	r2, [r4, r5]
 800acea:	604b      	str	r3, [r1, #4]
 800acec:	4630      	mov	r0, r6
 800acee:	f000 f8d7 	bl	800aea0 <__malloc_unlock>
 800acf2:	f104 000b 	add.w	r0, r4, #11
 800acf6:	1d23      	adds	r3, r4, #4
 800acf8:	f020 0007 	bic.w	r0, r0, #7
 800acfc:	1ac2      	subs	r2, r0, r3
 800acfe:	bf1c      	itt	ne
 800ad00:	1a1b      	subne	r3, r3, r0
 800ad02:	50a3      	strne	r3, [r4, r2]
 800ad04:	e7af      	b.n	800ac66 <_malloc_r+0x22>
 800ad06:	6862      	ldr	r2, [r4, #4]
 800ad08:	42a3      	cmp	r3, r4
 800ad0a:	bf0c      	ite	eq
 800ad0c:	f8c8 2000 	streq.w	r2, [r8]
 800ad10:	605a      	strne	r2, [r3, #4]
 800ad12:	e7eb      	b.n	800acec <_malloc_r+0xa8>
 800ad14:	4623      	mov	r3, r4
 800ad16:	6864      	ldr	r4, [r4, #4]
 800ad18:	e7ae      	b.n	800ac78 <_malloc_r+0x34>
 800ad1a:	463c      	mov	r4, r7
 800ad1c:	687f      	ldr	r7, [r7, #4]
 800ad1e:	e7b6      	b.n	800ac8e <_malloc_r+0x4a>
 800ad20:	461a      	mov	r2, r3
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	42a3      	cmp	r3, r4
 800ad26:	d1fb      	bne.n	800ad20 <_malloc_r+0xdc>
 800ad28:	2300      	movs	r3, #0
 800ad2a:	6053      	str	r3, [r2, #4]
 800ad2c:	e7de      	b.n	800acec <_malloc_r+0xa8>
 800ad2e:	230c      	movs	r3, #12
 800ad30:	6033      	str	r3, [r6, #0]
 800ad32:	4630      	mov	r0, r6
 800ad34:	f000 f8b4 	bl	800aea0 <__malloc_unlock>
 800ad38:	e794      	b.n	800ac64 <_malloc_r+0x20>
 800ad3a:	6005      	str	r5, [r0, #0]
 800ad3c:	e7d6      	b.n	800acec <_malloc_r+0xa8>
 800ad3e:	bf00      	nop
 800ad40:	20000b20 	.word	0x20000b20

0800ad44 <__sflush_r>:
 800ad44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad4a:	0716      	lsls	r6, r2, #28
 800ad4c:	4605      	mov	r5, r0
 800ad4e:	460c      	mov	r4, r1
 800ad50:	d454      	bmi.n	800adfc <__sflush_r+0xb8>
 800ad52:	684b      	ldr	r3, [r1, #4]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	dc02      	bgt.n	800ad5e <__sflush_r+0x1a>
 800ad58:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	dd48      	ble.n	800adf0 <__sflush_r+0xac>
 800ad5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad60:	2e00      	cmp	r6, #0
 800ad62:	d045      	beq.n	800adf0 <__sflush_r+0xac>
 800ad64:	2300      	movs	r3, #0
 800ad66:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ad6a:	682f      	ldr	r7, [r5, #0]
 800ad6c:	6a21      	ldr	r1, [r4, #32]
 800ad6e:	602b      	str	r3, [r5, #0]
 800ad70:	d030      	beq.n	800add4 <__sflush_r+0x90>
 800ad72:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ad74:	89a3      	ldrh	r3, [r4, #12]
 800ad76:	0759      	lsls	r1, r3, #29
 800ad78:	d505      	bpl.n	800ad86 <__sflush_r+0x42>
 800ad7a:	6863      	ldr	r3, [r4, #4]
 800ad7c:	1ad2      	subs	r2, r2, r3
 800ad7e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ad80:	b10b      	cbz	r3, 800ad86 <__sflush_r+0x42>
 800ad82:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad84:	1ad2      	subs	r2, r2, r3
 800ad86:	2300      	movs	r3, #0
 800ad88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad8a:	6a21      	ldr	r1, [r4, #32]
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	47b0      	blx	r6
 800ad90:	1c43      	adds	r3, r0, #1
 800ad92:	89a3      	ldrh	r3, [r4, #12]
 800ad94:	d106      	bne.n	800ada4 <__sflush_r+0x60>
 800ad96:	6829      	ldr	r1, [r5, #0]
 800ad98:	291d      	cmp	r1, #29
 800ad9a:	d82b      	bhi.n	800adf4 <__sflush_r+0xb0>
 800ad9c:	4a28      	ldr	r2, [pc, #160]	@ (800ae40 <__sflush_r+0xfc>)
 800ad9e:	410a      	asrs	r2, r1
 800ada0:	07d6      	lsls	r6, r2, #31
 800ada2:	d427      	bmi.n	800adf4 <__sflush_r+0xb0>
 800ada4:	2200      	movs	r2, #0
 800ada6:	6062      	str	r2, [r4, #4]
 800ada8:	04d9      	lsls	r1, r3, #19
 800adaa:	6922      	ldr	r2, [r4, #16]
 800adac:	6022      	str	r2, [r4, #0]
 800adae:	d504      	bpl.n	800adba <__sflush_r+0x76>
 800adb0:	1c42      	adds	r2, r0, #1
 800adb2:	d101      	bne.n	800adb8 <__sflush_r+0x74>
 800adb4:	682b      	ldr	r3, [r5, #0]
 800adb6:	b903      	cbnz	r3, 800adba <__sflush_r+0x76>
 800adb8:	6560      	str	r0, [r4, #84]	@ 0x54
 800adba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800adbc:	602f      	str	r7, [r5, #0]
 800adbe:	b1b9      	cbz	r1, 800adf0 <__sflush_r+0xac>
 800adc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800adc4:	4299      	cmp	r1, r3
 800adc6:	d002      	beq.n	800adce <__sflush_r+0x8a>
 800adc8:	4628      	mov	r0, r5
 800adca:	f000 fd03 	bl	800b7d4 <_free_r>
 800adce:	2300      	movs	r3, #0
 800add0:	6363      	str	r3, [r4, #52]	@ 0x34
 800add2:	e00d      	b.n	800adf0 <__sflush_r+0xac>
 800add4:	2301      	movs	r3, #1
 800add6:	4628      	mov	r0, r5
 800add8:	47b0      	blx	r6
 800adda:	4602      	mov	r2, r0
 800addc:	1c50      	adds	r0, r2, #1
 800adde:	d1c9      	bne.n	800ad74 <__sflush_r+0x30>
 800ade0:	682b      	ldr	r3, [r5, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d0c6      	beq.n	800ad74 <__sflush_r+0x30>
 800ade6:	2b1d      	cmp	r3, #29
 800ade8:	d001      	beq.n	800adee <__sflush_r+0xaa>
 800adea:	2b16      	cmp	r3, #22
 800adec:	d11d      	bne.n	800ae2a <__sflush_r+0xe6>
 800adee:	602f      	str	r7, [r5, #0]
 800adf0:	2000      	movs	r0, #0
 800adf2:	e021      	b.n	800ae38 <__sflush_r+0xf4>
 800adf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adf8:	b21b      	sxth	r3, r3
 800adfa:	e01a      	b.n	800ae32 <__sflush_r+0xee>
 800adfc:	690f      	ldr	r7, [r1, #16]
 800adfe:	2f00      	cmp	r7, #0
 800ae00:	d0f6      	beq.n	800adf0 <__sflush_r+0xac>
 800ae02:	0793      	lsls	r3, r2, #30
 800ae04:	680e      	ldr	r6, [r1, #0]
 800ae06:	bf08      	it	eq
 800ae08:	694b      	ldreq	r3, [r1, #20]
 800ae0a:	600f      	str	r7, [r1, #0]
 800ae0c:	bf18      	it	ne
 800ae0e:	2300      	movne	r3, #0
 800ae10:	1bf6      	subs	r6, r6, r7
 800ae12:	608b      	str	r3, [r1, #8]
 800ae14:	2e00      	cmp	r6, #0
 800ae16:	ddeb      	ble.n	800adf0 <__sflush_r+0xac>
 800ae18:	6a21      	ldr	r1, [r4, #32]
 800ae1a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800ae1e:	4633      	mov	r3, r6
 800ae20:	463a      	mov	r2, r7
 800ae22:	4628      	mov	r0, r5
 800ae24:	47e0      	blx	ip
 800ae26:	2800      	cmp	r0, #0
 800ae28:	dc07      	bgt.n	800ae3a <__sflush_r+0xf6>
 800ae2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae32:	81a3      	strh	r3, [r4, #12]
 800ae34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae3a:	4407      	add	r7, r0
 800ae3c:	1a36      	subs	r6, r6, r0
 800ae3e:	e7e9      	b.n	800ae14 <__sflush_r+0xd0>
 800ae40:	dfbffffe 	.word	0xdfbffffe

0800ae44 <_fflush_r>:
 800ae44:	b538      	push	{r3, r4, r5, lr}
 800ae46:	690b      	ldr	r3, [r1, #16]
 800ae48:	4605      	mov	r5, r0
 800ae4a:	460c      	mov	r4, r1
 800ae4c:	b913      	cbnz	r3, 800ae54 <_fflush_r+0x10>
 800ae4e:	2500      	movs	r5, #0
 800ae50:	4628      	mov	r0, r5
 800ae52:	bd38      	pop	{r3, r4, r5, pc}
 800ae54:	b118      	cbz	r0, 800ae5e <_fflush_r+0x1a>
 800ae56:	6a03      	ldr	r3, [r0, #32]
 800ae58:	b90b      	cbnz	r3, 800ae5e <_fflush_r+0x1a>
 800ae5a:	f7fe fe69 	bl	8009b30 <__sinit>
 800ae5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d0f3      	beq.n	800ae4e <_fflush_r+0xa>
 800ae66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ae68:	07d0      	lsls	r0, r2, #31
 800ae6a:	d404      	bmi.n	800ae76 <_fflush_r+0x32>
 800ae6c:	0599      	lsls	r1, r3, #22
 800ae6e:	d402      	bmi.n	800ae76 <_fflush_r+0x32>
 800ae70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae72:	f7fe ff04 	bl	8009c7e <__retarget_lock_acquire_recursive>
 800ae76:	4628      	mov	r0, r5
 800ae78:	4621      	mov	r1, r4
 800ae7a:	f7ff ff63 	bl	800ad44 <__sflush_r>
 800ae7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae80:	07da      	lsls	r2, r3, #31
 800ae82:	4605      	mov	r5, r0
 800ae84:	d4e4      	bmi.n	800ae50 <_fflush_r+0xc>
 800ae86:	89a3      	ldrh	r3, [r4, #12]
 800ae88:	059b      	lsls	r3, r3, #22
 800ae8a:	d4e1      	bmi.n	800ae50 <_fflush_r+0xc>
 800ae8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae8e:	f7fe fef7 	bl	8009c80 <__retarget_lock_release_recursive>
 800ae92:	e7dd      	b.n	800ae50 <_fflush_r+0xc>

0800ae94 <__malloc_lock>:
 800ae94:	4801      	ldr	r0, [pc, #4]	@ (800ae9c <__malloc_lock+0x8>)
 800ae96:	f7fe bef2 	b.w	8009c7e <__retarget_lock_acquire_recursive>
 800ae9a:	bf00      	nop
 800ae9c:	20000b18 	.word	0x20000b18

0800aea0 <__malloc_unlock>:
 800aea0:	4801      	ldr	r0, [pc, #4]	@ (800aea8 <__malloc_unlock+0x8>)
 800aea2:	f7fe beed 	b.w	8009c80 <__retarget_lock_release_recursive>
 800aea6:	bf00      	nop
 800aea8:	20000b18 	.word	0x20000b18

0800aeac <_Balloc>:
 800aeac:	b570      	push	{r4, r5, r6, lr}
 800aeae:	69c6      	ldr	r6, [r0, #28]
 800aeb0:	4604      	mov	r4, r0
 800aeb2:	460d      	mov	r5, r1
 800aeb4:	b976      	cbnz	r6, 800aed4 <_Balloc+0x28>
 800aeb6:	2010      	movs	r0, #16
 800aeb8:	f7ff fe9a 	bl	800abf0 <malloc>
 800aebc:	4602      	mov	r2, r0
 800aebe:	61e0      	str	r0, [r4, #28]
 800aec0:	b920      	cbnz	r0, 800aecc <_Balloc+0x20>
 800aec2:	4b18      	ldr	r3, [pc, #96]	@ (800af24 <_Balloc+0x78>)
 800aec4:	4818      	ldr	r0, [pc, #96]	@ (800af28 <_Balloc+0x7c>)
 800aec6:	216b      	movs	r1, #107	@ 0x6b
 800aec8:	f000 fc52 	bl	800b770 <__assert_func>
 800aecc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aed0:	6006      	str	r6, [r0, #0]
 800aed2:	60c6      	str	r6, [r0, #12]
 800aed4:	69e6      	ldr	r6, [r4, #28]
 800aed6:	68f3      	ldr	r3, [r6, #12]
 800aed8:	b183      	cbz	r3, 800aefc <_Balloc+0x50>
 800aeda:	69e3      	ldr	r3, [r4, #28]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aee2:	b9b8      	cbnz	r0, 800af14 <_Balloc+0x68>
 800aee4:	2101      	movs	r1, #1
 800aee6:	fa01 f605 	lsl.w	r6, r1, r5
 800aeea:	1d72      	adds	r2, r6, #5
 800aeec:	0092      	lsls	r2, r2, #2
 800aeee:	4620      	mov	r0, r4
 800aef0:	f000 fc5c 	bl	800b7ac <_calloc_r>
 800aef4:	b160      	cbz	r0, 800af10 <_Balloc+0x64>
 800aef6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aefa:	e00e      	b.n	800af1a <_Balloc+0x6e>
 800aefc:	2221      	movs	r2, #33	@ 0x21
 800aefe:	2104      	movs	r1, #4
 800af00:	4620      	mov	r0, r4
 800af02:	f000 fc53 	bl	800b7ac <_calloc_r>
 800af06:	69e3      	ldr	r3, [r4, #28]
 800af08:	60f0      	str	r0, [r6, #12]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d1e4      	bne.n	800aeda <_Balloc+0x2e>
 800af10:	2000      	movs	r0, #0
 800af12:	bd70      	pop	{r4, r5, r6, pc}
 800af14:	6802      	ldr	r2, [r0, #0]
 800af16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af1a:	2300      	movs	r3, #0
 800af1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af20:	e7f7      	b.n	800af12 <_Balloc+0x66>
 800af22:	bf00      	nop
 800af24:	0800c179 	.word	0x0800c179
 800af28:	0800c20a 	.word	0x0800c20a

0800af2c <_Bfree>:
 800af2c:	b570      	push	{r4, r5, r6, lr}
 800af2e:	69c6      	ldr	r6, [r0, #28]
 800af30:	4605      	mov	r5, r0
 800af32:	460c      	mov	r4, r1
 800af34:	b976      	cbnz	r6, 800af54 <_Bfree+0x28>
 800af36:	2010      	movs	r0, #16
 800af38:	f7ff fe5a 	bl	800abf0 <malloc>
 800af3c:	4602      	mov	r2, r0
 800af3e:	61e8      	str	r0, [r5, #28]
 800af40:	b920      	cbnz	r0, 800af4c <_Bfree+0x20>
 800af42:	4b09      	ldr	r3, [pc, #36]	@ (800af68 <_Bfree+0x3c>)
 800af44:	4809      	ldr	r0, [pc, #36]	@ (800af6c <_Bfree+0x40>)
 800af46:	218f      	movs	r1, #143	@ 0x8f
 800af48:	f000 fc12 	bl	800b770 <__assert_func>
 800af4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af50:	6006      	str	r6, [r0, #0]
 800af52:	60c6      	str	r6, [r0, #12]
 800af54:	b13c      	cbz	r4, 800af66 <_Bfree+0x3a>
 800af56:	69eb      	ldr	r3, [r5, #28]
 800af58:	6862      	ldr	r2, [r4, #4]
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af60:	6021      	str	r1, [r4, #0]
 800af62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af66:	bd70      	pop	{r4, r5, r6, pc}
 800af68:	0800c179 	.word	0x0800c179
 800af6c:	0800c20a 	.word	0x0800c20a

0800af70 <__multadd>:
 800af70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af74:	690d      	ldr	r5, [r1, #16]
 800af76:	4607      	mov	r7, r0
 800af78:	460c      	mov	r4, r1
 800af7a:	461e      	mov	r6, r3
 800af7c:	f101 0c14 	add.w	ip, r1, #20
 800af80:	2000      	movs	r0, #0
 800af82:	f8dc 3000 	ldr.w	r3, [ip]
 800af86:	b299      	uxth	r1, r3
 800af88:	fb02 6101 	mla	r1, r2, r1, r6
 800af8c:	0c1e      	lsrs	r6, r3, #16
 800af8e:	0c0b      	lsrs	r3, r1, #16
 800af90:	fb02 3306 	mla	r3, r2, r6, r3
 800af94:	b289      	uxth	r1, r1
 800af96:	3001      	adds	r0, #1
 800af98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af9c:	4285      	cmp	r5, r0
 800af9e:	f84c 1b04 	str.w	r1, [ip], #4
 800afa2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800afa6:	dcec      	bgt.n	800af82 <__multadd+0x12>
 800afa8:	b30e      	cbz	r6, 800afee <__multadd+0x7e>
 800afaa:	68a3      	ldr	r3, [r4, #8]
 800afac:	42ab      	cmp	r3, r5
 800afae:	dc19      	bgt.n	800afe4 <__multadd+0x74>
 800afb0:	6861      	ldr	r1, [r4, #4]
 800afb2:	4638      	mov	r0, r7
 800afb4:	3101      	adds	r1, #1
 800afb6:	f7ff ff79 	bl	800aeac <_Balloc>
 800afba:	4680      	mov	r8, r0
 800afbc:	b928      	cbnz	r0, 800afca <__multadd+0x5a>
 800afbe:	4602      	mov	r2, r0
 800afc0:	4b0c      	ldr	r3, [pc, #48]	@ (800aff4 <__multadd+0x84>)
 800afc2:	480d      	ldr	r0, [pc, #52]	@ (800aff8 <__multadd+0x88>)
 800afc4:	21ba      	movs	r1, #186	@ 0xba
 800afc6:	f000 fbd3 	bl	800b770 <__assert_func>
 800afca:	6922      	ldr	r2, [r4, #16]
 800afcc:	3202      	adds	r2, #2
 800afce:	f104 010c 	add.w	r1, r4, #12
 800afd2:	0092      	lsls	r2, r2, #2
 800afd4:	300c      	adds	r0, #12
 800afd6:	f7fe fe54 	bl	8009c82 <memcpy>
 800afda:	4621      	mov	r1, r4
 800afdc:	4638      	mov	r0, r7
 800afde:	f7ff ffa5 	bl	800af2c <_Bfree>
 800afe2:	4644      	mov	r4, r8
 800afe4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800afe8:	3501      	adds	r5, #1
 800afea:	615e      	str	r6, [r3, #20]
 800afec:	6125      	str	r5, [r4, #16]
 800afee:	4620      	mov	r0, r4
 800aff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aff4:	0800c1e8 	.word	0x0800c1e8
 800aff8:	0800c20a 	.word	0x0800c20a

0800affc <__hi0bits>:
 800affc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b000:	4603      	mov	r3, r0
 800b002:	bf36      	itet	cc
 800b004:	0403      	lslcc	r3, r0, #16
 800b006:	2000      	movcs	r0, #0
 800b008:	2010      	movcc	r0, #16
 800b00a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b00e:	bf3c      	itt	cc
 800b010:	021b      	lslcc	r3, r3, #8
 800b012:	3008      	addcc	r0, #8
 800b014:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b018:	bf3c      	itt	cc
 800b01a:	011b      	lslcc	r3, r3, #4
 800b01c:	3004      	addcc	r0, #4
 800b01e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b022:	bf3c      	itt	cc
 800b024:	009b      	lslcc	r3, r3, #2
 800b026:	3002      	addcc	r0, #2
 800b028:	2b00      	cmp	r3, #0
 800b02a:	db05      	blt.n	800b038 <__hi0bits+0x3c>
 800b02c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b030:	f100 0001 	add.w	r0, r0, #1
 800b034:	bf08      	it	eq
 800b036:	2020      	moveq	r0, #32
 800b038:	4770      	bx	lr

0800b03a <__lo0bits>:
 800b03a:	6803      	ldr	r3, [r0, #0]
 800b03c:	4602      	mov	r2, r0
 800b03e:	f013 0007 	ands.w	r0, r3, #7
 800b042:	d00b      	beq.n	800b05c <__lo0bits+0x22>
 800b044:	07d9      	lsls	r1, r3, #31
 800b046:	d421      	bmi.n	800b08c <__lo0bits+0x52>
 800b048:	0798      	lsls	r0, r3, #30
 800b04a:	bf49      	itett	mi
 800b04c:	085b      	lsrmi	r3, r3, #1
 800b04e:	089b      	lsrpl	r3, r3, #2
 800b050:	2001      	movmi	r0, #1
 800b052:	6013      	strmi	r3, [r2, #0]
 800b054:	bf5c      	itt	pl
 800b056:	6013      	strpl	r3, [r2, #0]
 800b058:	2002      	movpl	r0, #2
 800b05a:	4770      	bx	lr
 800b05c:	b299      	uxth	r1, r3
 800b05e:	b909      	cbnz	r1, 800b064 <__lo0bits+0x2a>
 800b060:	0c1b      	lsrs	r3, r3, #16
 800b062:	2010      	movs	r0, #16
 800b064:	b2d9      	uxtb	r1, r3
 800b066:	b909      	cbnz	r1, 800b06c <__lo0bits+0x32>
 800b068:	3008      	adds	r0, #8
 800b06a:	0a1b      	lsrs	r3, r3, #8
 800b06c:	0719      	lsls	r1, r3, #28
 800b06e:	bf04      	itt	eq
 800b070:	091b      	lsreq	r3, r3, #4
 800b072:	3004      	addeq	r0, #4
 800b074:	0799      	lsls	r1, r3, #30
 800b076:	bf04      	itt	eq
 800b078:	089b      	lsreq	r3, r3, #2
 800b07a:	3002      	addeq	r0, #2
 800b07c:	07d9      	lsls	r1, r3, #31
 800b07e:	d403      	bmi.n	800b088 <__lo0bits+0x4e>
 800b080:	085b      	lsrs	r3, r3, #1
 800b082:	f100 0001 	add.w	r0, r0, #1
 800b086:	d003      	beq.n	800b090 <__lo0bits+0x56>
 800b088:	6013      	str	r3, [r2, #0]
 800b08a:	4770      	bx	lr
 800b08c:	2000      	movs	r0, #0
 800b08e:	4770      	bx	lr
 800b090:	2020      	movs	r0, #32
 800b092:	4770      	bx	lr

0800b094 <__i2b>:
 800b094:	b510      	push	{r4, lr}
 800b096:	460c      	mov	r4, r1
 800b098:	2101      	movs	r1, #1
 800b09a:	f7ff ff07 	bl	800aeac <_Balloc>
 800b09e:	4602      	mov	r2, r0
 800b0a0:	b928      	cbnz	r0, 800b0ae <__i2b+0x1a>
 800b0a2:	4b05      	ldr	r3, [pc, #20]	@ (800b0b8 <__i2b+0x24>)
 800b0a4:	4805      	ldr	r0, [pc, #20]	@ (800b0bc <__i2b+0x28>)
 800b0a6:	f240 1145 	movw	r1, #325	@ 0x145
 800b0aa:	f000 fb61 	bl	800b770 <__assert_func>
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	6144      	str	r4, [r0, #20]
 800b0b2:	6103      	str	r3, [r0, #16]
 800b0b4:	bd10      	pop	{r4, pc}
 800b0b6:	bf00      	nop
 800b0b8:	0800c1e8 	.word	0x0800c1e8
 800b0bc:	0800c20a 	.word	0x0800c20a

0800b0c0 <__multiply>:
 800b0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c4:	4614      	mov	r4, r2
 800b0c6:	690a      	ldr	r2, [r1, #16]
 800b0c8:	6923      	ldr	r3, [r4, #16]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	bfa8      	it	ge
 800b0ce:	4623      	movge	r3, r4
 800b0d0:	460f      	mov	r7, r1
 800b0d2:	bfa4      	itt	ge
 800b0d4:	460c      	movge	r4, r1
 800b0d6:	461f      	movge	r7, r3
 800b0d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b0dc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b0e0:	68a3      	ldr	r3, [r4, #8]
 800b0e2:	6861      	ldr	r1, [r4, #4]
 800b0e4:	eb0a 0609 	add.w	r6, sl, r9
 800b0e8:	42b3      	cmp	r3, r6
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	bfb8      	it	lt
 800b0ee:	3101      	addlt	r1, #1
 800b0f0:	f7ff fedc 	bl	800aeac <_Balloc>
 800b0f4:	b930      	cbnz	r0, 800b104 <__multiply+0x44>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	4b44      	ldr	r3, [pc, #272]	@ (800b20c <__multiply+0x14c>)
 800b0fa:	4845      	ldr	r0, [pc, #276]	@ (800b210 <__multiply+0x150>)
 800b0fc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b100:	f000 fb36 	bl	800b770 <__assert_func>
 800b104:	f100 0514 	add.w	r5, r0, #20
 800b108:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b10c:	462b      	mov	r3, r5
 800b10e:	2200      	movs	r2, #0
 800b110:	4543      	cmp	r3, r8
 800b112:	d321      	bcc.n	800b158 <__multiply+0x98>
 800b114:	f107 0114 	add.w	r1, r7, #20
 800b118:	f104 0214 	add.w	r2, r4, #20
 800b11c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b120:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b124:	9302      	str	r3, [sp, #8]
 800b126:	1b13      	subs	r3, r2, r4
 800b128:	3b15      	subs	r3, #21
 800b12a:	f023 0303 	bic.w	r3, r3, #3
 800b12e:	3304      	adds	r3, #4
 800b130:	f104 0715 	add.w	r7, r4, #21
 800b134:	42ba      	cmp	r2, r7
 800b136:	bf38      	it	cc
 800b138:	2304      	movcc	r3, #4
 800b13a:	9301      	str	r3, [sp, #4]
 800b13c:	9b02      	ldr	r3, [sp, #8]
 800b13e:	9103      	str	r1, [sp, #12]
 800b140:	428b      	cmp	r3, r1
 800b142:	d80c      	bhi.n	800b15e <__multiply+0x9e>
 800b144:	2e00      	cmp	r6, #0
 800b146:	dd03      	ble.n	800b150 <__multiply+0x90>
 800b148:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d05a      	beq.n	800b206 <__multiply+0x146>
 800b150:	6106      	str	r6, [r0, #16]
 800b152:	b005      	add	sp, #20
 800b154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b158:	f843 2b04 	str.w	r2, [r3], #4
 800b15c:	e7d8      	b.n	800b110 <__multiply+0x50>
 800b15e:	f8b1 a000 	ldrh.w	sl, [r1]
 800b162:	f1ba 0f00 	cmp.w	sl, #0
 800b166:	d023      	beq.n	800b1b0 <__multiply+0xf0>
 800b168:	f104 0e14 	add.w	lr, r4, #20
 800b16c:	46a9      	mov	r9, r5
 800b16e:	f04f 0c00 	mov.w	ip, #0
 800b172:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b176:	f8d9 3000 	ldr.w	r3, [r9]
 800b17a:	fa1f fb87 	uxth.w	fp, r7
 800b17e:	b29b      	uxth	r3, r3
 800b180:	fb0a 330b 	mla	r3, sl, fp, r3
 800b184:	4463      	add	r3, ip
 800b186:	f8d9 c000 	ldr.w	ip, [r9]
 800b18a:	0c3f      	lsrs	r7, r7, #16
 800b18c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b190:	fb0a c707 	mla	r7, sl, r7, ip
 800b194:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b198:	b29b      	uxth	r3, r3
 800b19a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b19e:	4572      	cmp	r2, lr
 800b1a0:	f849 3b04 	str.w	r3, [r9], #4
 800b1a4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b1a8:	d8e3      	bhi.n	800b172 <__multiply+0xb2>
 800b1aa:	9b01      	ldr	r3, [sp, #4]
 800b1ac:	f845 c003 	str.w	ip, [r5, r3]
 800b1b0:	9b03      	ldr	r3, [sp, #12]
 800b1b2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b1b6:	3104      	adds	r1, #4
 800b1b8:	f1b9 0f00 	cmp.w	r9, #0
 800b1bc:	d021      	beq.n	800b202 <__multiply+0x142>
 800b1be:	682b      	ldr	r3, [r5, #0]
 800b1c0:	f104 0c14 	add.w	ip, r4, #20
 800b1c4:	46ae      	mov	lr, r5
 800b1c6:	f04f 0a00 	mov.w	sl, #0
 800b1ca:	f8bc b000 	ldrh.w	fp, [ip]
 800b1ce:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b1d2:	fb09 770b 	mla	r7, r9, fp, r7
 800b1d6:	4457      	add	r7, sl
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b1de:	f84e 3b04 	str.w	r3, [lr], #4
 800b1e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b1e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b1ea:	f8be 3000 	ldrh.w	r3, [lr]
 800b1ee:	fb09 330a 	mla	r3, r9, sl, r3
 800b1f2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b1f6:	4562      	cmp	r2, ip
 800b1f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b1fc:	d8e5      	bhi.n	800b1ca <__multiply+0x10a>
 800b1fe:	9f01      	ldr	r7, [sp, #4]
 800b200:	51eb      	str	r3, [r5, r7]
 800b202:	3504      	adds	r5, #4
 800b204:	e79a      	b.n	800b13c <__multiply+0x7c>
 800b206:	3e01      	subs	r6, #1
 800b208:	e79c      	b.n	800b144 <__multiply+0x84>
 800b20a:	bf00      	nop
 800b20c:	0800c1e8 	.word	0x0800c1e8
 800b210:	0800c20a 	.word	0x0800c20a

0800b214 <__pow5mult>:
 800b214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b218:	4615      	mov	r5, r2
 800b21a:	f012 0203 	ands.w	r2, r2, #3
 800b21e:	4607      	mov	r7, r0
 800b220:	460e      	mov	r6, r1
 800b222:	d007      	beq.n	800b234 <__pow5mult+0x20>
 800b224:	4c25      	ldr	r4, [pc, #148]	@ (800b2bc <__pow5mult+0xa8>)
 800b226:	3a01      	subs	r2, #1
 800b228:	2300      	movs	r3, #0
 800b22a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b22e:	f7ff fe9f 	bl	800af70 <__multadd>
 800b232:	4606      	mov	r6, r0
 800b234:	10ad      	asrs	r5, r5, #2
 800b236:	d03d      	beq.n	800b2b4 <__pow5mult+0xa0>
 800b238:	69fc      	ldr	r4, [r7, #28]
 800b23a:	b97c      	cbnz	r4, 800b25c <__pow5mult+0x48>
 800b23c:	2010      	movs	r0, #16
 800b23e:	f7ff fcd7 	bl	800abf0 <malloc>
 800b242:	4602      	mov	r2, r0
 800b244:	61f8      	str	r0, [r7, #28]
 800b246:	b928      	cbnz	r0, 800b254 <__pow5mult+0x40>
 800b248:	4b1d      	ldr	r3, [pc, #116]	@ (800b2c0 <__pow5mult+0xac>)
 800b24a:	481e      	ldr	r0, [pc, #120]	@ (800b2c4 <__pow5mult+0xb0>)
 800b24c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b250:	f000 fa8e 	bl	800b770 <__assert_func>
 800b254:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b258:	6004      	str	r4, [r0, #0]
 800b25a:	60c4      	str	r4, [r0, #12]
 800b25c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b260:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b264:	b94c      	cbnz	r4, 800b27a <__pow5mult+0x66>
 800b266:	f240 2171 	movw	r1, #625	@ 0x271
 800b26a:	4638      	mov	r0, r7
 800b26c:	f7ff ff12 	bl	800b094 <__i2b>
 800b270:	2300      	movs	r3, #0
 800b272:	f8c8 0008 	str.w	r0, [r8, #8]
 800b276:	4604      	mov	r4, r0
 800b278:	6003      	str	r3, [r0, #0]
 800b27a:	f04f 0900 	mov.w	r9, #0
 800b27e:	07eb      	lsls	r3, r5, #31
 800b280:	d50a      	bpl.n	800b298 <__pow5mult+0x84>
 800b282:	4631      	mov	r1, r6
 800b284:	4622      	mov	r2, r4
 800b286:	4638      	mov	r0, r7
 800b288:	f7ff ff1a 	bl	800b0c0 <__multiply>
 800b28c:	4631      	mov	r1, r6
 800b28e:	4680      	mov	r8, r0
 800b290:	4638      	mov	r0, r7
 800b292:	f7ff fe4b 	bl	800af2c <_Bfree>
 800b296:	4646      	mov	r6, r8
 800b298:	106d      	asrs	r5, r5, #1
 800b29a:	d00b      	beq.n	800b2b4 <__pow5mult+0xa0>
 800b29c:	6820      	ldr	r0, [r4, #0]
 800b29e:	b938      	cbnz	r0, 800b2b0 <__pow5mult+0x9c>
 800b2a0:	4622      	mov	r2, r4
 800b2a2:	4621      	mov	r1, r4
 800b2a4:	4638      	mov	r0, r7
 800b2a6:	f7ff ff0b 	bl	800b0c0 <__multiply>
 800b2aa:	6020      	str	r0, [r4, #0]
 800b2ac:	f8c0 9000 	str.w	r9, [r0]
 800b2b0:	4604      	mov	r4, r0
 800b2b2:	e7e4      	b.n	800b27e <__pow5mult+0x6a>
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2ba:	bf00      	nop
 800b2bc:	0800c264 	.word	0x0800c264
 800b2c0:	0800c179 	.word	0x0800c179
 800b2c4:	0800c20a 	.word	0x0800c20a

0800b2c8 <__lshift>:
 800b2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2cc:	460c      	mov	r4, r1
 800b2ce:	6849      	ldr	r1, [r1, #4]
 800b2d0:	6923      	ldr	r3, [r4, #16]
 800b2d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b2d6:	68a3      	ldr	r3, [r4, #8]
 800b2d8:	4607      	mov	r7, r0
 800b2da:	4691      	mov	r9, r2
 800b2dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b2e0:	f108 0601 	add.w	r6, r8, #1
 800b2e4:	42b3      	cmp	r3, r6
 800b2e6:	db0b      	blt.n	800b300 <__lshift+0x38>
 800b2e8:	4638      	mov	r0, r7
 800b2ea:	f7ff fddf 	bl	800aeac <_Balloc>
 800b2ee:	4605      	mov	r5, r0
 800b2f0:	b948      	cbnz	r0, 800b306 <__lshift+0x3e>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	4b28      	ldr	r3, [pc, #160]	@ (800b398 <__lshift+0xd0>)
 800b2f6:	4829      	ldr	r0, [pc, #164]	@ (800b39c <__lshift+0xd4>)
 800b2f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b2fc:	f000 fa38 	bl	800b770 <__assert_func>
 800b300:	3101      	adds	r1, #1
 800b302:	005b      	lsls	r3, r3, #1
 800b304:	e7ee      	b.n	800b2e4 <__lshift+0x1c>
 800b306:	2300      	movs	r3, #0
 800b308:	f100 0114 	add.w	r1, r0, #20
 800b30c:	f100 0210 	add.w	r2, r0, #16
 800b310:	4618      	mov	r0, r3
 800b312:	4553      	cmp	r3, sl
 800b314:	db33      	blt.n	800b37e <__lshift+0xb6>
 800b316:	6920      	ldr	r0, [r4, #16]
 800b318:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b31c:	f104 0314 	add.w	r3, r4, #20
 800b320:	f019 091f 	ands.w	r9, r9, #31
 800b324:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b328:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b32c:	d02b      	beq.n	800b386 <__lshift+0xbe>
 800b32e:	f1c9 0e20 	rsb	lr, r9, #32
 800b332:	468a      	mov	sl, r1
 800b334:	2200      	movs	r2, #0
 800b336:	6818      	ldr	r0, [r3, #0]
 800b338:	fa00 f009 	lsl.w	r0, r0, r9
 800b33c:	4310      	orrs	r0, r2
 800b33e:	f84a 0b04 	str.w	r0, [sl], #4
 800b342:	f853 2b04 	ldr.w	r2, [r3], #4
 800b346:	459c      	cmp	ip, r3
 800b348:	fa22 f20e 	lsr.w	r2, r2, lr
 800b34c:	d8f3      	bhi.n	800b336 <__lshift+0x6e>
 800b34e:	ebac 0304 	sub.w	r3, ip, r4
 800b352:	3b15      	subs	r3, #21
 800b354:	f023 0303 	bic.w	r3, r3, #3
 800b358:	3304      	adds	r3, #4
 800b35a:	f104 0015 	add.w	r0, r4, #21
 800b35e:	4584      	cmp	ip, r0
 800b360:	bf38      	it	cc
 800b362:	2304      	movcc	r3, #4
 800b364:	50ca      	str	r2, [r1, r3]
 800b366:	b10a      	cbz	r2, 800b36c <__lshift+0xa4>
 800b368:	f108 0602 	add.w	r6, r8, #2
 800b36c:	3e01      	subs	r6, #1
 800b36e:	4638      	mov	r0, r7
 800b370:	612e      	str	r6, [r5, #16]
 800b372:	4621      	mov	r1, r4
 800b374:	f7ff fdda 	bl	800af2c <_Bfree>
 800b378:	4628      	mov	r0, r5
 800b37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b37e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b382:	3301      	adds	r3, #1
 800b384:	e7c5      	b.n	800b312 <__lshift+0x4a>
 800b386:	3904      	subs	r1, #4
 800b388:	f853 2b04 	ldr.w	r2, [r3], #4
 800b38c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b390:	459c      	cmp	ip, r3
 800b392:	d8f9      	bhi.n	800b388 <__lshift+0xc0>
 800b394:	e7ea      	b.n	800b36c <__lshift+0xa4>
 800b396:	bf00      	nop
 800b398:	0800c1e8 	.word	0x0800c1e8
 800b39c:	0800c20a 	.word	0x0800c20a

0800b3a0 <__mcmp>:
 800b3a0:	690a      	ldr	r2, [r1, #16]
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	6900      	ldr	r0, [r0, #16]
 800b3a6:	1a80      	subs	r0, r0, r2
 800b3a8:	b530      	push	{r4, r5, lr}
 800b3aa:	d10e      	bne.n	800b3ca <__mcmp+0x2a>
 800b3ac:	3314      	adds	r3, #20
 800b3ae:	3114      	adds	r1, #20
 800b3b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b3b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b3b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b3bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b3c0:	4295      	cmp	r5, r2
 800b3c2:	d003      	beq.n	800b3cc <__mcmp+0x2c>
 800b3c4:	d205      	bcs.n	800b3d2 <__mcmp+0x32>
 800b3c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b3ca:	bd30      	pop	{r4, r5, pc}
 800b3cc:	42a3      	cmp	r3, r4
 800b3ce:	d3f3      	bcc.n	800b3b8 <__mcmp+0x18>
 800b3d0:	e7fb      	b.n	800b3ca <__mcmp+0x2a>
 800b3d2:	2001      	movs	r0, #1
 800b3d4:	e7f9      	b.n	800b3ca <__mcmp+0x2a>
	...

0800b3d8 <__mdiff>:
 800b3d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3dc:	4689      	mov	r9, r1
 800b3de:	4606      	mov	r6, r0
 800b3e0:	4611      	mov	r1, r2
 800b3e2:	4648      	mov	r0, r9
 800b3e4:	4614      	mov	r4, r2
 800b3e6:	f7ff ffdb 	bl	800b3a0 <__mcmp>
 800b3ea:	1e05      	subs	r5, r0, #0
 800b3ec:	d112      	bne.n	800b414 <__mdiff+0x3c>
 800b3ee:	4629      	mov	r1, r5
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	f7ff fd5b 	bl	800aeac <_Balloc>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	b928      	cbnz	r0, 800b406 <__mdiff+0x2e>
 800b3fa:	4b3e      	ldr	r3, [pc, #248]	@ (800b4f4 <__mdiff+0x11c>)
 800b3fc:	f240 2137 	movw	r1, #567	@ 0x237
 800b400:	483d      	ldr	r0, [pc, #244]	@ (800b4f8 <__mdiff+0x120>)
 800b402:	f000 f9b5 	bl	800b770 <__assert_func>
 800b406:	2301      	movs	r3, #1
 800b408:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b40c:	4610      	mov	r0, r2
 800b40e:	b003      	add	sp, #12
 800b410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b414:	bfbc      	itt	lt
 800b416:	464b      	movlt	r3, r9
 800b418:	46a1      	movlt	r9, r4
 800b41a:	4630      	mov	r0, r6
 800b41c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b420:	bfba      	itte	lt
 800b422:	461c      	movlt	r4, r3
 800b424:	2501      	movlt	r5, #1
 800b426:	2500      	movge	r5, #0
 800b428:	f7ff fd40 	bl	800aeac <_Balloc>
 800b42c:	4602      	mov	r2, r0
 800b42e:	b918      	cbnz	r0, 800b438 <__mdiff+0x60>
 800b430:	4b30      	ldr	r3, [pc, #192]	@ (800b4f4 <__mdiff+0x11c>)
 800b432:	f240 2145 	movw	r1, #581	@ 0x245
 800b436:	e7e3      	b.n	800b400 <__mdiff+0x28>
 800b438:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b43c:	6926      	ldr	r6, [r4, #16]
 800b43e:	60c5      	str	r5, [r0, #12]
 800b440:	f109 0310 	add.w	r3, r9, #16
 800b444:	f109 0514 	add.w	r5, r9, #20
 800b448:	f104 0e14 	add.w	lr, r4, #20
 800b44c:	f100 0b14 	add.w	fp, r0, #20
 800b450:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b454:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b458:	9301      	str	r3, [sp, #4]
 800b45a:	46d9      	mov	r9, fp
 800b45c:	f04f 0c00 	mov.w	ip, #0
 800b460:	9b01      	ldr	r3, [sp, #4]
 800b462:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b466:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b46a:	9301      	str	r3, [sp, #4]
 800b46c:	b281      	uxth	r1, r0
 800b46e:	fa1f f38a 	uxth.w	r3, sl
 800b472:	1a5b      	subs	r3, r3, r1
 800b474:	0c00      	lsrs	r0, r0, #16
 800b476:	4463      	add	r3, ip
 800b478:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b47c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b480:	b29b      	uxth	r3, r3
 800b482:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b486:	4576      	cmp	r6, lr
 800b488:	f849 3b04 	str.w	r3, [r9], #4
 800b48c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b490:	d8e6      	bhi.n	800b460 <__mdiff+0x88>
 800b492:	1b33      	subs	r3, r6, r4
 800b494:	3b15      	subs	r3, #21
 800b496:	f023 0303 	bic.w	r3, r3, #3
 800b49a:	3415      	adds	r4, #21
 800b49c:	3304      	adds	r3, #4
 800b49e:	42a6      	cmp	r6, r4
 800b4a0:	bf38      	it	cc
 800b4a2:	2304      	movcc	r3, #4
 800b4a4:	441d      	add	r5, r3
 800b4a6:	445b      	add	r3, fp
 800b4a8:	461e      	mov	r6, r3
 800b4aa:	462c      	mov	r4, r5
 800b4ac:	4544      	cmp	r4, r8
 800b4ae:	d30e      	bcc.n	800b4ce <__mdiff+0xf6>
 800b4b0:	f108 0103 	add.w	r1, r8, #3
 800b4b4:	1b49      	subs	r1, r1, r5
 800b4b6:	f021 0103 	bic.w	r1, r1, #3
 800b4ba:	3d03      	subs	r5, #3
 800b4bc:	45a8      	cmp	r8, r5
 800b4be:	bf38      	it	cc
 800b4c0:	2100      	movcc	r1, #0
 800b4c2:	440b      	add	r3, r1
 800b4c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b4c8:	b191      	cbz	r1, 800b4f0 <__mdiff+0x118>
 800b4ca:	6117      	str	r7, [r2, #16]
 800b4cc:	e79e      	b.n	800b40c <__mdiff+0x34>
 800b4ce:	f854 1b04 	ldr.w	r1, [r4], #4
 800b4d2:	46e6      	mov	lr, ip
 800b4d4:	0c08      	lsrs	r0, r1, #16
 800b4d6:	fa1c fc81 	uxtah	ip, ip, r1
 800b4da:	4471      	add	r1, lr
 800b4dc:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b4e0:	b289      	uxth	r1, r1
 800b4e2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b4e6:	f846 1b04 	str.w	r1, [r6], #4
 800b4ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b4ee:	e7dd      	b.n	800b4ac <__mdiff+0xd4>
 800b4f0:	3f01      	subs	r7, #1
 800b4f2:	e7e7      	b.n	800b4c4 <__mdiff+0xec>
 800b4f4:	0800c1e8 	.word	0x0800c1e8
 800b4f8:	0800c20a 	.word	0x0800c20a

0800b4fc <__d2b>:
 800b4fc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b500:	2101      	movs	r1, #1
 800b502:	9e08      	ldr	r6, [sp, #32]
 800b504:	4690      	mov	r8, r2
 800b506:	4699      	mov	r9, r3
 800b508:	f7ff fcd0 	bl	800aeac <_Balloc>
 800b50c:	4604      	mov	r4, r0
 800b50e:	b930      	cbnz	r0, 800b51e <__d2b+0x22>
 800b510:	4602      	mov	r2, r0
 800b512:	4b24      	ldr	r3, [pc, #144]	@ (800b5a4 <__d2b+0xa8>)
 800b514:	4824      	ldr	r0, [pc, #144]	@ (800b5a8 <__d2b+0xac>)
 800b516:	f240 310f 	movw	r1, #783	@ 0x30f
 800b51a:	f000 f929 	bl	800b770 <__assert_func>
 800b51e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b522:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b526:	b10d      	cbz	r5, 800b52c <__d2b+0x30>
 800b528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b52c:	9301      	str	r3, [sp, #4]
 800b52e:	f1b8 0300 	subs.w	r3, r8, #0
 800b532:	d024      	beq.n	800b57e <__d2b+0x82>
 800b534:	4668      	mov	r0, sp
 800b536:	9300      	str	r3, [sp, #0]
 800b538:	f7ff fd7f 	bl	800b03a <__lo0bits>
 800b53c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b540:	b1d8      	cbz	r0, 800b57a <__d2b+0x7e>
 800b542:	f1c0 0320 	rsb	r3, r0, #32
 800b546:	fa02 f303 	lsl.w	r3, r2, r3
 800b54a:	430b      	orrs	r3, r1
 800b54c:	40c2      	lsrs	r2, r0
 800b54e:	6163      	str	r3, [r4, #20]
 800b550:	9201      	str	r2, [sp, #4]
 800b552:	9b01      	ldr	r3, [sp, #4]
 800b554:	61a3      	str	r3, [r4, #24]
 800b556:	2b00      	cmp	r3, #0
 800b558:	bf0c      	ite	eq
 800b55a:	2201      	moveq	r2, #1
 800b55c:	2202      	movne	r2, #2
 800b55e:	6122      	str	r2, [r4, #16]
 800b560:	b1ad      	cbz	r5, 800b58e <__d2b+0x92>
 800b562:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b566:	4405      	add	r5, r0
 800b568:	6035      	str	r5, [r6, #0]
 800b56a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b56e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b570:	6018      	str	r0, [r3, #0]
 800b572:	4620      	mov	r0, r4
 800b574:	b002      	add	sp, #8
 800b576:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b57a:	6161      	str	r1, [r4, #20]
 800b57c:	e7e9      	b.n	800b552 <__d2b+0x56>
 800b57e:	a801      	add	r0, sp, #4
 800b580:	f7ff fd5b 	bl	800b03a <__lo0bits>
 800b584:	9b01      	ldr	r3, [sp, #4]
 800b586:	6163      	str	r3, [r4, #20]
 800b588:	3020      	adds	r0, #32
 800b58a:	2201      	movs	r2, #1
 800b58c:	e7e7      	b.n	800b55e <__d2b+0x62>
 800b58e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b592:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b596:	6030      	str	r0, [r6, #0]
 800b598:	6918      	ldr	r0, [r3, #16]
 800b59a:	f7ff fd2f 	bl	800affc <__hi0bits>
 800b59e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b5a2:	e7e4      	b.n	800b56e <__d2b+0x72>
 800b5a4:	0800c1e8 	.word	0x0800c1e8
 800b5a8:	0800c20a 	.word	0x0800c20a

0800b5ac <__sread>:
 800b5ac:	b510      	push	{r4, lr}
 800b5ae:	460c      	mov	r4, r1
 800b5b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5b4:	f000 f8a8 	bl	800b708 <_read_r>
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	bfab      	itete	ge
 800b5bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b5be:	89a3      	ldrhlt	r3, [r4, #12]
 800b5c0:	181b      	addge	r3, r3, r0
 800b5c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b5c6:	bfac      	ite	ge
 800b5c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b5ca:	81a3      	strhlt	r3, [r4, #12]
 800b5cc:	bd10      	pop	{r4, pc}

0800b5ce <__swrite>:
 800b5ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5d2:	461f      	mov	r7, r3
 800b5d4:	898b      	ldrh	r3, [r1, #12]
 800b5d6:	05db      	lsls	r3, r3, #23
 800b5d8:	4605      	mov	r5, r0
 800b5da:	460c      	mov	r4, r1
 800b5dc:	4616      	mov	r6, r2
 800b5de:	d505      	bpl.n	800b5ec <__swrite+0x1e>
 800b5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5e4:	2302      	movs	r3, #2
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f000 f87c 	bl	800b6e4 <_lseek_r>
 800b5ec:	89a3      	ldrh	r3, [r4, #12]
 800b5ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b5f6:	81a3      	strh	r3, [r4, #12]
 800b5f8:	4632      	mov	r2, r6
 800b5fa:	463b      	mov	r3, r7
 800b5fc:	4628      	mov	r0, r5
 800b5fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b602:	f000 b8a3 	b.w	800b74c <_write_r>

0800b606 <__sseek>:
 800b606:	b510      	push	{r4, lr}
 800b608:	460c      	mov	r4, r1
 800b60a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b60e:	f000 f869 	bl	800b6e4 <_lseek_r>
 800b612:	1c43      	adds	r3, r0, #1
 800b614:	89a3      	ldrh	r3, [r4, #12]
 800b616:	bf15      	itete	ne
 800b618:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b61a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b61e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b622:	81a3      	strheq	r3, [r4, #12]
 800b624:	bf18      	it	ne
 800b626:	81a3      	strhne	r3, [r4, #12]
 800b628:	bd10      	pop	{r4, pc}

0800b62a <__sclose>:
 800b62a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b62e:	f000 b849 	b.w	800b6c4 <_close_r>

0800b632 <_realloc_r>:
 800b632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b636:	4680      	mov	r8, r0
 800b638:	4615      	mov	r5, r2
 800b63a:	460c      	mov	r4, r1
 800b63c:	b921      	cbnz	r1, 800b648 <_realloc_r+0x16>
 800b63e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b642:	4611      	mov	r1, r2
 800b644:	f7ff bafe 	b.w	800ac44 <_malloc_r>
 800b648:	b92a      	cbnz	r2, 800b656 <_realloc_r+0x24>
 800b64a:	f000 f8c3 	bl	800b7d4 <_free_r>
 800b64e:	2400      	movs	r4, #0
 800b650:	4620      	mov	r0, r4
 800b652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b656:	f000 f919 	bl	800b88c <_malloc_usable_size_r>
 800b65a:	4285      	cmp	r5, r0
 800b65c:	4606      	mov	r6, r0
 800b65e:	d802      	bhi.n	800b666 <_realloc_r+0x34>
 800b660:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b664:	d8f4      	bhi.n	800b650 <_realloc_r+0x1e>
 800b666:	4629      	mov	r1, r5
 800b668:	4640      	mov	r0, r8
 800b66a:	f7ff faeb 	bl	800ac44 <_malloc_r>
 800b66e:	4607      	mov	r7, r0
 800b670:	2800      	cmp	r0, #0
 800b672:	d0ec      	beq.n	800b64e <_realloc_r+0x1c>
 800b674:	42b5      	cmp	r5, r6
 800b676:	462a      	mov	r2, r5
 800b678:	4621      	mov	r1, r4
 800b67a:	bf28      	it	cs
 800b67c:	4632      	movcs	r2, r6
 800b67e:	f7fe fb00 	bl	8009c82 <memcpy>
 800b682:	4621      	mov	r1, r4
 800b684:	4640      	mov	r0, r8
 800b686:	f000 f8a5 	bl	800b7d4 <_free_r>
 800b68a:	463c      	mov	r4, r7
 800b68c:	e7e0      	b.n	800b650 <_realloc_r+0x1e>

0800b68e <memmove>:
 800b68e:	4288      	cmp	r0, r1
 800b690:	b510      	push	{r4, lr}
 800b692:	eb01 0402 	add.w	r4, r1, r2
 800b696:	d902      	bls.n	800b69e <memmove+0x10>
 800b698:	4284      	cmp	r4, r0
 800b69a:	4623      	mov	r3, r4
 800b69c:	d807      	bhi.n	800b6ae <memmove+0x20>
 800b69e:	1e43      	subs	r3, r0, #1
 800b6a0:	42a1      	cmp	r1, r4
 800b6a2:	d008      	beq.n	800b6b6 <memmove+0x28>
 800b6a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6ac:	e7f8      	b.n	800b6a0 <memmove+0x12>
 800b6ae:	4402      	add	r2, r0
 800b6b0:	4601      	mov	r1, r0
 800b6b2:	428a      	cmp	r2, r1
 800b6b4:	d100      	bne.n	800b6b8 <memmove+0x2a>
 800b6b6:	bd10      	pop	{r4, pc}
 800b6b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6bc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6c0:	e7f7      	b.n	800b6b2 <memmove+0x24>
	...

0800b6c4 <_close_r>:
 800b6c4:	b538      	push	{r3, r4, r5, lr}
 800b6c6:	4d06      	ldr	r5, [pc, #24]	@ (800b6e0 <_close_r+0x1c>)
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	4604      	mov	r4, r0
 800b6cc:	4608      	mov	r0, r1
 800b6ce:	602b      	str	r3, [r5, #0]
 800b6d0:	f7f6 faed 	bl	8001cae <_close>
 800b6d4:	1c43      	adds	r3, r0, #1
 800b6d6:	d102      	bne.n	800b6de <_close_r+0x1a>
 800b6d8:	682b      	ldr	r3, [r5, #0]
 800b6da:	b103      	cbz	r3, 800b6de <_close_r+0x1a>
 800b6dc:	6023      	str	r3, [r4, #0]
 800b6de:	bd38      	pop	{r3, r4, r5, pc}
 800b6e0:	20000b24 	.word	0x20000b24

0800b6e4 <_lseek_r>:
 800b6e4:	b538      	push	{r3, r4, r5, lr}
 800b6e6:	4d07      	ldr	r5, [pc, #28]	@ (800b704 <_lseek_r+0x20>)
 800b6e8:	4604      	mov	r4, r0
 800b6ea:	4608      	mov	r0, r1
 800b6ec:	4611      	mov	r1, r2
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	602a      	str	r2, [r5, #0]
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	f7f6 faff 	bl	8001cf6 <_lseek>
 800b6f8:	1c43      	adds	r3, r0, #1
 800b6fa:	d102      	bne.n	800b702 <_lseek_r+0x1e>
 800b6fc:	682b      	ldr	r3, [r5, #0]
 800b6fe:	b103      	cbz	r3, 800b702 <_lseek_r+0x1e>
 800b700:	6023      	str	r3, [r4, #0]
 800b702:	bd38      	pop	{r3, r4, r5, pc}
 800b704:	20000b24 	.word	0x20000b24

0800b708 <_read_r>:
 800b708:	b538      	push	{r3, r4, r5, lr}
 800b70a:	4d07      	ldr	r5, [pc, #28]	@ (800b728 <_read_r+0x20>)
 800b70c:	4604      	mov	r4, r0
 800b70e:	4608      	mov	r0, r1
 800b710:	4611      	mov	r1, r2
 800b712:	2200      	movs	r2, #0
 800b714:	602a      	str	r2, [r5, #0]
 800b716:	461a      	mov	r2, r3
 800b718:	f7f6 fa90 	bl	8001c3c <_read>
 800b71c:	1c43      	adds	r3, r0, #1
 800b71e:	d102      	bne.n	800b726 <_read_r+0x1e>
 800b720:	682b      	ldr	r3, [r5, #0]
 800b722:	b103      	cbz	r3, 800b726 <_read_r+0x1e>
 800b724:	6023      	str	r3, [r4, #0]
 800b726:	bd38      	pop	{r3, r4, r5, pc}
 800b728:	20000b24 	.word	0x20000b24

0800b72c <_sbrk_r>:
 800b72c:	b538      	push	{r3, r4, r5, lr}
 800b72e:	4d06      	ldr	r5, [pc, #24]	@ (800b748 <_sbrk_r+0x1c>)
 800b730:	2300      	movs	r3, #0
 800b732:	4604      	mov	r4, r0
 800b734:	4608      	mov	r0, r1
 800b736:	602b      	str	r3, [r5, #0]
 800b738:	f7f6 faea 	bl	8001d10 <_sbrk>
 800b73c:	1c43      	adds	r3, r0, #1
 800b73e:	d102      	bne.n	800b746 <_sbrk_r+0x1a>
 800b740:	682b      	ldr	r3, [r5, #0]
 800b742:	b103      	cbz	r3, 800b746 <_sbrk_r+0x1a>
 800b744:	6023      	str	r3, [r4, #0]
 800b746:	bd38      	pop	{r3, r4, r5, pc}
 800b748:	20000b24 	.word	0x20000b24

0800b74c <_write_r>:
 800b74c:	b538      	push	{r3, r4, r5, lr}
 800b74e:	4d07      	ldr	r5, [pc, #28]	@ (800b76c <_write_r+0x20>)
 800b750:	4604      	mov	r4, r0
 800b752:	4608      	mov	r0, r1
 800b754:	4611      	mov	r1, r2
 800b756:	2200      	movs	r2, #0
 800b758:	602a      	str	r2, [r5, #0]
 800b75a:	461a      	mov	r2, r3
 800b75c:	f7f6 fa8b 	bl	8001c76 <_write>
 800b760:	1c43      	adds	r3, r0, #1
 800b762:	d102      	bne.n	800b76a <_write_r+0x1e>
 800b764:	682b      	ldr	r3, [r5, #0]
 800b766:	b103      	cbz	r3, 800b76a <_write_r+0x1e>
 800b768:	6023      	str	r3, [r4, #0]
 800b76a:	bd38      	pop	{r3, r4, r5, pc}
 800b76c:	20000b24 	.word	0x20000b24

0800b770 <__assert_func>:
 800b770:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b772:	4614      	mov	r4, r2
 800b774:	461a      	mov	r2, r3
 800b776:	4b09      	ldr	r3, [pc, #36]	@ (800b79c <__assert_func+0x2c>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4605      	mov	r5, r0
 800b77c:	68d8      	ldr	r0, [r3, #12]
 800b77e:	b954      	cbnz	r4, 800b796 <__assert_func+0x26>
 800b780:	4b07      	ldr	r3, [pc, #28]	@ (800b7a0 <__assert_func+0x30>)
 800b782:	461c      	mov	r4, r3
 800b784:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b788:	9100      	str	r1, [sp, #0]
 800b78a:	462b      	mov	r3, r5
 800b78c:	4905      	ldr	r1, [pc, #20]	@ (800b7a4 <__assert_func+0x34>)
 800b78e:	f000 f885 	bl	800b89c <fiprintf>
 800b792:	f000 f8a2 	bl	800b8da <abort>
 800b796:	4b04      	ldr	r3, [pc, #16]	@ (800b7a8 <__assert_func+0x38>)
 800b798:	e7f4      	b.n	800b784 <__assert_func+0x14>
 800b79a:	bf00      	nop
 800b79c:	20000030 	.word	0x20000030
 800b7a0:	0800c4a6 	.word	0x0800c4a6
 800b7a4:	0800c478 	.word	0x0800c478
 800b7a8:	0800c46b 	.word	0x0800c46b

0800b7ac <_calloc_r>:
 800b7ac:	b570      	push	{r4, r5, r6, lr}
 800b7ae:	fba1 5402 	umull	r5, r4, r1, r2
 800b7b2:	b93c      	cbnz	r4, 800b7c4 <_calloc_r+0x18>
 800b7b4:	4629      	mov	r1, r5
 800b7b6:	f7ff fa45 	bl	800ac44 <_malloc_r>
 800b7ba:	4606      	mov	r6, r0
 800b7bc:	b928      	cbnz	r0, 800b7ca <_calloc_r+0x1e>
 800b7be:	2600      	movs	r6, #0
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	bd70      	pop	{r4, r5, r6, pc}
 800b7c4:	220c      	movs	r2, #12
 800b7c6:	6002      	str	r2, [r0, #0]
 800b7c8:	e7f9      	b.n	800b7be <_calloc_r+0x12>
 800b7ca:	462a      	mov	r2, r5
 800b7cc:	4621      	mov	r1, r4
 800b7ce:	f7fe fa1f 	bl	8009c10 <memset>
 800b7d2:	e7f5      	b.n	800b7c0 <_calloc_r+0x14>

0800b7d4 <_free_r>:
 800b7d4:	b538      	push	{r3, r4, r5, lr}
 800b7d6:	4605      	mov	r5, r0
 800b7d8:	2900      	cmp	r1, #0
 800b7da:	d041      	beq.n	800b860 <_free_r+0x8c>
 800b7dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7e0:	1f0c      	subs	r4, r1, #4
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	bfb8      	it	lt
 800b7e6:	18e4      	addlt	r4, r4, r3
 800b7e8:	f7ff fb54 	bl	800ae94 <__malloc_lock>
 800b7ec:	4a1d      	ldr	r2, [pc, #116]	@ (800b864 <_free_r+0x90>)
 800b7ee:	6813      	ldr	r3, [r2, #0]
 800b7f0:	b933      	cbnz	r3, 800b800 <_free_r+0x2c>
 800b7f2:	6063      	str	r3, [r4, #4]
 800b7f4:	6014      	str	r4, [r2, #0]
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7fc:	f7ff bb50 	b.w	800aea0 <__malloc_unlock>
 800b800:	42a3      	cmp	r3, r4
 800b802:	d908      	bls.n	800b816 <_free_r+0x42>
 800b804:	6820      	ldr	r0, [r4, #0]
 800b806:	1821      	adds	r1, r4, r0
 800b808:	428b      	cmp	r3, r1
 800b80a:	bf01      	itttt	eq
 800b80c:	6819      	ldreq	r1, [r3, #0]
 800b80e:	685b      	ldreq	r3, [r3, #4]
 800b810:	1809      	addeq	r1, r1, r0
 800b812:	6021      	streq	r1, [r4, #0]
 800b814:	e7ed      	b.n	800b7f2 <_free_r+0x1e>
 800b816:	461a      	mov	r2, r3
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	b10b      	cbz	r3, 800b820 <_free_r+0x4c>
 800b81c:	42a3      	cmp	r3, r4
 800b81e:	d9fa      	bls.n	800b816 <_free_r+0x42>
 800b820:	6811      	ldr	r1, [r2, #0]
 800b822:	1850      	adds	r0, r2, r1
 800b824:	42a0      	cmp	r0, r4
 800b826:	d10b      	bne.n	800b840 <_free_r+0x6c>
 800b828:	6820      	ldr	r0, [r4, #0]
 800b82a:	4401      	add	r1, r0
 800b82c:	1850      	adds	r0, r2, r1
 800b82e:	4283      	cmp	r3, r0
 800b830:	6011      	str	r1, [r2, #0]
 800b832:	d1e0      	bne.n	800b7f6 <_free_r+0x22>
 800b834:	6818      	ldr	r0, [r3, #0]
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	6053      	str	r3, [r2, #4]
 800b83a:	4408      	add	r0, r1
 800b83c:	6010      	str	r0, [r2, #0]
 800b83e:	e7da      	b.n	800b7f6 <_free_r+0x22>
 800b840:	d902      	bls.n	800b848 <_free_r+0x74>
 800b842:	230c      	movs	r3, #12
 800b844:	602b      	str	r3, [r5, #0]
 800b846:	e7d6      	b.n	800b7f6 <_free_r+0x22>
 800b848:	6820      	ldr	r0, [r4, #0]
 800b84a:	1821      	adds	r1, r4, r0
 800b84c:	428b      	cmp	r3, r1
 800b84e:	bf04      	itt	eq
 800b850:	6819      	ldreq	r1, [r3, #0]
 800b852:	685b      	ldreq	r3, [r3, #4]
 800b854:	6063      	str	r3, [r4, #4]
 800b856:	bf04      	itt	eq
 800b858:	1809      	addeq	r1, r1, r0
 800b85a:	6021      	streq	r1, [r4, #0]
 800b85c:	6054      	str	r4, [r2, #4]
 800b85e:	e7ca      	b.n	800b7f6 <_free_r+0x22>
 800b860:	bd38      	pop	{r3, r4, r5, pc}
 800b862:	bf00      	nop
 800b864:	20000b20 	.word	0x20000b20

0800b868 <__ascii_mbtowc>:
 800b868:	b082      	sub	sp, #8
 800b86a:	b901      	cbnz	r1, 800b86e <__ascii_mbtowc+0x6>
 800b86c:	a901      	add	r1, sp, #4
 800b86e:	b142      	cbz	r2, 800b882 <__ascii_mbtowc+0x1a>
 800b870:	b14b      	cbz	r3, 800b886 <__ascii_mbtowc+0x1e>
 800b872:	7813      	ldrb	r3, [r2, #0]
 800b874:	600b      	str	r3, [r1, #0]
 800b876:	7812      	ldrb	r2, [r2, #0]
 800b878:	1e10      	subs	r0, r2, #0
 800b87a:	bf18      	it	ne
 800b87c:	2001      	movne	r0, #1
 800b87e:	b002      	add	sp, #8
 800b880:	4770      	bx	lr
 800b882:	4610      	mov	r0, r2
 800b884:	e7fb      	b.n	800b87e <__ascii_mbtowc+0x16>
 800b886:	f06f 0001 	mvn.w	r0, #1
 800b88a:	e7f8      	b.n	800b87e <__ascii_mbtowc+0x16>

0800b88c <_malloc_usable_size_r>:
 800b88c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b890:	1f18      	subs	r0, r3, #4
 800b892:	2b00      	cmp	r3, #0
 800b894:	bfbc      	itt	lt
 800b896:	580b      	ldrlt	r3, [r1, r0]
 800b898:	18c0      	addlt	r0, r0, r3
 800b89a:	4770      	bx	lr

0800b89c <fiprintf>:
 800b89c:	b40e      	push	{r1, r2, r3}
 800b89e:	b503      	push	{r0, r1, lr}
 800b8a0:	4601      	mov	r1, r0
 800b8a2:	ab03      	add	r3, sp, #12
 800b8a4:	4805      	ldr	r0, [pc, #20]	@ (800b8bc <fiprintf+0x20>)
 800b8a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8aa:	6800      	ldr	r0, [r0, #0]
 800b8ac:	9301      	str	r3, [sp, #4]
 800b8ae:	f000 f843 	bl	800b938 <_vfiprintf_r>
 800b8b2:	b002      	add	sp, #8
 800b8b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8b8:	b003      	add	sp, #12
 800b8ba:	4770      	bx	lr
 800b8bc:	20000030 	.word	0x20000030

0800b8c0 <__ascii_wctomb>:
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	4608      	mov	r0, r1
 800b8c4:	b141      	cbz	r1, 800b8d8 <__ascii_wctomb+0x18>
 800b8c6:	2aff      	cmp	r2, #255	@ 0xff
 800b8c8:	d904      	bls.n	800b8d4 <__ascii_wctomb+0x14>
 800b8ca:	228a      	movs	r2, #138	@ 0x8a
 800b8cc:	601a      	str	r2, [r3, #0]
 800b8ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b8d2:	4770      	bx	lr
 800b8d4:	700a      	strb	r2, [r1, #0]
 800b8d6:	2001      	movs	r0, #1
 800b8d8:	4770      	bx	lr

0800b8da <abort>:
 800b8da:	b508      	push	{r3, lr}
 800b8dc:	2006      	movs	r0, #6
 800b8de:	f000 fa83 	bl	800bde8 <raise>
 800b8e2:	2001      	movs	r0, #1
 800b8e4:	f7f6 f99f 	bl	8001c26 <_exit>

0800b8e8 <__sfputc_r>:
 800b8e8:	6893      	ldr	r3, [r2, #8]
 800b8ea:	3b01      	subs	r3, #1
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	b410      	push	{r4}
 800b8f0:	6093      	str	r3, [r2, #8]
 800b8f2:	da07      	bge.n	800b904 <__sfputc_r+0x1c>
 800b8f4:	6994      	ldr	r4, [r2, #24]
 800b8f6:	42a3      	cmp	r3, r4
 800b8f8:	db01      	blt.n	800b8fe <__sfputc_r+0x16>
 800b8fa:	290a      	cmp	r1, #10
 800b8fc:	d102      	bne.n	800b904 <__sfputc_r+0x1c>
 800b8fe:	bc10      	pop	{r4}
 800b900:	f000 b932 	b.w	800bb68 <__swbuf_r>
 800b904:	6813      	ldr	r3, [r2, #0]
 800b906:	1c58      	adds	r0, r3, #1
 800b908:	6010      	str	r0, [r2, #0]
 800b90a:	7019      	strb	r1, [r3, #0]
 800b90c:	4608      	mov	r0, r1
 800b90e:	bc10      	pop	{r4}
 800b910:	4770      	bx	lr

0800b912 <__sfputs_r>:
 800b912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b914:	4606      	mov	r6, r0
 800b916:	460f      	mov	r7, r1
 800b918:	4614      	mov	r4, r2
 800b91a:	18d5      	adds	r5, r2, r3
 800b91c:	42ac      	cmp	r4, r5
 800b91e:	d101      	bne.n	800b924 <__sfputs_r+0x12>
 800b920:	2000      	movs	r0, #0
 800b922:	e007      	b.n	800b934 <__sfputs_r+0x22>
 800b924:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b928:	463a      	mov	r2, r7
 800b92a:	4630      	mov	r0, r6
 800b92c:	f7ff ffdc 	bl	800b8e8 <__sfputc_r>
 800b930:	1c43      	adds	r3, r0, #1
 800b932:	d1f3      	bne.n	800b91c <__sfputs_r+0xa>
 800b934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b938 <_vfiprintf_r>:
 800b938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b93c:	460d      	mov	r5, r1
 800b93e:	b09d      	sub	sp, #116	@ 0x74
 800b940:	4614      	mov	r4, r2
 800b942:	4698      	mov	r8, r3
 800b944:	4606      	mov	r6, r0
 800b946:	b118      	cbz	r0, 800b950 <_vfiprintf_r+0x18>
 800b948:	6a03      	ldr	r3, [r0, #32]
 800b94a:	b90b      	cbnz	r3, 800b950 <_vfiprintf_r+0x18>
 800b94c:	f7fe f8f0 	bl	8009b30 <__sinit>
 800b950:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b952:	07d9      	lsls	r1, r3, #31
 800b954:	d405      	bmi.n	800b962 <_vfiprintf_r+0x2a>
 800b956:	89ab      	ldrh	r3, [r5, #12]
 800b958:	059a      	lsls	r2, r3, #22
 800b95a:	d402      	bmi.n	800b962 <_vfiprintf_r+0x2a>
 800b95c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b95e:	f7fe f98e 	bl	8009c7e <__retarget_lock_acquire_recursive>
 800b962:	89ab      	ldrh	r3, [r5, #12]
 800b964:	071b      	lsls	r3, r3, #28
 800b966:	d501      	bpl.n	800b96c <_vfiprintf_r+0x34>
 800b968:	692b      	ldr	r3, [r5, #16]
 800b96a:	b99b      	cbnz	r3, 800b994 <_vfiprintf_r+0x5c>
 800b96c:	4629      	mov	r1, r5
 800b96e:	4630      	mov	r0, r6
 800b970:	f000 f938 	bl	800bbe4 <__swsetup_r>
 800b974:	b170      	cbz	r0, 800b994 <_vfiprintf_r+0x5c>
 800b976:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b978:	07dc      	lsls	r4, r3, #31
 800b97a:	d504      	bpl.n	800b986 <_vfiprintf_r+0x4e>
 800b97c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b980:	b01d      	add	sp, #116	@ 0x74
 800b982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b986:	89ab      	ldrh	r3, [r5, #12]
 800b988:	0598      	lsls	r0, r3, #22
 800b98a:	d4f7      	bmi.n	800b97c <_vfiprintf_r+0x44>
 800b98c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b98e:	f7fe f977 	bl	8009c80 <__retarget_lock_release_recursive>
 800b992:	e7f3      	b.n	800b97c <_vfiprintf_r+0x44>
 800b994:	2300      	movs	r3, #0
 800b996:	9309      	str	r3, [sp, #36]	@ 0x24
 800b998:	2320      	movs	r3, #32
 800b99a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b99e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9a2:	2330      	movs	r3, #48	@ 0x30
 800b9a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bb54 <_vfiprintf_r+0x21c>
 800b9a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b9ac:	f04f 0901 	mov.w	r9, #1
 800b9b0:	4623      	mov	r3, r4
 800b9b2:	469a      	mov	sl, r3
 800b9b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9b8:	b10a      	cbz	r2, 800b9be <_vfiprintf_r+0x86>
 800b9ba:	2a25      	cmp	r2, #37	@ 0x25
 800b9bc:	d1f9      	bne.n	800b9b2 <_vfiprintf_r+0x7a>
 800b9be:	ebba 0b04 	subs.w	fp, sl, r4
 800b9c2:	d00b      	beq.n	800b9dc <_vfiprintf_r+0xa4>
 800b9c4:	465b      	mov	r3, fp
 800b9c6:	4622      	mov	r2, r4
 800b9c8:	4629      	mov	r1, r5
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	f7ff ffa1 	bl	800b912 <__sfputs_r>
 800b9d0:	3001      	adds	r0, #1
 800b9d2:	f000 80a7 	beq.w	800bb24 <_vfiprintf_r+0x1ec>
 800b9d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9d8:	445a      	add	r2, fp
 800b9da:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	f000 809f 	beq.w	800bb24 <_vfiprintf_r+0x1ec>
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b9ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9f0:	f10a 0a01 	add.w	sl, sl, #1
 800b9f4:	9304      	str	r3, [sp, #16]
 800b9f6:	9307      	str	r3, [sp, #28]
 800b9f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9fe:	4654      	mov	r4, sl
 800ba00:	2205      	movs	r2, #5
 800ba02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba06:	4853      	ldr	r0, [pc, #332]	@ (800bb54 <_vfiprintf_r+0x21c>)
 800ba08:	f7f4 fbba 	bl	8000180 <memchr>
 800ba0c:	9a04      	ldr	r2, [sp, #16]
 800ba0e:	b9d8      	cbnz	r0, 800ba48 <_vfiprintf_r+0x110>
 800ba10:	06d1      	lsls	r1, r2, #27
 800ba12:	bf44      	itt	mi
 800ba14:	2320      	movmi	r3, #32
 800ba16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba1a:	0713      	lsls	r3, r2, #28
 800ba1c:	bf44      	itt	mi
 800ba1e:	232b      	movmi	r3, #43	@ 0x2b
 800ba20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba24:	f89a 3000 	ldrb.w	r3, [sl]
 800ba28:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba2a:	d015      	beq.n	800ba58 <_vfiprintf_r+0x120>
 800ba2c:	9a07      	ldr	r2, [sp, #28]
 800ba2e:	4654      	mov	r4, sl
 800ba30:	2000      	movs	r0, #0
 800ba32:	f04f 0c0a 	mov.w	ip, #10
 800ba36:	4621      	mov	r1, r4
 800ba38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba3c:	3b30      	subs	r3, #48	@ 0x30
 800ba3e:	2b09      	cmp	r3, #9
 800ba40:	d94b      	bls.n	800bada <_vfiprintf_r+0x1a2>
 800ba42:	b1b0      	cbz	r0, 800ba72 <_vfiprintf_r+0x13a>
 800ba44:	9207      	str	r2, [sp, #28]
 800ba46:	e014      	b.n	800ba72 <_vfiprintf_r+0x13a>
 800ba48:	eba0 0308 	sub.w	r3, r0, r8
 800ba4c:	fa09 f303 	lsl.w	r3, r9, r3
 800ba50:	4313      	orrs	r3, r2
 800ba52:	9304      	str	r3, [sp, #16]
 800ba54:	46a2      	mov	sl, r4
 800ba56:	e7d2      	b.n	800b9fe <_vfiprintf_r+0xc6>
 800ba58:	9b03      	ldr	r3, [sp, #12]
 800ba5a:	1d19      	adds	r1, r3, #4
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	9103      	str	r1, [sp, #12]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	bfbb      	ittet	lt
 800ba64:	425b      	neglt	r3, r3
 800ba66:	f042 0202 	orrlt.w	r2, r2, #2
 800ba6a:	9307      	strge	r3, [sp, #28]
 800ba6c:	9307      	strlt	r3, [sp, #28]
 800ba6e:	bfb8      	it	lt
 800ba70:	9204      	strlt	r2, [sp, #16]
 800ba72:	7823      	ldrb	r3, [r4, #0]
 800ba74:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba76:	d10a      	bne.n	800ba8e <_vfiprintf_r+0x156>
 800ba78:	7863      	ldrb	r3, [r4, #1]
 800ba7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba7c:	d132      	bne.n	800bae4 <_vfiprintf_r+0x1ac>
 800ba7e:	9b03      	ldr	r3, [sp, #12]
 800ba80:	1d1a      	adds	r2, r3, #4
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	9203      	str	r2, [sp, #12]
 800ba86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba8a:	3402      	adds	r4, #2
 800ba8c:	9305      	str	r3, [sp, #20]
 800ba8e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800bb58 <_vfiprintf_r+0x220>
 800ba92:	7821      	ldrb	r1, [r4, #0]
 800ba94:	2203      	movs	r2, #3
 800ba96:	4650      	mov	r0, sl
 800ba98:	f7f4 fb72 	bl	8000180 <memchr>
 800ba9c:	b138      	cbz	r0, 800baae <_vfiprintf_r+0x176>
 800ba9e:	9b04      	ldr	r3, [sp, #16]
 800baa0:	eba0 000a 	sub.w	r0, r0, sl
 800baa4:	2240      	movs	r2, #64	@ 0x40
 800baa6:	4082      	lsls	r2, r0
 800baa8:	4313      	orrs	r3, r2
 800baaa:	3401      	adds	r4, #1
 800baac:	9304      	str	r3, [sp, #16]
 800baae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bab2:	482a      	ldr	r0, [pc, #168]	@ (800bb5c <_vfiprintf_r+0x224>)
 800bab4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bab8:	2206      	movs	r2, #6
 800baba:	f7f4 fb61 	bl	8000180 <memchr>
 800babe:	2800      	cmp	r0, #0
 800bac0:	d03f      	beq.n	800bb42 <_vfiprintf_r+0x20a>
 800bac2:	4b27      	ldr	r3, [pc, #156]	@ (800bb60 <_vfiprintf_r+0x228>)
 800bac4:	bb1b      	cbnz	r3, 800bb0e <_vfiprintf_r+0x1d6>
 800bac6:	9b03      	ldr	r3, [sp, #12]
 800bac8:	3307      	adds	r3, #7
 800baca:	f023 0307 	bic.w	r3, r3, #7
 800bace:	3308      	adds	r3, #8
 800bad0:	9303      	str	r3, [sp, #12]
 800bad2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bad4:	443b      	add	r3, r7
 800bad6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bad8:	e76a      	b.n	800b9b0 <_vfiprintf_r+0x78>
 800bada:	fb0c 3202 	mla	r2, ip, r2, r3
 800bade:	460c      	mov	r4, r1
 800bae0:	2001      	movs	r0, #1
 800bae2:	e7a8      	b.n	800ba36 <_vfiprintf_r+0xfe>
 800bae4:	2300      	movs	r3, #0
 800bae6:	3401      	adds	r4, #1
 800bae8:	9305      	str	r3, [sp, #20]
 800baea:	4619      	mov	r1, r3
 800baec:	f04f 0c0a 	mov.w	ip, #10
 800baf0:	4620      	mov	r0, r4
 800baf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baf6:	3a30      	subs	r2, #48	@ 0x30
 800baf8:	2a09      	cmp	r2, #9
 800bafa:	d903      	bls.n	800bb04 <_vfiprintf_r+0x1cc>
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d0c6      	beq.n	800ba8e <_vfiprintf_r+0x156>
 800bb00:	9105      	str	r1, [sp, #20]
 800bb02:	e7c4      	b.n	800ba8e <_vfiprintf_r+0x156>
 800bb04:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb08:	4604      	mov	r4, r0
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e7f0      	b.n	800baf0 <_vfiprintf_r+0x1b8>
 800bb0e:	ab03      	add	r3, sp, #12
 800bb10:	9300      	str	r3, [sp, #0]
 800bb12:	462a      	mov	r2, r5
 800bb14:	4b13      	ldr	r3, [pc, #76]	@ (800bb64 <_vfiprintf_r+0x22c>)
 800bb16:	a904      	add	r1, sp, #16
 800bb18:	4630      	mov	r0, r6
 800bb1a:	f7fd fb8f 	bl	800923c <_printf_float>
 800bb1e:	4607      	mov	r7, r0
 800bb20:	1c78      	adds	r0, r7, #1
 800bb22:	d1d6      	bne.n	800bad2 <_vfiprintf_r+0x19a>
 800bb24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb26:	07d9      	lsls	r1, r3, #31
 800bb28:	d405      	bmi.n	800bb36 <_vfiprintf_r+0x1fe>
 800bb2a:	89ab      	ldrh	r3, [r5, #12]
 800bb2c:	059a      	lsls	r2, r3, #22
 800bb2e:	d402      	bmi.n	800bb36 <_vfiprintf_r+0x1fe>
 800bb30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb32:	f7fe f8a5 	bl	8009c80 <__retarget_lock_release_recursive>
 800bb36:	89ab      	ldrh	r3, [r5, #12]
 800bb38:	065b      	lsls	r3, r3, #25
 800bb3a:	f53f af1f 	bmi.w	800b97c <_vfiprintf_r+0x44>
 800bb3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb40:	e71e      	b.n	800b980 <_vfiprintf_r+0x48>
 800bb42:	ab03      	add	r3, sp, #12
 800bb44:	9300      	str	r3, [sp, #0]
 800bb46:	462a      	mov	r2, r5
 800bb48:	4b06      	ldr	r3, [pc, #24]	@ (800bb64 <_vfiprintf_r+0x22c>)
 800bb4a:	a904      	add	r1, sp, #16
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	f7fd fe0f 	bl	8009770 <_printf_i>
 800bb52:	e7e4      	b.n	800bb1e <_vfiprintf_r+0x1e6>
 800bb54:	0800c1f9 	.word	0x0800c1f9
 800bb58:	0800c1ff 	.word	0x0800c1ff
 800bb5c:	0800c203 	.word	0x0800c203
 800bb60:	0800923d 	.word	0x0800923d
 800bb64:	0800b913 	.word	0x0800b913

0800bb68 <__swbuf_r>:
 800bb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb6a:	460e      	mov	r6, r1
 800bb6c:	4614      	mov	r4, r2
 800bb6e:	4605      	mov	r5, r0
 800bb70:	b118      	cbz	r0, 800bb7a <__swbuf_r+0x12>
 800bb72:	6a03      	ldr	r3, [r0, #32]
 800bb74:	b90b      	cbnz	r3, 800bb7a <__swbuf_r+0x12>
 800bb76:	f7fd ffdb 	bl	8009b30 <__sinit>
 800bb7a:	69a3      	ldr	r3, [r4, #24]
 800bb7c:	60a3      	str	r3, [r4, #8]
 800bb7e:	89a3      	ldrh	r3, [r4, #12]
 800bb80:	071a      	lsls	r2, r3, #28
 800bb82:	d501      	bpl.n	800bb88 <__swbuf_r+0x20>
 800bb84:	6923      	ldr	r3, [r4, #16]
 800bb86:	b943      	cbnz	r3, 800bb9a <__swbuf_r+0x32>
 800bb88:	4621      	mov	r1, r4
 800bb8a:	4628      	mov	r0, r5
 800bb8c:	f000 f82a 	bl	800bbe4 <__swsetup_r>
 800bb90:	b118      	cbz	r0, 800bb9a <__swbuf_r+0x32>
 800bb92:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800bb96:	4638      	mov	r0, r7
 800bb98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb9a:	6823      	ldr	r3, [r4, #0]
 800bb9c:	6922      	ldr	r2, [r4, #16]
 800bb9e:	1a98      	subs	r0, r3, r2
 800bba0:	6963      	ldr	r3, [r4, #20]
 800bba2:	b2f6      	uxtb	r6, r6
 800bba4:	4283      	cmp	r3, r0
 800bba6:	4637      	mov	r7, r6
 800bba8:	dc05      	bgt.n	800bbb6 <__swbuf_r+0x4e>
 800bbaa:	4621      	mov	r1, r4
 800bbac:	4628      	mov	r0, r5
 800bbae:	f7ff f949 	bl	800ae44 <_fflush_r>
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	d1ed      	bne.n	800bb92 <__swbuf_r+0x2a>
 800bbb6:	68a3      	ldr	r3, [r4, #8]
 800bbb8:	3b01      	subs	r3, #1
 800bbba:	60a3      	str	r3, [r4, #8]
 800bbbc:	6823      	ldr	r3, [r4, #0]
 800bbbe:	1c5a      	adds	r2, r3, #1
 800bbc0:	6022      	str	r2, [r4, #0]
 800bbc2:	701e      	strb	r6, [r3, #0]
 800bbc4:	6962      	ldr	r2, [r4, #20]
 800bbc6:	1c43      	adds	r3, r0, #1
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d004      	beq.n	800bbd6 <__swbuf_r+0x6e>
 800bbcc:	89a3      	ldrh	r3, [r4, #12]
 800bbce:	07db      	lsls	r3, r3, #31
 800bbd0:	d5e1      	bpl.n	800bb96 <__swbuf_r+0x2e>
 800bbd2:	2e0a      	cmp	r6, #10
 800bbd4:	d1df      	bne.n	800bb96 <__swbuf_r+0x2e>
 800bbd6:	4621      	mov	r1, r4
 800bbd8:	4628      	mov	r0, r5
 800bbda:	f7ff f933 	bl	800ae44 <_fflush_r>
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	d0d9      	beq.n	800bb96 <__swbuf_r+0x2e>
 800bbe2:	e7d6      	b.n	800bb92 <__swbuf_r+0x2a>

0800bbe4 <__swsetup_r>:
 800bbe4:	b538      	push	{r3, r4, r5, lr}
 800bbe6:	4b29      	ldr	r3, [pc, #164]	@ (800bc8c <__swsetup_r+0xa8>)
 800bbe8:	4605      	mov	r5, r0
 800bbea:	6818      	ldr	r0, [r3, #0]
 800bbec:	460c      	mov	r4, r1
 800bbee:	b118      	cbz	r0, 800bbf8 <__swsetup_r+0x14>
 800bbf0:	6a03      	ldr	r3, [r0, #32]
 800bbf2:	b90b      	cbnz	r3, 800bbf8 <__swsetup_r+0x14>
 800bbf4:	f7fd ff9c 	bl	8009b30 <__sinit>
 800bbf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbfc:	0719      	lsls	r1, r3, #28
 800bbfe:	d422      	bmi.n	800bc46 <__swsetup_r+0x62>
 800bc00:	06da      	lsls	r2, r3, #27
 800bc02:	d407      	bmi.n	800bc14 <__swsetup_r+0x30>
 800bc04:	2209      	movs	r2, #9
 800bc06:	602a      	str	r2, [r5, #0]
 800bc08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc0c:	81a3      	strh	r3, [r4, #12]
 800bc0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bc12:	e033      	b.n	800bc7c <__swsetup_r+0x98>
 800bc14:	0758      	lsls	r0, r3, #29
 800bc16:	d512      	bpl.n	800bc3e <__swsetup_r+0x5a>
 800bc18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc1a:	b141      	cbz	r1, 800bc2e <__swsetup_r+0x4a>
 800bc1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc20:	4299      	cmp	r1, r3
 800bc22:	d002      	beq.n	800bc2a <__swsetup_r+0x46>
 800bc24:	4628      	mov	r0, r5
 800bc26:	f7ff fdd5 	bl	800b7d4 <_free_r>
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc2e:	89a3      	ldrh	r3, [r4, #12]
 800bc30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bc34:	81a3      	strh	r3, [r4, #12]
 800bc36:	2300      	movs	r3, #0
 800bc38:	6063      	str	r3, [r4, #4]
 800bc3a:	6923      	ldr	r3, [r4, #16]
 800bc3c:	6023      	str	r3, [r4, #0]
 800bc3e:	89a3      	ldrh	r3, [r4, #12]
 800bc40:	f043 0308 	orr.w	r3, r3, #8
 800bc44:	81a3      	strh	r3, [r4, #12]
 800bc46:	6923      	ldr	r3, [r4, #16]
 800bc48:	b94b      	cbnz	r3, 800bc5e <__swsetup_r+0x7a>
 800bc4a:	89a3      	ldrh	r3, [r4, #12]
 800bc4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bc50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc54:	d003      	beq.n	800bc5e <__swsetup_r+0x7a>
 800bc56:	4621      	mov	r1, r4
 800bc58:	4628      	mov	r0, r5
 800bc5a:	f000 f83f 	bl	800bcdc <__smakebuf_r>
 800bc5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc62:	f013 0201 	ands.w	r2, r3, #1
 800bc66:	d00a      	beq.n	800bc7e <__swsetup_r+0x9a>
 800bc68:	2200      	movs	r2, #0
 800bc6a:	60a2      	str	r2, [r4, #8]
 800bc6c:	6962      	ldr	r2, [r4, #20]
 800bc6e:	4252      	negs	r2, r2
 800bc70:	61a2      	str	r2, [r4, #24]
 800bc72:	6922      	ldr	r2, [r4, #16]
 800bc74:	b942      	cbnz	r2, 800bc88 <__swsetup_r+0xa4>
 800bc76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bc7a:	d1c5      	bne.n	800bc08 <__swsetup_r+0x24>
 800bc7c:	bd38      	pop	{r3, r4, r5, pc}
 800bc7e:	0799      	lsls	r1, r3, #30
 800bc80:	bf58      	it	pl
 800bc82:	6962      	ldrpl	r2, [r4, #20]
 800bc84:	60a2      	str	r2, [r4, #8]
 800bc86:	e7f4      	b.n	800bc72 <__swsetup_r+0x8e>
 800bc88:	2000      	movs	r0, #0
 800bc8a:	e7f7      	b.n	800bc7c <__swsetup_r+0x98>
 800bc8c:	20000030 	.word	0x20000030

0800bc90 <__swhatbuf_r>:
 800bc90:	b570      	push	{r4, r5, r6, lr}
 800bc92:	460c      	mov	r4, r1
 800bc94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc98:	2900      	cmp	r1, #0
 800bc9a:	b096      	sub	sp, #88	@ 0x58
 800bc9c:	4615      	mov	r5, r2
 800bc9e:	461e      	mov	r6, r3
 800bca0:	da0d      	bge.n	800bcbe <__swhatbuf_r+0x2e>
 800bca2:	89a3      	ldrh	r3, [r4, #12]
 800bca4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bca8:	f04f 0100 	mov.w	r1, #0
 800bcac:	bf14      	ite	ne
 800bcae:	2340      	movne	r3, #64	@ 0x40
 800bcb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	6031      	str	r1, [r6, #0]
 800bcb8:	602b      	str	r3, [r5, #0]
 800bcba:	b016      	add	sp, #88	@ 0x58
 800bcbc:	bd70      	pop	{r4, r5, r6, pc}
 800bcbe:	466a      	mov	r2, sp
 800bcc0:	f000 f848 	bl	800bd54 <_fstat_r>
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	dbec      	blt.n	800bca2 <__swhatbuf_r+0x12>
 800bcc8:	9901      	ldr	r1, [sp, #4]
 800bcca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bcce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bcd2:	4259      	negs	r1, r3
 800bcd4:	4159      	adcs	r1, r3
 800bcd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bcda:	e7eb      	b.n	800bcb4 <__swhatbuf_r+0x24>

0800bcdc <__smakebuf_r>:
 800bcdc:	898b      	ldrh	r3, [r1, #12]
 800bcde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bce0:	079d      	lsls	r5, r3, #30
 800bce2:	4606      	mov	r6, r0
 800bce4:	460c      	mov	r4, r1
 800bce6:	d507      	bpl.n	800bcf8 <__smakebuf_r+0x1c>
 800bce8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bcec:	6023      	str	r3, [r4, #0]
 800bcee:	6123      	str	r3, [r4, #16]
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	6163      	str	r3, [r4, #20]
 800bcf4:	b003      	add	sp, #12
 800bcf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcf8:	ab01      	add	r3, sp, #4
 800bcfa:	466a      	mov	r2, sp
 800bcfc:	f7ff ffc8 	bl	800bc90 <__swhatbuf_r>
 800bd00:	9f00      	ldr	r7, [sp, #0]
 800bd02:	4605      	mov	r5, r0
 800bd04:	4639      	mov	r1, r7
 800bd06:	4630      	mov	r0, r6
 800bd08:	f7fe ff9c 	bl	800ac44 <_malloc_r>
 800bd0c:	b948      	cbnz	r0, 800bd22 <__smakebuf_r+0x46>
 800bd0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd12:	059a      	lsls	r2, r3, #22
 800bd14:	d4ee      	bmi.n	800bcf4 <__smakebuf_r+0x18>
 800bd16:	f023 0303 	bic.w	r3, r3, #3
 800bd1a:	f043 0302 	orr.w	r3, r3, #2
 800bd1e:	81a3      	strh	r3, [r4, #12]
 800bd20:	e7e2      	b.n	800bce8 <__smakebuf_r+0xc>
 800bd22:	89a3      	ldrh	r3, [r4, #12]
 800bd24:	6020      	str	r0, [r4, #0]
 800bd26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd2a:	81a3      	strh	r3, [r4, #12]
 800bd2c:	9b01      	ldr	r3, [sp, #4]
 800bd2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bd32:	b15b      	cbz	r3, 800bd4c <__smakebuf_r+0x70>
 800bd34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd38:	4630      	mov	r0, r6
 800bd3a:	f000 f81d 	bl	800bd78 <_isatty_r>
 800bd3e:	b128      	cbz	r0, 800bd4c <__smakebuf_r+0x70>
 800bd40:	89a3      	ldrh	r3, [r4, #12]
 800bd42:	f023 0303 	bic.w	r3, r3, #3
 800bd46:	f043 0301 	orr.w	r3, r3, #1
 800bd4a:	81a3      	strh	r3, [r4, #12]
 800bd4c:	89a3      	ldrh	r3, [r4, #12]
 800bd4e:	431d      	orrs	r5, r3
 800bd50:	81a5      	strh	r5, [r4, #12]
 800bd52:	e7cf      	b.n	800bcf4 <__smakebuf_r+0x18>

0800bd54 <_fstat_r>:
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	4d07      	ldr	r5, [pc, #28]	@ (800bd74 <_fstat_r+0x20>)
 800bd58:	2300      	movs	r3, #0
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	4608      	mov	r0, r1
 800bd5e:	4611      	mov	r1, r2
 800bd60:	602b      	str	r3, [r5, #0]
 800bd62:	f7f5 ffaf 	bl	8001cc4 <_fstat>
 800bd66:	1c43      	adds	r3, r0, #1
 800bd68:	d102      	bne.n	800bd70 <_fstat_r+0x1c>
 800bd6a:	682b      	ldr	r3, [r5, #0]
 800bd6c:	b103      	cbz	r3, 800bd70 <_fstat_r+0x1c>
 800bd6e:	6023      	str	r3, [r4, #0]
 800bd70:	bd38      	pop	{r3, r4, r5, pc}
 800bd72:	bf00      	nop
 800bd74:	20000b24 	.word	0x20000b24

0800bd78 <_isatty_r>:
 800bd78:	b538      	push	{r3, r4, r5, lr}
 800bd7a:	4d06      	ldr	r5, [pc, #24]	@ (800bd94 <_isatty_r+0x1c>)
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	4604      	mov	r4, r0
 800bd80:	4608      	mov	r0, r1
 800bd82:	602b      	str	r3, [r5, #0]
 800bd84:	f7f5 ffad 	bl	8001ce2 <_isatty>
 800bd88:	1c43      	adds	r3, r0, #1
 800bd8a:	d102      	bne.n	800bd92 <_isatty_r+0x1a>
 800bd8c:	682b      	ldr	r3, [r5, #0]
 800bd8e:	b103      	cbz	r3, 800bd92 <_isatty_r+0x1a>
 800bd90:	6023      	str	r3, [r4, #0]
 800bd92:	bd38      	pop	{r3, r4, r5, pc}
 800bd94:	20000b24 	.word	0x20000b24

0800bd98 <_raise_r>:
 800bd98:	291f      	cmp	r1, #31
 800bd9a:	b538      	push	{r3, r4, r5, lr}
 800bd9c:	4605      	mov	r5, r0
 800bd9e:	460c      	mov	r4, r1
 800bda0:	d904      	bls.n	800bdac <_raise_r+0x14>
 800bda2:	2316      	movs	r3, #22
 800bda4:	6003      	str	r3, [r0, #0]
 800bda6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bdaa:	bd38      	pop	{r3, r4, r5, pc}
 800bdac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bdae:	b112      	cbz	r2, 800bdb6 <_raise_r+0x1e>
 800bdb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bdb4:	b94b      	cbnz	r3, 800bdca <_raise_r+0x32>
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	f000 f830 	bl	800be1c <_getpid_r>
 800bdbc:	4622      	mov	r2, r4
 800bdbe:	4601      	mov	r1, r0
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdc6:	f000 b817 	b.w	800bdf8 <_kill_r>
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	d00a      	beq.n	800bde4 <_raise_r+0x4c>
 800bdce:	1c59      	adds	r1, r3, #1
 800bdd0:	d103      	bne.n	800bdda <_raise_r+0x42>
 800bdd2:	2316      	movs	r3, #22
 800bdd4:	6003      	str	r3, [r0, #0]
 800bdd6:	2001      	movs	r0, #1
 800bdd8:	e7e7      	b.n	800bdaa <_raise_r+0x12>
 800bdda:	2100      	movs	r1, #0
 800bddc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bde0:	4620      	mov	r0, r4
 800bde2:	4798      	blx	r3
 800bde4:	2000      	movs	r0, #0
 800bde6:	e7e0      	b.n	800bdaa <_raise_r+0x12>

0800bde8 <raise>:
 800bde8:	4b02      	ldr	r3, [pc, #8]	@ (800bdf4 <raise+0xc>)
 800bdea:	4601      	mov	r1, r0
 800bdec:	6818      	ldr	r0, [r3, #0]
 800bdee:	f7ff bfd3 	b.w	800bd98 <_raise_r>
 800bdf2:	bf00      	nop
 800bdf4:	20000030 	.word	0x20000030

0800bdf8 <_kill_r>:
 800bdf8:	b538      	push	{r3, r4, r5, lr}
 800bdfa:	4d07      	ldr	r5, [pc, #28]	@ (800be18 <_kill_r+0x20>)
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	4604      	mov	r4, r0
 800be00:	4608      	mov	r0, r1
 800be02:	4611      	mov	r1, r2
 800be04:	602b      	str	r3, [r5, #0]
 800be06:	f7f5 fefe 	bl	8001c06 <_kill>
 800be0a:	1c43      	adds	r3, r0, #1
 800be0c:	d102      	bne.n	800be14 <_kill_r+0x1c>
 800be0e:	682b      	ldr	r3, [r5, #0]
 800be10:	b103      	cbz	r3, 800be14 <_kill_r+0x1c>
 800be12:	6023      	str	r3, [r4, #0]
 800be14:	bd38      	pop	{r3, r4, r5, pc}
 800be16:	bf00      	nop
 800be18:	20000b24 	.word	0x20000b24

0800be1c <_getpid_r>:
 800be1c:	f7f5 beec 	b.w	8001bf8 <_getpid>

0800be20 <_init>:
 800be20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be22:	bf00      	nop
 800be24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be26:	bc08      	pop	{r3}
 800be28:	469e      	mov	lr, r3
 800be2a:	4770      	bx	lr

0800be2c <_fini>:
 800be2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be2e:	bf00      	nop
 800be30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be32:	bc08      	pop	{r3}
 800be34:	469e      	mov	lr, r3
 800be36:	4770      	bx	lr
